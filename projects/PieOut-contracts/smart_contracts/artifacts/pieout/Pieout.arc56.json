{
    "name": "Pieout",
    "structs": {
        "PlayerBoxVal": [
            {
                "name": "id",
                "type": "uint8"
            },
            {
                "name": "turn",
                "type": "uint8"
            },
            {
                "name": "staked",
                "type": "bool"
            },
            {
                "name": "pending",
                "type": "bool"
            },
            {
                "name": "eliminated",
                "type": "bool"
            },
            {
                "name": "winner",
                "type": "bool"
            }
        ]
    },
    "methods": [
        {
            "name": "calc_single_box_fee",
            "args": [
                {
                    "type": "uint8",
                    "name": "key_size"
                },
                {
                    "type": "uint16",
                    "name": "value_size"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_gen_unix",
            "args": [],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "generate",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [
                    "NoOp"
                ],
                "call": []
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "create_player_addrs_box",
            "args": [
                {
                    "type": "pay",
                    "name": "box_pay"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "stake",
            "args": [
                {
                    "type": "pay",
                    "name": "box_pay"
                },
                {
                    "type": "pay",
                    "name": "stake_pay"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "gamba",
            "args": [],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "terminate",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "DeleteApplication"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 8,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "total_players": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "dG90YWxfcGxheWVycw=="
                },
                "players_pending": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "cGxheWVyc19wZW5kaW5n"
                },
                "players_elim": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "cGxheWVyc19lbGlt"
                },
                "total_stake": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "dG90YWxfc3Rha2U="
                },
                "creator_stake_status": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "Y3JlYXRvcl9zdGFrZV9zdGF0dXM="
                },
                "staking_finalized": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "c3Rha2luZ19maW5hbGl6ZWQ="
                },
                "pa_box_offset": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "cGFfYm94X29mZnNldA=="
                },
                "current_turn": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "Y3VycmVudF90dXJu"
                }
            },
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {
                "box_player": {
                    "keyType": "address",
                    "valueType": "PlayerBoxVal",
                    "prefix": "cF8="
                },
                "box_player_addrs": {
                    "keyType": "AVMBytes",
                    "valueType": "AVMBytes",
                    "prefix": ""
                }
            }
        }
    },
    "bareActions": {
        "create": [],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        701
                    ],
                    "errorMessage": "Index access is out of bounds"
                },
                {
                    "pc": [
                        68
                    ],
                    "errorMessage": "OnCompletion is not DeleteApplication"
                },
                {
                    "pc": [
                        80,
                        98,
                        131,
                        153,
                        166,
                        183
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        764
                    ],
                    "errorMessage": "Template variable 'DELETABLE' needs to be 'True' at deploy-time."
                },
                {
                    "pc": [
                        228,
                        267,
                        761
                    ],
                    "errorMessage": "Transaction sender address must match application creator address."
                },
                {
                    "pc": [
                        157
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        71,
                        83,
                        101,
                        134,
                        169,
                        186
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        572
                    ],
                    "errorMessage": "check self.box_player entry exists"
                },
                {
                    "pc": [
                        332
                    ],
                    "errorMessage": "check self.creator_stake_status exists"
                },
                {
                    "pc": [
                        455,
                        595,
                        726
                    ],
                    "errorMessage": "check self.current_turn exists"
                },
                {
                    "pc": [
                        521,
                        532,
                        542
                    ],
                    "errorMessage": "check self.pa_box_offset exists"
                },
                {
                    "pc": [
                        669,
                        685,
                        747
                    ],
                    "errorMessage": "check self.players_elim exists"
                },
                {
                    "pc": [
                        648,
                        657
                    ],
                    "errorMessage": "check self.players_pending exists"
                },
                {
                    "pc": [
                        325,
                        580
                    ],
                    "errorMessage": "check self.staking_finalized exists"
                },
                {
                    "pc": [
                        434,
                        441,
                        499,
                        508,
                        587,
                        661,
                        673,
                        681,
                        693
                    ],
                    "errorMessage": "check self.total_players exists"
                },
                {
                    "pc": [
                        490
                    ],
                    "errorMessage": "check self.total_stake exists"
                },
                {
                    "pc": [
                        583
                    ],
                    "errorMessage": "gamba(): Rejected. Gamba not available until staking is finalized."
                },
                {
                    "pc": [
                        590
                    ],
                    "errorMessage": "gamba(): Rejected. Total number of players must be greater than 1."
                },
                {
                    "pc": [
                        597
                    ],
                    "errorMessage": "gamba(): Rejected. Transaction sender turn is not aligned with current turn."
                },
                {
                    "pc": [
                        447,
                        461,
                        629
                    ],
                    "errorMessage": "overflow"
                },
                {
                    "pc": [
                        403
                    ],
                    "errorMessage": "stake(): Box and Stake payment reciever address must match transaction sender address."
                },
                {
                    "pc": [
                        381
                    ],
                    "errorMessage": "stake(): Box and Stake payment sender address must match transaction sender address."
                },
                {
                    "pc": [
                        281
                    ],
                    "errorMessage": "stake(): Box payment reciever address must match transaction sender address."
                },
                {
                    "pc": [
                        273
                    ],
                    "errorMessage": "stake(): Box payment sender address must match transaction sender address."
                },
                {
                    "pc": [
                        297,
                        419
                    ],
                    "errorMessage": "stake(): Insufficient amount. Box pay amount does not cover application MBR."
                },
                {
                    "pc": [
                        430
                    ],
                    "errorMessage": "stake(): Insufficient amount. Stake pay amount does not cover minimum entry fee."
                },
                {
                    "pc": [
                        437
                    ],
                    "errorMessage": "stake(): Max player limit exceeded."
                },
                {
                    "pc": [
                        341
                    ],
                    "errorMessage": "stake(): Rejected. Application creator account must stake first before any other account."
                },
                {
                    "pc": [
                        327
                    ],
                    "errorMessage": "stake(): Rejected. Can only stake when staking is not finalized."
                },
                {
                    "pc": [
                        361
                    ],
                    "errorMessage": "stake(): Transaction sender address already staked."
                },
                {
                    "pc": [
                        112,
                        122,
                        144
                    ],
                    "errorMessage": "transaction type is pay"
                }
            ],
            "pcOffsetMethod": "cblocks"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "CiAGAAEICgAAJgsNdG90YWxfcGxheWVycwxwbGF5ZXJzX2VsaW0PcGxheWVyc19wZW5kaW5nDXBhX2JveF9vZmZzZXQMY3VycmVudF90dXJuEXN0YWtpbmdfZmluYWxpemVkBBUffHULdG90YWxfc3Rha2UUY3JlYXRvcl9zdGFrZV9zdGF0dXMDcGFfAnBfMRtBADiCBwQTfRCUBE7ODP0EW+IZ8AT2mAIGBNYjPhsEkzawmARf8W2kNhoAjgcAdwBmAFkAQwAiABAAAiJDMRmBBRJEMRhEiAKpI0MxGRREMRhEiAHXFicGTFCwI0MxGRREMRhEMRaBAglJOBAjEkQxFiMJSTgQIxJEiAC5I0MxGRREMRhEMRYjCUk4ECMSRIgAbiNDMRkURDEYFESIAD4jQzEZFEQxGEQhBBYnBkxQsCNDMRkURDEYRDYaATYaAogACBYnBkxQsCNDigIBi/4Xi/8XCIGQAwuBxBMIiTEAMgkSRCgiZyoiZykiZycHImcnCCJnJwUiZysiZycEImeJigEAMQBJMgkSRIv/OAASRDIKi/84BxJEi/84CIICAQMCAUCI/6QPRIHAAq8nCbxIJwlMv4mKAgAiMQAyCjIJIicFZUQURCInCGVEQAAKiwGLAxJEJwgjZycKiwFJTgJQSYwAvUUBFESL/jgAEkEAuIv/OACLARJBAK4jRIv+OAeLAhJBAJ6L/zgHiwISQQCUI0SL/jgIggIBIgIAA4j/Kg9Ei/84CEmBwJoMEkQiKGVEJQxEIihlRBZJkyQORFcHASInBGVEFkmTJA5EVwcBUIABgFCBESJUgRIiVIETIlSLAEy/IicHZUQIJwdMZyIoZUQjCChMZyIoZUQlEkEABCcFI2ciK2VEgaACDkEAFCIrZUQnCUyLAbsiK2VEgSAIK0xniSJC/2kiQv9PigABJwoxAFBJvkxJTwJEI1VJIicFZUQjEkQiKGVEIw1EIicEZUQSRDIGFjEXUAGBEFlJgZ2JAw9BAH+LAiMISYwCFkmTJA5EVwcBiwFMXAFJjAGLAEy/IiplRCMIKkxnIiplRCIoZUQSQQBJIillRCIoZUQTQQA3IihlRCIpZUQJKExnIihlRCMSQQAXiwFXAQGLAhaoQQALiwGAAfpcAIsATL8iJwRlRCMIJwRMZykiZyoiZ4sDjACJIillRCMIKUxnQv+RMQAyCRJEIQVEiQ==",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 7,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {
        "GEN_UNIX": {
            "type": "AVMUint64"
        },
        "DELETABLE": {
            "type": "AVMUint64"
        }
    }
}