{
    "name": "Pieout",
    "structs": {
        "PlayerBoxVal": [
            {
                "name": "id",
                "type": "uint8"
            },
            {
                "name": "round",
                "type": "uint8"
            },
            {
                "name": "nxnce",
                "type": "uint16"
            },
            {
                "name": "staked",
                "type": "bool"
            },
            {
                "name": "eliminated",
                "type": "bool"
            },
            {
                "name": "winner",
                "type": "bool"
            }
        ]
    },
    "methods": [
        {
            "name": "calc_single_box_fee",
            "args": [
                {
                    "type": "uint8",
                    "name": "key_size"
                },
                {
                    "type": "uint16",
                    "name": "value_size"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "generate",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [
                    "NoOp"
                ],
                "call": []
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "stake",
            "args": [
                {
                    "type": "pay",
                    "name": "box_pay"
                },
                {
                    "type": "pay",
                    "name": "stake_pay"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_gen_unix",
            "args": [],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "terminate",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "DeleteApplication"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 2,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "total_stake": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "dG90YWxfc3Rha2U="
                },
                "total_players": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "dG90YWxfcGxheWVycw=="
                }
            },
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {
                "player": {
                    "keyType": "address",
                    "valueType": "PlayerBoxVal",
                    "prefix": "cF8="
                }
            }
        }
    },
    "bareActions": {
        "create": [],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        54
                    ],
                    "errorMessage": "OnCompletion is not DeleteApplication"
                },
                {
                    "pc": [
                        66,
                        81,
                        114,
                        127
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        344
                    ],
                    "errorMessage": "Template variable 'DELETABLE' needs to be 'True' at deploy-time."
                },
                {
                    "pc": [
                        171,
                        342
                    ],
                    "errorMessage": "Transaction sender address must match application creator address."
                },
                {
                    "pc": [
                        118
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        57,
                        69,
                        84,
                        130
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        265,
                        273,
                        322
                    ],
                    "errorMessage": "check self.total_players exists"
                },
                {
                    "pc": [
                        314
                    ],
                    "errorMessage": "check self.total_stake exists"
                },
                {
                    "pc": [
                        280
                    ],
                    "errorMessage": "overflow"
                },
                {
                    "pc": [
                        225
                    ],
                    "errorMessage": "stake(): Box and Stake payment reciever address must match transaction sender address."
                },
                {
                    "pc": [
                        203
                    ],
                    "errorMessage": "stake(): Box and Stake payment sender address must match transaction sender address."
                },
                {
                    "pc": [
                        241
                    ],
                    "errorMessage": "stake(): Insufficient amount. Box pay amount does not cover application MBR."
                },
                {
                    "pc": [
                        252
                    ],
                    "errorMessage": "stake(): Insufficient amount. Stake pay amount does not cover minimum entry fee."
                },
                {
                    "pc": [
                        269
                    ],
                    "errorMessage": "stake(): Max player limit exceeded."
                },
                {
                    "pc": [
                        261
                    ],
                    "errorMessage": "stake(): Transaction sender address already recognized as active player."
                },
                {
                    "pc": [
                        95,
                        105
                    ],
                    "errorMessage": "transaction type is pay"
                }
            ],
            "pcOffsetMethod": "cblocks"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "CiAEAQAAACYEDXRvdGFsX3BsYXllcnMLdG90YWxfc3Rha2UEFR98dQJwXzEbQQAqggUEE30QlARb4hnwBNYjPhsETs4M/QRf8W2kNhoAjgUATQBAAB8AEAACI0MxGYEFEkQxGESIARQiQzEZFEQxGEQkFipMULAiQzEZFEQxGEQxFoECCUk4ECISRDEWIglJOBAiEkSIAEYiQzEZFEQxGBREiAAsIkMxGRREMRhENhoBNhoCiAAHFipMULAiQ4oCAYv+F4v/FwiBkAMLgcQTCIkxADIJEkQpI2coImeJigIAi/44ADEAEkEAjYv/OAAxABJBAIMiRIv+OAcyChJBAHOL/zgHMgoSQQBpIkSL/jgIggIBIgIAB4j/ow9Ei/84CEmBwJoMEkQrMQBQvUUBFEQjKGVEgQoORCMoZUQWSZOBCA5EVwcBgAEAUIACAABQgAGAUIEhI1SBIiNUKzEAUEy/IyllRAgpTGcjKGVEIggoTGeJI0L/lCNC/3oxADIJEkQlRIk=",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 7,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {
        "GEN_UNIX": {
            "type": "AVMUint64"
        },
        "DELETABLE": {
            "type": "AVMUint64"
        }
    }
}