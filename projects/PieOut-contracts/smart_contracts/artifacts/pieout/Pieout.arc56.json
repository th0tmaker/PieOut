{
    "name": "Pieout",
    "structs": {
        "PlayerBoxVal": [
            {
                "name": "id",
                "type": "uint8"
            },
            {
                "name": "turn",
                "type": "uint8"
            },
            {
                "name": "staked",
                "type": "bool"
            },
            {
                "name": "pending",
                "type": "bool"
            },
            {
                "name": "eliminated",
                "type": "bool"
            },
            {
                "name": "winner",
                "type": "bool"
            }
        ]
    },
    "methods": [
        {
            "name": "calc_single_box_fee",
            "args": [
                {
                    "type": "uint8",
                    "name": "key_size"
                },
                {
                    "type": "uint16",
                    "name": "value_size"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_gen_unix",
            "args": [],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "generate",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [
                    "NoOp"
                ],
                "call": []
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "create_player_addrs_box",
            "args": [
                {
                    "type": "pay",
                    "name": "box_pay"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "stake",
            "args": [
                {
                    "type": "pay",
                    "name": "box_pay"
                },
                {
                    "type": "pay",
                    "name": "stake_pay"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "gamba",
            "args": [],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "terminate",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "DeleteApplication"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 8,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "total_players": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "dG90YWxfcGxheWVycw=="
                },
                "players_pending": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "cGxheWVyc19wZW5kaW5n"
                },
                "players_elim": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "cGxheWVyc19lbGlt"
                },
                "total_stake": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "dG90YWxfc3Rha2U="
                },
                "creator_stake_status": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "Y3JlYXRvcl9zdGFrZV9zdGF0dXM="
                },
                "staking_finalized": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "c3Rha2luZ19maW5hbGl6ZWQ="
                },
                "pa_box_offset": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "cGFfYm94X29mZnNldA=="
                },
                "current_turn": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "Y3VycmVudF90dXJu"
                }
            },
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {
                "box_player": {
                    "keyType": "address",
                    "valueType": "PlayerBoxVal",
                    "prefix": "cF8="
                },
                "box_player_addrs": {
                    "keyType": "AVMBytes",
                    "valueType": "AVMBytes",
                    "prefix": ""
                }
            }
        }
    },
    "bareActions": {
        "create": [],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        68
                    ],
                    "errorMessage": "OnCompletion is not DeleteApplication"
                },
                {
                    "pc": [
                        80,
                        98,
                        130,
                        152,
                        165,
                        182
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        888
                    ],
                    "errorMessage": "Template variable 'DELETABLE' needs to be 'True' at deploy-time."
                },
                {
                    "pc": [
                        227,
                        266,
                        885
                    ],
                    "errorMessage": "Transaction sender address must match application creator address."
                },
                {
                    "pc": [
                        156
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        71,
                        83,
                        101,
                        133,
                        168,
                        185
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        628
                    ],
                    "errorMessage": "check self.box_player entry exists"
                },
                {
                    "pc": [
                        331
                    ],
                    "errorMessage": "check self.creator_stake_status exists"
                },
                {
                    "pc": [
                        449,
                        745,
                        842
                    ],
                    "errorMessage": "check self.current_turn exists"
                },
                {
                    "pc": [
                        516,
                        527,
                        537
                    ],
                    "errorMessage": "check self.pa_box_offset exists"
                },
                {
                    "pc": [
                        817,
                        833,
                        863
                    ],
                    "errorMessage": "check self.players_elim exists"
                },
                {
                    "pc": [
                        796,
                        805
                    ],
                    "errorMessage": "check self.players_pending exists"
                },
                {
                    "pc": [
                        324,
                        717
                    ],
                    "errorMessage": "check self.staking_finalized exists"
                },
                {
                    "pc": [
                        427,
                        434,
                        494,
                        503,
                        724,
                        733,
                        809,
                        821,
                        829
                    ],
                    "errorMessage": "check self.total_players exists"
                },
                {
                    "pc": [
                        485
                    ],
                    "errorMessage": "check self.total_stake exists"
                },
                {
                    "pc": [
                        705
                    ],
                    "errorMessage": "gamba(): Rejected. Application ID mismatch not allowed."
                },
                {
                    "pc": [
                        646
                    ],
                    "errorMessage": "gamba(): Rejected. Atomic transaction group size is out of bounds."
                },
                {
                    "pc": [
                        681
                    ],
                    "errorMessage": "gamba(): Rejected. Every transaction in group must have unique sender address."
                },
                {
                    "pc": [
                        720
                    ],
                    "errorMessage": "gamba(): Rejected. Gamba not available until staking is finalized."
                },
                {
                    "pc": [
                        698
                    ],
                    "errorMessage": "gamba(): Rejected. Method selector mismatch not allowed."
                },
                {
                    "pc": [
                        740
                    ],
                    "errorMessage": "gamba(): Rejected. Total number of players must not be out of bounds."
                },
                {
                    "pc": [
                        749
                    ],
                    "errorMessage": "gamba(): Rejected. Transaction sender turn is not aligned with current turn."
                },
                {
                    "pc": [
                        441,
                        456,
                        780
                    ],
                    "errorMessage": "overflow"
                },
                {
                    "pc": [
                        402
                    ],
                    "errorMessage": "stake(): Box and Stake payment reciever address must match transaction sender address."
                },
                {
                    "pc": [
                        380
                    ],
                    "errorMessage": "stake(): Box and Stake payment sender address must match transaction sender address."
                },
                {
                    "pc": [
                        280
                    ],
                    "errorMessage": "stake(): Box payment reciever address must match transaction sender address."
                },
                {
                    "pc": [
                        272
                    ],
                    "errorMessage": "stake(): Box payment sender address must match transaction sender address."
                },
                {
                    "pc": [
                        296,
                        412
                    ],
                    "errorMessage": "stake(): Insufficient amount. Box pay amount does not cover application MBR."
                },
                {
                    "pc": [
                        423
                    ],
                    "errorMessage": "stake(): Insufficient amount. Stake pay amount does not cover minimum entry fee."
                },
                {
                    "pc": [
                        430
                    ],
                    "errorMessage": "stake(): Max player limit exceeded."
                },
                {
                    "pc": [
                        340
                    ],
                    "errorMessage": "stake(): Rejected. Application creator account must stake first before any other account."
                },
                {
                    "pc": [
                        326
                    ],
                    "errorMessage": "stake(): Rejected. Can only stake when staking is not finalized."
                },
                {
                    "pc": [
                        360
                    ],
                    "errorMessage": "stake(): Transaction sender address already staked."
                },
                {
                    "pc": [
                        111,
                        121,
                        143
                    ],
                    "errorMessage": "transaction type is pay"
                }
            ],
            "pcOffsetMethod": "cblocks"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "CiAGAAEKAgAAJgwNdG90YWxfcGxheWVycwxwbGF5ZXJzX2VsaW0PcGxheWVyc19wZW5kaW5nDXBhX2JveF9vZmZzZXQMY3VycmVudF90dXJuEXN0YWtpbmdfZmluYWxpemVkBBUffHULdG90YWxfc3Rha2UUY3JlYXRvcl9zdGFrZV9zdGF0dXMDcGFfAnBfAwaBATEbQQA4ggcEE30QlAROzgz9BFviGfAE9pgCBgTWIz4bBJM2sJgEX/FtpDYaAI4HAHYAZQBYAEIAIgAQAAIiQzEZgQUSRDEYRIgDJSNDMRkURDEYRIgB0hYnBkxQsCNDMRkURDEYRDEWJQlJOBAjEkQxFiMJSTgQIxJEiAC5I0MxGRREMRhEMRYjCUk4ECMSRIgAbiNDMRkURDEYFESIAD4jQzEZFEQxGEQhBBYnBkxQsCNDMRkURDEYRDYaATYaAogACBYnBkxQsCNDigIBi/4Xi/8XCIGQAwuBxBMIiTEAMgkSRCgiZyoiZykiZycHImcnCCJnJwUiZysiZycEImeJigEAMQBJMgkSRIv/OAASRDIKi/84BxJEi/84CIICAQMCAUCI/6QPRIHAAq8nCbxIJwlMv4mKAgAiMQAyCjIJIicFZUQURCInCGVEQAAKiwGLAxJEJwgjZycKiwFJTgJQSYwAvUUBFESL/jgAEkEAtIv/OACLARJBAKojRIv+OAeLAhJBAJqL/zgHiwISQQCQI0SL/jgIgZSHAQ9Ei/84CEmBwJoMEkQiKGVEJAxEIihlRBZJk4EIDkRXBwEiJwRlRBZJk4EIDkRXBwFQgAGAUIERIlSBEiJUgRMiVIsATL8iJwdlRAgnB0xnIihlRCMIKExnIihlRCQSQQAEJwUjZyIrZUSBoAIOQQAUIitlRCcJTIsBuyIrZUSBIAgrTGeJIkL/bSJC/1OKAAEiRwKAAEcFgYILMgwNQQAYsYEGshCBBbIZJwuyHicLsh8isgGzQv/fMQA2GgCMADIIjAQyBElOAowDJwpMUEmMAr5MSU4CjAFEI1WMBSUPQQDuiwMkDkEA5yNEIowGiwaLAwxBADcijAeLB4sGDEEAFIsGOACLB0lOAjgAE0QjCIwHQv/kiwZJIsIaiwASREk4GIsEEkQjCIwGQv/BIicFZUQjEkQiKGVEJQ9BAI4iKGVEJA5BAIUjRCInBGVEiwUSRDIGFjEXUAGBEFlJjAiB8FUPQQBaiwUjCBZJk4EIDkRXBwGLAUxcAYsCTL8iKmVEIwgqTGciKmVEIihlRBJBACkiKWVEIihlRBNBABciKGVEIillRAkoTGciJwRlRCMIJwRMZykiZyoiZ4sIjACJIillRCMIKUxnQv+xIkL/eCJC/xYxADIJEkQhBUSJ",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 7,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {
        "GEN_UNIX": {
            "type": "AVMUint64"
        },
        "DELETABLE": {
            "type": "AVMUint64"
        }
    }
}