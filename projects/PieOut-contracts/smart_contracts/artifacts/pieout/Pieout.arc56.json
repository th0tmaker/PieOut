{
    "name": "Pieout",
    "structs": {
        "GameRegister": [
            {
                "name": "hosting_game",
                "type": "bool"
            },
            {
                "name": "pt_score",
                "type": "uint8"
            },
            {
                "name": "game_id",
                "type": "uint64"
            },
            {
                "name": "expiry_round",
                "type": "uint64"
            },
            {
                "name": "commit_rand_round",
                "type": "uint64"
            }
        ],
        "GameState": [
            {
                "name": "staking_finalized",
                "type": "bool"
            },
            {
                "name": "max_players",
                "type": "uint8"
            },
            {
                "name": "active_players",
                "type": "uint8"
            },
            {
                "name": "first_place_score",
                "type": "uint8"
            },
            {
                "name": "second_place_score",
                "type": "uint8"
            },
            {
                "name": "third_place_score",
                "type": "uint8"
            },
            {
                "name": "top_score",
                "type": "uint8"
            },
            {
                "name": "box_p_start_pos",
                "type": "uint16"
            },
            {
                "name": "expiry_ts",
                "type": "uint64"
            },
            {
                "name": "prize_pool",
                "type": "uint64"
            },
            {
                "name": "admin_address",
                "type": "address"
            },
            {
                "name": "first_place_address",
                "type": "address"
            },
            {
                "name": "second_place_address",
                "type": "address"
            },
            {
                "name": "third_place_address",
                "type": "address"
            },
            {
                "name": "topscorer_address",
                "type": "address"
            }
        ],
        "GameTrophy": [
            {
                "name": "ath_score",
                "type": "uint8"
            },
            {
                "name": "asset_id",
                "type": "uint64"
            },
            {
                "name": "ath_address",
                "type": "address"
            }
        ]
    },
    "methods": [
        {
            "name": "calc_single_box_cost",
            "args": [
                {
                    "type": "uint8",
                    "name": "key_size"
                },
                {
                    "type": "uint16",
                    "name": "value_size"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "read_gen_unix",
            "args": [],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "does_box_game_trophy_exist",
            "args": [],
            "returns": {
                "type": "bool"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "does_box_game_register_exist",
            "args": [
                {
                    "type": "account",
                    "name": "player"
                }
            ],
            "returns": {
                "type": "bool"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "does_box_game_state_exist",
            "args": [
                {
                    "type": "uint64",
                    "name": "game_id"
                }
            ],
            "returns": {
                "type": "bool"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "read_box_game_players",
            "args": [
                {
                    "type": "uint64",
                    "name": "game_id"
                }
            ],
            "returns": {
                "type": "address[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "generate",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [
                    "NoOp"
                ],
                "call": []
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "mint_trophy",
            "args": [
                {
                    "type": "pay",
                    "name": "box_t_pay"
                },
                {
                    "type": "pay",
                    "name": "mint_pay"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "claim_trophy",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_box_game_register",
            "args": [
                {
                    "type": "pay",
                    "name": "box_r_pay"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "del_box_game_register_for_self",
            "args": [
                {
                    "type": "uint64",
                    "name": "game_id"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "del_box_game_register_for_other",
            "args": [
                {
                    "type": "account",
                    "name": "player"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "new_game",
            "args": [
                {
                    "type": "uint64",
                    "name": "max_players"
                },
                {
                    "type": "pay",
                    "name": "box_s_pay"
                },
                {
                    "type": "pay",
                    "name": "box_p_pay"
                },
                {
                    "type": "pay",
                    "name": "stake_pay"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "join_game",
            "args": [
                {
                    "type": "uint64",
                    "name": "game_id"
                },
                {
                    "type": "pay",
                    "name": "stake_pay"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [
                {
                    "name": "game_live",
                    "args": [
                        {
                            "type": "uint64",
                            "name": "field1"
                        },
                        {
                            "type": "bool",
                            "name": "field2"
                        },
                        {
                            "type": "uint64",
                            "name": "field3"
                        }
                    ]
                }
            ],
            "recommendations": {}
        },
        {
            "name": "set_game_commit",
            "args": [
                {
                    "type": "uint64",
                    "name": "game_id"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "up_ref_budget_for_play_game",
            "args": [
                {
                    "type": "uint64",
                    "name": "game_id"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "play_game",
            "args": [
                {
                    "type": "uint64",
                    "name": "game_id"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [
                {
                    "name": "player_score",
                    "args": [
                        {
                            "type": "uint64",
                            "name": "field1"
                        },
                        {
                            "type": "address",
                            "name": "field2"
                        },
                        {
                            "type": "uint8",
                            "name": "field3"
                        }
                    ]
                },
                {
                    "name": "game_over",
                    "args": [
                        {
                            "type": "uint64",
                            "name": "field1"
                        },
                        {
                            "type": "uint8",
                            "name": "field2"
                        },
                        {
                            "type": "uint8",
                            "name": "field3"
                        },
                        {
                            "type": "uint8",
                            "name": "field4"
                        },
                        {
                            "type": "address",
                            "name": "field5"
                        },
                        {
                            "type": "address",
                            "name": "field6"
                        },
                        {
                            "type": "address",
                            "name": "field7"
                        }
                    ]
                }
            ],
            "recommendations": {}
        },
        {
            "name": "trigger_game_event",
            "args": [
                {
                    "type": "uint64",
                    "name": "game_id"
                },
                {
                    "type": "uint8",
                    "name": "trigger_id"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [
                {
                    "name": "game_live",
                    "args": [
                        {
                            "type": "uint64",
                            "name": "field1"
                        },
                        {
                            "type": "bool",
                            "name": "field2"
                        },
                        {
                            "type": "uint64",
                            "name": "field3"
                        }
                    ]
                },
                {
                    "name": "game_over",
                    "args": [
                        {
                            "type": "uint64",
                            "name": "field1"
                        },
                        {
                            "type": "uint8",
                            "name": "field2"
                        },
                        {
                            "type": "uint8",
                            "name": "field3"
                        },
                        {
                            "type": "uint8",
                            "name": "field4"
                        },
                        {
                            "type": "address",
                            "name": "field5"
                        },
                        {
                            "type": "address",
                            "name": "field6"
                        },
                        {
                            "type": "address",
                            "name": "field7"
                        }
                    ]
                }
            ],
            "recommendations": {}
        },
        {
            "name": "reset_game",
            "args": [
                {
                    "type": "uint64",
                    "name": "game_id"
                },
                {
                    "type": "pay",
                    "name": "stake_pay"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "delete_game",
            "args": [
                {
                    "type": "uint64",
                    "name": "game_id"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "terminate",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "DeleteApplication"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 1,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "game_id": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "Z2FtZV9pZA=="
                }
            },
            "local": {},
            "box": {
                "box_game_trophy": {
                    "keyType": "AVMString",
                    "valueType": "GameTrophy",
                    "key": "dF8="
                }
            }
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {
                "box_game_state": {
                    "keyType": "uint64",
                    "valueType": "GameState",
                    "prefix": "c18="
                },
                "box_game_players": {
                    "keyType": "uint64",
                    "valueType": "AVMBytes",
                    "prefix": "cF8="
                },
                "box_game_register": {
                    "keyType": "address",
                    "valueType": "GameRegister",
                    "prefix": "cl8="
                }
            }
        }
    },
    "bareActions": {
        "create": [],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        2385,
                        4450
                    ],
                    "errorMessage": "Account is not authorized to make this call."
                },
                {
                    "pc": [
                        3040,
                        3315
                    ],
                    "errorMessage": "Account is not recognized as an active player for this game."
                },
                {
                    "pc": [
                        4307
                    ],
                    "errorMessage": "Account is not recognized as the admin address for this game."
                },
                {
                    "pc": [
                        1979
                    ],
                    "errorMessage": "Account must be opted in to asset in order to perform this action."
                },
                {
                    "pc": [
                        1717,
                        4737
                    ],
                    "errorMessage": "Account must match application creator address."
                },
                {
                    "pc": [
                        3110,
                        3257
                    ],
                    "errorMessage": "Application ID mismatch. App ID must be same across all transactions in group."
                },
                {
                    "pc": [
                        1966
                    ],
                    "errorMessage": "Asset trophy receiver must match application ATH address."
                },
                {
                    "pc": [
                        1737,
                        2106
                    ],
                    "errorMessage": "Box found. Ensure the box you are trying to access does not exist already."
                },
                {
                    "pc": [
                        1630,
                        2185,
                        2804,
                        2998,
                        3103,
                        3237,
                        4157,
                        4259,
                        4403
                    ],
                    "errorMessage": "Box game state not found. Check if game ID exists."
                },
                {
                    "pc": [
                        2111,
                        2193,
                        2379,
                        2524,
                        2532,
                        2812,
                        2820,
                        3006,
                        3245,
                        3250
                    ],
                    "errorMessage": "Box not found. Ensure the box you are trying to access was created and still exists."
                },
                {
                    "pc": [
                        1763,
                        2135,
                        2654,
                        2662
                    ],
                    "errorMessage": "Box payment receiver address must match application address."
                },
                {
                    "pc": [
                        1755,
                        2127,
                        2630,
                        2638
                    ],
                    "errorMessage": "Box payment sender address must match transaction sender address."
                },
                {
                    "pc": [
                        2394,
                        3054
                    ],
                    "errorMessage": "Commit Rand Round not empty. Value must be zero to obtain a valid one."
                },
                {
                    "pc": [
                        4475
                    ],
                    "errorMessage": "Game admin address must be sole remaining active player in the game."
                },
                {
                    "pc": [
                        4205
                    ],
                    "errorMessage": "Game event not found. Check if game event Trigger ID exists"
                },
                {
                    "pc": [
                        4318,
                        4709
                    ],
                    "errorMessage": "Game lobby not empty. Number of active players must be zero."
                },
                {
                    "pc": [
                        2549,
                        4434
                    ],
                    "errorMessage": "Game register hosting game boolean value mismatch."
                },
                {
                    "pc": [
                        2877,
                        3021,
                        3345,
                        4180,
                        4218,
                        4299
                    ],
                    "errorMessage": "Game state staking finalized boolean value mismatch."
                },
                {
                    "pc": [
                        799,
                        811,
                        816,
                        861,
                        898,
                        1019,
                        1024,
                        1029,
                        1034,
                        1044,
                        1054,
                        1111,
                        1960,
                        2880,
                        2890,
                        2895,
                        3048,
                        3346,
                        3716,
                        3739,
                        3745,
                        3751,
                        3757,
                        3774,
                        3783,
                        3801,
                        3814,
                        3842,
                        4049,
                        4072,
                        4078,
                        4102,
                        4182,
                        4220,
                        4301,
                        4410
                    ],
                    "errorMessage": "Index access is out of bounds"
                },
                {
                    "pc": [
                        1747,
                        2119,
                        2584,
                        2614
                    ],
                    "errorMessage": "Insufficient funds. Box pay amount is not enough to cover application MBR."
                },
                {
                    "pc": [
                        1771
                    ],
                    "errorMessage": "Insufficient funds. Mint pay amount is not enough to cover asset creation cost."
                },
                {
                    "pc": [
                        2576,
                        2829,
                        4283
                    ],
                    "errorMessage": "Insufficient funds. Stake pay amount is not enough to cover staking requirements."
                },
                {
                    "pc": [
                        2220,
                        3134,
                        3282,
                        3365
                    ],
                    "errorMessage": "Invalid Game ID. Box Game Register Game ID must be a certain value or match Game ID arg."
                },
                {
                    "pc": [
                        3091,
                        3219
                    ],
                    "errorMessage": "Invalid group index. Ensure transaction group index matches the expected value. "
                },
                {
                    "pc": [
                        1731,
                        2097,
                        2519,
                        2791,
                        3087,
                        3214,
                        4246
                    ],
                    "errorMessage": "Invalid group size. Ensure number of transaction in group is within valid bounds."
                },
                {
                    "pc": [
                        1953,
                        2173,
                        2370,
                        2985,
                        4144,
                        4389
                    ],
                    "errorMessage": "Invalid group size. This app call can only take standalone transactions."
                },
                {
                    "pc": [
                        2401,
                        2887,
                        3353,
                        4189,
                        4227
                    ],
                    "errorMessage": "Invalid time frame. Call made outside the permitted block or timestamp range."
                },
                {
                    "pc": [
                        1787
                    ],
                    "errorMessage": "Mint payment receiver address must match application address."
                },
                {
                    "pc": [
                        1779
                    ],
                    "errorMessage": "Mint payment sender address must match transaction sender address."
                },
                {
                    "pc": [
                        2899
                    ],
                    "errorMessage": "Number of active players must not exceed number of max players."
                },
                {
                    "pc": [
                        162
                    ],
                    "errorMessage": "OnCompletion is not DeleteApplication"
                },
                {
                    "pc": [
                        174,
                        190,
                        216,
                        235,
                        251,
                        267,
                        283,
                        309,
                        356,
                        374,
                        390,
                        412,
                        424,
                        456,
                        469,
                        490,
                        516,
                        544,
                        566,
                        583
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        2252,
                        2864
                    ],
                    "errorMessage": "Player with this address must not be an active game participant in the game."
                },
                {
                    "pc": [
                        2914
                    ],
                    "errorMessage": "Players box start position index overflow. Can not store more addresses."
                },
                {
                    "pc": [
                        4313,
                        4716
                    ],
                    "errorMessage": "Prize pool not empty. Amount in prize pool must be zero."
                },
                {
                    "pc": [
                        3378
                    ],
                    "errorMessage": "Randomness commit round not reached yet."
                },
                {
                    "pc": [
                        3117,
                        3264
                    ],
                    "errorMessage": "Sender mismatch. Sender must be same address across all transactions in group."
                },
                {
                    "pc": [
                        2646,
                        2845,
                        4275
                    ],
                    "errorMessage": "Stake payment receiver address must match application address."
                },
                {
                    "pc": [
                        2622,
                        2837,
                        4267
                    ],
                    "errorMessage": "Stake payment sender address must match transaction sender address."
                },
                {
                    "pc": [
                        4731
                    ],
                    "errorMessage": "Template variable 'DELETABLE' needs to be 'True' at deploy-time."
                },
                {
                    "pc": [
                        2567
                    ],
                    "errorMessage": "The number of max players must be within bounds."
                },
                {
                    "pc": [
                        3125,
                        3272
                    ],
                    "errorMessage": "Transaction at this group index must have exact required method selector."
                },
                {
                    "pc": [
                        460
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        165,
                        177,
                        193,
                        219,
                        238,
                        254,
                        270,
                        286,
                        312,
                        359,
                        377,
                        393,
                        415,
                        427,
                        472,
                        493,
                        519,
                        547,
                        569,
                        586
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        749,
                        970
                    ],
                    "errorMessage": "check BoxMap entry exists"
                },
                {
                    "pc": [
                        936
                    ],
                    "errorMessage": "check BoxRef exists"
                },
                {
                    "pc": [
                        1639
                    ],
                    "errorMessage": "check self.box_game_players entry exists"
                },
                {
                    "pc": [
                        2199,
                        2210,
                        2226,
                        2388,
                        2538,
                        2750,
                        3046,
                        3140,
                        3151,
                        3288,
                        3332,
                        3359,
                        3373,
                        4422,
                        4578
                    ],
                    "errorMessage": "check self.box_game_register entry exists"
                },
                {
                    "pc": [
                        2237,
                        2807,
                        3008,
                        3299,
                        3323,
                        4159,
                        4286,
                        4409
                    ],
                    "errorMessage": "check self.box_game_state entry exists"
                },
                {
                    "pc": [
                        1958,
                        3782,
                        3792,
                        3812,
                        3837,
                        3983,
                        4749,
                        4769
                    ],
                    "errorMessage": "check self.box_game_trophy exists"
                },
                {
                    "pc": [
                        2733
                    ],
                    "errorMessage": "check self.game_id exists"
                },
                {
                    "pc": [
                        2600,
                        2671,
                        2933,
                        2954,
                        3628,
                        4004,
                        4595
                    ],
                    "errorMessage": "overflow"
                },
                {
                    "pc": [
                        3082,
                        3209
                    ],
                    "errorMessage": "transaction type is appl"
                },
                {
                    "pc": [
                        207,
                        300,
                        327,
                        337,
                        347,
                        403,
                        437,
                        447
                    ],
                    "errorMessage": "transaction type is pay"
                }
            ],
            "pcOffsetMethod": "cblocks"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "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",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 9,
            "patch": 0
        }
    },
    "events": [
        {
            "name": "game_live",
            "args": [
                {
                    "type": "uint64",
                    "name": "field1"
                },
                {
                    "type": "bool",
                    "name": "field2"
                },
                {
                    "type": "uint64",
                    "name": "field3"
                }
            ]
        },
        {
            "name": "player_score",
            "args": [
                {
                    "type": "uint64",
                    "name": "field1"
                },
                {
                    "type": "address",
                    "name": "field2"
                },
                {
                    "type": "uint8",
                    "name": "field3"
                }
            ]
        },
        {
            "name": "game_over",
            "args": [
                {
                    "type": "uint64",
                    "name": "field1"
                },
                {
                    "type": "uint8",
                    "name": "field2"
                },
                {
                    "type": "uint8",
                    "name": "field3"
                },
                {
                    "type": "uint8",
                    "name": "field4"
                },
                {
                    "type": "address",
                    "name": "field5"
                },
                {
                    "type": "address",
                    "name": "field6"
                },
                {
                    "type": "address",
                    "name": "field7"
                }
            ]
        }
    ],
    "templateVariables": {
        "GEN_UNIX": {
            "type": "AVMUint64"
        },
        "DELETABLE": {
            "type": "AVMUint64"
        }
    }
}