{
    "name": "Pieout",
    "structs": {
        "GameRegister": [
            {
                "name": "hosting_game",
                "type": "bool"
            },
            {
                "name": "best_score",
                "type": "uint8"
            },
            {
                "name": "game_id",
                "type": "uint64"
            },
            {
                "name": "commit_rand_round",
                "type": "uint64"
            },
            {
                "name": "expiry_round",
                "type": "uint64"
            }
        ],
        "GameState": [
            {
                "name": "staking_finalized",
                "type": "bool"
            },
            {
                "name": "quick_play_enabled",
                "type": "bool"
            },
            {
                "name": "max_players",
                "type": "uint8"
            },
            {
                "name": "active_players",
                "type": "uint8"
            },
            {
                "name": "first_place_score",
                "type": "uint8"
            },
            {
                "name": "second_place_score",
                "type": "uint8"
            },
            {
                "name": "third_place_score",
                "type": "uint8"
            },
            {
                "name": "top_score",
                "type": "uint8"
            },
            {
                "name": "box_p_start_pos",
                "type": "uint16"
            },
            {
                "name": "expiry_ts",
                "type": "uint64"
            },
            {
                "name": "prize_pool",
                "type": "uint64"
            },
            {
                "name": "admin_address",
                "type": "address"
            },
            {
                "name": "first_place_address",
                "type": "address"
            },
            {
                "name": "second_place_address",
                "type": "address"
            },
            {
                "name": "third_place_address",
                "type": "address"
            },
            {
                "name": "topscorer_address",
                "type": "address"
            }
        ],
        "GameTrophy": [
            {
                "name": "asset_id",
                "type": "uint64"
            },
            {
                "name": "ath_score",
                "type": "uint8"
            },
            {
                "name": "ath_address",
                "type": "address"
            }
        ]
    },
    "methods": [
        {
            "name": "calc_single_box_cost",
            "args": [
                {
                    "type": "uint8",
                    "name": "key_size"
                },
                {
                    "type": "uint16",
                    "name": "value_size"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "read_gen_unix",
            "args": [],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "does_box_game_trophy_exist",
            "args": [],
            "returns": {
                "type": "bool"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "does_box_game_register_exist",
            "args": [
                {
                    "type": "account",
                    "name": "player"
                }
            ],
            "returns": {
                "type": "bool"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "does_box_game_state_exist",
            "args": [
                {
                    "type": "uint64",
                    "name": "game_id"
                }
            ],
            "returns": {
                "type": "bool"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "read_box_game_players",
            "args": [
                {
                    "type": "uint64",
                    "name": "game_id"
                }
            ],
            "returns": {
                "type": "address[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "generate",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [
                    "NoOp"
                ],
                "call": []
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "mint_trophy",
            "args": [
                {
                    "type": "pay",
                    "name": "box_t_pay"
                },
                {
                    "type": "pay",
                    "name": "mint_pay"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "claim_trophy",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_box_game_register",
            "args": [
                {
                    "type": "pay",
                    "name": "box_r_pay"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "del_box_game_register_for_self",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "del_box_game_register_for_other",
            "args": [
                {
                    "type": "account",
                    "name": "player"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "new_game",
            "args": [
                {
                    "type": "bool",
                    "name": "quick_play_enabled"
                },
                {
                    "type": "uint64",
                    "name": "max_players"
                },
                {
                    "type": "pay",
                    "name": "box_s_pay"
                },
                {
                    "type": "pay",
                    "name": "box_p_pay"
                },
                {
                    "type": "pay",
                    "name": "stake_pay"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "join_game",
            "args": [
                {
                    "type": "uint64",
                    "name": "game_id"
                },
                {
                    "type": "pay",
                    "name": "stake_pay"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [
                {
                    "name": "game_live",
                    "args": [
                        {
                            "type": "uint64",
                            "name": "field1"
                        },
                        {
                            "type": "bool",
                            "name": "field2"
                        },
                        {
                            "type": "uint64",
                            "name": "field3"
                        }
                    ]
                }
            ],
            "recommendations": {}
        },
        {
            "name": "set_game_commit",
            "args": [
                {
                    "type": "uint64",
                    "name": "game_id"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "up_ref_budget_for_play_game",
            "args": [
                {
                    "type": "uint64",
                    "name": "game_id"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "play_game",
            "args": [
                {
                    "type": "uint64",
                    "name": "game_id"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [
                {
                    "name": "player_score",
                    "args": [
                        {
                            "type": "uint64",
                            "name": "field1"
                        },
                        {
                            "type": "address",
                            "name": "field2"
                        },
                        {
                            "type": "uint8",
                            "name": "field3"
                        }
                    ]
                },
                {
                    "name": "game_over",
                    "args": [
                        {
                            "type": "uint64",
                            "name": "field1"
                        },
                        {
                            "type": "uint8",
                            "name": "field2"
                        },
                        {
                            "type": "uint8",
                            "name": "field3"
                        },
                        {
                            "type": "uint8",
                            "name": "field4"
                        },
                        {
                            "type": "address",
                            "name": "field5"
                        },
                        {
                            "type": "address",
                            "name": "field6"
                        },
                        {
                            "type": "address",
                            "name": "field7"
                        }
                    ]
                }
            ],
            "recommendations": {}
        },
        {
            "name": "trigger_game_event",
            "args": [
                {
                    "type": "uint64",
                    "name": "game_id"
                },
                {
                    "type": "uint8",
                    "name": "trigger_id"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [
                {
                    "name": "game_over",
                    "args": [
                        {
                            "type": "uint64",
                            "name": "field1"
                        },
                        {
                            "type": "uint8",
                            "name": "field2"
                        },
                        {
                            "type": "uint8",
                            "name": "field3"
                        },
                        {
                            "type": "uint8",
                            "name": "field4"
                        },
                        {
                            "type": "address",
                            "name": "field5"
                        },
                        {
                            "type": "address",
                            "name": "field6"
                        },
                        {
                            "type": "address",
                            "name": "field7"
                        }
                    ]
                },
                {
                    "name": "game_live",
                    "args": [
                        {
                            "type": "uint64",
                            "name": "field1"
                        },
                        {
                            "type": "bool",
                            "name": "field2"
                        },
                        {
                            "type": "uint64",
                            "name": "field3"
                        }
                    ]
                }
            ],
            "recommendations": {}
        },
        {
            "name": "reset_game",
            "args": [
                {
                    "type": "uint64",
                    "name": "game_id"
                },
                {
                    "type": "bool",
                    "name": "change_quick_play"
                },
                {
                    "type": "bool",
                    "name": "change_max_players"
                },
                {
                    "type": "uint64",
                    "name": "new_max_players"
                },
                {
                    "type": "pay",
                    "name": "stake_pay"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "delete_game",
            "args": [
                {
                    "type": "uint64",
                    "name": "game_id"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "terminate",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "DeleteApplication"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 1,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "game_id": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "Z2FtZV9pZA=="
                }
            },
            "local": {},
            "box": {
                "box_game_trophy": {
                    "keyType": "AVMString",
                    "valueType": "GameTrophy",
                    "key": "dF8="
                }
            }
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {
                "box_game_state": {
                    "keyType": "uint64",
                    "valueType": "GameState",
                    "prefix": "c18="
                },
                "box_game_players": {
                    "keyType": "uint64",
                    "valueType": "AVMBytes",
                    "prefix": "cF8="
                },
                "box_game_register": {
                    "keyType": "address",
                    "valueType": "GameRegister",
                    "prefix": "cl8="
                }
            }
        }
    },
    "bareActions": {
        "create": [],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        4726
                    ],
                    "errorMessage": "Account is not authorized to make this call."
                },
                {
                    "pc": [
                        3130,
                        3405
                    ],
                    "errorMessage": "Account is not recognized as an active player for this game."
                },
                {
                    "pc": [
                        4516
                    ],
                    "errorMessage": "Account is not recognized as the admin address for this game."
                },
                {
                    "pc": [
                        2097
                    ],
                    "errorMessage": "Account must be opted in to asset in order to perform this action."
                },
                {
                    "pc": [
                        1836,
                        5013
                    ],
                    "errorMessage": "Account must match application creator address."
                },
                {
                    "pc": [
                        3200,
                        3347
                    ],
                    "errorMessage": "Application ID mismatch. App ID must be same across all transactions in group."
                },
                {
                    "pc": [
                        2084
                    ],
                    "errorMessage": "Asset trophy receiver must match application ATH address."
                },
                {
                    "pc": [
                        1856,
                        2224
                    ],
                    "errorMessage": "Box found. Ensure the box you are trying to access does not exist already."
                },
                {
                    "pc": [
                        1749,
                        2896,
                        3090,
                        3193,
                        3327,
                        4303,
                        4482,
                        4700
                    ],
                    "errorMessage": "Box game state not found. Check if game ID exists."
                },
                {
                    "pc": [
                        2229,
                        2301,
                        2452,
                        2603,
                        2611,
                        2904,
                        2912,
                        3098,
                        3335,
                        3340
                    ],
                    "errorMessage": "Box not found. Ensure the box you are trying to access was created and still exists."
                },
                {
                    "pc": [
                        1882,
                        2253,
                        2733,
                        2741
                    ],
                    "errorMessage": "Box payment receiver address must match application address."
                },
                {
                    "pc": [
                        1874,
                        2245,
                        2709,
                        2717
                    ],
                    "errorMessage": "Box payment sender address must match transaction sender address."
                },
                {
                    "pc": [
                        2329,
                        2473,
                        3144
                    ],
                    "errorMessage": "Commit Rand Round not empty. Value must be zero to obtain a valid one."
                },
                {
                    "pc": [
                        4402
                    ],
                    "errorMessage": "Conditions required to trigger this game event check were invalid."
                },
                {
                    "pc": [
                        4749
                    ],
                    "errorMessage": "Game admin address must be sole remaining active player in the game."
                },
                {
                    "pc": [
                        4423
                    ],
                    "errorMessage": "Game event not found. Check if game event Trigger ID exists"
                },
                {
                    "pc": [
                        4527,
                        4985
                    ],
                    "errorMessage": "Game lobby not empty. Number of active players must be zero."
                },
                {
                    "pc": [
                        2318,
                        2467,
                        2628
                    ],
                    "errorMessage": "Game register hosting game boolean value mismatch."
                },
                {
                    "pc": [
                        2969,
                        3111,
                        3433,
                        4326,
                        4436
                    ],
                    "errorMessage": "Game state staking finalized boolean value mismatch."
                },
                {
                    "pc": [
                        827,
                        859,
                        874,
                        879,
                        943,
                        977,
                        996,
                        1134,
                        1139,
                        1144,
                        1149,
                        1159,
                        1169,
                        1224,
                        2078,
                        2972,
                        2982,
                        2987,
                        3138,
                        3434,
                        3861,
                        3884,
                        3890,
                        3896,
                        3902,
                        3919,
                        3928,
                        3946,
                        3959,
                        3987,
                        4194,
                        4217,
                        4223,
                        4247,
                        4336,
                        4368,
                        4438,
                        4510,
                        4707
                    ],
                    "errorMessage": "Index access is out of bounds"
                },
                {
                    "pc": [
                        1866,
                        2237,
                        2663,
                        2693
                    ],
                    "errorMessage": "Insufficient funds. Box pay amount is not enough to cover application MBR."
                },
                {
                    "pc": [
                        1890
                    ],
                    "errorMessage": "Insufficient funds. Mint pay amount is not enough to cover asset creation cost."
                },
                {
                    "pc": [
                        2655,
                        2921,
                        4506
                    ],
                    "errorMessage": "Insufficient funds. Stake pay amount is not enough to cover staking requirements."
                },
                {
                    "pc": [
                        3224,
                        3372,
                        3453
                    ],
                    "errorMessage": "Invalid Game ID. Box Game Register Game ID must be a certain value or match Game ID arg."
                },
                {
                    "pc": [
                        3181,
                        3309
                    ],
                    "errorMessage": "Invalid group index. Ensure transaction group index matches the expected value. "
                },
                {
                    "pc": [
                        1850,
                        2215,
                        2598,
                        2883,
                        3177,
                        3304,
                        4466
                    ],
                    "errorMessage": "Invalid group size. Ensure number of transaction in group is within valid bounds."
                },
                {
                    "pc": [
                        2071,
                        2293,
                        2443,
                        3077,
                        4290,
                        4686
                    ],
                    "errorMessage": "Invalid group size. This app call can only take standalone transactions."
                },
                {
                    "pc": [
                        2480,
                        2979,
                        3441,
                        4445
                    ],
                    "errorMessage": "Invalid time frame. Call made outside the permitted block or timestamp range."
                },
                {
                    "pc": [
                        1906
                    ],
                    "errorMessage": "Mint payment receiver address must match application address."
                },
                {
                    "pc": [
                        1898
                    ],
                    "errorMessage": "Mint payment sender address must match transaction sender address."
                },
                {
                    "pc": [
                        2991
                    ],
                    "errorMessage": "Number of active players must not exceed number of max players."
                },
                {
                    "pc": [
                        162
                    ],
                    "errorMessage": "OnCompletion is not DeleteApplication"
                },
                {
                    "pc": [
                        174,
                        190,
                        230,
                        249,
                        265,
                        281,
                        297,
                        323,
                        375,
                        393,
                        405,
                        427,
                        439,
                        471,
                        484,
                        505,
                        531,
                        559,
                        581,
                        598
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        2956
                    ],
                    "errorMessage": "Player with this address must not be an active game participant in the game."
                },
                {
                    "pc": [
                        3006
                    ],
                    "errorMessage": "Players box start position index overflow. Can not store more addresses."
                },
                {
                    "pc": [
                        4522,
                        4992
                    ],
                    "errorMessage": "Prize pool not empty. Amount in prize pool must be zero."
                },
                {
                    "pc": [
                        3466
                    ],
                    "errorMessage": "Randomness commit round not reached yet."
                },
                {
                    "pc": [
                        3207,
                        3354
                    ],
                    "errorMessage": "Sender mismatch. Sender must be same address across all transactions in group."
                },
                {
                    "pc": [
                        2725,
                        2937,
                        4498
                    ],
                    "errorMessage": "Stake payment receiver address must match application address."
                },
                {
                    "pc": [
                        2701,
                        2929,
                        4490
                    ],
                    "errorMessage": "Stake payment sender address must match transaction sender address."
                },
                {
                    "pc": [
                        5007
                    ],
                    "errorMessage": "Template variable 'DELETABLE' needs to be 'True' at deploy-time."
                },
                {
                    "pc": [
                        2646,
                        4647
                    ],
                    "errorMessage": "The number of max players must be within bounds."
                },
                {
                    "pc": [
                        3215,
                        3362
                    ],
                    "errorMessage": "Transaction at this group index must have exact required method selector."
                },
                {
                    "pc": [
                        3521
                    ],
                    "errorMessage": "application log value is not the result of an ABI return"
                },
                {
                    "pc": [
                        475
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        165,
                        177,
                        193,
                        233,
                        252,
                        268,
                        284,
                        300,
                        326,
                        378,
                        396,
                        408,
                        430,
                        442,
                        487,
                        508,
                        534,
                        562,
                        584,
                        601
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        764,
                        1085
                    ],
                    "errorMessage": "check BoxMap entry exists"
                },
                {
                    "pc": [
                        1051
                    ],
                    "errorMessage": "check BoxRef exists"
                },
                {
                    "pc": [
                        1758
                    ],
                    "errorMessage": "check self.box_game_players entry exists"
                },
                {
                    "pc": [
                        2307,
                        2324,
                        2455,
                        2617,
                        2842,
                        3136,
                        3230,
                        3241,
                        3378,
                        3422,
                        3447,
                        3461,
                        3473,
                        4854
                    ],
                    "errorMessage": "check self.box_game_register entry exists"
                },
                {
                    "pc": [
                        2899,
                        3100,
                        3389,
                        3413,
                        4305,
                        4508,
                        4706
                    ],
                    "errorMessage": "check self.box_game_state entry exists"
                },
                {
                    "pc": [
                        2076,
                        3927,
                        3937,
                        3957,
                        3982,
                        4128,
                        5025,
                        5045
                    ],
                    "errorMessage": "check self.box_game_trophy exists"
                },
                {
                    "pc": [
                        2825
                    ],
                    "errorMessage": "check self.game_id exists"
                },
                {
                    "pc": [
                        2679,
                        2755,
                        3025,
                        3046,
                        3773,
                        4149,
                        4656,
                        4871
                    ],
                    "errorMessage": "overflow"
                },
                {
                    "pc": [
                        3172,
                        3299
                    ],
                    "errorMessage": "transaction type is appl"
                },
                {
                    "pc": [
                        221,
                        314,
                        346,
                        356,
                        366,
                        418,
                        452,
                        462
                    ],
                    "errorMessage": "transaction type is pay"
                }
            ],
            "pcOffsetMethod": "cblocks"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "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",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 9,
            "patch": 0
        }
    },
    "events": [
        {
            "name": "game_live",
            "args": [
                {
                    "type": "uint64",
                    "name": "field1"
                },
                {
                    "type": "bool",
                    "name": "field2"
                },
                {
                    "type": "uint64",
                    "name": "field3"
                }
            ]
        },
        {
            "name": "player_score",
            "args": [
                {
                    "type": "uint64",
                    "name": "field1"
                },
                {
                    "type": "address",
                    "name": "field2"
                },
                {
                    "type": "uint8",
                    "name": "field3"
                }
            ]
        },
        {
            "name": "game_over",
            "args": [
                {
                    "type": "uint64",
                    "name": "field1"
                },
                {
                    "type": "uint8",
                    "name": "field2"
                },
                {
                    "type": "uint8",
                    "name": "field3"
                },
                {
                    "type": "uint8",
                    "name": "field4"
                },
                {
                    "type": "address",
                    "name": "field5"
                },
                {
                    "type": "address",
                    "name": "field6"
                },
                {
                    "type": "address",
                    "name": "field7"
                }
            ]
        }
    ],
    "templateVariables": {
        "GEN_UNIX": {
            "type": "AVMUint64"
        },
        "DELETABLE": {
            "type": "AVMUint64"
        }
    }
}