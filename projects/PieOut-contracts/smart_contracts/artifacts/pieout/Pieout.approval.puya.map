{
  "version": 3,
  "sources": [
    "../../../.venv/Lib/site-packages/lib_pcg/pcg32.py",
    "../../pieout/contract.py"
  ],
  "mappings": "ACgDA;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;AAAA;;AAsYK;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AA1CA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AA1HA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAnDA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AA9CA;;AAAA;AAAA;AAAA;;AAAA;AAjIL;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAiIK;;;AAAA;;AA9DA;;AAAA;AAAA;AAAA;;AAAA;AAnEL;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAmEK;;;AAAA;;AAvBA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AALA;;AAAA;AAAA;AAAA;;AAAA;AAEU;;AAFV;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAfA;;AAAA;AAAA;AAAA;;AAAA;AAxBL;;;AAAA;;;AAwBK;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAL;;;AAQY;;AAAA;AAAkB;;AAAA;AAAlB;AADO;;;AAAA;AAKJ;;;AAAA;AAAP;AAYI;;AAAc;;AAAd;AADJ;AAKA;AAAqB;AAArB;AACA;AAAuB;AAAvB;AACA;AAAoB;AAApB;AAEA;;AAA4B;AAA5B;AACA;;AAAyB;AAAzB;AAEA;AAAoB;AAApB;AAEA;;AAAkB;AAAlB;AACA;;AAA0B;AAA1B;AAEA;;;;;;;;;;;;;;;;AAAsB;AAAtB;;AAGR;;;;;AAKqB;;AACC;;AACI;;AAFlB;;AAMI;AAAA;;AAAA;AAAA;AAAA;AADJ;AAKsB;;AAAlB;AAAA;AAAA;AAAA;AAAA;;AAAA;AADJ;AAIG;AAAA;;AAAA;AAAA;AAAX;;;AAEgB;;AAAA;;AAAA;AADJ;AAIA;;AAA4B;AAA5B;AAIA;;AAAA;;AAAA;AAAA;;AAA6C;;AAAA;AAAA;;AAAA;;AAAA;AAAxB;;;;;;;;AAAA;;AAAA;AAArB;AADJ;AAKI;;AAAA;;AACG;;;;AADH;AADJ;AAMkB;;AAAA;;AAAd;AAAA;;;AAA+C;;AAAA;;AAAd;;AAAA;AAAjC;;;;AADJ;AAKmB;;AAAA;;AAAf;;AAAA;AAAA;;;AAAmD;;AAAA;;AAAf;;AAAA;AAApC;;;;AADJ;AAKO;AAAA;AAAA;AAAA;AAAqB;AAArB;AAAP;AAIqB;AAAA;AAAA;AAAA;AAAZ;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AADT;;AAAA;AAAA;AAKA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAsB;AAAtB;AAAA;AAAA;AAAA;AAGG;AAAA;AAAA;AAAA;AAAsB;AAAtB;AAAX;;;AACY;;AAAyB;AAAzB;;;;;;;;;;AAGZ;;;AAGiB;;AACI;;AACC;;AACE;;AAQM;;;;;AAAlB;;AAAA;AAAA;AAAA;AAAA;;AAAA;AADJ;AAKI;;AAAA;;AACG;;;;AADH;AADJ;AAMkB;;AAAA;;AAAd;;AAAA;AADJ;AAKmB;;AAAA;;AAAf;;AAAA;AADJ;AAMqD;;AAAA;AAAT;;AAAA;AAAA;AAAV;;AAAnB;AAAwE;;AAAxE;AAA4E;AAA5E;AAGf;;AAAe;AAIL;AADV;;AAQR;;;;;AAwCsC;;;AAAiB;AAA/C;;;AAE8B;;AAAR;AAAwB;;AAAxB;AAAV;AAGY;AAAA;;;ADxPrB;AAAe;;AAAf;AAAP;;;AAEoB;AAoIC;AAkHe;;AAAf;AAAA;;AAtPc;;AAuPd;AAAA;;AAlHD;AAAA;;AAiHgB;;AAAf;AAAA;;AAtPc;;AAuPd;AAAA;;AAxEX;;;;AAAA;AA8FqB;;;;;;;;;;;AAAQ;AAAhB;AAAA;;AAQP;;AAAT;AAjFkB;;AAET;AAAZ;AAES;AAAL;AAAK;;AC+CiF;;AD/CjF;AAAjB;;;AA8CyB;;AAAA;AAAe;;AAAf;AAAA;;AAfM;;AAgBN;AAAA;;AAAA;AASE;AAAS;;AAAT;AAAD;;AAAA;AAA0B;;AAA3B;AAqBL;;AAAT;AArB8C;AAAS;;AAAT;AAO7C;AAAA;AAMuB;AAAA;AAAQ;AAAhB;AAAA;;AANiD;;AAArB;AAAV;;AAAA;AAAA;AAczB;;AAAT;AAdA;AAAA;AAAA;;AA5DQ;;AAAA;AAAnB;;;AAEiC;;AATJ;;AASI;AC0CwB;AD1CzB;AAAR;AADM;;;AAAV;;AAAA;AAAA;AAAA;;AAJH;;AAAA;AAAA;AAAA;;;;;;;;;;;;ACiDT;;AAAA;;AAAA;AAGR;;;;;;AAGsC;;;AAAiB;AAA/C;;;AAMkB;;;AACD;;AACC;;AAAlB;AAJa;;AAoCiB;;AAAR;AAAwB;;AAAxB;AAAV;AACwB;;AAA7B;AAAP;;AAGS;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AACa;AAAA;AAAtB;AAIuB;AAAnB;AAAA;;;AAAyB;;AAAmB;AAAnB;AAAzB;;;;AADJ;AAIgB;AAAZ;;AAAK;;AAAA;;AAAA;AAAjB;;;AAG4B;AAAZ;;AAAK;;AAAA;;AAAA;AAArB;;;AAIoB;;AAAA;;AAAsB;;AAAA;AAAA;;AAAA;;AAAtB;AADJ;AAHK;AAAA;AAAA;;;;;AAQL;;AAAA;AAAe;AAAf;;AAAA;;AAAA;AADJ;AAKI;AAAA;;AAAA;;AAAA;AADJ;AAdK;AAAA;AAAA;;;;;AAmBL;AAAA;;AAAA;AAAA;AAA0B;AAA1B;AADJ;AAKI;AAAA;AAAA;AAAA;AAAsB;AAAtB;AAAA;;;AAA4B;AAAA;AAAA;AAAA;AAAsB;AAAtB;AAA5B;;;;AADJ;AAK2B;AAAA;AAAA;AAAA;AAAvB;;AAAA;AADJ;AAMG;;AAAQ;;;;AAAR;AAAX;;;AAEY;;AAAuB;AAAvB;AACc;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAd;;AAAA;AAAA;;AACA;;AAAA;AAAA;AAkBJ;AAAA;AAAA;AAAA;AAAwB;AAAxB;AAAA;AAAA;AAAA;AAEG;AAAA;AAAA;AAAA;AAAwB;AAAA;AAAA;AAAA;AAAxB;AAAX;;;AACe;AAAA;AAAA;AAAA;AAAqB;AAAA;AAAA;AAAA;AAArB;AAAf;;;AACgB;AAAA;AAAA;AAAA;AAAsB;AAAA;AAAA;AAAA;AAAtB;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAqB;AAArB;AAAA;AAAA;AAAA;AAEJ;AAAoB;AAApB;AACA;AAAuB;AAAvB;AAEJ;;AAAA;;AAAA;AAzBI;AAAA;AAAA;AAAA;AAAqB;AAArB;AAAA;AAAA;AAAA;;;;;;;;;;;;AA+BS;;AAIT;AAAA;;AAAA;AAAA;AAA0B;AAA1B;AADJ;AAKI;AAAA;AAAA;AAAA;AAAsB;AAAtB;AADJ;AAKI;AAAA;;AAAA;AAAA;AAAA;AADJ;AAKkB;;AAAd;;AAAA;AAAA;AAAA;AAAA;;AADJ;AAIS;AAAA;AAGL;;;AAAe;AAAA;AAAA;AAAA;AAAf;AAAA;AADJ;AAKA;;AAA0B;AAA1B;AAGA;AAEW;AAAA;;AAAA;AAAA;;;;;AAFX;;;AAAA;;;AAAA;AAMA;AAAqB;AAArB;AACA;;AAAkB;AAAlB;;AAOI;;AAAc;;AAAd;AADJ;AAIO;;AAAP;",
  "op_pc_offset": 2,
  "pc_events": {
    "0": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%0#2"
      ]
    },
    "2": {
      "op": "bz main_after_if_else@14",
      "stack_out": []
    },
    "5": {
      "op": "pushbytess 0x137d1094 0x4ece0cfd 0x5be219f0 0xd6233e1b 0x10a2b401 0xa9ab2f55 0x9336b098 0xc3d1b02b 0x5ff16da4 // method \"calc_single_box_fee(uint8,uint16)uint64\", method \"get_gen_unix()uint64\", method \"generate()void\", method \"stake(pay,pay)void\", method \"commit_rand(pay,byte[32])void\", method \"reveal_rand()byte[]\", method \"gamba()uint64\", method \"claim_prize_pool()void\", method \"terminate()void\"",
      "defined_out": [
        "Method(calc_single_box_fee(uint8,uint16)uint64)",
        "Method(claim_prize_pool()void)",
        "Method(commit_rand(pay,byte[32])void)",
        "Method(gamba()uint64)",
        "Method(generate()void)",
        "Method(get_gen_unix()uint64)",
        "Method(reveal_rand()byte[])",
        "Method(stake(pay,pay)void)",
        "Method(terminate()void)"
      ],
      "stack_out": [
        "Method(calc_single_box_fee(uint8,uint16)uint64)",
        "Method(get_gen_unix()uint64)",
        "Method(generate()void)",
        "Method(stake(pay,pay)void)",
        "Method(commit_rand(pay,byte[32])void)",
        "Method(reveal_rand()byte[])",
        "Method(gamba()uint64)",
        "Method(claim_prize_pool()void)",
        "Method(terminate()void)"
      ]
    },
    "52": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(calc_single_box_fee(uint8,uint16)uint64)",
        "Method(claim_prize_pool()void)",
        "Method(commit_rand(pay,byte[32])void)",
        "Method(gamba()uint64)",
        "Method(generate()void)",
        "Method(get_gen_unix()uint64)",
        "Method(reveal_rand()byte[])",
        "Method(stake(pay,pay)void)",
        "Method(terminate()void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(calc_single_box_fee(uint8,uint16)uint64)",
        "Method(get_gen_unix()uint64)",
        "Method(generate()void)",
        "Method(stake(pay,pay)void)",
        "Method(commit_rand(pay,byte[32])void)",
        "Method(reveal_rand()byte[])",
        "Method(gamba()uint64)",
        "Method(claim_prize_pool()void)",
        "Method(terminate()void)",
        "tmp%2#0"
      ]
    },
    "55": {
      "op": "match main_calc_single_box_fee_route@5 main_get_gen_unix_route@6 main_generate_route@7 main_stake_route@8 main_commit_rand_route@9 main_reveal_rand_route@10 main_gamba_route@11 main_claim_prize_pool_route@12 main_terminate_route@13",
      "stack_out": []
    },
    "75": {
      "block": "main_after_if_else@14",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "76": {
      "op": "return",
      "stack_out": []
    },
    "77": {
      "block": "main_terminate_route@13",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%42#0"
      ]
    },
    "79": {
      "op": "pushint 5 // DeleteApplication",
      "defined_out": [
        "DeleteApplication",
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%42#0",
        "DeleteApplication"
      ]
    },
    "81": {
      "op": "==",
      "defined_out": [
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%43#0"
      ]
    },
    "82": {
      "error": "OnCompletion is not DeleteApplication",
      "op": "assert // OnCompletion is not DeleteApplication",
      "stack_out": []
    },
    "83": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%44#0"
      ]
    },
    "85": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "86": {
      "callsub": "smart_contracts.pieout.contract.Pieout.terminate",
      "op": "callsub terminate"
    },
    "89": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "90": {
      "op": "return",
      "stack_out": []
    },
    "91": {
      "block": "main_claim_prize_pool_route@12",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%38#0"
      ]
    },
    "93": {
      "op": "!",
      "defined_out": [
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0"
      ]
    },
    "94": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "95": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%40#0"
      ]
    },
    "97": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "98": {
      "callsub": "smart_contracts.pieout.contract.Pieout.claim_prize_pool",
      "op": "callsub claim_prize_pool"
    },
    "101": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "102": {
      "op": "return",
      "stack_out": []
    },
    "103": {
      "block": "main_gamba_route@11",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0"
      ]
    },
    "105": {
      "op": "!",
      "defined_out": [
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0"
      ]
    },
    "106": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "107": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0"
      ]
    },
    "109": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "110": {
      "callsub": "smart_contracts.pieout.contract.Pieout.gamba",
      "op": "callsub gamba",
      "defined_out": [
        "to_encode%3#0"
      ],
      "stack_out": [
        "to_encode%3#0"
      ]
    },
    "113": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%2#0"
      ]
    },
    "114": {
      "op": "bytec 6 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%2#0",
        "0x151f7c75"
      ]
    },
    "116": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%2#0"
      ]
    },
    "117": {
      "op": "concat",
      "defined_out": [
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%37#0"
      ]
    },
    "118": {
      "op": "log",
      "stack_out": []
    },
    "119": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "120": {
      "op": "return",
      "stack_out": []
    },
    "121": {
      "block": "main_reveal_rand_route@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "123": {
      "op": "!",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0"
      ]
    },
    "124": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "125": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0"
      ]
    },
    "127": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "128": {
      "callsub": "smart_contracts.pieout.contract.Pieout.reveal_rand",
      "op": "callsub reveal_rand",
      "defined_out": [
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0"
      ]
    },
    "131": {
      "op": "dup",
      "defined_out": [
        "to_encode%2#0",
        "to_encode%2#0 (copy)"
      ],
      "stack_out": [
        "to_encode%2#0",
        "to_encode%2#0 (copy)"
      ]
    },
    "132": {
      "op": "len",
      "defined_out": [
        "length%0#0",
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0",
        "length%0#0"
      ]
    },
    "133": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0",
        "as_bytes%0#0"
      ]
    },
    "134": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%0#0",
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0",
        "length_uint16%0#0"
      ]
    },
    "137": {
      "op": "swap",
      "stack_out": [
        "length_uint16%0#0",
        "to_encode%2#0"
      ]
    },
    "138": {
      "op": "concat",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "139": {
      "op": "bytec 6 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "0x151f7c75"
      ]
    },
    "141": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%0#0"
      ]
    },
    "142": {
      "op": "concat",
      "defined_out": [
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0"
      ]
    },
    "143": {
      "op": "log",
      "stack_out": []
    },
    "144": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "145": {
      "op": "return",
      "stack_out": []
    },
    "146": {
      "block": "main_commit_rand_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "148": {
      "op": "!",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "149": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "150": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "152": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "153": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0"
      ]
    },
    "155": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0",
        "1"
      ]
    },
    "156": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%2#0"
      ],
      "stack_out": [
        "gtxn_idx%2#0"
      ]
    },
    "157": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%2#0",
        "gtxn_idx%2#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%2#0",
        "gtxn_idx%2#0 (copy)"
      ]
    },
    "158": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%2#0",
        "gtxn_type%2#0"
      ],
      "stack_out": [
        "gtxn_idx%2#0",
        "gtxn_type%2#0"
      ]
    },
    "160": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%2#0",
        "gtxn_type%2#0",
        "pay"
      ],
      "stack_out": [
        "gtxn_idx%2#0",
        "gtxn_type%2#0",
        "pay"
      ]
    },
    "161": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%2#0",
        "gtxn_type_matches%2#0"
      ],
      "stack_out": [
        "gtxn_idx%2#0",
        "gtxn_type_matches%2#0"
      ]
    },
    "162": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%2#0"
      ]
    },
    "163": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "gtxn_idx%2#0",
        "reinterpret_bytes[32]%0#0"
      ],
      "stack_out": [
        "gtxn_idx%2#0",
        "reinterpret_bytes[32]%0#0"
      ]
    },
    "166": {
      "callsub": "smart_contracts.pieout.contract.Pieout.commit_rand",
      "op": "callsub commit_rand",
      "stack_out": []
    },
    "169": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "170": {
      "op": "return",
      "stack_out": []
    },
    "171": {
      "block": "main_stake_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "173": {
      "op": "!",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "174": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "175": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "177": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "178": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "180": {
      "op": "intc_3 // 2",
      "defined_out": [
        "2",
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0",
        "2"
      ]
    },
    "181": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0"
      ]
    },
    "182": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ]
    },
    "183": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ]
    },
    "185": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay"
      ]
    },
    "186": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ]
    },
    "187": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%0#0"
      ]
    },
    "188": {
      "op": "txn GroupIndex",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%22#0"
      ]
    },
    "190": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "gtxn_idx%0#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%22#0",
        "1"
      ]
    },
    "191": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0"
      ]
    },
    "192": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "gtxn_idx%1#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "gtxn_idx%1#0 (copy)"
      ]
    },
    "193": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "gtxn_type%1#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "gtxn_type%1#0"
      ]
    },
    "195": {
      "op": "intc_1 // pay",
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "gtxn_type%1#0",
        "pay"
      ]
    },
    "196": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "gtxn_type_matches%1#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "gtxn_type_matches%1#0"
      ]
    },
    "197": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0"
      ]
    },
    "198": {
      "callsub": "smart_contracts.pieout.contract.Pieout.stake",
      "op": "callsub stake",
      "stack_out": []
    },
    "201": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "202": {
      "op": "return",
      "stack_out": []
    },
    "203": {
      "block": "main_generate_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "205": {
      "op": "!",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "206": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "207": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "209": {
      "op": "!",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "210": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "211": {
      "callsub": "smart_contracts.pieout.contract.Pieout.generate",
      "op": "callsub generate"
    },
    "214": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "215": {
      "op": "return",
      "stack_out": []
    },
    "216": {
      "block": "main_get_gen_unix_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "218": {
      "op": "!",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "219": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "220": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "222": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "223": {
      "op": "intc 8 // TMPL_GEN_UNIX",
      "defined_out": [
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0"
      ]
    },
    "225": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0"
      ]
    },
    "226": {
      "op": "bytec 6 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0",
        "0x151f7c75"
      ]
    },
    "228": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%1#0"
      ]
    },
    "229": {
      "op": "concat",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "230": {
      "op": "log",
      "stack_out": []
    },
    "231": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "232": {
      "op": "return",
      "stack_out": []
    },
    "233": {
      "block": "main_calc_single_box_fee_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "235": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "236": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "237": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "239": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "240": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%0#0"
      ]
    },
    "243": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[1]%0#0",
        "reinterpret_bytes[2]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%0#0",
        "reinterpret_bytes[2]%0#0"
      ]
    },
    "246": {
      "callsub": "smart_contracts.pieout.contract.Pieout.calc_single_box_fee",
      "op": "callsub calc_single_box_fee",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "249": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "250": {
      "op": "bytec 6 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "252": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ]
    },
    "253": {
      "op": "concat",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "254": {
      "op": "log",
      "stack_out": []
    },
    "255": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "256": {
      "op": "return",
      "stack_out": []
    },
    "257": {
      "subroutine": "_puya_lib.util.ensure_budget",
      "params": {
        "required_budget#0": "uint64",
        "fee_source#0": "uint64"
      },
      "block": "ensure_budget",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "260": {
      "op": "frame_dig -2",
      "defined_out": [
        "required_budget#0 (copy)"
      ],
      "stack_out": [
        "required_budget#0 (copy)"
      ]
    },
    "262": {
      "op": "intc_2 // 10",
      "defined_out": [
        "10",
        "required_budget#0 (copy)"
      ],
      "stack_out": [
        "required_budget#0 (copy)",
        "10"
      ]
    },
    "263": {
      "op": "+",
      "defined_out": [
        "required_budget_with_buffer#0"
      ],
      "stack_out": [
        "required_budget_with_buffer#0"
      ]
    },
    "264": {
      "block": "ensure_budget_while_top@1",
      "stack_in": [
        "required_budget_with_buffer#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "required_budget_with_buffer#0"
      ],
      "stack_out": [
        "required_budget_with_buffer#0",
        "required_budget_with_buffer#0"
      ]
    },
    "266": {
      "op": "global OpcodeBudget",
      "defined_out": [
        "required_budget_with_buffer#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "required_budget_with_buffer#0",
        "required_budget_with_buffer#0",
        "tmp%0#0"
      ]
    },
    "268": {
      "op": ">",
      "defined_out": [
        "required_budget_with_buffer#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "required_budget_with_buffer#0",
        "tmp%1#0"
      ]
    },
    "269": {
      "op": "bz ensure_budget_after_while@7",
      "stack_out": [
        "required_budget_with_buffer#0"
      ]
    },
    "272": {
      "op": "itxn_begin"
    },
    "273": {
      "op": "pushint 6 // appl",
      "defined_out": [
        "appl",
        "required_budget_with_buffer#0"
      ],
      "stack_out": [
        "required_budget_with_buffer#0",
        "appl"
      ]
    },
    "275": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "required_budget_with_buffer#0"
      ]
    },
    "277": {
      "op": "pushint 5 // DeleteApplication",
      "defined_out": [
        "DeleteApplication",
        "required_budget_with_buffer#0"
      ],
      "stack_out": [
        "required_budget_with_buffer#0",
        "DeleteApplication"
      ]
    },
    "279": {
      "op": "itxn_field OnCompletion",
      "stack_out": [
        "required_budget_with_buffer#0"
      ]
    },
    "281": {
      "op": "bytec 10 // 0x068101",
      "defined_out": [
        "0x068101",
        "required_budget_with_buffer#0"
      ],
      "stack_out": [
        "required_budget_with_buffer#0",
        "0x068101"
      ]
    },
    "283": {
      "op": "itxn_field ApprovalProgram",
      "stack_out": [
        "required_budget_with_buffer#0"
      ]
    },
    "285": {
      "op": "bytec 10 // 0x068101",
      "stack_out": [
        "required_budget_with_buffer#0",
        "0x068101"
      ]
    },
    "287": {
      "op": "itxn_field ClearStateProgram",
      "stack_out": [
        "required_budget_with_buffer#0"
      ]
    },
    "289": {
      "op": "frame_dig -1",
      "defined_out": [
        "fee_source#0 (copy)",
        "required_budget_with_buffer#0"
      ],
      "stack_out": [
        "required_budget_with_buffer#0",
        "fee_source#0 (copy)"
      ]
    },
    "291": {
      "op": "switch ensure_budget_switch_case_0@3 ensure_budget_switch_case_1@4",
      "stack_out": [
        "required_budget_with_buffer#0"
      ]
    },
    "297": {
      "block": "ensure_budget_switch_case_next@6",
      "stack_in": [
        "required_budget_with_buffer#0"
      ],
      "op": "itxn_submit"
    },
    "298": {
      "op": "b ensure_budget_while_top@1"
    },
    "301": {
      "block": "ensure_budget_switch_case_1@4",
      "stack_in": [
        "required_budget_with_buffer#0"
      ],
      "op": "global MinTxnFee",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "required_budget_with_buffer#0",
        "tmp%2#0"
      ]
    },
    "303": {
      "op": "itxn_field Fee",
      "stack_out": [
        "required_budget_with_buffer#0"
      ]
    },
    "305": {
      "op": "b ensure_budget_switch_case_next@6"
    },
    "308": {
      "block": "ensure_budget_switch_case_0@3",
      "stack_in": [
        "required_budget_with_buffer#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "required_budget_with_buffer#0",
        "0"
      ]
    },
    "309": {
      "op": "itxn_field Fee",
      "stack_out": [
        "required_budget_with_buffer#0"
      ]
    },
    "311": {
      "op": "b ensure_budget_switch_case_next@6"
    },
    "314": {
      "block": "ensure_budget_after_while@7",
      "stack_in": [
        "required_budget_with_buffer#0"
      ],
      "retsub": true,
      "op": "retsub"
    },
    "315": {
      "subroutine": "smart_contracts.pieout.contract.Pieout.calc_single_box_fee",
      "params": {
        "key_size#0": "bytes",
        "value_size#0": "bytes"
      },
      "block": "calc_single_box_fee",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "318": {
      "op": "frame_dig -2",
      "defined_out": [
        "key_size#0 (copy)"
      ],
      "stack_out": [
        "key_size#0 (copy)"
      ]
    },
    "320": {
      "op": "btoi",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "321": {
      "op": "frame_dig -1",
      "defined_out": [
        "tmp%1#0",
        "value_size#0 (copy)"
      ],
      "stack_out": [
        "tmp%1#0",
        "value_size#0 (copy)"
      ]
    },
    "323": {
      "op": "btoi",
      "defined_out": [
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "324": {
      "op": "+",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "325": {
      "op": "pushint 400 // 400",
      "defined_out": [
        "400",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "400"
      ]
    },
    "328": {
      "op": "*",
      "defined_out": [
        "size_fee#0"
      ],
      "stack_out": [
        "size_fee#0"
      ]
    },
    "329": {
      "op": "pushint 2500 // 2500",
      "defined_out": [
        "2500",
        "size_fee#0"
      ],
      "stack_out": [
        "size_fee#0",
        "2500"
      ]
    },
    "332": {
      "op": "+",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "333": {
      "retsub": true,
      "op": "retsub"
    },
    "334": {
      "subroutine": "smart_contracts.pieout.contract.Pieout.generate",
      "params": {},
      "block": "generate",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "336": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "338": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "339": {
      "error": "Transaction sender address must match application creator address.",
      "op": "assert // Transaction sender address must match application creator address.",
      "stack_out": []
    },
    "340": {
      "op": "bytec_0 // \"total_players\"",
      "defined_out": [
        "\"total_players\""
      ],
      "stack_out": [
        "\"total_players\""
      ]
    },
    "341": {
      "op": "intc_0 // 0",
      "defined_out": [
        "\"total_players\"",
        "0"
      ],
      "stack_out": [
        "\"total_players\"",
        "0"
      ]
    },
    "342": {
      "op": "app_global_put",
      "stack_out": []
    },
    "343": {
      "op": "bytec_3 // \"players_pending\"",
      "defined_out": [
        "\"players_pending\""
      ],
      "stack_out": [
        "\"players_pending\""
      ]
    },
    "344": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"players_pending\"",
        "0"
      ]
    },
    "345": {
      "op": "app_global_put",
      "stack_out": []
    },
    "346": {
      "op": "bytec_1 // \"players_elim\"",
      "defined_out": [
        "\"players_elim\""
      ],
      "stack_out": [
        "\"players_elim\""
      ]
    },
    "347": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"players_elim\"",
        "0"
      ]
    },
    "348": {
      "op": "app_global_put",
      "stack_out": []
    },
    "349": {
      "op": "bytec 7 // \"creator_stake_status\"",
      "defined_out": [
        "\"creator_stake_status\""
      ],
      "stack_out": [
        "\"creator_stake_status\""
      ]
    },
    "351": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"creator_stake_status\"",
        "0"
      ]
    },
    "352": {
      "op": "app_global_put",
      "stack_out": []
    },
    "353": {
      "op": "bytec 4 // \"staking_finalized\"",
      "defined_out": [
        "\"staking_finalized\""
      ],
      "stack_out": [
        "\"staking_finalized\""
      ]
    },
    "355": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"staking_finalized\"",
        "0"
      ]
    },
    "356": {
      "op": "app_global_put",
      "stack_out": []
    },
    "357": {
      "op": "bytec_2 // \"current_turn\"",
      "defined_out": [
        "\"current_turn\""
      ],
      "stack_out": [
        "\"current_turn\""
      ]
    },
    "358": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"current_turn\"",
        "0"
      ]
    },
    "359": {
      "op": "app_global_put",
      "stack_out": []
    },
    "360": {
      "op": "bytec 5 // \"prize_pool\"",
      "defined_out": [
        "\"prize_pool\""
      ],
      "stack_out": [
        "\"prize_pool\""
      ]
    },
    "362": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"prize_pool\"",
        "0"
      ]
    },
    "363": {
      "op": "app_global_put",
      "stack_out": []
    },
    "364": {
      "op": "bytec 8 // \"prize_pool_claimed\"",
      "defined_out": [
        "\"prize_pool_claimed\""
      ],
      "stack_out": [
        "\"prize_pool_claimed\""
      ]
    },
    "366": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"prize_pool_claimed\"",
        "0"
      ]
    },
    "367": {
      "op": "app_global_put",
      "stack_out": []
    },
    "368": {
      "op": "pushbytes \"commit_rand_id\"",
      "defined_out": [
        "\"commit_rand_id\""
      ],
      "stack_out": [
        "\"commit_rand_id\""
      ]
    },
    "384": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"commit_rand_id\"",
        "0"
      ]
    },
    "385": {
      "op": "app_global_put",
      "stack_out": []
    },
    "386": {
      "retsub": true,
      "op": "retsub"
    },
    "387": {
      "subroutine": "smart_contracts.pieout.contract.Pieout.stake",
      "params": {
        "box_pay#0": "uint64",
        "stake_pay#0": "uint64"
      },
      "block": "stake",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "390": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "392": {
      "op": "txn Sender"
    },
    "394": {
      "op": "global CurrentApplicationAddress"
    },
    "396": {
      "op": "global CreatorAddress"
    },
    "398": {
      "op": "txn Sender"
    },
    "400": {
      "op": "intc_0 // 0"
    },
    "401": {
      "op": "bytec 4 // \"staking_finalized\"",
      "defined_out": [
        "\"staking_finalized\"",
        "0",
        "app_address#0",
        "creator_address#0",
        "txn_sender#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "txn_sender#0",
        "0",
        "\"staking_finalized\""
      ]
    },
    "403": {
      "op": "app_global_get_ex",
      "defined_out": [
        "app_address#0",
        "creator_address#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "txn_sender#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "txn_sender#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "404": {
      "error": "check self.staking_finalized exists",
      "op": "assert // check self.staking_finalized exists",
      "stack_out": [
        "tmp%5#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "txn_sender#0",
        "maybe_value%0#0"
      ]
    },
    "405": {
      "op": "!",
      "defined_out": [
        "app_address#0",
        "creator_address#0",
        "tmp%0#0",
        "txn_sender#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "txn_sender#0",
        "tmp%0#0"
      ]
    },
    "406": {
      "error": "stake(): Rejected. Can only stake when staking is not finalized.",
      "op": "assert // stake(): Rejected. Can only stake when staking is not finalized.",
      "stack_out": [
        "tmp%5#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "txn_sender#0"
      ]
    },
    "407": {
      "op": "bytec 9 // 0x705f",
      "defined_out": [
        "0x705f",
        "app_address#0",
        "creator_address#0",
        "txn_sender#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "txn_sender#0",
        "0x705f"
      ]
    },
    "409": {
      "op": "swap",
      "stack_out": [
        "tmp%5#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "0x705f",
        "txn_sender#0"
      ]
    },
    "410": {
      "op": "concat",
      "defined_out": [
        "app_address#0",
        "creator_address#0",
        "tmp%1#0",
        "txn_sender#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%1#0"
      ]
    },
    "411": {
      "op": "dup",
      "defined_out": [
        "app_address#0",
        "creator_address#0",
        "tmp%1#0",
        "txn_sender#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%1#0",
        "tmp%1#0"
      ]
    },
    "412": {
      "op": "box_len",
      "defined_out": [
        "app_address#0",
        "creator_address#0",
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%1#0",
        "txn_sender#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%1#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "413": {
      "op": "bury 1",
      "stack_out": [
        "tmp%5#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%1#0",
        "maybe_exists%1#0"
      ]
    },
    "415": {
      "op": "!",
      "defined_out": [
        "app_address#0",
        "creator_address#0",
        "tmp%1#0",
        "tmp%2#0",
        "txn_sender#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "416": {
      "error": "stake(): Transaction sender address already staked.",
      "op": "assert // stake(): Transaction sender address already staked.",
      "stack_out": [
        "tmp%5#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%1#0"
      ]
    },
    "417": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%5#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%1#0",
        "0"
      ]
    },
    "418": {
      "op": "bytec 7 // \"creator_stake_status\"",
      "defined_out": [
        "\"creator_stake_status\"",
        "0",
        "app_address#0",
        "creator_address#0",
        "tmp%1#0",
        "txn_sender#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%1#0",
        "0",
        "\"creator_stake_status\""
      ]
    },
    "420": {
      "op": "app_global_get_ex",
      "defined_out": [
        "app_address#0",
        "creator_address#0",
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%1#0",
        "txn_sender#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%1#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "421": {
      "error": "check self.creator_stake_status exists",
      "op": "assert // check self.creator_stake_status exists",
      "stack_out": [
        "tmp%5#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%1#0",
        "maybe_value%2#0"
      ]
    },
    "422": {
      "op": "bnz stake_after_if_else@2",
      "stack_out": [
        "tmp%5#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%1#0"
      ]
    },
    "425": {
      "op": "frame_dig 1",
      "stack_out": [
        "tmp%5#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%1#0",
        "txn_sender#0"
      ]
    },
    "427": {
      "op": "frame_dig 3",
      "stack_out": [
        "tmp%5#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%1#0",
        "txn_sender#0",
        "creator_address#0"
      ]
    },
    "429": {
      "op": "==",
      "defined_out": [
        "app_address#0",
        "creator_address#0",
        "tmp%1#0",
        "tmp%4#0",
        "txn_sender#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%1#0",
        "tmp%4#0"
      ]
    },
    "430": {
      "error": "stake(): Rejected. Application creator account must stake first before any other account.",
      "op": "assert // stake(): Rejected. Application creator account must stake first before any other account.",
      "stack_out": [
        "tmp%5#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%1#0"
      ]
    },
    "431": {
      "op": "bytec 7 // \"creator_stake_status\"",
      "stack_out": [
        "tmp%5#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%1#0",
        "\"creator_stake_status\""
      ]
    },
    "433": {
      "op": "intc_1 // 1",
      "stack_out": [
        "tmp%5#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%1#0",
        "\"creator_stake_status\"",
        "1"
      ]
    },
    "434": {
      "op": "app_global_put",
      "stack_out": [
        "tmp%5#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%1#0"
      ]
    },
    "435": {
      "block": "stake_after_if_else@2",
      "stack_in": [
        "tmp%5#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%1#0"
      ],
      "op": "frame_dig -1",
      "defined_out": [
        "stake_pay#0 (copy)"
      ],
      "stack_out": [
        "tmp%5#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%1#0",
        "stake_pay#0 (copy)"
      ]
    },
    "437": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%1#0",
        "tmp%5#0"
      ]
    },
    "439": {
      "op": "dup",
      "stack_out": [
        "tmp%5#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%1#0",
        "tmp%5#0",
        "tmp%5#0"
      ]
    },
    "440": {
      "op": "frame_bury 0",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%1#0",
        "tmp%5#0"
      ]
    },
    "442": {
      "op": "frame_dig 1",
      "defined_out": [
        "tmp%5#0",
        "txn_sender#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%1#0",
        "tmp%5#0",
        "txn_sender#0"
      ]
    },
    "444": {
      "op": "dup",
      "defined_out": [
        "tmp%5#0",
        "txn_sender#0",
        "txn_sender#0 (copy)"
      ],
      "stack_out": [
        "tmp%5#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%1#0",
        "tmp%5#0",
        "txn_sender#0 (copy)",
        "txn_sender#0 (copy)"
      ]
    },
    "445": {
      "op": "cover 2",
      "stack_out": [
        "tmp%5#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%1#0",
        "txn_sender#0",
        "tmp%5#0",
        "txn_sender#0 (copy)"
      ]
    },
    "447": {
      "op": "frame_dig 3",
      "defined_out": [
        "creator_address#0",
        "tmp%5#0",
        "txn_sender#0",
        "txn_sender#0 (copy)"
      ],
      "stack_out": [
        "tmp%5#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%1#0",
        "txn_sender#0",
        "tmp%5#0",
        "txn_sender#0 (copy)",
        "creator_address#0"
      ]
    },
    "449": {
      "op": "==",
      "defined_out": [
        "creator_address#0",
        "tmp%5#0",
        "tmp%6#0",
        "txn_sender#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%1#0",
        "txn_sender#0",
        "tmp%5#0",
        "tmp%6#0"
      ]
    },
    "450": {
      "op": "pushints 500000 272000 // 500000, 272000",
      "defined_out": [
        "272000",
        "500000",
        "creator_address#0",
        "tmp%5#0",
        "tmp%6#0",
        "txn_sender#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%1#0",
        "txn_sender#0",
        "tmp%5#0",
        "tmp%6#0",
        "500000",
        "272000"
      ]
    },
    "458": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%5#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%1#0",
        "txn_sender#0",
        "tmp%5#0",
        "500000",
        "272000",
        "tmp%6#0"
      ]
    },
    "460": {
      "op": "select",
      "defined_out": [
        "creator_address#0",
        "select%0#0",
        "tmp%5#0",
        "txn_sender#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%1#0",
        "txn_sender#0",
        "tmp%5#0",
        "select%0#0"
      ]
    },
    "461": {
      "op": "==",
      "defined_out": [
        "creator_address#0",
        "tmp%5#0",
        "tmp%7#0",
        "txn_sender#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%1#0",
        "txn_sender#0",
        "tmp%7#0"
      ]
    },
    "462": {
      "error": "stake(): Insufficient amount. Payment transaction does not meet the required stake amount.",
      "op": "assert // stake(): Insufficient amount. Payment transaction does not meet the required stake amount.",
      "stack_out": [
        "tmp%5#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%1#0",
        "txn_sender#0"
      ]
    },
    "463": {
      "op": "frame_dig -2",
      "defined_out": [
        "box_pay#0 (copy)",
        "creator_address#0",
        "tmp%5#0",
        "txn_sender#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%1#0",
        "txn_sender#0",
        "box_pay#0 (copy)"
      ]
    },
    "465": {
      "op": "gtxns Amount",
      "defined_out": [
        "creator_address#0",
        "tmp%5#0",
        "tmp%8#0",
        "txn_sender#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%1#0",
        "txn_sender#0",
        "tmp%8#0"
      ]
    },
    "467": {
      "op": "pushint 16900 // 16900",
      "defined_out": [
        "16900",
        "creator_address#0",
        "tmp%5#0",
        "tmp%8#0",
        "txn_sender#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%1#0",
        "txn_sender#0",
        "tmp%8#0",
        "16900"
      ]
    },
    "471": {
      "op": ">=",
      "defined_out": [
        "creator_address#0",
        "tmp%5#0",
        "tmp%9#0",
        "txn_sender#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%1#0",
        "txn_sender#0",
        "tmp%9#0"
      ]
    },
    "472": {
      "error": "stake(): Insufficient amount. Box pay amount does not cover application MBR.",
      "op": "assert // stake(): Insufficient amount. Box pay amount does not cover application MBR.",
      "stack_out": [
        "tmp%5#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%1#0",
        "txn_sender#0"
      ]
    },
    "473": {
      "op": "frame_dig -2",
      "stack_out": [
        "tmp%5#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%1#0",
        "txn_sender#0",
        "box_pay#0 (copy)"
      ]
    },
    "475": {
      "op": "gtxns Sender",
      "defined_out": [
        "creator_address#0",
        "tmp%10#0",
        "tmp%5#0",
        "txn_sender#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%1#0",
        "txn_sender#0",
        "tmp%10#0"
      ]
    },
    "477": {
      "op": "==",
      "defined_out": [
        "creator_address#0",
        "tmp%11#0",
        "tmp%5#0",
        "txn_sender#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%1#0",
        "tmp%11#0"
      ]
    },
    "478": {
      "op": "bz stake_bool_false@5",
      "stack_out": [
        "tmp%5#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%1#0"
      ]
    },
    "481": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%5#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%1#0",
        "stake_pay#0 (copy)"
      ]
    },
    "483": {
      "op": "gtxns Sender",
      "defined_out": [
        "creator_address#0",
        "tmp%12#0",
        "tmp%5#0",
        "txn_sender#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%1#0",
        "tmp%12#0"
      ]
    },
    "485": {
      "op": "frame_dig 1",
      "stack_out": [
        "tmp%5#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%1#0",
        "tmp%12#0",
        "txn_sender#0"
      ]
    },
    "487": {
      "op": "==",
      "defined_out": [
        "creator_address#0",
        "tmp%13#0",
        "tmp%5#0",
        "txn_sender#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%1#0",
        "tmp%13#0"
      ]
    },
    "488": {
      "op": "bz stake_bool_false@5",
      "stack_out": [
        "tmp%5#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%1#0"
      ]
    },
    "491": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0",
        "creator_address#0",
        "tmp%5#0",
        "txn_sender#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%1#0",
        "and_result%0#0"
      ]
    },
    "492": {
      "block": "stake_bool_merge@6",
      "stack_in": [
        "tmp%5#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%1#0",
        "and_result%0#0"
      ],
      "error": "stake(): Box and Stake payment sender address must match transaction sender address.",
      "op": "assert // stake(): Box and Stake payment sender address must match transaction sender address.",
      "defined_out": [],
      "stack_out": [
        "tmp%5#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%1#0"
      ]
    },
    "493": {
      "op": "frame_dig -2",
      "defined_out": [
        "box_pay#0 (copy)"
      ],
      "stack_out": [
        "tmp%5#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%1#0",
        "box_pay#0 (copy)"
      ]
    },
    "495": {
      "op": "gtxns Receiver",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%1#0",
        "tmp%14#0"
      ]
    },
    "497": {
      "op": "frame_dig 2",
      "defined_out": [
        "app_address#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%1#0",
        "tmp%14#0",
        "app_address#0"
      ]
    },
    "499": {
      "op": "==",
      "defined_out": [
        "app_address#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%1#0",
        "tmp%15#0"
      ]
    },
    "500": {
      "op": "bz stake_bool_false@9",
      "stack_out": [
        "tmp%5#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%1#0"
      ]
    },
    "503": {
      "op": "frame_dig -1",
      "defined_out": [
        "app_address#0",
        "stake_pay#0 (copy)"
      ],
      "stack_out": [
        "tmp%5#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%1#0",
        "stake_pay#0 (copy)"
      ]
    },
    "505": {
      "op": "gtxns Receiver",
      "defined_out": [
        "app_address#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%1#0",
        "tmp%16#0"
      ]
    },
    "507": {
      "op": "frame_dig 2",
      "stack_out": [
        "tmp%5#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%1#0",
        "tmp%16#0",
        "app_address#0"
      ]
    },
    "509": {
      "op": "==",
      "defined_out": [
        "app_address#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%1#0",
        "tmp%17#0"
      ]
    },
    "510": {
      "op": "bz stake_bool_false@9",
      "stack_out": [
        "tmp%5#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%1#0"
      ]
    },
    "513": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%1#0",
        "app_address#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%1#0",
        "and_result%1#0"
      ]
    },
    "514": {
      "block": "stake_bool_merge@10",
      "stack_in": [
        "tmp%5#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%1#0",
        "and_result%1#0"
      ],
      "error": "stake(): Box and Stake payment reciever address must match transaction sender address.",
      "op": "assert // stake(): Box and Stake payment reciever address must match transaction sender address.",
      "defined_out": [],
      "stack_out": [
        "tmp%5#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%1#0"
      ]
    },
    "515": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "tmp%5#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%1#0",
        "0"
      ]
    },
    "516": {
      "op": "bytec_0 // \"total_players\"",
      "defined_out": [
        "\"total_players\"",
        "0"
      ],
      "stack_out": [
        "tmp%5#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%1#0",
        "0",
        "\"total_players\""
      ]
    },
    "517": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%1#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "518": {
      "error": "check self.total_players exists",
      "op": "assert // check self.total_players exists",
      "stack_out": [
        "tmp%5#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%1#0",
        "maybe_value%3#0"
      ]
    },
    "519": {
      "op": "intc_2 // 10",
      "defined_out": [
        "10",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%1#0",
        "maybe_value%3#0",
        "10"
      ]
    },
    "520": {
      "op": "<",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%1#0",
        "tmp%18#0"
      ]
    },
    "521": {
      "error": "stake(): Max player limit exceeded.",
      "op": "assert // stake(): Max player limit exceeded.",
      "stack_out": [
        "tmp%5#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%1#0"
      ]
    },
    "522": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%5#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%1#0",
        "0"
      ]
    },
    "523": {
      "op": "bytec_2 // \"current_turn\"",
      "defined_out": [
        "\"current_turn\"",
        "0"
      ],
      "stack_out": [
        "tmp%5#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%1#0",
        "0",
        "\"current_turn\""
      ]
    },
    "524": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%1#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "525": {
      "error": "check self.current_turn exists",
      "op": "assert // check self.current_turn exists",
      "stack_out": [
        "tmp%5#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%1#0",
        "maybe_value%4#0"
      ]
    },
    "526": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%1#0",
        "val_as_bytes%0#0"
      ]
    },
    "527": {
      "op": "dup",
      "defined_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%5#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%0#0 (copy)"
      ]
    },
    "528": {
      "op": "bitlen",
      "defined_out": [
        "bitlen%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%1#0",
        "val_as_bytes%0#0",
        "bitlen%0#0"
      ]
    },
    "529": {
      "op": "pushint 16 // 16",
      "defined_out": [
        "16",
        "bitlen%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%1#0",
        "val_as_bytes%0#0",
        "bitlen%0#0",
        "16"
      ]
    },
    "531": {
      "op": "<=",
      "defined_out": [
        "no_overflow%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%1#0",
        "val_as_bytes%0#0",
        "no_overflow%0#0"
      ]
    },
    "532": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "tmp%5#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%1#0",
        "val_as_bytes%0#0"
      ]
    },
    "533": {
      "op": "extract 6 2",
      "defined_out": [
        "uint16%0#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%1#0",
        "uint16%0#0"
      ]
    },
    "536": {
      "op": "frame_dig 4",
      "defined_out": [
        "tmp%1#0",
        "uint16%0#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%1#0",
        "uint16%0#0",
        "tmp%1#0"
      ]
    },
    "538": {
      "op": "swap",
      "stack_out": [
        "tmp%5#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%1#0",
        "tmp%1#0",
        "uint16%0#0"
      ]
    },
    "539": {
      "op": "box_put",
      "stack_out": [
        "tmp%5#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%1#0"
      ]
    },
    "540": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%5#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%1#0",
        "0"
      ]
    },
    "541": {
      "op": "bytec 5 // \"prize_pool\"",
      "defined_out": [
        "\"prize_pool\"",
        "0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%1#0",
        "0",
        "\"prize_pool\""
      ]
    },
    "543": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%5#0",
        "maybe_value%5#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%1#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "544": {
      "error": "check self.prize_pool exists",
      "op": "assert // check self.prize_pool exists",
      "stack_out": [
        "tmp%5#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%1#0",
        "maybe_value%5#0"
      ]
    },
    "545": {
      "op": "frame_dig 0",
      "defined_out": [
        "maybe_value%5#0",
        "tmp%1#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%1#0",
        "maybe_value%5#0",
        "tmp%5#0"
      ]
    },
    "547": {
      "op": "+",
      "defined_out": [
        "new_state_value%0#0",
        "tmp%1#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%1#0",
        "new_state_value%0#0"
      ]
    },
    "548": {
      "op": "bytec 5 // \"prize_pool\"",
      "stack_out": [
        "tmp%5#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%1#0",
        "new_state_value%0#0",
        "\"prize_pool\""
      ]
    },
    "550": {
      "op": "swap",
      "stack_out": [
        "tmp%5#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%1#0",
        "\"prize_pool\"",
        "new_state_value%0#0"
      ]
    },
    "551": {
      "op": "app_global_put",
      "stack_out": [
        "tmp%5#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%1#0"
      ]
    },
    "552": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%5#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%1#0",
        "0"
      ]
    },
    "553": {
      "op": "bytec_0 // \"total_players\"",
      "stack_out": [
        "tmp%5#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%1#0",
        "0",
        "\"total_players\""
      ]
    },
    "554": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%6#0",
        "maybe_value%6#0",
        "tmp%1#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%1#0",
        "maybe_value%6#0",
        "maybe_exists%6#0"
      ]
    },
    "555": {
      "error": "check self.total_players exists",
      "op": "assert // check self.total_players exists",
      "stack_out": [
        "tmp%5#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%1#0",
        "maybe_value%6#0"
      ]
    },
    "556": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%6#0",
        "tmp%1#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%1#0",
        "maybe_value%6#0",
        "1"
      ]
    },
    "557": {
      "op": "+",
      "defined_out": [
        "new_state_value%1#0",
        "tmp%1#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%1#0",
        "new_state_value%1#0"
      ]
    },
    "558": {
      "op": "bytec_0 // \"total_players\"",
      "stack_out": [
        "tmp%5#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%1#0",
        "new_state_value%1#0",
        "\"total_players\""
      ]
    },
    "559": {
      "op": "swap",
      "stack_out": [
        "tmp%5#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%1#0",
        "\"total_players\"",
        "new_state_value%1#0"
      ]
    },
    "560": {
      "op": "app_global_put",
      "stack_out": [
        "tmp%5#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%1#0"
      ]
    },
    "561": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%5#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%1#0",
        "0"
      ]
    },
    "562": {
      "op": "bytec_0 // \"total_players\"",
      "stack_out": [
        "tmp%5#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%1#0",
        "0",
        "\"total_players\""
      ]
    },
    "563": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%7#0",
        "maybe_value%7#0",
        "tmp%1#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%1#0",
        "maybe_value%7#0",
        "maybe_exists%7#0"
      ]
    },
    "564": {
      "error": "check self.total_players exists",
      "op": "assert // check self.total_players exists",
      "stack_out": [
        "tmp%5#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%1#0",
        "maybe_value%7#0"
      ]
    },
    "565": {
      "op": "intc_2 // 10",
      "stack_out": [
        "tmp%5#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%1#0",
        "maybe_value%7#0",
        "10"
      ]
    },
    "566": {
      "op": "==",
      "defined_out": [
        "tmp%1#0",
        "tmp%21#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%1#0",
        "tmp%21#0"
      ]
    },
    "567": {
      "op": "bz stake_after_if_else@12",
      "stack_out": [
        "tmp%5#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%1#0"
      ]
    },
    "570": {
      "op": "bytec 4 // \"staking_finalized\"",
      "defined_out": [
        "\"staking_finalized\"",
        "tmp%1#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%1#0",
        "\"staking_finalized\""
      ]
    },
    "572": {
      "op": "intc_1 // 1",
      "stack_out": [
        "tmp%5#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%1#0",
        "\"staking_finalized\"",
        "1"
      ]
    },
    "573": {
      "op": "app_global_put",
      "stack_out": [
        "tmp%5#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%1#0"
      ]
    },
    "574": {
      "block": "stake_after_if_else@12",
      "stack_in": [
        "tmp%5#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%1#0"
      ],
      "retsub": true,
      "op": "retsub"
    },
    "575": {
      "block": "stake_bool_false@9",
      "stack_in": [
        "tmp%5#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%1#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%1#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%1#0",
        "and_result%1#0"
      ]
    },
    "576": {
      "op": "b stake_bool_merge@10"
    },
    "579": {
      "block": "stake_bool_false@5",
      "stack_in": [
        "tmp%5#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%1#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%1#0",
        "and_result%0#0"
      ]
    },
    "580": {
      "op": "b stake_bool_merge@6"
    },
    "583": {
      "subroutine": "smart_contracts.pieout.contract.Pieout.commit_rand",
      "params": {
        "box_pay#0": "uint64",
        "salt#0": "bytes"
      },
      "block": "commit_rand",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "586": {
      "op": "txn TxID",
      "defined_out": [
        "txn_id#0"
      ],
      "stack_out": [
        "txn_id#0"
      ]
    },
    "588": {
      "op": "txn Sender",
      "defined_out": [
        "txn_id#0",
        "txn_sender#0"
      ],
      "stack_out": [
        "txn_id#0",
        "txn_sender#0"
      ]
    },
    "590": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "app_address#0",
        "txn_id#0",
        "txn_sender#0"
      ],
      "stack_out": [
        "txn_id#0",
        "txn_sender#0",
        "app_address#0"
      ]
    },
    "592": {
      "op": "global Round",
      "defined_out": [
        "app_address#0",
        "current_round#0",
        "txn_id#0",
        "txn_sender#0"
      ],
      "stack_out": [
        "txn_id#0",
        "txn_sender#0",
        "app_address#0",
        "current_round#0"
      ]
    },
    "594": {
      "op": "pushbytes 0x63725f",
      "defined_out": [
        "0x63725f",
        "app_address#0",
        "current_round#0",
        "txn_id#0",
        "txn_sender#0"
      ],
      "stack_out": [
        "txn_id#0",
        "txn_sender#0",
        "app_address#0",
        "current_round#0",
        "0x63725f"
      ]
    },
    "599": {
      "op": "dig 3",
      "defined_out": [
        "0x63725f",
        "app_address#0",
        "current_round#0",
        "txn_id#0",
        "txn_sender#0",
        "txn_sender#0 (copy)"
      ],
      "stack_out": [
        "txn_id#0",
        "txn_sender#0",
        "app_address#0",
        "current_round#0",
        "0x63725f",
        "txn_sender#0 (copy)"
      ]
    },
    "601": {
      "op": "concat",
      "defined_out": [
        "app_address#0",
        "current_round#0",
        "tmp%0#0",
        "txn_id#0",
        "txn_sender#0"
      ],
      "stack_out": [
        "txn_id#0",
        "txn_sender#0",
        "app_address#0",
        "current_round#0",
        "tmp%0#0"
      ]
    },
    "602": {
      "op": "dup",
      "defined_out": [
        "app_address#0",
        "current_round#0",
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "txn_id#0",
        "txn_sender#0"
      ],
      "stack_out": [
        "txn_id#0",
        "txn_sender#0",
        "app_address#0",
        "current_round#0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "603": {
      "op": "box_len",
      "defined_out": [
        "app_address#0",
        "current_round#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0",
        "txn_id#0",
        "txn_sender#0"
      ],
      "stack_out": [
        "txn_id#0",
        "txn_sender#0",
        "app_address#0",
        "current_round#0",
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "604": {
      "op": "bury 1",
      "stack_out": [
        "txn_id#0",
        "txn_sender#0",
        "app_address#0",
        "current_round#0",
        "tmp%0#0",
        "maybe_exists%0#0"
      ]
    },
    "606": {
      "op": "!",
      "defined_out": [
        "app_address#0",
        "current_round#0",
        "tmp%0#0",
        "tmp%1#0",
        "txn_id#0",
        "txn_sender#0"
      ],
      "stack_out": [
        "txn_id#0",
        "txn_sender#0",
        "app_address#0",
        "current_round#0",
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "607": {
      "error": "commit_rand(): Transaction sender address already has existing rand commit box values.",
      "op": "assert // commit_rand(): Transaction sender address already has existing rand commit box values.",
      "stack_out": [
        "txn_id#0",
        "txn_sender#0",
        "app_address#0",
        "current_round#0",
        "tmp%0#0"
      ]
    },
    "608": {
      "op": "frame_dig -2",
      "defined_out": [
        "app_address#0",
        "box_pay#0 (copy)",
        "current_round#0",
        "tmp%0#0",
        "txn_id#0",
        "txn_sender#0"
      ],
      "stack_out": [
        "txn_id#0",
        "txn_sender#0",
        "app_address#0",
        "current_round#0",
        "tmp%0#0",
        "box_pay#0 (copy)"
      ]
    },
    "610": {
      "op": "gtxns Amount",
      "defined_out": [
        "app_address#0",
        "current_round#0",
        "tmp%0#0",
        "tmp%2#0",
        "txn_id#0",
        "txn_sender#0"
      ],
      "stack_out": [
        "txn_id#0",
        "txn_sender#0",
        "app_address#0",
        "current_round#0",
        "tmp%0#0",
        "tmp%2#0"
      ]
    },
    "612": {
      "op": "pushint 32500 // 32500",
      "defined_out": [
        "32500",
        "app_address#0",
        "current_round#0",
        "tmp%0#0",
        "tmp%2#0",
        "txn_id#0",
        "txn_sender#0"
      ],
      "stack_out": [
        "txn_id#0",
        "txn_sender#0",
        "app_address#0",
        "current_round#0",
        "tmp%0#0",
        "tmp%2#0",
        "32500"
      ]
    },
    "616": {
      "op": ">=",
      "defined_out": [
        "app_address#0",
        "current_round#0",
        "tmp%0#0",
        "tmp%3#0",
        "txn_id#0",
        "txn_sender#0"
      ],
      "stack_out": [
        "txn_id#0",
        "txn_sender#0",
        "app_address#0",
        "current_round#0",
        "tmp%0#0",
        "tmp%3#0"
      ]
    },
    "617": {
      "error": "stake(): Insufficient amount. Box pay amount does not cover application MBR.",
      "op": "assert // stake(): Insufficient amount. Box pay amount does not cover application MBR.",
      "stack_out": [
        "txn_id#0",
        "txn_sender#0",
        "app_address#0",
        "current_round#0",
        "tmp%0#0"
      ]
    },
    "618": {
      "op": "frame_dig -2",
      "stack_out": [
        "txn_id#0",
        "txn_sender#0",
        "app_address#0",
        "current_round#0",
        "tmp%0#0",
        "box_pay#0 (copy)"
      ]
    },
    "620": {
      "op": "gtxns Sender",
      "defined_out": [
        "app_address#0",
        "current_round#0",
        "tmp%0#0",
        "tmp%4#0",
        "txn_id#0",
        "txn_sender#0"
      ],
      "stack_out": [
        "txn_id#0",
        "txn_sender#0",
        "app_address#0",
        "current_round#0",
        "tmp%0#0",
        "tmp%4#0"
      ]
    },
    "622": {
      "op": "uncover 4",
      "stack_out": [
        "txn_id#0",
        "app_address#0",
        "current_round#0",
        "tmp%0#0",
        "tmp%4#0",
        "txn_sender#0"
      ]
    },
    "624": {
      "op": "==",
      "defined_out": [
        "app_address#0",
        "current_round#0",
        "tmp%0#0",
        "tmp%5#0",
        "txn_id#0"
      ],
      "stack_out": [
        "txn_id#0",
        "app_address#0",
        "current_round#0",
        "tmp%0#0",
        "tmp%5#0"
      ]
    },
    "625": {
      "error": "commit_rand(): Box payment sender address must match transaction sender address.",
      "op": "assert // commit_rand(): Box payment sender address must match transaction sender address.",
      "stack_out": [
        "txn_id#0",
        "app_address#0",
        "current_round#0",
        "tmp%0#0"
      ]
    },
    "626": {
      "op": "frame_dig -2",
      "stack_out": [
        "txn_id#0",
        "app_address#0",
        "current_round#0",
        "tmp%0#0",
        "box_pay#0 (copy)"
      ]
    },
    "628": {
      "op": "gtxns Receiver",
      "defined_out": [
        "app_address#0",
        "current_round#0",
        "tmp%0#0",
        "tmp%6#0",
        "txn_id#0"
      ],
      "stack_out": [
        "txn_id#0",
        "app_address#0",
        "current_round#0",
        "tmp%0#0",
        "tmp%6#0"
      ]
    },
    "630": {
      "op": "uncover 3",
      "stack_out": [
        "txn_id#0",
        "current_round#0",
        "tmp%0#0",
        "tmp%6#0",
        "app_address#0"
      ]
    },
    "632": {
      "op": "==",
      "defined_out": [
        "current_round#0",
        "tmp%0#0",
        "tmp%7#0",
        "txn_id#0"
      ],
      "stack_out": [
        "txn_id#0",
        "current_round#0",
        "tmp%0#0",
        "tmp%7#0"
      ]
    },
    "633": {
      "error": "commit_rand(): Box payment reciever address must match transaction sender address.",
      "op": "assert // commit_rand(): Box payment reciever address must match transaction sender address.",
      "stack_out": [
        "txn_id#0",
        "current_round#0",
        "tmp%0#0"
      ]
    },
    "634": {
      "op": "dig 1",
      "defined_out": [
        "current_round#0",
        "current_round#0 (copy)",
        "tmp%0#0",
        "txn_id#0"
      ],
      "stack_out": [
        "txn_id#0",
        "current_round#0",
        "tmp%0#0",
        "current_round#0 (copy)"
      ]
    },
    "636": {
      "op": "itob",
      "defined_out": [
        "current_round#0",
        "tmp%0#0",
        "tmp%8#0",
        "txn_id#0"
      ],
      "stack_out": [
        "txn_id#0",
        "current_round#0",
        "tmp%0#0",
        "tmp%8#0"
      ]
    },
    "637": {
      "op": "uncover 3",
      "stack_out": [
        "current_round#0",
        "tmp%0#0",
        "tmp%8#0",
        "txn_id#0"
      ]
    },
    "639": {
      "op": "swap",
      "stack_out": [
        "current_round#0",
        "tmp%0#0",
        "txn_id#0",
        "tmp%8#0"
      ]
    },
    "640": {
      "op": "concat",
      "defined_out": [
        "current_round#0",
        "tmp%0#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "current_round#0",
        "tmp%0#0",
        "tmp%9#0"
      ]
    },
    "641": {
      "op": "sha256",
      "defined_out": [
        "current_round#0",
        "tmp%0#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "current_round#0",
        "tmp%0#0",
        "tmp%10#0"
      ]
    },
    "642": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "current_round#0",
        "tmp%0#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "current_round#0",
        "tmp%0#0",
        "tmp%10#0",
        "0"
      ]
    },
    "643": {
      "op": "extract_uint16",
      "defined_out": [
        "current_round#0",
        "tmp%0#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "current_round#0",
        "tmp%0#0",
        "tmp%12#0"
      ]
    },
    "644": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "current_round#0",
        "tmp%0#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "current_round#0",
        "tmp%0#0",
        "tmp%12#0",
        "3"
      ]
    },
    "646": {
      "op": "%",
      "defined_out": [
        "current_round#0",
        "tmp%0#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "current_round#0",
        "tmp%0#0",
        "tmp%13#0"
      ]
    },
    "647": {
      "op": "intc_3 // 2",
      "defined_out": [
        "2",
        "current_round#0",
        "tmp%0#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "current_round#0",
        "tmp%0#0",
        "tmp%13#0",
        "2"
      ]
    },
    "648": {
      "op": "+",
      "defined_out": [
        "current_round#0",
        "round_offset#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "current_round#0",
        "tmp%0#0",
        "round_offset#0"
      ]
    },
    "649": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "round_offset#0",
        "current_round#0"
      ]
    },
    "651": {
      "op": "+",
      "defined_out": [
        "commit_round#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "commit_round#0"
      ]
    },
    "652": {
      "op": "itob",
      "defined_out": [
        "tmp%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "val_as_bytes%0#0"
      ]
    },
    "653": {
      "op": "box_put",
      "stack_out": []
    },
    "654": {
      "retsub": true,
      "op": "retsub"
    },
    "655": {
      "subroutine": "smart_contracts.pieout.contract.Pieout.reveal_rand",
      "params": {},
      "block": "reveal_rand",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "658": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "candidate#0"
      ]
    },
    "660": {
      "op": "pushint 6300 // 6300",
      "defined_out": [
        "6300"
      ],
      "stack_out": [
        "candidate#0",
        "6300"
      ]
    },
    "663": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "6300"
      ],
      "stack_out": [
        "candidate#0",
        "6300",
        "0"
      ]
    },
    "664": {
      "callsub": "_puya_lib.util.ensure_budget",
      "op": "callsub ensure_budget",
      "stack_out": [
        "candidate#0"
      ]
    },
    "667": {
      "op": "global Round",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "candidate#0",
        "tmp%0#0"
      ]
    },
    "669": {
      "op": "itob",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "candidate#0",
        "tmp%1#0"
      ]
    },
    "670": {
      "op": "txn TxID",
      "defined_out": [
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "candidate#0",
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "672": {
      "op": "concat",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "candidate#0",
        "tmp%3#0"
      ]
    },
    "673": {
      "op": "sha256",
      "defined_out": [
        "temp_seed#0"
      ],
      "stack_out": [
        "candidate#0",
        "temp_seed#0"
      ]
    },
    "674": {
      "op": "dup",
      "defined_out": [
        "temp_seed#0",
        "temp_seed#0 (copy)"
      ],
      "stack_out": [
        "candidate#0",
        "temp_seed#0",
        "temp_seed#0 (copy)"
      ]
    },
    "675": {
      "op": "extract 16 8",
      "defined_out": [
        "seed#0",
        "temp_seed#0"
      ],
      "stack_out": [
        "candidate#0",
        "temp_seed#0",
        "seed#0"
      ]
    },
    "678": {
      "op": "len",
      "stack_out": [
        "candidate#0",
        "temp_seed#0",
        "tmp%0#0"
      ]
    },
    "679": {
      "op": "pushint 8 // 8",
      "defined_out": [
        "8",
        "temp_seed#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "candidate#0",
        "temp_seed#0",
        "tmp%0#0",
        "8"
      ]
    },
    "681": {
      "op": "==",
      "defined_out": [
        "temp_seed#0",
        "tmp%1#1"
      ],
      "stack_out": [
        "candidate#0",
        "temp_seed#0",
        "tmp%1#1"
      ]
    },
    "682": {
      "op": "assert",
      "stack_out": [
        "candidate#0",
        "temp_seed#0"
      ]
    },
    "683": {
      "op": "pushint 16 // 16",
      "defined_out": [
        "16",
        "temp_seed#0"
      ],
      "stack_out": [
        "candidate#0",
        "temp_seed#0",
        "16"
      ]
    },
    "685": {
      "op": "extract_uint64",
      "defined_out": [
        "initial_state#0"
      ],
      "stack_out": [
        "candidate#0",
        "initial_state#0"
      ]
    },
    "686": {
      "op": "intc_0 // 0",
      "stack_out": [
        "candidate#0",
        "initial_state#0",
        "0"
      ]
    },
    "687": {
      "op": "intc 4 // 6364136223846793005",
      "defined_out": [
        "0",
        "6364136223846793005",
        "initial_state#0"
      ],
      "stack_out": [
        "candidate#0",
        "initial_state#0",
        "0",
        "6364136223846793005"
      ]
    },
    "689": {
      "op": "mulw",
      "defined_out": [
        "_high_mul#0",
        "initial_state#0",
        "low_mul#0"
      ],
      "stack_out": [
        "candidate#0",
        "initial_state#0",
        "_high_mul#0",
        "low_mul#0"
      ]
    },
    "690": {
      "op": "bury 1",
      "stack_out": [
        "candidate#0",
        "initial_state#0",
        "low_mul#0"
      ]
    },
    "692": {
      "op": "intc 5 // 1442695040888963407",
      "defined_out": [
        "1442695040888963407",
        "initial_state#0",
        "low_mul#0"
      ],
      "stack_out": [
        "candidate#0",
        "initial_state#0",
        "low_mul#0",
        "1442695040888963407"
      ]
    },
    "694": {
      "op": "addw",
      "defined_out": [
        "_high_add#0",
        "initial_state#0",
        "low_add#0"
      ],
      "stack_out": [
        "candidate#0",
        "initial_state#0",
        "_high_add#0",
        "low_add#0"
      ]
    },
    "695": {
      "op": "bury 1",
      "stack_out": [
        "candidate#0",
        "initial_state#0",
        "low_add#0"
      ]
    },
    "697": {
      "op": "addw",
      "defined_out": [
        "_high_addw#0",
        "state#2"
      ],
      "stack_out": [
        "candidate#0",
        "_high_addw#0",
        "state#2"
      ]
    },
    "698": {
      "op": "bury 1",
      "stack_out": [
        "candidate#0",
        "state#2"
      ]
    },
    "700": {
      "op": "intc 4 // 6364136223846793005",
      "stack_out": [
        "candidate#0",
        "state#2",
        "6364136223846793005"
      ]
    },
    "702": {
      "op": "mulw",
      "stack_out": [
        "candidate#0",
        "_high_mul#0",
        "low_mul#0"
      ]
    },
    "703": {
      "op": "bury 1",
      "stack_out": [
        "candidate#0",
        "low_mul#0"
      ]
    },
    "705": {
      "op": "intc 5 // 1442695040888963407",
      "stack_out": [
        "candidate#0",
        "low_mul#0",
        "1442695040888963407"
      ]
    },
    "707": {
      "op": "addw",
      "stack_out": [
        "candidate#0",
        "_high_add#0",
        "low_add#0"
      ]
    },
    "708": {
      "op": "bury 1",
      "stack_out": [
        "candidate#0",
        "low_add#0"
      ]
    },
    "710": {
      "op": "pushbytes 0x0064",
      "defined_out": [
        "low_add#0",
        "result#1"
      ],
      "stack_out": [
        "candidate#0",
        "low_add#0",
        "result#1"
      ]
    },
    "714": {
      "op": "swap",
      "defined_out": [
        "low_add#0",
        "result#1"
      ],
      "stack_out": [
        "candidate#0",
        "result#1",
        "low_add#0"
      ]
    },
    "715": {
      "op": "pushint 18446744073709486080 // 18446744073709486080",
      "defined_out": [
        "18446744073709486080",
        "low_add#0",
        "result#1"
      ],
      "stack_out": [
        "candidate#0",
        "result#1",
        "low_add#0",
        "18446744073709486080"
      ]
    },
    "726": {
      "op": "intc_1 // 1",
      "stack_out": [
        "candidate#0",
        "result#1",
        "low_add#0",
        "18446744073709486080",
        "1"
      ]
    },
    "727": {
      "op": "addw",
      "defined_out": [
        "_addw_high#0",
        "addw_low#0",
        "low_add#0",
        "result#1"
      ],
      "stack_out": [
        "candidate#0",
        "result#1",
        "low_add#0",
        "_addw_high#0",
        "addw_low#0"
      ]
    },
    "728": {
      "op": "bury 1",
      "stack_out": [
        "candidate#0",
        "result#1",
        "low_add#0",
        "addw_low#0"
      ]
    },
    "730": {
      "op": "intc 6 // 4294967295",
      "defined_out": [
        "4294967295",
        "addw_low#0",
        "low_add#0",
        "result#1"
      ],
      "stack_out": [
        "candidate#0",
        "result#1",
        "low_add#0",
        "addw_low#0",
        "4294967295"
      ]
    },
    "732": {
      "op": "&",
      "stack_out": [
        "candidate#0",
        "result#1",
        "low_add#0",
        "tmp%0#0"
      ]
    },
    "733": {
      "op": "intc 7 // 65535",
      "defined_out": [
        "65535",
        "low_add#0",
        "result#1",
        "tmp%0#0"
      ],
      "stack_out": [
        "candidate#0",
        "result#1",
        "low_add#0",
        "tmp%0#0",
        "65535"
      ]
    },
    "735": {
      "op": "%",
      "defined_out": [
        "low_add#0",
        "result#1",
        "threshold#0"
      ],
      "stack_out": [
        "candidate#0",
        "result#1",
        "low_add#0",
        "threshold#0"
      ]
    },
    "736": {
      "op": "swap",
      "defined_out": [
        "low_add#0",
        "result#1",
        "threshold#0"
      ],
      "stack_out": [
        "candidate#0",
        "result#1",
        "threshold#0",
        "low_add#0"
      ]
    },
    "737": {
      "op": "intc_0 // 0",
      "defined_out": [
        "i#3",
        "low_add#0",
        "result#1",
        "threshold#0"
      ],
      "stack_out": [
        "candidate#0",
        "result#1",
        "threshold#0",
        "low_add#0",
        "i#3"
      ]
    },
    "738": {
      "op": "swap",
      "defined_out": [
        "i#3",
        "result#1",
        "state#2",
        "threshold#0"
      ],
      "stack_out": [
        "candidate#0",
        "result#1",
        "threshold#0",
        "i#3",
        "state#2"
      ]
    },
    "739": {
      "block": "reveal_rand_for_header@14",
      "stack_in": [
        "candidate#0",
        "result#1",
        "threshold#0",
        "i#3",
        "state#2"
      ],
      "op": "frame_dig 3",
      "defined_out": [
        "i#3"
      ],
      "stack_out": [
        "candidate#0",
        "result#1",
        "threshold#0",
        "i#3",
        "state#2",
        "i#3"
      ]
    },
    "741": {
      "op": "pushint 100 // 100",
      "defined_out": [
        "100",
        "i#3"
      ],
      "stack_out": [
        "candidate#0",
        "result#1",
        "threshold#0",
        "i#3",
        "state#2",
        "i#3",
        "100"
      ]
    },
    "743": {
      "op": "<",
      "defined_out": [
        "continue_looping%1#0",
        "i#3"
      ],
      "stack_out": [
        "candidate#0",
        "result#1",
        "threshold#0",
        "i#3",
        "state#2",
        "continue_looping%1#0"
      ]
    },
    "744": {
      "op": "bz reveal_rand_after_for@19",
      "stack_out": [
        "candidate#0",
        "result#1",
        "threshold#0",
        "i#3",
        "state#2"
      ]
    },
    "747": {
      "block": "reveal_rand_while_top@16",
      "stack_in": [
        "candidate#0",
        "result#1",
        "threshold#0",
        "i#3",
        "state#2"
      ],
      "op": "frame_dig 4",
      "defined_out": [
        "state#2"
      ],
      "stack_out": [
        "candidate#0",
        "result#1",
        "threshold#0",
        "i#3",
        "state#2",
        "state#2"
      ]
    },
    "749": {
      "op": "dup",
      "defined_out": [
        "state#2",
        "state#2 (copy)"
      ],
      "stack_out": [
        "candidate#0",
        "result#1",
        "threshold#0",
        "i#3",
        "state#2",
        "state#2",
        "state#2 (copy)"
      ]
    },
    "750": {
      "op": "intc 4 // 6364136223846793005",
      "defined_out": [
        "6364136223846793005",
        "state#2",
        "state#2 (copy)"
      ],
      "stack_out": [
        "candidate#0",
        "result#1",
        "threshold#0",
        "i#3",
        "state#2",
        "state#2",
        "state#2 (copy)",
        "6364136223846793005"
      ]
    },
    "752": {
      "op": "mulw",
      "defined_out": [
        "_high_mul#0",
        "low_mul#0",
        "state#2"
      ],
      "stack_out": [
        "candidate#0",
        "result#1",
        "threshold#0",
        "i#3",
        "state#2",
        "state#2",
        "_high_mul#0",
        "low_mul#0"
      ]
    },
    "753": {
      "op": "bury 1",
      "stack_out": [
        "candidate#0",
        "result#1",
        "threshold#0",
        "i#3",
        "state#2",
        "state#2",
        "low_mul#0"
      ]
    },
    "755": {
      "op": "intc 5 // 1442695040888963407",
      "defined_out": [
        "1442695040888963407",
        "low_mul#0",
        "state#2"
      ],
      "stack_out": [
        "candidate#0",
        "result#1",
        "threshold#0",
        "i#3",
        "state#2",
        "state#2",
        "low_mul#0",
        "1442695040888963407"
      ]
    },
    "757": {
      "op": "addw",
      "defined_out": [
        "_high_add#0",
        "low_add#0",
        "state#2"
      ],
      "stack_out": [
        "candidate#0",
        "result#1",
        "threshold#0",
        "i#3",
        "state#2",
        "state#2",
        "_high_add#0",
        "low_add#0"
      ]
    },
    "758": {
      "op": "cover 2",
      "defined_out": [
        "_high_add#0",
        "low_add#0",
        "state#2"
      ],
      "stack_out": [
        "candidate#0",
        "result#1",
        "threshold#0",
        "i#3",
        "state#2",
        "low_add#0",
        "state#2",
        "_high_add#0"
      ]
    },
    "760": {
      "op": "pop",
      "stack_out": [
        "candidate#0",
        "result#1",
        "threshold#0",
        "i#3",
        "state#2",
        "low_add#0",
        "state#2"
      ]
    },
    "761": {
      "op": "dup",
      "stack_out": [
        "candidate#0",
        "result#1",
        "threshold#0",
        "i#3",
        "state#2",
        "low_add#0",
        "state#2",
        "state#2 (copy)"
      ]
    },
    "762": {
      "op": "pushint 18 // 18",
      "defined_out": [
        "18",
        "low_add#0",
        "state#2",
        "state#2 (copy)"
      ],
      "stack_out": [
        "candidate#0",
        "result#1",
        "threshold#0",
        "i#3",
        "state#2",
        "low_add#0",
        "state#2",
        "state#2 (copy)",
        "18"
      ]
    },
    "764": {
      "op": "shr",
      "defined_out": [
        "low_add#0",
        "state#2",
        "tmp%0#0"
      ],
      "stack_out": [
        "candidate#0",
        "result#1",
        "threshold#0",
        "i#3",
        "state#2",
        "low_add#0",
        "state#2",
        "tmp%0#0"
      ]
    },
    "765": {
      "op": "dig 1",
      "stack_out": [
        "candidate#0",
        "result#1",
        "threshold#0",
        "i#3",
        "state#2",
        "low_add#0",
        "state#2",
        "tmp%0#0",
        "state#2 (copy)"
      ]
    },
    "767": {
      "op": "^",
      "defined_out": [
        "low_add#0",
        "state#2",
        "tmp%1#3"
      ],
      "stack_out": [
        "candidate#0",
        "result#1",
        "threshold#0",
        "i#3",
        "state#2",
        "low_add#0",
        "state#2",
        "tmp%1#3"
      ]
    },
    "768": {
      "op": "pushint 27 // 27",
      "defined_out": [
        "27",
        "low_add#0",
        "state#2",
        "tmp%1#3"
      ],
      "stack_out": [
        "candidate#0",
        "result#1",
        "threshold#0",
        "i#3",
        "state#2",
        "low_add#0",
        "state#2",
        "tmp%1#3",
        "27"
      ]
    },
    "770": {
      "op": "shr",
      "defined_out": [
        "low_add#0",
        "state#2",
        "value#0"
      ],
      "stack_out": [
        "candidate#0",
        "result#1",
        "threshold#0",
        "i#3",
        "state#2",
        "low_add#0",
        "state#2",
        "value#0"
      ]
    },
    "771": {
      "op": "intc 6 // 4294967295",
      "defined_out": [
        "4294967295",
        "low_add#0",
        "state#2",
        "value#0"
      ],
      "stack_out": [
        "candidate#0",
        "result#1",
        "threshold#0",
        "i#3",
        "state#2",
        "low_add#0",
        "state#2",
        "value#0",
        "4294967295"
      ]
    },
    "773": {
      "op": "&",
      "stack_out": [
        "candidate#0",
        "result#1",
        "threshold#0",
        "i#3",
        "state#2",
        "low_add#0",
        "state#2",
        "value#0"
      ]
    },
    "774": {
      "op": "swap",
      "stack_out": [
        "candidate#0",
        "result#1",
        "threshold#0",
        "i#3",
        "state#2",
        "low_add#0",
        "value#0",
        "state#2"
      ]
    },
    "775": {
      "op": "pushint 59 // 59",
      "defined_out": [
        "59",
        "low_add#0",
        "state#2",
        "value#0"
      ],
      "stack_out": [
        "candidate#0",
        "result#1",
        "threshold#0",
        "i#3",
        "state#2",
        "low_add#0",
        "value#0",
        "state#2",
        "59"
      ]
    },
    "777": {
      "op": "shr",
      "defined_out": [
        "low_add#0",
        "rot#0",
        "state#2",
        "value#0"
      ],
      "stack_out": [
        "candidate#0",
        "result#1",
        "threshold#0",
        "i#3",
        "state#2",
        "low_add#0",
        "value#0",
        "rot#0"
      ]
    },
    "778": {
      "op": "dup2",
      "defined_out": [
        "low_add#0",
        "rot#0",
        "rot#0 (copy)",
        "state#2",
        "value#0",
        "value#0 (copy)"
      ],
      "stack_out": [
        "candidate#0",
        "result#1",
        "threshold#0",
        "i#3",
        "state#2",
        "low_add#0",
        "value#0",
        "rot#0",
        "value#0 (copy)",
        "rot#0 (copy)"
      ]
    },
    "779": {
      "op": "shr",
      "stack_out": [
        "candidate#0",
        "result#1",
        "threshold#0",
        "i#3",
        "state#2",
        "low_add#0",
        "value#0",
        "rot#0",
        "tmp%0#0"
      ]
    },
    "780": {
      "op": "swap",
      "stack_out": [
        "candidate#0",
        "result#1",
        "threshold#0",
        "i#3",
        "state#2",
        "low_add#0",
        "value#0",
        "tmp%0#0",
        "rot#0"
      ]
    },
    "781": {
      "op": "~",
      "defined_out": [
        "low_add#0",
        "state#2",
        "tmp%0#0",
        "tmp%0#9",
        "value#0"
      ],
      "stack_out": [
        "candidate#0",
        "result#1",
        "threshold#0",
        "i#3",
        "state#2",
        "low_add#0",
        "value#0",
        "tmp%0#0",
        "tmp%0#9"
      ]
    },
    "782": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "low_add#0",
        "state#2",
        "tmp%0#0",
        "tmp%0#9",
        "value#0"
      ],
      "stack_out": [
        "candidate#0",
        "result#1",
        "threshold#0",
        "i#3",
        "state#2",
        "low_add#0",
        "value#0",
        "tmp%0#0",
        "tmp%0#9",
        "1"
      ]
    },
    "783": {
      "op": "addw",
      "defined_out": [
        "_addw_high#0",
        "addw_low#0",
        "low_add#0",
        "state#2",
        "tmp%0#0",
        "value#0"
      ],
      "stack_out": [
        "candidate#0",
        "result#1",
        "threshold#0",
        "i#3",
        "state#2",
        "low_add#0",
        "value#0",
        "tmp%0#0",
        "_addw_high#0",
        "addw_low#0"
      ]
    },
    "784": {
      "op": "bury 1",
      "stack_out": [
        "candidate#0",
        "result#1",
        "threshold#0",
        "i#3",
        "state#2",
        "low_add#0",
        "value#0",
        "tmp%0#0",
        "addw_low#0"
      ]
    },
    "786": {
      "op": "pushint 31 // 31",
      "defined_out": [
        "31",
        "addw_low#0",
        "low_add#0",
        "state#2",
        "tmp%0#0",
        "value#0"
      ],
      "stack_out": [
        "candidate#0",
        "result#1",
        "threshold#0",
        "i#3",
        "state#2",
        "low_add#0",
        "value#0",
        "tmp%0#0",
        "addw_low#0",
        "31"
      ]
    },
    "788": {
      "op": "&",
      "defined_out": [
        "low_add#0",
        "state#2",
        "tmp%0#0",
        "tmp%2#2",
        "value#0"
      ],
      "stack_out": [
        "candidate#0",
        "result#1",
        "threshold#0",
        "i#3",
        "state#2",
        "low_add#0",
        "value#0",
        "tmp%0#0",
        "tmp%2#2"
      ]
    },
    "789": {
      "op": "uncover 2",
      "stack_out": [
        "candidate#0",
        "result#1",
        "threshold#0",
        "i#3",
        "state#2",
        "low_add#0",
        "tmp%0#0",
        "tmp%2#2",
        "value#0"
      ]
    },
    "791": {
      "op": "swap",
      "stack_out": [
        "candidate#0",
        "result#1",
        "threshold#0",
        "i#3",
        "state#2",
        "low_add#0",
        "tmp%0#0",
        "value#0",
        "tmp%2#2"
      ]
    },
    "792": {
      "op": "shl",
      "stack_out": [
        "candidate#0",
        "result#1",
        "threshold#0",
        "i#3",
        "state#2",
        "low_add#0",
        "tmp%0#0",
        "value#0"
      ]
    },
    "793": {
      "op": "intc 6 // 4294967295",
      "stack_out": [
        "candidate#0",
        "result#1",
        "threshold#0",
        "i#3",
        "state#2",
        "low_add#0",
        "tmp%0#0",
        "value#0",
        "4294967295"
      ]
    },
    "795": {
      "op": "&",
      "stack_out": [
        "candidate#0",
        "result#1",
        "threshold#0",
        "i#3",
        "state#2",
        "low_add#0",
        "tmp%0#0",
        "tmp%0#9"
      ]
    },
    "796": {
      "op": "|",
      "defined_out": [
        "candidate#0",
        "low_add#0",
        "state#2"
      ],
      "stack_out": [
        "candidate#0",
        "result#1",
        "threshold#0",
        "i#3",
        "state#2",
        "low_add#0",
        "candidate#0"
      ]
    },
    "797": {
      "op": "dup",
      "stack_out": [
        "candidate#0",
        "result#1",
        "threshold#0",
        "i#3",
        "state#2",
        "low_add#0",
        "candidate#0",
        "candidate#0"
      ]
    },
    "798": {
      "op": "frame_bury 0",
      "defined_out": [
        "candidate#0",
        "low_add#0",
        "state#2"
      ],
      "stack_out": [
        "candidate#0",
        "result#1",
        "threshold#0",
        "i#3",
        "state#2",
        "low_add#0",
        "candidate#0"
      ]
    },
    "800": {
      "op": "frame_dig 2",
      "defined_out": [
        "candidate#0",
        "low_add#0",
        "state#2",
        "threshold#0"
      ],
      "stack_out": [
        "candidate#0",
        "result#1",
        "threshold#0",
        "i#3",
        "state#2",
        "low_add#0",
        "candidate#0",
        "threshold#0"
      ]
    },
    "802": {
      "op": ">=",
      "defined_out": [
        "candidate#0",
        "low_add#0",
        "state#2",
        "threshold#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "candidate#0",
        "result#1",
        "threshold#0",
        "i#3",
        "state#2",
        "low_add#0",
        "tmp%20#0"
      ]
    },
    "803": {
      "op": "bz reveal_rand_after_if_else@18",
      "stack_out": [
        "candidate#0",
        "result#1",
        "threshold#0",
        "i#3",
        "state#2",
        "low_add#0"
      ]
    },
    "806": {
      "op": "frame_dig 0",
      "stack_out": [
        "candidate#0",
        "result#1",
        "threshold#0",
        "i#3",
        "state#2",
        "low_add#0",
        "candidate#0"
      ]
    },
    "808": {
      "op": "intc 7 // 65535",
      "defined_out": [
        "65535",
        "candidate#0",
        "low_add#0",
        "state#2",
        "threshold#0"
      ],
      "stack_out": [
        "candidate#0",
        "result#1",
        "threshold#0",
        "i#3",
        "state#2",
        "low_add#0",
        "candidate#0",
        "65535"
      ]
    },
    "810": {
      "op": "%",
      "defined_out": [
        "candidate#0",
        "low_add#0",
        "state#2",
        "threshold#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "candidate#0",
        "result#1",
        "threshold#0",
        "i#3",
        "state#2",
        "low_add#0",
        "tmp%21#0"
      ]
    },
    "811": {
      "op": "intc_1 // 1",
      "stack_out": [
        "candidate#0",
        "result#1",
        "threshold#0",
        "i#3",
        "state#2",
        "low_add#0",
        "tmp%21#0",
        "1"
      ]
    },
    "812": {
      "op": "+",
      "defined_out": [
        "candidate#0",
        "low_add#0",
        "state#2",
        "threshold#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "candidate#0",
        "result#1",
        "threshold#0",
        "i#3",
        "state#2",
        "low_add#0",
        "tmp%22#0"
      ]
    },
    "813": {
      "op": "itob",
      "defined_out": [
        "candidate#0",
        "low_add#0",
        "state#2",
        "threshold#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "candidate#0",
        "result#1",
        "threshold#0",
        "i#3",
        "state#2",
        "low_add#0",
        "tmp%23#0"
      ]
    },
    "814": {
      "op": "extract 6 2",
      "defined_out": [
        "candidate#0",
        "low_add#0",
        "state#2",
        "threshold#0",
        "tmp%24#0"
      ],
      "stack_out": [
        "candidate#0",
        "result#1",
        "threshold#0",
        "i#3",
        "state#2",
        "low_add#0",
        "tmp%24#0"
      ]
    },
    "817": {
      "op": "frame_dig 1",
      "defined_out": [
        "candidate#0",
        "low_add#0",
        "result#1",
        "state#2",
        "threshold#0",
        "tmp%24#0"
      ],
      "stack_out": [
        "candidate#0",
        "result#1",
        "threshold#0",
        "i#3",
        "state#2",
        "low_add#0",
        "tmp%24#0",
        "result#1"
      ]
    },
    "819": {
      "op": "swap",
      "stack_out": [
        "candidate#0",
        "result#1",
        "threshold#0",
        "i#3",
        "state#2",
        "low_add#0",
        "result#1",
        "tmp%24#0"
      ]
    },
    "820": {
      "op": "concat",
      "stack_out": [
        "candidate#0",
        "result#1",
        "threshold#0",
        "i#3",
        "state#2",
        "low_add#0",
        "result#1"
      ]
    },
    "821": {
      "op": "frame_bury 1",
      "defined_out": [
        "candidate#0",
        "low_add#0",
        "result#1",
        "state#2",
        "threshold#0"
      ],
      "stack_out": [
        "candidate#0",
        "result#1",
        "threshold#0",
        "i#3",
        "state#2",
        "low_add#0"
      ]
    },
    "823": {
      "op": "frame_dig 3",
      "defined_out": [
        "candidate#0",
        "i#3",
        "low_add#0",
        "result#1",
        "state#2",
        "threshold#0"
      ],
      "stack_out": [
        "candidate#0",
        "result#1",
        "threshold#0",
        "i#3",
        "state#2",
        "low_add#0",
        "i#3"
      ]
    },
    "825": {
      "op": "intc_1 // 1",
      "stack_out": [
        "candidate#0",
        "result#1",
        "threshold#0",
        "i#3",
        "state#2",
        "low_add#0",
        "i#3",
        "1"
      ]
    },
    "826": {
      "op": "+",
      "stack_out": [
        "candidate#0",
        "result#1",
        "threshold#0",
        "i#3",
        "state#2",
        "low_add#0",
        "i#3"
      ]
    },
    "827": {
      "op": "frame_bury 3",
      "defined_out": [
        "candidate#0",
        "i#3",
        "result#1",
        "state#2",
        "threshold#0"
      ],
      "stack_out": [
        "candidate#0",
        "result#1",
        "threshold#0",
        "i#3",
        "state#2",
        "state#2"
      ]
    },
    "829": {
      "op": "frame_bury 4",
      "defined_out": [
        "candidate#0",
        "i#3",
        "result#1",
        "state#2",
        "threshold#0"
      ],
      "stack_out": [
        "candidate#0",
        "result#1",
        "threshold#0",
        "i#3",
        "state#2"
      ]
    },
    "831": {
      "op": "b reveal_rand_for_header@14"
    },
    "834": {
      "block": "reveal_rand_after_if_else@18",
      "stack_in": [
        "candidate#0",
        "result#1",
        "threshold#0",
        "i#3",
        "state#2",
        "low_add#0"
      ],
      "op": "frame_bury 4",
      "defined_out": [
        "state#2"
      ],
      "stack_out": [
        "candidate#0",
        "result#1",
        "threshold#0",
        "i#3",
        "state#2"
      ]
    },
    "836": {
      "op": "b reveal_rand_while_top@16"
    },
    "839": {
      "block": "reveal_rand_after_for@19",
      "stack_in": [
        "candidate#0",
        "result#1",
        "threshold#0",
        "i#3",
        "state#2"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "result#1"
      ],
      "stack_out": [
        "candidate#0",
        "result#1",
        "threshold#0",
        "i#3",
        "state#2",
        "result#1"
      ]
    },
    "841": {
      "op": "frame_bury 0"
    },
    "843": {
      "retsub": true,
      "op": "retsub"
    },
    "844": {
      "subroutine": "smart_contracts.pieout.contract.Pieout.gamba",
      "params": {},
      "block": "gamba",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "847": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "i#0"
      ]
    },
    "849": {
      "op": "dup",
      "stack_out": [
        "i#0",
        "j#0"
      ]
    },
    "850": {
      "op": "pushint 1400 // 1400",
      "defined_out": [
        "1400"
      ],
      "stack_out": [
        "i#0",
        "j#0",
        "1400"
      ]
    },
    "853": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "1400"
      ],
      "stack_out": [
        "i#0",
        "j#0",
        "1400",
        "0"
      ]
    },
    "854": {
      "callsub": "_puya_lib.util.ensure_budget",
      "op": "callsub ensure_budget",
      "stack_out": [
        "i#0",
        "j#0"
      ]
    },
    "857": {
      "op": "txna ApplicationArgs 0"
    },
    "860": {
      "op": "global CurrentApplicationID"
    },
    "862": {
      "op": "global GroupSize"
    },
    "864": {
      "op": "dup"
    },
    "865": {
      "op": "txn Sender"
    },
    "867": {
      "op": "global Round",
      "defined_out": [
        "atxn_group_size#0",
        "current_app_id#0",
        "method_selector#0",
        "tmp%0#0",
        "txn_sender#0"
      ],
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "atxn_group_size#0",
        "txn_sender#0",
        "tmp%0#0"
      ]
    },
    "869": {
      "op": "itob",
      "defined_out": [
        "atxn_group_size#0",
        "current_app_id#0",
        "method_selector#0",
        "tmp%1#0",
        "txn_sender#0"
      ],
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "atxn_group_size#0",
        "txn_sender#0",
        "tmp%1#0"
      ]
    },
    "870": {
      "op": "txn TxID",
      "defined_out": [
        "atxn_group_size#0",
        "current_app_id#0",
        "method_selector#0",
        "tmp%1#0",
        "tmp%2#0",
        "txn_sender#0"
      ],
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "atxn_group_size#0",
        "txn_sender#0",
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "872": {
      "op": "concat",
      "defined_out": [
        "atxn_group_size#0",
        "current_app_id#0",
        "method_selector#0",
        "tmp%3#0",
        "txn_sender#0"
      ],
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "atxn_group_size#0",
        "txn_sender#0",
        "tmp%3#0"
      ]
    },
    "873": {
      "op": "sha256",
      "defined_out": [
        "atxn_group_size#0",
        "current_app_id#0",
        "method_selector#0",
        "temp_seed#0",
        "txn_sender#0"
      ],
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "atxn_group_size#0",
        "txn_sender#0",
        "temp_seed#0"
      ]
    },
    "874": {
      "op": "pushint 16 // 16",
      "defined_out": [
        "16",
        "atxn_group_size#0",
        "current_app_id#0",
        "method_selector#0",
        "temp_seed#0",
        "txn_sender#0"
      ],
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "atxn_group_size#0",
        "txn_sender#0",
        "temp_seed#0",
        "16"
      ]
    },
    "876": {
      "op": "extract_uint16",
      "defined_out": [
        "atxn_group_size#0",
        "current_app_id#0",
        "method_selector#0",
        "roll#0",
        "txn_sender#0"
      ],
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "atxn_group_size#0",
        "txn_sender#0",
        "roll#0"
      ]
    },
    "877": {
      "op": "cover 2",
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "atxn_group_size#0",
        "txn_sender#0"
      ]
    },
    "879": {
      "op": "bytec 9 // 0x705f",
      "defined_out": [
        "0x705f",
        "atxn_group_size#0",
        "current_app_id#0",
        "method_selector#0",
        "roll#0",
        "txn_sender#0"
      ],
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "atxn_group_size#0",
        "txn_sender#0",
        "0x705f"
      ]
    },
    "881": {
      "op": "swap",
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "atxn_group_size#0",
        "0x705f",
        "txn_sender#0"
      ]
    },
    "882": {
      "op": "concat",
      "defined_out": [
        "atxn_group_size#0",
        "current_app_id#0",
        "method_selector#0",
        "roll#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "atxn_group_size#0",
        "tmp%4#0"
      ]
    },
    "883": {
      "op": "dup",
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "atxn_group_size#0",
        "tmp%4#0",
        "tmp%4#0"
      ]
    },
    "884": {
      "op": "cover 2",
      "defined_out": [
        "atxn_group_size#0",
        "current_app_id#0",
        "method_selector#0",
        "roll#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "atxn_group_size#0",
        "tmp%4#0"
      ]
    },
    "886": {
      "op": "box_get",
      "defined_out": [
        "atxn_group_size#0",
        "current_app_id#0",
        "maybe_exists%0#0",
        "method_selector#0",
        "player#0",
        "roll#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "atxn_group_size#0",
        "player#0",
        "maybe_exists%0#0"
      ]
    },
    "887": {
      "op": "swap",
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "atxn_group_size#0",
        "maybe_exists%0#0",
        "player#0"
      ]
    },
    "888": {
      "op": "dup",
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "atxn_group_size#0",
        "maybe_exists%0#0",
        "player#0",
        "player#0 (copy)"
      ]
    },
    "889": {
      "op": "cover 2",
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "atxn_group_size#0",
        "player#0",
        "maybe_exists%0#0",
        "player#0"
      ]
    },
    "891": {
      "op": "cover 3",
      "defined_out": [
        "atxn_group_size#0",
        "current_app_id#0",
        "maybe_exists%0#0",
        "method_selector#0",
        "player#0",
        "roll#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "atxn_group_size#0",
        "player#0",
        "maybe_exists%0#0"
      ]
    },
    "893": {
      "error": "check self.box_player entry exists",
      "op": "assert // check self.box_player entry exists",
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "atxn_group_size#0",
        "player#0"
      ]
    },
    "894": {
      "op": "intc_0 // 0",
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "atxn_group_size#0",
        "player#0",
        "0"
      ]
    },
    "895": {
      "op": "extract_uint16",
      "defined_out": [
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "method_selector#0",
        "player#0",
        "roll#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "atxn_group_size#0",
        "current_player_turn#0"
      ]
    },
    "896": {
      "op": "swap",
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0",
        "atxn_group_size#0"
      ]
    },
    "897": {
      "op": "intc_3 // 2",
      "defined_out": [
        "2",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "method_selector#0",
        "player#0",
        "roll#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0",
        "atxn_group_size#0",
        "2"
      ]
    },
    "898": {
      "op": ">=",
      "defined_out": [
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "method_selector#0",
        "player#0",
        "roll#0",
        "tmp%4#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0",
        "tmp%6#0"
      ]
    },
    "899": {
      "op": "bz gamba_bool_false@3",
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0"
      ]
    },
    "902": {
      "op": "frame_dig 4",
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0",
        "atxn_group_size#0"
      ]
    },
    "904": {
      "op": "intc_2 // 10",
      "defined_out": [
        "10",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "method_selector#0",
        "player#0",
        "roll#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0",
        "atxn_group_size#0",
        "10"
      ]
    },
    "905": {
      "op": "<=",
      "defined_out": [
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "method_selector#0",
        "player#0",
        "roll#0",
        "tmp%4#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0",
        "tmp%7#0"
      ]
    },
    "906": {
      "op": "bz gamba_bool_false@3",
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0"
      ]
    },
    "909": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "method_selector#0",
        "player#0",
        "roll#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0",
        "and_result%0#0"
      ]
    },
    "910": {
      "block": "gamba_bool_merge@4",
      "stack_in": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0",
        "and_result%0#0"
      ],
      "error": "gamba(): Rejected. Atomic transaction group size is out of bounds.",
      "op": "assert // gamba(): Rejected. Atomic transaction group size is out of bounds.",
      "defined_out": [],
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0"
      ]
    },
    "911": {
      "op": "intc_0 // 0",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0",
        "i#0"
      ]
    },
    "912": {
      "op": "frame_bury 0",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0"
      ]
    },
    "914": {
      "block": "gamba_for_header@5",
      "stack_in": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0",
        "i#0"
      ]
    },
    "916": {
      "op": "frame_dig 4",
      "defined_out": [
        "atxn_group_size#0",
        "i#0"
      ],
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0",
        "i#0",
        "atxn_group_size#0"
      ]
    },
    "918": {
      "op": "<",
      "defined_out": [
        "atxn_group_size#0",
        "continue_looping%0#0",
        "i#0"
      ],
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0",
        "continue_looping%0#0"
      ]
    },
    "919": {
      "op": "bz gamba_after_for@12",
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0"
      ]
    },
    "922": {
      "op": "intc_0 // 0",
      "defined_out": [
        "atxn_group_size#0",
        "i#0",
        "j#0"
      ],
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0",
        "j#0"
      ]
    },
    "923": {
      "op": "frame_bury 1",
      "defined_out": [
        "atxn_group_size#0",
        "i#0",
        "j#0"
      ],
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0"
      ]
    },
    "925": {
      "block": "gamba_for_header@7",
      "stack_in": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "j#0"
      ],
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0",
        "j#0"
      ]
    },
    "927": {
      "op": "frame_dig 0",
      "defined_out": [
        "i#0",
        "j#0"
      ],
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0",
        "j#0",
        "i#0"
      ]
    },
    "929": {
      "op": "<",
      "defined_out": [
        "continue_looping%1#0",
        "i#0",
        "j#0"
      ],
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0",
        "continue_looping%1#0"
      ]
    },
    "930": {
      "op": "bz gamba_after_for@10",
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0"
      ]
    },
    "933": {
      "op": "frame_dig 0",
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0",
        "i#0"
      ]
    },
    "935": {
      "op": "gtxns Sender",
      "defined_out": [
        "i#0",
        "j#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0",
        "tmp%8#0"
      ]
    },
    "937": {
      "op": "frame_dig 1",
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0",
        "tmp%8#0",
        "j#0"
      ]
    },
    "939": {
      "op": "dup",
      "defined_out": [
        "i#0",
        "j#0",
        "j#0 (copy)",
        "tmp%8#0"
      ],
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0",
        "tmp%8#0",
        "j#0 (copy)",
        "j#0 (copy)"
      ]
    },
    "940": {
      "op": "cover 2",
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0",
        "j#0",
        "tmp%8#0",
        "j#0 (copy)"
      ]
    },
    "942": {
      "op": "gtxns Sender",
      "defined_out": [
        "i#0",
        "j#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0",
        "j#0",
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "944": {
      "op": "!=",
      "defined_out": [
        "i#0",
        "j#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0",
        "j#0",
        "tmp%10#0"
      ]
    },
    "945": {
      "error": "gamba(): Rejected. Every transaction in group must have unique sender address.",
      "op": "assert // gamba(): Rejected. Every transaction in group must have unique sender address.",
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0",
        "j#0"
      ]
    },
    "946": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "i#0",
        "j#0"
      ],
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0",
        "j#0",
        "1"
      ]
    },
    "947": {
      "op": "+",
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0",
        "j#0"
      ]
    },
    "948": {
      "op": "frame_bury 1",
      "defined_out": [
        "i#0",
        "j#0"
      ],
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0"
      ]
    },
    "950": {
      "op": "b gamba_for_header@7"
    },
    "953": {
      "block": "gamba_after_for@10",
      "stack_in": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0",
        "i#0"
      ]
    },
    "955": {
      "op": "dup",
      "defined_out": [
        "i#0",
        "i#0 (copy)"
      ],
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0",
        "i#0",
        "i#0 (copy)"
      ]
    },
    "956": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "i#0",
        "i#0 (copy)"
      ],
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0",
        "i#0",
        "i#0 (copy)",
        "0"
      ]
    },
    "957": {
      "op": "gtxnsas ApplicationArgs",
      "defined_out": [
        "i#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0",
        "i#0",
        "tmp%11#0"
      ]
    },
    "959": {
      "op": "frame_dig 2",
      "defined_out": [
        "i#0",
        "method_selector#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0",
        "i#0",
        "tmp%11#0",
        "method_selector#0"
      ]
    },
    "961": {
      "op": "==",
      "defined_out": [
        "i#0",
        "method_selector#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0",
        "i#0",
        "tmp%12#0"
      ]
    },
    "962": {
      "error": "gamba(): Rejected. Method selector mismatch not allowed.",
      "op": "assert // gamba(): Rejected. Method selector mismatch not allowed.",
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0",
        "i#0"
      ]
    },
    "963": {
      "op": "dup",
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0",
        "i#0",
        "i#0 (copy)"
      ]
    },
    "964": {
      "op": "gtxns ApplicationID",
      "defined_out": [
        "i#0",
        "method_selector#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0",
        "i#0",
        "tmp%13#0"
      ]
    },
    "966": {
      "op": "frame_dig 3",
      "defined_out": [
        "current_app_id#0",
        "i#0",
        "method_selector#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0",
        "i#0",
        "tmp%13#0",
        "current_app_id#0"
      ]
    },
    "968": {
      "op": "==",
      "defined_out": [
        "current_app_id#0",
        "i#0",
        "method_selector#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0",
        "i#0",
        "tmp%14#0"
      ]
    },
    "969": {
      "error": "gamba(): Rejected. Application ID mismatch not allowed.",
      "op": "assert // gamba(): Rejected. Application ID mismatch not allowed.",
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0",
        "i#0"
      ]
    },
    "970": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "current_app_id#0",
        "i#0",
        "method_selector#0"
      ],
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0",
        "i#0",
        "1"
      ]
    },
    "971": {
      "op": "+",
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0",
        "i#0"
      ]
    },
    "972": {
      "op": "frame_bury 0",
      "defined_out": [
        "current_app_id#0",
        "i#0",
        "method_selector#0"
      ],
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0"
      ]
    },
    "974": {
      "op": "b gamba_for_header@5"
    },
    "977": {
      "block": "gamba_after_for@12",
      "stack_in": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0",
        "0"
      ]
    },
    "978": {
      "op": "bytec 4 // \"staking_finalized\"",
      "defined_out": [
        "\"staking_finalized\"",
        "0"
      ],
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0",
        "0",
        "\"staking_finalized\""
      ]
    },
    "980": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "981": {
      "error": "check self.staking_finalized exists",
      "op": "assert // check self.staking_finalized exists",
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0",
        "maybe_value%1#0"
      ]
    },
    "982": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0",
        "maybe_value%1#0",
        "1"
      ]
    },
    "983": {
      "op": "==",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0",
        "tmp%15#0"
      ]
    },
    "984": {
      "error": "gamba(): Rejected. Gamba not available until staking is finalized.",
      "op": "assert // gamba(): Rejected. Gamba not available until staking is finalized.",
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0"
      ]
    },
    "985": {
      "op": "intc_0 // 0",
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0",
        "0"
      ]
    },
    "986": {
      "op": "bytec_0 // \"total_players\"",
      "defined_out": [
        "\"total_players\"",
        "0"
      ],
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0",
        "0",
        "\"total_players\""
      ]
    },
    "987": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "988": {
      "error": "check self.total_players exists",
      "op": "assert // check self.total_players exists",
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0",
        "maybe_value%2#0"
      ]
    },
    "989": {
      "op": "intc_3 // 2",
      "defined_out": [
        "2",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0",
        "maybe_value%2#0",
        "2"
      ]
    },
    "990": {
      "op": ">=",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0",
        "tmp%16#0"
      ]
    },
    "991": {
      "op": "bz gamba_bool_false@15",
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0"
      ]
    },
    "994": {
      "op": "intc_0 // 0",
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0",
        "0"
      ]
    },
    "995": {
      "op": "bytec_0 // \"total_players\"",
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0",
        "0",
        "\"total_players\""
      ]
    },
    "996": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "997": {
      "error": "check self.total_players exists",
      "op": "assert // check self.total_players exists",
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0",
        "maybe_value%3#0"
      ]
    },
    "998": {
      "op": "intc_2 // 10",
      "defined_out": [
        "10",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0",
        "maybe_value%3#0",
        "10"
      ]
    },
    "999": {
      "op": "<=",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0",
        "tmp%17#0"
      ]
    },
    "1000": {
      "op": "bz gamba_bool_false@15",
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0"
      ]
    },
    "1003": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%1#0"
      ],
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0",
        "and_result%1#0"
      ]
    },
    "1004": {
      "block": "gamba_bool_merge@16",
      "stack_in": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0",
        "and_result%1#0"
      ],
      "error": "gamba(): Rejected. Total number of players must not be out of bounds.",
      "op": "assert // gamba(): Rejected. Total number of players must not be out of bounds.",
      "defined_out": [],
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0"
      ]
    },
    "1005": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0",
        "0"
      ]
    },
    "1006": {
      "op": "bytec_2 // \"current_turn\"",
      "defined_out": [
        "\"current_turn\"",
        "0"
      ],
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0",
        "0",
        "\"current_turn\""
      ]
    },
    "1007": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "1008": {
      "error": "check self.current_turn exists",
      "op": "assert // check self.current_turn exists",
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0",
        "maybe_value%4#0"
      ]
    },
    "1009": {
      "op": "frame_dig 8",
      "defined_out": [
        "current_player_turn#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0",
        "maybe_value%4#0",
        "current_player_turn#0"
      ]
    },
    "1011": {
      "op": "==",
      "defined_out": [
        "current_player_turn#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0",
        "tmp%18#0"
      ]
    },
    "1012": {
      "error": "gamba(): Rejected. Transaction sender turn is not aligned with current turn.",
      "op": "assert // gamba(): Rejected. Transaction sender turn is not aligned with current turn.",
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0"
      ]
    },
    "1013": {
      "op": "frame_dig 5",
      "defined_out": [
        "current_player_turn#0",
        "roll#0"
      ],
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0",
        "roll#0"
      ]
    },
    "1015": {
      "op": "pushint 33333 // 33333",
      "defined_out": [
        "33333",
        "current_player_turn#0",
        "roll#0"
      ],
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0",
        "roll#0",
        "33333"
      ]
    },
    "1019": {
      "op": ">=",
      "defined_out": [
        "current_player_turn#0",
        "roll#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0",
        "tmp%19#0"
      ]
    },
    "1020": {
      "op": "bz gamba_else_body@18",
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0"
      ]
    },
    "1023": {
      "op": "frame_dig 8",
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0",
        "current_player_turn#0"
      ]
    },
    "1025": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "current_player_turn#0",
        "roll#0"
      ],
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0",
        "current_player_turn#0",
        "1"
      ]
    },
    "1026": {
      "op": "+",
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0",
        "current_player_turn#0"
      ]
    },
    "1027": {
      "op": "itob",
      "defined_out": [
        "current_player_turn#0",
        "roll#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0",
        "val_as_bytes%0#0"
      ]
    },
    "1028": {
      "op": "dup",
      "defined_out": [
        "current_player_turn#0",
        "roll#0",
        "val_as_bytes%0#0",
        "val_as_bytes%0#0 (copy)"
      ],
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0",
        "val_as_bytes%0#0",
        "val_as_bytes%0#0 (copy)"
      ]
    },
    "1029": {
      "op": "bitlen",
      "defined_out": [
        "bitlen%0#0",
        "current_player_turn#0",
        "roll#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0",
        "val_as_bytes%0#0",
        "bitlen%0#0"
      ]
    },
    "1030": {
      "op": "pushint 16 // 16",
      "defined_out": [
        "16",
        "bitlen%0#0",
        "current_player_turn#0",
        "roll#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0",
        "val_as_bytes%0#0",
        "bitlen%0#0",
        "16"
      ]
    },
    "1032": {
      "op": "<=",
      "defined_out": [
        "current_player_turn#0",
        "no_overflow%0#0",
        "roll#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0",
        "val_as_bytes%0#0",
        "no_overflow%0#0"
      ]
    },
    "1033": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0",
        "val_as_bytes%0#0"
      ]
    },
    "1034": {
      "op": "extract 6 2",
      "defined_out": [
        "current_player_turn#0",
        "roll#0",
        "uint16%0#0"
      ],
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0",
        "uint16%0#0"
      ]
    },
    "1037": {
      "op": "frame_dig 7",
      "defined_out": [
        "current_player_turn#0",
        "player#0",
        "roll#0",
        "uint16%0#0"
      ],
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0",
        "uint16%0#0",
        "player#0"
      ]
    },
    "1039": {
      "op": "swap",
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0",
        "player#0",
        "uint16%0#0"
      ]
    },
    "1040": {
      "op": "replace2 0",
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0",
        "player#0"
      ]
    },
    "1042": {
      "op": "frame_dig 6",
      "defined_out": [
        "current_player_turn#0",
        "player#0",
        "roll#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0",
        "player#0",
        "tmp%4#0"
      ]
    },
    "1044": {
      "op": "swap",
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0",
        "tmp%4#0",
        "player#0"
      ]
    },
    "1045": {
      "op": "box_put",
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0"
      ]
    },
    "1046": {
      "block": "gamba_after_if_else@19",
      "stack_in": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0",
        "0"
      ]
    },
    "1047": {
      "op": "bytec_3 // \"players_pending\"",
      "defined_out": [
        "\"players_pending\"",
        "0"
      ],
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0",
        "0",
        "\"players_pending\""
      ]
    },
    "1048": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%6#0",
        "maybe_value%6#0"
      ],
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0",
        "maybe_value%6#0",
        "maybe_exists%6#0"
      ]
    },
    "1049": {
      "error": "check self.players_pending exists",
      "op": "assert // check self.players_pending exists",
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0",
        "maybe_value%6#0"
      ]
    },
    "1050": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%6#0"
      ],
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0",
        "maybe_value%6#0",
        "1"
      ]
    },
    "1051": {
      "op": "+",
      "defined_out": [
        "new_state_value%1#0"
      ],
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0",
        "new_state_value%1#0"
      ]
    },
    "1052": {
      "op": "bytec_3 // \"players_pending\"",
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0",
        "new_state_value%1#0",
        "\"players_pending\""
      ]
    },
    "1053": {
      "op": "swap",
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0",
        "\"players_pending\"",
        "new_state_value%1#0"
      ]
    },
    "1054": {
      "op": "app_global_put",
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0"
      ]
    },
    "1055": {
      "op": "intc_0 // 0",
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0",
        "0"
      ]
    },
    "1056": {
      "op": "bytec_3 // \"players_pending\"",
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0",
        "0",
        "\"players_pending\""
      ]
    },
    "1057": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%7#0",
        "maybe_value%7#0"
      ],
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0",
        "maybe_value%7#0",
        "maybe_exists%7#0"
      ]
    },
    "1058": {
      "error": "check self.players_pending exists",
      "op": "assert // check self.players_pending exists",
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0",
        "maybe_value%7#0"
      ]
    },
    "1059": {
      "op": "intc_0 // 0",
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0",
        "maybe_value%7#0",
        "0"
      ]
    },
    "1060": {
      "op": "bytec_0 // \"total_players\"",
      "defined_out": [
        "\"total_players\"",
        "0",
        "maybe_value%7#0"
      ],
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0",
        "maybe_value%7#0",
        "0",
        "\"total_players\""
      ]
    },
    "1061": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%8#0",
        "maybe_value%7#0",
        "maybe_value%8#0"
      ],
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "maybe_exists%8#0"
      ]
    },
    "1062": {
      "error": "check self.total_players exists",
      "op": "assert // check self.total_players exists",
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0",
        "maybe_value%7#0",
        "maybe_value%8#0"
      ]
    },
    "1063": {
      "op": "==",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0",
        "tmp%21#0"
      ]
    },
    "1064": {
      "op": "bz gamba_after_if_else@23",
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0"
      ]
    },
    "1067": {
      "op": "intc_0 // 0",
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0",
        "0"
      ]
    },
    "1068": {
      "op": "bytec_1 // \"players_elim\"",
      "defined_out": [
        "\"players_elim\"",
        "0"
      ],
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0",
        "0",
        "\"players_elim\""
      ]
    },
    "1069": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%9#0",
        "maybe_value%9#0"
      ],
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0",
        "maybe_value%9#0",
        "maybe_exists%9#0"
      ]
    },
    "1070": {
      "error": "check self.players_elim exists",
      "op": "assert // check self.players_elim exists",
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0",
        "maybe_value%9#0"
      ]
    },
    "1071": {
      "op": "intc_0 // 0",
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0",
        "maybe_value%9#0",
        "0"
      ]
    },
    "1072": {
      "op": "bytec_0 // \"total_players\"",
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0",
        "maybe_value%9#0",
        "0",
        "\"total_players\""
      ]
    },
    "1073": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%10#0",
        "maybe_value%10#0",
        "maybe_value%9#0"
      ],
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0",
        "maybe_value%9#0",
        "maybe_value%10#0",
        "maybe_exists%10#0"
      ]
    },
    "1074": {
      "error": "check self.total_players exists",
      "op": "assert // check self.total_players exists",
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0",
        "maybe_value%9#0",
        "maybe_value%10#0"
      ]
    },
    "1075": {
      "op": "!=",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0",
        "tmp%22#0"
      ]
    },
    "1076": {
      "op": "bz gamba_after_if_else@22",
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0"
      ]
    },
    "1079": {
      "op": "intc_0 // 0",
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0",
        "0"
      ]
    },
    "1080": {
      "op": "bytec_0 // \"total_players\"",
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0",
        "0",
        "\"total_players\""
      ]
    },
    "1081": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%11#0",
        "maybe_value%11#0"
      ],
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0",
        "maybe_value%11#0",
        "maybe_exists%11#0"
      ]
    },
    "1082": {
      "error": "check self.total_players exists",
      "op": "assert // check self.total_players exists",
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0",
        "maybe_value%11#0"
      ]
    },
    "1083": {
      "op": "intc_0 // 0",
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0",
        "maybe_value%11#0",
        "0"
      ]
    },
    "1084": {
      "op": "bytec_1 // \"players_elim\"",
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0",
        "maybe_value%11#0",
        "0",
        "\"players_elim\""
      ]
    },
    "1085": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%12#0",
        "maybe_value%11#0",
        "maybe_value%12#0"
      ],
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0",
        "maybe_value%11#0",
        "maybe_value%12#0",
        "maybe_exists%12#0"
      ]
    },
    "1086": {
      "error": "check self.players_elim exists",
      "op": "assert // check self.players_elim exists",
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0",
        "maybe_value%11#0",
        "maybe_value%12#0"
      ]
    },
    "1087": {
      "op": "-",
      "defined_out": [
        "new_state_value%2#0"
      ],
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0",
        "new_state_value%2#0"
      ]
    },
    "1088": {
      "op": "bytec_0 // \"total_players\"",
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0",
        "new_state_value%2#0",
        "\"total_players\""
      ]
    },
    "1089": {
      "op": "swap",
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0",
        "\"total_players\"",
        "new_state_value%2#0"
      ]
    },
    "1090": {
      "op": "app_global_put",
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0"
      ]
    },
    "1091": {
      "op": "intc_0 // 0",
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0",
        "0"
      ]
    },
    "1092": {
      "op": "bytec_2 // \"current_turn\"",
      "defined_out": [
        "\"current_turn\"",
        "0"
      ],
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0",
        "0",
        "\"current_turn\""
      ]
    },
    "1093": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%13#0",
        "maybe_value%13#0"
      ],
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0",
        "maybe_value%13#0",
        "maybe_exists%13#0"
      ]
    },
    "1094": {
      "error": "check self.current_turn exists",
      "op": "assert // check self.current_turn exists",
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0",
        "maybe_value%13#0"
      ]
    },
    "1095": {
      "op": "intc_1 // 1",
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0",
        "maybe_value%13#0",
        "1"
      ]
    },
    "1096": {
      "op": "+",
      "defined_out": [
        "new_state_value%3#0"
      ],
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0",
        "new_state_value%3#0"
      ]
    },
    "1097": {
      "op": "bytec_2 // \"current_turn\"",
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0",
        "new_state_value%3#0",
        "\"current_turn\""
      ]
    },
    "1098": {
      "op": "swap",
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0",
        "\"current_turn\"",
        "new_state_value%3#0"
      ]
    },
    "1099": {
      "op": "app_global_put",
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0"
      ]
    },
    "1100": {
      "block": "gamba_after_if_else@22",
      "stack_in": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0"
      ],
      "op": "bytec_1 // \"players_elim\"",
      "defined_out": [
        "\"players_elim\""
      ],
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0",
        "\"players_elim\""
      ]
    },
    "1101": {
      "op": "intc_0 // 0",
      "defined_out": [
        "\"players_elim\"",
        "0"
      ],
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0",
        "\"players_elim\"",
        "0"
      ]
    },
    "1102": {
      "op": "app_global_put",
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0"
      ]
    },
    "1103": {
      "op": "bytec_3 // \"players_pending\"",
      "defined_out": [
        "\"players_pending\""
      ],
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0",
        "\"players_pending\""
      ]
    },
    "1104": {
      "op": "intc_0 // 0",
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0",
        "\"players_pending\"",
        "0"
      ]
    },
    "1105": {
      "op": "app_global_put",
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0"
      ]
    },
    "1106": {
      "block": "gamba_after_if_else@23",
      "stack_in": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0"
      ],
      "op": "frame_dig 5",
      "defined_out": [
        "roll#0"
      ],
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0",
        "roll#0"
      ]
    },
    "1108": {
      "op": "frame_bury 0"
    },
    "1110": {
      "retsub": true,
      "op": "retsub"
    },
    "1111": {
      "block": "gamba_else_body@18",
      "stack_in": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0",
        "0"
      ]
    },
    "1112": {
      "op": "bytec_1 // \"players_elim\"",
      "defined_out": [
        "\"players_elim\"",
        "0"
      ],
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0",
        "0",
        "\"players_elim\""
      ]
    },
    "1113": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%5#0",
        "maybe_value%5#0"
      ],
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "1114": {
      "error": "check self.players_elim exists",
      "op": "assert // check self.players_elim exists",
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0",
        "maybe_value%5#0"
      ]
    },
    "1115": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%5#0"
      ],
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0",
        "maybe_value%5#0",
        "1"
      ]
    },
    "1116": {
      "op": "+",
      "defined_out": [
        "new_state_value%0#0"
      ],
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0",
        "new_state_value%0#0"
      ]
    },
    "1117": {
      "op": "bytec_1 // \"players_elim\"",
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0",
        "new_state_value%0#0",
        "\"players_elim\""
      ]
    },
    "1118": {
      "op": "swap",
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0",
        "\"players_elim\"",
        "new_state_value%0#0"
      ]
    },
    "1119": {
      "op": "app_global_put",
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0"
      ]
    },
    "1120": {
      "op": "b gamba_after_if_else@19"
    },
    "1123": {
      "block": "gamba_bool_false@15",
      "stack_in": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%1#0"
      ],
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0",
        "and_result%1#0"
      ]
    },
    "1124": {
      "op": "b gamba_bool_merge@16"
    },
    "1127": {
      "block": "gamba_bool_false@3",
      "stack_in": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "i#0",
        "j#0",
        "method_selector#0",
        "current_app_id#0",
        "atxn_group_size#0",
        "roll#0",
        "tmp%4#0",
        "player#0",
        "current_player_turn#0",
        "and_result%0#0"
      ]
    },
    "1128": {
      "op": "b gamba_bool_merge@4"
    },
    "1131": {
      "subroutine": "smart_contracts.pieout.contract.Pieout.claim_prize_pool",
      "params": {},
      "block": "claim_prize_pool",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "txn_sender#0"
      ],
      "stack_out": [
        "txn_sender#0"
      ]
    },
    "1133": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "txn_sender#0"
      ],
      "stack_out": [
        "txn_sender#0",
        "0"
      ]
    },
    "1134": {
      "op": "bytec 4 // \"staking_finalized\"",
      "defined_out": [
        "\"staking_finalized\"",
        "0",
        "txn_sender#0"
      ],
      "stack_out": [
        "txn_sender#0",
        "0",
        "\"staking_finalized\""
      ]
    },
    "1136": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "txn_sender#0"
      ],
      "stack_out": [
        "txn_sender#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1137": {
      "error": "check self.staking_finalized exists",
      "op": "assert // check self.staking_finalized exists",
      "stack_out": [
        "txn_sender#0",
        "maybe_value%0#0"
      ]
    },
    "1138": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%0#0",
        "txn_sender#0"
      ],
      "stack_out": [
        "txn_sender#0",
        "maybe_value%0#0",
        "1"
      ]
    },
    "1139": {
      "op": "==",
      "defined_out": [
        "tmp%0#0",
        "txn_sender#0"
      ],
      "stack_out": [
        "txn_sender#0",
        "tmp%0#0"
      ]
    },
    "1140": {
      "error": "claim_prize_pool(): Rejected. Premature attempt to claim prize pool. Staking must be finalized first.",
      "op": "assert // claim_prize_pool(): Rejected. Premature attempt to claim prize pool. Staking must be finalized first.",
      "stack_out": [
        "txn_sender#0"
      ]
    },
    "1141": {
      "op": "intc_0 // 0",
      "stack_out": [
        "txn_sender#0",
        "0"
      ]
    },
    "1142": {
      "op": "bytec_0 // \"total_players\"",
      "defined_out": [
        "\"total_players\"",
        "0",
        "txn_sender#0"
      ],
      "stack_out": [
        "txn_sender#0",
        "0",
        "\"total_players\""
      ]
    },
    "1143": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "txn_sender#0"
      ],
      "stack_out": [
        "txn_sender#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1144": {
      "error": "check self.total_players exists",
      "op": "assert // check self.total_players exists",
      "stack_out": [
        "txn_sender#0",
        "maybe_value%1#0"
      ]
    },
    "1145": {
      "op": "intc_1 // 1",
      "stack_out": [
        "txn_sender#0",
        "maybe_value%1#0",
        "1"
      ]
    },
    "1146": {
      "op": "==",
      "defined_out": [
        "tmp%1#0",
        "txn_sender#0"
      ],
      "stack_out": [
        "txn_sender#0",
        "tmp%1#0"
      ]
    },
    "1147": {
      "error": "claim_prize_pool(): Rejected. Premature attempt to claim prize pool. Winner not decided yet.",
      "op": "assert // claim_prize_pool(): Rejected. Premature attempt to claim prize pool. Winner not decided yet.",
      "stack_out": [
        "txn_sender#0"
      ]
    },
    "1148": {
      "op": "intc_0 // 0",
      "stack_out": [
        "txn_sender#0",
        "0"
      ]
    },
    "1149": {
      "op": "bytec 8 // \"prize_pool_claimed\"",
      "defined_out": [
        "\"prize_pool_claimed\"",
        "0",
        "txn_sender#0"
      ],
      "stack_out": [
        "txn_sender#0",
        "0",
        "\"prize_pool_claimed\""
      ]
    },
    "1151": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "txn_sender#0"
      ],
      "stack_out": [
        "txn_sender#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1152": {
      "error": "check self.prize_pool_claimed exists",
      "op": "assert // check self.prize_pool_claimed exists",
      "stack_out": [
        "txn_sender#0",
        "maybe_value%2#0"
      ]
    },
    "1153": {
      "op": "!",
      "defined_out": [
        "tmp%2#0",
        "txn_sender#0"
      ],
      "stack_out": [
        "txn_sender#0",
        "tmp%2#0"
      ]
    },
    "1154": {
      "error": "claim_prize_pool(): Rejected. Prize pool already claimed.",
      "op": "assert // claim_prize_pool(): Rejected. Prize pool already claimed.",
      "stack_out": [
        "txn_sender#0"
      ]
    },
    "1155": {
      "op": "bytec 9 // 0x705f",
      "defined_out": [
        "0x705f",
        "txn_sender#0"
      ],
      "stack_out": [
        "txn_sender#0",
        "0x705f"
      ]
    },
    "1157": {
      "op": "dig 1",
      "defined_out": [
        "0x705f",
        "txn_sender#0",
        "txn_sender#0 (copy)"
      ],
      "stack_out": [
        "txn_sender#0",
        "0x705f",
        "txn_sender#0 (copy)"
      ]
    },
    "1159": {
      "op": "concat",
      "defined_out": [
        "tmp%3#0",
        "txn_sender#0"
      ],
      "stack_out": [
        "txn_sender#0",
        "tmp%3#0"
      ]
    },
    "1160": {
      "op": "dup",
      "defined_out": [
        "tmp%3#0",
        "tmp%3#0 (copy)",
        "txn_sender#0"
      ],
      "stack_out": [
        "txn_sender#0",
        "tmp%3#0",
        "tmp%3#0 (copy)"
      ]
    },
    "1161": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "tmp%3#0",
        "txn_sender#0"
      ],
      "stack_out": [
        "txn_sender#0",
        "tmp%3#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "1162": {
      "op": "bury 1",
      "stack_out": [
        "txn_sender#0",
        "tmp%3#0",
        "maybe_exists%3#0"
      ]
    },
    "1164": {
      "error": "claim_prize_pool(): Rejected. Transaction sender has no box player data to evaluate against.",
      "op": "assert // claim_prize_pool(): Rejected. Transaction sender has no box player data to evaluate against.",
      "stack_out": [
        "txn_sender#0",
        "tmp%3#0"
      ]
    },
    "1165": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%4#0",
        "player#0",
        "txn_sender#0"
      ],
      "stack_out": [
        "txn_sender#0",
        "player#0",
        "maybe_exists%4#0"
      ]
    },
    "1166": {
      "error": "check self.box_player entry exists",
      "op": "assert // check self.box_player entry exists",
      "stack_out": [
        "txn_sender#0",
        "player#0"
      ]
    },
    "1167": {
      "error": "Index access is out of bounds",
      "op": "extract 0 2 // on error: Index access is out of bounds",
      "defined_out": [
        "reinterpret_biguint%0#0",
        "txn_sender#0"
      ],
      "stack_out": [
        "txn_sender#0",
        "reinterpret_biguint%0#0"
      ]
    },
    "1170": {
      "op": "intc_0 // 0",
      "stack_out": [
        "txn_sender#0",
        "reinterpret_biguint%0#0",
        "0"
      ]
    },
    "1171": {
      "op": "bytec_2 // \"current_turn\"",
      "defined_out": [
        "\"current_turn\"",
        "0",
        "reinterpret_biguint%0#0",
        "txn_sender#0"
      ],
      "stack_out": [
        "txn_sender#0",
        "reinterpret_biguint%0#0",
        "0",
        "\"current_turn\""
      ]
    },
    "1172": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%5#0",
        "maybe_value%5#0",
        "reinterpret_biguint%0#0",
        "txn_sender#0"
      ],
      "stack_out": [
        "txn_sender#0",
        "reinterpret_biguint%0#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "1173": {
      "error": "check self.current_turn exists",
      "op": "assert // check self.current_turn exists",
      "stack_out": [
        "txn_sender#0",
        "reinterpret_biguint%0#0",
        "maybe_value%5#0"
      ]
    },
    "1174": {
      "op": "itob",
      "defined_out": [
        "reinterpret_biguint%0#0",
        "tmp%5#0",
        "txn_sender#0"
      ],
      "stack_out": [
        "txn_sender#0",
        "reinterpret_biguint%0#0",
        "tmp%5#0"
      ]
    },
    "1175": {
      "op": "b==",
      "defined_out": [
        "tmp%6#0",
        "txn_sender#0"
      ],
      "stack_out": [
        "txn_sender#0",
        "tmp%6#0"
      ]
    },
    "1176": {
      "error": "claim_prize_pool(): Rejected. Turn mismatch. Transaction sender is not a valid winner address.",
      "op": "assert // claim_prize_pool(): Rejected. Turn mismatch. Transaction sender is not a valid winner address.",
      "stack_out": [
        "txn_sender#0"
      ]
    },
    "1177": {
      "op": "bytec 8 // \"prize_pool_claimed\"",
      "stack_out": [
        "txn_sender#0",
        "\"prize_pool_claimed\""
      ]
    },
    "1179": {
      "op": "intc_1 // 1",
      "stack_out": [
        "txn_sender#0",
        "\"prize_pool_claimed\"",
        "1"
      ]
    },
    "1180": {
      "op": "app_global_put",
      "stack_out": [
        "txn_sender#0"
      ]
    },
    "1181": {
      "op": "itxn_begin"
    },
    "1182": {
      "op": "intc_0 // 0",
      "stack_out": [
        "txn_sender#0",
        "0"
      ]
    },
    "1183": {
      "op": "bytec 5 // \"prize_pool\"",
      "defined_out": [
        "\"prize_pool\"",
        "0",
        "txn_sender#0"
      ],
      "stack_out": [
        "txn_sender#0",
        "0",
        "\"prize_pool\""
      ]
    },
    "1185": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%6#0",
        "maybe_value%6#0",
        "txn_sender#0"
      ],
      "stack_out": [
        "txn_sender#0",
        "maybe_value%6#0",
        "maybe_exists%6#0"
      ]
    },
    "1186": {
      "error": "check self.prize_pool exists",
      "op": "assert // check self.prize_pool exists",
      "stack_out": [
        "txn_sender#0",
        "maybe_value%6#0"
      ]
    },
    "1187": {
      "op": "itxn_field Amount",
      "stack_out": [
        "txn_sender#0"
      ]
    },
    "1189": {
      "op": "itxn_field Receiver",
      "stack_out": []
    },
    "1191": {
      "op": "intc_1 // pay",
      "defined_out": [
        "pay"
      ],
      "stack_out": [
        "pay"
      ]
    },
    "1192": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "1194": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "1195": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "1197": {
      "op": "itxn_submit"
    },
    "1198": {
      "op": "bytec_0 // \"total_players\"",
      "stack_out": [
        "\"total_players\""
      ]
    },
    "1199": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"total_players\"",
        "0"
      ]
    },
    "1200": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1201": {
      "op": "bytec 5 // \"prize_pool\"",
      "stack_out": [
        "\"prize_pool\""
      ]
    },
    "1203": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"prize_pool\"",
        "0"
      ]
    },
    "1204": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1205": {
      "retsub": true,
      "op": "retsub"
    },
    "1206": {
      "subroutine": "smart_contracts.pieout.contract.Pieout.terminate",
      "params": {},
      "block": "terminate",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1208": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "1210": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1211": {
      "error": "Transaction sender address must match application creator address.",
      "op": "assert // Transaction sender address must match application creator address.",
      "stack_out": []
    },
    "1212": {
      "op": "intc 9 // TMPL_DELETABLE",
      "defined_out": [
        "TMPL_DELETABLE"
      ],
      "stack_out": [
        "TMPL_DELETABLE"
      ]
    },
    "1214": {
      "error": "Template variable 'DELETABLE' needs to be 'True' at deploy-time.",
      "op": "assert // Template variable 'DELETABLE' needs to be 'True' at deploy-time.",
      "stack_out": []
    },
    "1215": {
      "retsub": true,
      "op": "retsub"
    }
  }
}