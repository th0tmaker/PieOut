{
  "version": 3,
  "sources": [
    "../../pieout/contract.py"
  ],
  "mappings": "AAmCA;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;;;AAAA;;AAwPK;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AApFA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAhFA;;AAAA;AAAA;AAAA;;AAAA;AApFL;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAoFK;;;AAAA;;AAzBA;;AAAA;AAAA;AAAA;;AAAA;AA3DL;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AA2DK;;;AAAA;;AAlBA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AALA;;AAAA;AAAA;AAAA;;AAAA;AAEU;;AAFV;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAfA;;AAAA;AAAA;AAAA;;AAAA;AArBL;;;AAAA;;;AAqBK;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAL;;;AAQY;;AAAA;AAAkB;;AAAA;AAAlB;AADO;;;AAAA;AAKJ;;;AAAA;AAAP;AAYI;;AAAc;;AAAd;AADJ;AAIA;AAAqB;AAArB;AACA;AAAuB;AAAvB;AACA;AAAoB;AAApB;AAEA;;AAAmB;AAAnB;AACA;;AAA4B;AAA5B;AACA;;AAAyB;AAAzB;AAEA;AAAqB;AAArB;AACA;;AAAoB;AAApB;;AAER;;;AAGqB;;AAIT;AAAc;;AAAd;AADJ;AAKkB;;AAAA;;AAAd;AADJ;AAKI;;AAAsC;;AAAA;;AAAtC;AADJ;AAIO;;AAAA;;AACM;;;;;;;AADY;;;AAAlB;AAAP;AAKgD;;;AAAT;AAAjB;;AAAtB;;AAAsB;;AAAtB;AAAA;;AAER;;;;AAKqB;;AACC;;AACI;;AAGd;AAAA;;AAAA;AAAA;AAAA;AADJ;AAKG;AAAA;;AAAA;AAAA;AAAX;;;AAEgB;;AAAA;;AAAA;AADJ;AAIA;;AAA4B;AAA5B;AAGkB;;AAAlB;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AADJ;AAKkB;;AAAA;;AAAd;AAAA;;;AAA+C;;AAAA;;AAAd;;AAAA;AAAjC;;;;AADJ;AAKmB;;AAAA;;AAAf;;AAAA;AAAA;;;AAAmD;;AAAA;;AAAf;;AAAA;AAApC;;;;AADJ;AAKI;;AAAA;;AACG;;;;AADH;AADJ;AAMI;;AAAA;;AAAA;AAAoB;;;;AAApB;AADJ;AAIO;AAAA;AAAA;AAAA;AAAqB;AAArB;AAAP;AAOkB;AAAA;AAAA;AAAA;AAAX;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AACa;AAAA;;AAAA;AAAA;AAAX;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAFqB;AAFpB;;;AAEoB;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAA9B;;AAAA;AAAA;AAUA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAsB;AAAtB;AAAA;AAAA;AAAA;AAGG;AAAA;AAAA;AAAA;AAAsB;AAAtB;AAAX;;;AACY;;AAAyB;AAAzB;AAGD;AAAA;AAAA;AAAA;AAAsB;;;AAAtB;AAAX;;;AACmC;AAAA;AAAA;AAAA;AAAR;;AAAf;AAAA;;AAAA;AACA;AAAA;AAAA;AAAA;AAAsB;;AAAtB;AAAA;AAAA;AAAA;;;;;;;;;;AAUZ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAMqB;;AACK;;;AAAlB;;AAEiB;;AAAjB;;AACkB;;AAAlB;AAAA;;AAAA;;AAES;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AACa;AAAA;AAAtB;;AAGuB;AAAnB;AAAA;;;AAAyB;;AAAmB;AAAnB;AAAzB;;;;AADJ;AAIgB;AAAZ;;AAAK;;AAAA;;AAAA;AAAjB;;;AAG4B;AAAZ;;AAAK;;AAAA;;AAAA;AAArB;;;AAIoB;;AAAA;;AAAsB;;AAAA;AAAA;;AAAA;;AAAtB;AADJ;AAHK;AAAA;AAAA;;;;;AAQL;;AAAA;AAAe;AAAf;;AAAA;;AAAA;AADJ;AAKI;AAAA;;AAAA;;AAAA;AADJ;AAdK;AAAA;AAAA;;;;;AAmBL;AAAA;;AAAA;AAAA;AAA0B;AAA1B;AADJ;AAKI;AAAA;AAAA;AAAA;AAAsB;AAAtB;AAAA;;;AAA4B;AAAA;AAAA;AAAA;AAAsB;AAAtB;AAA5B;;;;AADJ;AAK2B;AAAA;;AAAA;AAAA;AAAvB;;AAAA;AADJ;AAI8B;;AAAR;AAAwB;;AAAxB;AAAV;AACwB;;AAA7B;AAAP;AAAA;;AAEW;;;AAAR;AAAX;;;AACY;;AAAuB;AAAvB;AACc;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAd;;AAAA;AAAA;;AACA;;AAAA;AAAA;AAIJ;AAAA;AAAA;AAAA;AAAwB;AAAxB;AAAA;AAAA;AAAA;AAEG;AAAA;AAAA;AAAA;AAAwB;AAAA;AAAA;AAAA;AAAxB;AAAX;;;AACe;AAAA;AAAA;AAAA;AAAqB;AAAA;AAAA;AAAA;AAArB;AAAf;;;AACgB;AAAA;AAAA;AAAA;AAAsB;AAAA;AAAA;AAAA;AAAtB;AAAA;AAAA;AAAA;AACA;AAAA;;AAAA;AAAA;AAAqB;AAArB;AAAA;;AAAA;AAAA;AAGJ;AAAoB;AAApB;AACA;AAAuB;AAAvB;AAaJ;;AAAA;;AAAA;AAxBI;AAAA;AAAA;AAAA;AAAqB;AAArB;AAAA;AAAA;AAAA;;;;;;;;;;;;AA+BA;;AAAc;;AAAd;AADJ;AAIO;;AAAP;",
  "op_pc_offset": 2,
  "pc_events": {
    "0": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%0#2"
      ]
    },
    "2": {
      "op": "bz main_after_if_else@12",
      "stack_out": []
    },
    "5": {
      "op": "pushbytess 0x137d1094 0x4ece0cfd 0x5be219f0 0xf6980206 0xd6233e1b 0x9336b098 0x5ff16da4 // method \"calc_single_box_fee(uint8,uint16)uint64\", method \"get_gen_unix()uint64\", method \"generate()void\", method \"create_player_addrs_box(pay)void\", method \"stake(pay,pay)void\", method \"gamba()uint64\", method \"terminate()void\"",
      "defined_out": [
        "Method(calc_single_box_fee(uint8,uint16)uint64)",
        "Method(create_player_addrs_box(pay)void)",
        "Method(gamba()uint64)",
        "Method(generate()void)",
        "Method(get_gen_unix()uint64)",
        "Method(stake(pay,pay)void)",
        "Method(terminate()void)"
      ],
      "stack_out": [
        "Method(calc_single_box_fee(uint8,uint16)uint64)",
        "Method(get_gen_unix()uint64)",
        "Method(generate()void)",
        "Method(create_player_addrs_box(pay)void)",
        "Method(stake(pay,pay)void)",
        "Method(gamba()uint64)",
        "Method(terminate()void)"
      ]
    },
    "42": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(calc_single_box_fee(uint8,uint16)uint64)",
        "Method(create_player_addrs_box(pay)void)",
        "Method(gamba()uint64)",
        "Method(generate()void)",
        "Method(get_gen_unix()uint64)",
        "Method(stake(pay,pay)void)",
        "Method(terminate()void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(calc_single_box_fee(uint8,uint16)uint64)",
        "Method(get_gen_unix()uint64)",
        "Method(generate()void)",
        "Method(create_player_addrs_box(pay)void)",
        "Method(stake(pay,pay)void)",
        "Method(gamba()uint64)",
        "Method(terminate()void)",
        "tmp%2#0"
      ]
    },
    "45": {
      "op": "match main_calc_single_box_fee_route@5 main_get_gen_unix_route@6 main_generate_route@7 main_create_player_addrs_box_route@8 main_stake_route@9 main_gamba_route@10 main_terminate_route@11",
      "stack_out": []
    },
    "61": {
      "block": "main_after_if_else@12",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "62": {
      "op": "return",
      "stack_out": []
    },
    "63": {
      "block": "main_terminate_route@11",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0"
      ]
    },
    "65": {
      "op": "pushint 5 // DeleteApplication",
      "defined_out": [
        "DeleteApplication",
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0",
        "DeleteApplication"
      ]
    },
    "67": {
      "op": "==",
      "defined_out": [
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0"
      ]
    },
    "68": {
      "error": "OnCompletion is not DeleteApplication",
      "op": "assert // OnCompletion is not DeleteApplication",
      "stack_out": []
    },
    "69": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0"
      ]
    },
    "71": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "72": {
      "callsub": "smart_contracts.pieout.contract.Pieout.terminate",
      "op": "callsub terminate"
    },
    "75": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "76": {
      "op": "return",
      "stack_out": []
    },
    "77": {
      "block": "main_gamba_route@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "79": {
      "op": "!",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0"
      ]
    },
    "80": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "81": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0"
      ]
    },
    "83": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "84": {
      "callsub": "smart_contracts.pieout.contract.Pieout.gamba",
      "op": "callsub gamba",
      "defined_out": [
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0"
      ]
    },
    "87": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%2#0"
      ]
    },
    "88": {
      "op": "bytec 6 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%2#0",
        "0x151f7c75"
      ]
    },
    "90": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%2#0"
      ]
    },
    "91": {
      "op": "concat",
      "defined_out": [
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0"
      ]
    },
    "92": {
      "op": "log",
      "stack_out": []
    },
    "93": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "94": {
      "op": "return",
      "stack_out": []
    },
    "95": {
      "block": "main_stake_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "97": {
      "op": "!",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "98": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "99": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "101": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "102": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "104": {
      "op": "intc_3 // 2",
      "defined_out": [
        "2",
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0",
        "2"
      ]
    },
    "105": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%1#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0"
      ]
    },
    "106": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%1#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%1#0 (copy)"
      ]
    },
    "107": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_type%1#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_type%1#0"
      ]
    },
    "109": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_type%1#0",
        "pay"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_type%1#0",
        "pay"
      ]
    },
    "110": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_type_matches%1#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_type_matches%1#0"
      ]
    },
    "111": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%1#0"
      ]
    },
    "112": {
      "op": "txn GroupIndex",
      "defined_out": [
        "gtxn_idx%1#0",
        "tmp%27#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "tmp%27#0"
      ]
    },
    "114": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "gtxn_idx%1#0",
        "tmp%27#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "tmp%27#0",
        "1"
      ]
    },
    "115": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%2#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%2#0"
      ]
    },
    "116": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "gtxn_idx%2#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "gtxn_idx%2#0 (copy)"
      ]
    },
    "117": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "gtxn_type%2#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "gtxn_type%2#0"
      ]
    },
    "119": {
      "op": "intc_1 // pay",
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "gtxn_type%2#0",
        "pay"
      ]
    },
    "120": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "gtxn_type_matches%2#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "gtxn_type_matches%2#0"
      ]
    },
    "121": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%2#0"
      ]
    },
    "122": {
      "callsub": "smart_contracts.pieout.contract.Pieout.stake",
      "op": "callsub stake",
      "stack_out": []
    },
    "125": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "126": {
      "op": "return",
      "stack_out": []
    },
    "127": {
      "block": "main_create_player_addrs_box_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "129": {
      "op": "!",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "130": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "131": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "133": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "134": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "136": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0",
        "1"
      ]
    },
    "137": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0"
      ]
    },
    "138": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ]
    },
    "139": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ]
    },
    "141": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay"
      ]
    },
    "142": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ]
    },
    "143": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%0#0"
      ]
    },
    "144": {
      "callsub": "smart_contracts.pieout.contract.Pieout.create_player_addrs_box",
      "op": "callsub create_player_addrs_box",
      "stack_out": []
    },
    "147": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "148": {
      "op": "return",
      "stack_out": []
    },
    "149": {
      "block": "main_generate_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "151": {
      "op": "!",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "152": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "153": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "155": {
      "op": "!",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "156": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "157": {
      "callsub": "smart_contracts.pieout.contract.Pieout.generate",
      "op": "callsub generate"
    },
    "160": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "161": {
      "op": "return",
      "stack_out": []
    },
    "162": {
      "block": "main_get_gen_unix_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "164": {
      "op": "!",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "165": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "166": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "168": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "169": {
      "op": "intc 4 // TMPL_GEN_UNIX",
      "defined_out": [
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0"
      ]
    },
    "171": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0"
      ]
    },
    "172": {
      "op": "bytec 6 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0",
        "0x151f7c75"
      ]
    },
    "174": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%1#0"
      ]
    },
    "175": {
      "op": "concat",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "176": {
      "op": "log",
      "stack_out": []
    },
    "177": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "178": {
      "op": "return",
      "stack_out": []
    },
    "179": {
      "block": "main_calc_single_box_fee_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "181": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "182": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "183": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "185": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "186": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%0#0"
      ]
    },
    "189": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[1]%0#0",
        "reinterpret_bytes[2]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%0#0",
        "reinterpret_bytes[2]%0#0"
      ]
    },
    "192": {
      "callsub": "smart_contracts.pieout.contract.Pieout.calc_single_box_fee",
      "op": "callsub calc_single_box_fee",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "195": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "196": {
      "op": "bytec 6 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "198": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ]
    },
    "199": {
      "op": "concat",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "200": {
      "op": "log",
      "stack_out": []
    },
    "201": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "202": {
      "op": "return",
      "stack_out": []
    },
    "203": {
      "subroutine": "smart_contracts.pieout.contract.Pieout.calc_single_box_fee",
      "params": {
        "key_size#0": "bytes",
        "value_size#0": "bytes"
      },
      "block": "calc_single_box_fee",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "206": {
      "op": "frame_dig -2",
      "defined_out": [
        "key_size#0 (copy)"
      ],
      "stack_out": [
        "key_size#0 (copy)"
      ]
    },
    "208": {
      "op": "btoi",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "209": {
      "op": "frame_dig -1",
      "defined_out": [
        "tmp%1#0",
        "value_size#0 (copy)"
      ],
      "stack_out": [
        "tmp%1#0",
        "value_size#0 (copy)"
      ]
    },
    "211": {
      "op": "btoi",
      "defined_out": [
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "212": {
      "op": "+",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "213": {
      "op": "pushint 400 // 400",
      "defined_out": [
        "400",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "400"
      ]
    },
    "216": {
      "op": "*",
      "defined_out": [
        "size_fee#0"
      ],
      "stack_out": [
        "size_fee#0"
      ]
    },
    "217": {
      "op": "pushint 2500 // 2500",
      "defined_out": [
        "2500",
        "size_fee#0"
      ],
      "stack_out": [
        "size_fee#0",
        "2500"
      ]
    },
    "220": {
      "op": "+",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "221": {
      "retsub": true,
      "op": "retsub"
    },
    "222": {
      "subroutine": "smart_contracts.pieout.contract.Pieout.generate",
      "params": {},
      "block": "generate",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "224": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "226": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "227": {
      "error": "Transaction sender address must match application creator address.",
      "op": "assert // Transaction sender address must match application creator address.",
      "stack_out": []
    },
    "228": {
      "op": "bytec_0 // \"total_players\"",
      "defined_out": [
        "\"total_players\""
      ],
      "stack_out": [
        "\"total_players\""
      ]
    },
    "229": {
      "op": "intc_0 // 0",
      "defined_out": [
        "\"total_players\"",
        "0"
      ],
      "stack_out": [
        "\"total_players\"",
        "0"
      ]
    },
    "230": {
      "op": "app_global_put",
      "stack_out": []
    },
    "231": {
      "op": "bytec_2 // \"players_pending\"",
      "defined_out": [
        "\"players_pending\""
      ],
      "stack_out": [
        "\"players_pending\""
      ]
    },
    "232": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"players_pending\"",
        "0"
      ]
    },
    "233": {
      "op": "app_global_put",
      "stack_out": []
    },
    "234": {
      "op": "bytec_1 // \"players_elim\"",
      "defined_out": [
        "\"players_elim\""
      ],
      "stack_out": [
        "\"players_elim\""
      ]
    },
    "235": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"players_elim\"",
        "0"
      ]
    },
    "236": {
      "op": "app_global_put",
      "stack_out": []
    },
    "237": {
      "op": "bytec 7 // \"total_stake\"",
      "defined_out": [
        "\"total_stake\""
      ],
      "stack_out": [
        "\"total_stake\""
      ]
    },
    "239": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"total_stake\"",
        "0"
      ]
    },
    "240": {
      "op": "app_global_put",
      "stack_out": []
    },
    "241": {
      "op": "bytec 8 // \"creator_stake_status\"",
      "defined_out": [
        "\"creator_stake_status\""
      ],
      "stack_out": [
        "\"creator_stake_status\""
      ]
    },
    "243": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"creator_stake_status\"",
        "0"
      ]
    },
    "244": {
      "op": "app_global_put",
      "stack_out": []
    },
    "245": {
      "op": "bytec 5 // \"staking_finalized\"",
      "defined_out": [
        "\"staking_finalized\""
      ],
      "stack_out": [
        "\"staking_finalized\""
      ]
    },
    "247": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"staking_finalized\"",
        "0"
      ]
    },
    "248": {
      "op": "app_global_put",
      "stack_out": []
    },
    "249": {
      "op": "bytec_3 // \"pa_box_offset\"",
      "defined_out": [
        "\"pa_box_offset\""
      ],
      "stack_out": [
        "\"pa_box_offset\""
      ]
    },
    "250": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"pa_box_offset\"",
        "0"
      ]
    },
    "251": {
      "op": "app_global_put",
      "stack_out": []
    },
    "252": {
      "op": "bytec 4 // \"current_turn\"",
      "defined_out": [
        "\"current_turn\""
      ],
      "stack_out": [
        "\"current_turn\""
      ]
    },
    "254": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"current_turn\"",
        "0"
      ]
    },
    "255": {
      "op": "app_global_put",
      "stack_out": []
    },
    "256": {
      "retsub": true,
      "op": "retsub"
    },
    "257": {
      "subroutine": "smart_contracts.pieout.contract.Pieout.create_player_addrs_box",
      "params": {
        "box_pay#0": "uint64"
      },
      "block": "create_player_addrs_box",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "260": {
      "op": "txn Sender",
      "defined_out": [
        "txn_sender#0"
      ],
      "stack_out": [
        "txn_sender#0"
      ]
    },
    "262": {
      "op": "dup"
    },
    "263": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "txn_sender#0",
        "txn_sender#0 (copy)"
      ],
      "stack_out": [
        "txn_sender#0",
        "txn_sender#0 (copy)",
        "tmp%0#0"
      ]
    },
    "265": {
      "op": "==",
      "defined_out": [
        "tmp%1#0",
        "txn_sender#0"
      ],
      "stack_out": [
        "txn_sender#0",
        "tmp%1#0"
      ]
    },
    "266": {
      "error": "Transaction sender address must match application creator address.",
      "op": "assert // Transaction sender address must match application creator address.",
      "stack_out": [
        "txn_sender#0"
      ]
    },
    "267": {
      "op": "frame_dig -1",
      "defined_out": [
        "box_pay#0 (copy)",
        "txn_sender#0"
      ],
      "stack_out": [
        "txn_sender#0",
        "box_pay#0 (copy)"
      ]
    },
    "269": {
      "op": "gtxns Sender",
      "defined_out": [
        "tmp%2#0",
        "txn_sender#0"
      ],
      "stack_out": [
        "txn_sender#0",
        "tmp%2#0"
      ]
    },
    "271": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "272": {
      "error": "stake(): Box payment sender address must match transaction sender address.",
      "op": "assert // stake(): Box payment sender address must match transaction sender address.",
      "stack_out": []
    },
    "273": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "275": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%4#0",
        "box_pay#0 (copy)"
      ]
    },
    "277": {
      "op": "gtxns Receiver",
      "defined_out": [
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "279": {
      "op": "==",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "280": {
      "error": "stake(): Box payment reciever address must match transaction sender address.",
      "op": "assert // stake(): Box payment reciever address must match transaction sender address.",
      "stack_out": []
    },
    "281": {
      "op": "frame_dig -1",
      "stack_out": [
        "box_pay#0 (copy)"
      ]
    },
    "283": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "285": {
      "op": "pushbytess 0x03 0x0140 // 0x03, 0x0140",
      "defined_out": [
        "0x0140",
        "0x03",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "0x03",
        "0x0140"
      ]
    },
    "292": {
      "callsub": "smart_contracts.pieout.contract.Pieout.calc_single_box_fee",
      "op": "callsub calc_single_box_fee",
      "defined_out": [
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0"
      ]
    },
    "295": {
      "op": ">=",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "296": {
      "error": "stake(): Insufficient amount. Box pay amount does not cover application MBR.",
      "op": "assert // stake(): Insufficient amount. Box pay amount does not cover application MBR.",
      "stack_out": []
    },
    "297": {
      "op": "pushint 320 // 320",
      "defined_out": [
        "320"
      ],
      "stack_out": [
        "320"
      ]
    },
    "300": {
      "op": "bzero",
      "defined_out": [
        "new_box_value%0#0"
      ],
      "stack_out": [
        "new_box_value%0#0"
      ]
    },
    "301": {
      "op": "bytec 9 // 0x70615f",
      "defined_out": [
        "0x70615f",
        "new_box_value%0#0"
      ],
      "stack_out": [
        "new_box_value%0#0",
        "0x70615f"
      ]
    },
    "303": {
      "op": "box_del",
      "defined_out": [
        "new_box_value%0#0",
        "{box_del}"
      ],
      "stack_out": [
        "new_box_value%0#0",
        "{box_del}"
      ]
    },
    "304": {
      "op": "pop",
      "stack_out": [
        "new_box_value%0#0"
      ]
    },
    "305": {
      "op": "bytec 9 // 0x70615f",
      "stack_out": [
        "new_box_value%0#0",
        "0x70615f"
      ]
    },
    "307": {
      "op": "swap",
      "stack_out": [
        "0x70615f",
        "new_box_value%0#0"
      ]
    },
    "308": {
      "op": "box_put",
      "stack_out": []
    },
    "309": {
      "retsub": true,
      "op": "retsub"
    },
    "310": {
      "subroutine": "smart_contracts.pieout.contract.Pieout.stake",
      "params": {
        "box_pay#0": "uint64",
        "stake_pay#0": "uint64"
      },
      "block": "stake",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "313": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "314": {
      "op": "txn Sender"
    },
    "316": {
      "op": "global CurrentApplicationAddress"
    },
    "318": {
      "op": "global CreatorAddress"
    },
    "320": {
      "op": "intc_0 // 0"
    },
    "321": {
      "op": "bytec 5 // \"staking_finalized\"",
      "defined_out": [
        "\"staking_finalized\"",
        "0",
        "app_address#0",
        "creator_address#0",
        "txn_sender#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "0",
        "\"staking_finalized\""
      ]
    },
    "323": {
      "op": "app_global_get_ex",
      "defined_out": [
        "app_address#0",
        "creator_address#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "txn_sender#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "324": {
      "error": "check self.staking_finalized exists",
      "op": "assert // check self.staking_finalized exists",
      "stack_out": [
        "tmp%3#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "maybe_value%0#0"
      ]
    },
    "325": {
      "op": "!",
      "defined_out": [
        "app_address#0",
        "creator_address#0",
        "tmp%0#0",
        "txn_sender#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%0#0"
      ]
    },
    "326": {
      "error": "stake(): Rejected. Can only stake when staking is not finalized.",
      "op": "assert // stake(): Rejected. Can only stake when staking is not finalized.",
      "stack_out": [
        "tmp%3#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0"
      ]
    },
    "327": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%3#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "0"
      ]
    },
    "328": {
      "op": "bytec 8 // \"creator_stake_status\"",
      "defined_out": [
        "\"creator_stake_status\"",
        "0",
        "app_address#0",
        "creator_address#0",
        "txn_sender#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "0",
        "\"creator_stake_status\""
      ]
    },
    "330": {
      "op": "app_global_get_ex",
      "defined_out": [
        "app_address#0",
        "creator_address#0",
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "txn_sender#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "331": {
      "error": "check self.creator_stake_status exists",
      "op": "assert // check self.creator_stake_status exists",
      "stack_out": [
        "tmp%3#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "maybe_value%1#0"
      ]
    },
    "332": {
      "op": "bnz stake_after_if_else@2",
      "stack_out": [
        "tmp%3#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0"
      ]
    },
    "335": {
      "op": "frame_dig 1",
      "stack_out": [
        "tmp%3#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "txn_sender#0"
      ]
    },
    "337": {
      "op": "frame_dig 3",
      "stack_out": [
        "tmp%3#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "txn_sender#0",
        "creator_address#0"
      ]
    },
    "339": {
      "op": "==",
      "defined_out": [
        "app_address#0",
        "creator_address#0",
        "tmp%2#0",
        "txn_sender#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%2#0"
      ]
    },
    "340": {
      "error": "stake(): Rejected. Application creator account must stake first before any other account.",
      "op": "assert // stake(): Rejected. Application creator account must stake first before any other account.",
      "stack_out": [
        "tmp%3#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0"
      ]
    },
    "341": {
      "op": "bytec 8 // \"creator_stake_status\"",
      "stack_out": [
        "tmp%3#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "\"creator_stake_status\""
      ]
    },
    "343": {
      "op": "intc_1 // 1",
      "defined_out": [
        "\"creator_stake_status\"",
        "1",
        "app_address#0",
        "creator_address#0",
        "txn_sender#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "\"creator_stake_status\"",
        "1"
      ]
    },
    "344": {
      "op": "app_global_put",
      "stack_out": [
        "tmp%3#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0"
      ]
    },
    "345": {
      "block": "stake_after_if_else@2",
      "stack_in": [
        "tmp%3#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0"
      ],
      "op": "bytec 10 // 0x705f",
      "defined_out": [
        "0x705f"
      ],
      "stack_out": [
        "tmp%3#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "0x705f"
      ]
    },
    "347": {
      "op": "frame_dig 1",
      "defined_out": [
        "0x705f",
        "txn_sender#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "0x705f",
        "txn_sender#0"
      ]
    },
    "349": {
      "op": "dup",
      "defined_out": [
        "0x705f",
        "txn_sender#0",
        "txn_sender#0 (copy)"
      ],
      "stack_out": [
        "tmp%3#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "0x705f",
        "txn_sender#0 (copy)",
        "txn_sender#0 (copy)"
      ]
    },
    "350": {
      "op": "cover 2",
      "stack_out": [
        "tmp%3#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "txn_sender#0",
        "0x705f",
        "txn_sender#0 (copy)"
      ]
    },
    "352": {
      "op": "concat",
      "defined_out": [
        "tmp%3#0",
        "txn_sender#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "txn_sender#0",
        "tmp%3#0"
      ]
    },
    "353": {
      "op": "dup",
      "stack_out": [
        "tmp%3#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "txn_sender#0",
        "tmp%3#0",
        "tmp%3#0"
      ]
    },
    "354": {
      "op": "frame_bury 0",
      "defined_out": [
        "tmp%3#0",
        "txn_sender#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "txn_sender#0",
        "tmp%3#0"
      ]
    },
    "356": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%3#0",
        "txn_sender#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "txn_sender#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "357": {
      "op": "bury 1",
      "stack_out": [
        "tmp%3#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "txn_sender#0",
        "maybe_exists%2#0"
      ]
    },
    "359": {
      "op": "!",
      "defined_out": [
        "tmp%3#0",
        "tmp%4#0",
        "txn_sender#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "txn_sender#0",
        "tmp%4#0"
      ]
    },
    "360": {
      "error": "stake(): Transaction sender address already staked.",
      "op": "assert // stake(): Transaction sender address already staked.",
      "stack_out": [
        "tmp%3#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "txn_sender#0"
      ]
    },
    "361": {
      "op": "frame_dig -2",
      "defined_out": [
        "box_pay#0 (copy)",
        "tmp%3#0",
        "txn_sender#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "txn_sender#0",
        "box_pay#0 (copy)"
      ]
    },
    "363": {
      "op": "gtxns Sender",
      "defined_out": [
        "tmp%3#0",
        "tmp%5#0",
        "txn_sender#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "txn_sender#0",
        "tmp%5#0"
      ]
    },
    "365": {
      "op": "==",
      "defined_out": [
        "tmp%3#0",
        "tmp%6#0",
        "txn_sender#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%6#0"
      ]
    },
    "366": {
      "op": "bz stake_bool_false@5",
      "stack_out": [
        "tmp%3#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0"
      ]
    },
    "369": {
      "op": "frame_dig -1",
      "defined_out": [
        "stake_pay#0 (copy)",
        "tmp%3#0",
        "txn_sender#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "stake_pay#0 (copy)"
      ]
    },
    "371": {
      "op": "gtxns Sender",
      "defined_out": [
        "tmp%3#0",
        "tmp%7#0",
        "txn_sender#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%7#0"
      ]
    },
    "373": {
      "op": "frame_dig 1",
      "stack_out": [
        "tmp%3#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%7#0",
        "txn_sender#0"
      ]
    },
    "375": {
      "op": "==",
      "defined_out": [
        "tmp%3#0",
        "tmp%8#0",
        "txn_sender#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%8#0"
      ]
    },
    "376": {
      "op": "bz stake_bool_false@5",
      "stack_out": [
        "tmp%3#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0"
      ]
    },
    "379": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0",
        "tmp%3#0",
        "txn_sender#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "and_result%0#0"
      ]
    },
    "380": {
      "block": "stake_bool_merge@6",
      "stack_in": [
        "tmp%3#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "and_result%0#0"
      ],
      "error": "stake(): Box and Stake payment sender address must match transaction sender address.",
      "op": "assert // stake(): Box and Stake payment sender address must match transaction sender address.",
      "defined_out": [],
      "stack_out": [
        "tmp%3#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0"
      ]
    },
    "381": {
      "op": "frame_dig -2",
      "defined_out": [
        "box_pay#0 (copy)"
      ],
      "stack_out": [
        "tmp%3#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "box_pay#0 (copy)"
      ]
    },
    "383": {
      "op": "gtxns Receiver",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%9#0"
      ]
    },
    "385": {
      "op": "frame_dig 2",
      "defined_out": [
        "app_address#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%9#0",
        "app_address#0"
      ]
    },
    "387": {
      "op": "==",
      "defined_out": [
        "app_address#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%10#0"
      ]
    },
    "388": {
      "op": "bz stake_bool_false@9",
      "stack_out": [
        "tmp%3#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0"
      ]
    },
    "391": {
      "op": "frame_dig -1",
      "defined_out": [
        "app_address#0",
        "stake_pay#0 (copy)"
      ],
      "stack_out": [
        "tmp%3#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "stake_pay#0 (copy)"
      ]
    },
    "393": {
      "op": "gtxns Receiver",
      "defined_out": [
        "app_address#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%11#0"
      ]
    },
    "395": {
      "op": "frame_dig 2",
      "stack_out": [
        "tmp%3#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%11#0",
        "app_address#0"
      ]
    },
    "397": {
      "op": "==",
      "defined_out": [
        "app_address#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%12#0"
      ]
    },
    "398": {
      "op": "bz stake_bool_false@9",
      "stack_out": [
        "tmp%3#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0"
      ]
    },
    "401": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%1#0",
        "app_address#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "and_result%1#0"
      ]
    },
    "402": {
      "block": "stake_bool_merge@10",
      "stack_in": [
        "tmp%3#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "and_result%1#0"
      ],
      "error": "stake(): Box and Stake payment reciever address must match transaction sender address.",
      "op": "assert // stake(): Box and Stake payment reciever address must match transaction sender address.",
      "defined_out": [],
      "stack_out": [
        "tmp%3#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0"
      ]
    },
    "403": {
      "op": "frame_dig -2",
      "defined_out": [
        "box_pay#0 (copy)"
      ],
      "stack_out": [
        "tmp%3#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "box_pay#0 (copy)"
      ]
    },
    "405": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%13#0"
      ]
    },
    "407": {
      "op": "pushint 17300 // 17300",
      "defined_out": [
        "17300",
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%13#0",
        "17300"
      ]
    },
    "411": {
      "op": ">=",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%14#0"
      ]
    },
    "412": {
      "error": "stake(): Insufficient amount. Box pay amount does not cover application MBR.",
      "op": "assert // stake(): Insufficient amount. Box pay amount does not cover application MBR.",
      "stack_out": [
        "tmp%3#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0"
      ]
    },
    "413": {
      "op": "frame_dig -1",
      "defined_out": [
        "stake_pay#0 (copy)"
      ],
      "stack_out": [
        "tmp%3#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "stake_pay#0 (copy)"
      ]
    },
    "415": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%15#0"
      ]
    },
    "417": {
      "op": "dup",
      "defined_out": [
        "tmp%15#0",
        "tmp%15#0 (copy)"
      ],
      "stack_out": [
        "tmp%3#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%15#0",
        "tmp%15#0 (copy)"
      ]
    },
    "418": {
      "op": "pushint 200000 // 200000",
      "defined_out": [
        "200000",
        "tmp%15#0",
        "tmp%15#0 (copy)"
      ],
      "stack_out": [
        "tmp%3#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%15#0",
        "tmp%15#0 (copy)",
        "200000"
      ]
    },
    "422": {
      "op": "==",
      "defined_out": [
        "tmp%15#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%15#0",
        "tmp%16#0"
      ]
    },
    "423": {
      "error": "stake(): Insufficient amount. Stake pay amount does not cover minimum entry fee.",
      "op": "assert // stake(): Insufficient amount. Stake pay amount does not cover minimum entry fee.",
      "stack_out": [
        "tmp%3#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%15#0"
      ]
    },
    "424": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%15#0",
        "0"
      ]
    },
    "425": {
      "op": "bytec_0 // \"total_players\"",
      "defined_out": [
        "\"total_players\"",
        "0",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%15#0",
        "0",
        "\"total_players\""
      ]
    },
    "426": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%15#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "427": {
      "error": "check self.total_players exists",
      "op": "assert // check self.total_players exists",
      "stack_out": [
        "tmp%3#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%15#0",
        "maybe_value%3#0"
      ]
    },
    "428": {
      "op": "intc_2 // 10",
      "defined_out": [
        "10",
        "maybe_value%3#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%15#0",
        "maybe_value%3#0",
        "10"
      ]
    },
    "429": {
      "op": "<",
      "defined_out": [
        "tmp%15#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%15#0",
        "tmp%17#0"
      ]
    },
    "430": {
      "error": "stake(): Max player limit exceeded.",
      "op": "assert // stake(): Max player limit exceeded.",
      "stack_out": [
        "tmp%3#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%15#0"
      ]
    },
    "431": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%3#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%15#0",
        "0"
      ]
    },
    "432": {
      "op": "bytec_0 // \"total_players\"",
      "stack_out": [
        "tmp%3#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%15#0",
        "0",
        "\"total_players\""
      ]
    },
    "433": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%4#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%15#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "434": {
      "error": "check self.total_players exists",
      "op": "assert // check self.total_players exists",
      "stack_out": [
        "tmp%3#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%15#0",
        "maybe_value%4#0"
      ]
    },
    "435": {
      "op": "itob",
      "defined_out": [
        "tmp%15#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%15#0",
        "val_as_bytes%0#0"
      ]
    },
    "436": {
      "op": "dup",
      "defined_out": [
        "tmp%15#0",
        "val_as_bytes%0#0",
        "val_as_bytes%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%3#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%15#0",
        "val_as_bytes%0#0",
        "val_as_bytes%0#0 (copy)"
      ]
    },
    "437": {
      "op": "bitlen",
      "defined_out": [
        "bitlen%0#0",
        "tmp%15#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%15#0",
        "val_as_bytes%0#0",
        "bitlen%0#0"
      ]
    },
    "438": {
      "op": "pushint 8 // 8",
      "defined_out": [
        "8",
        "bitlen%0#0",
        "tmp%15#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%15#0",
        "val_as_bytes%0#0",
        "bitlen%0#0",
        "8"
      ]
    },
    "440": {
      "op": "<=",
      "defined_out": [
        "no_overflow%0#0",
        "tmp%15#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%15#0",
        "val_as_bytes%0#0",
        "no_overflow%0#0"
      ]
    },
    "441": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "tmp%3#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%15#0",
        "val_as_bytes%0#0"
      ]
    },
    "442": {
      "op": "extract 7 1",
      "defined_out": [
        "tmp%15#0",
        "uint8%0#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%15#0",
        "uint8%0#0"
      ]
    },
    "445": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%3#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%15#0",
        "uint8%0#0",
        "0"
      ]
    },
    "446": {
      "op": "bytec 4 // \"current_turn\"",
      "defined_out": [
        "\"current_turn\"",
        "0",
        "tmp%15#0",
        "uint8%0#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%15#0",
        "uint8%0#0",
        "0",
        "\"current_turn\""
      ]
    },
    "448": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%5#0",
        "maybe_value%5#0",
        "tmp%15#0",
        "uint8%0#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%15#0",
        "uint8%0#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "449": {
      "error": "check self.current_turn exists",
      "op": "assert // check self.current_turn exists",
      "stack_out": [
        "tmp%3#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%15#0",
        "uint8%0#0",
        "maybe_value%5#0"
      ]
    },
    "450": {
      "op": "itob",
      "defined_out": [
        "tmp%15#0",
        "uint8%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%15#0",
        "uint8%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "451": {
      "op": "dup",
      "defined_out": [
        "tmp%15#0",
        "uint8%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%1#0 (copy)"
      ],
      "stack_out": [
        "tmp%3#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%15#0",
        "uint8%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%1#0 (copy)"
      ]
    },
    "452": {
      "op": "bitlen",
      "defined_out": [
        "bitlen%1#0",
        "tmp%15#0",
        "uint8%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%15#0",
        "uint8%0#0",
        "val_as_bytes%1#0",
        "bitlen%1#0"
      ]
    },
    "453": {
      "op": "pushint 8 // 8",
      "stack_out": [
        "tmp%3#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%15#0",
        "uint8%0#0",
        "val_as_bytes%1#0",
        "bitlen%1#0",
        "8"
      ]
    },
    "455": {
      "op": "<=",
      "defined_out": [
        "no_overflow%1#0",
        "tmp%15#0",
        "uint8%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%15#0",
        "uint8%0#0",
        "val_as_bytes%1#0",
        "no_overflow%1#0"
      ]
    },
    "456": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "tmp%3#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%15#0",
        "uint8%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "457": {
      "op": "extract 7 1",
      "defined_out": [
        "tmp%15#0",
        "uint8%0#0",
        "uint8%1#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%15#0",
        "uint8%0#0",
        "uint8%1#0"
      ]
    },
    "460": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%15#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "461": {
      "op": "pushbytes 0x80",
      "defined_out": [
        "0x80",
        "encoded_tuple_buffer%2#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%15#0",
        "encoded_tuple_buffer%2#0",
        "0x80"
      ]
    },
    "464": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%15#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "465": {
      "op": "pushint 17 // 17",
      "defined_out": [
        "17",
        "encoded_tuple_buffer%3#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%15#0",
        "encoded_tuple_buffer%3#0",
        "17"
      ]
    },
    "467": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%3#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%15#0",
        "encoded_tuple_buffer%3#0",
        "17",
        "0"
      ]
    },
    "468": {
      "op": "setbit",
      "defined_out": [
        "encoded_tuple_buffer%4#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%15#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "469": {
      "op": "pushint 18 // 18",
      "defined_out": [
        "18",
        "encoded_tuple_buffer%4#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%15#0",
        "encoded_tuple_buffer%4#0",
        "18"
      ]
    },
    "471": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%3#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%15#0",
        "encoded_tuple_buffer%4#0",
        "18",
        "0"
      ]
    },
    "472": {
      "op": "setbit",
      "defined_out": [
        "encoded_tuple_buffer%5#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%15#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "473": {
      "op": "pushint 19 // 19",
      "defined_out": [
        "19",
        "encoded_tuple_buffer%5#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%15#0",
        "encoded_tuple_buffer%5#0",
        "19"
      ]
    },
    "475": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%3#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%15#0",
        "encoded_tuple_buffer%5#0",
        "19",
        "0"
      ]
    },
    "476": {
      "op": "setbit",
      "defined_out": [
        "encoded_tuple_buffer%6#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%15#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "477": {
      "op": "frame_dig 0",
      "defined_out": [
        "encoded_tuple_buffer%6#0",
        "tmp%15#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%15#0",
        "encoded_tuple_buffer%6#0",
        "tmp%3#0"
      ]
    },
    "479": {
      "op": "swap",
      "stack_out": [
        "tmp%3#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%15#0",
        "tmp%3#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "480": {
      "op": "box_put",
      "stack_out": [
        "tmp%3#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%15#0"
      ]
    },
    "481": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%3#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%15#0",
        "0"
      ]
    },
    "482": {
      "op": "bytec 7 // \"total_stake\"",
      "defined_out": [
        "\"total_stake\"",
        "0",
        "tmp%15#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%15#0",
        "0",
        "\"total_stake\""
      ]
    },
    "484": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%6#0",
        "maybe_value%6#0",
        "tmp%15#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%15#0",
        "maybe_value%6#0",
        "maybe_exists%6#0"
      ]
    },
    "485": {
      "error": "check self.total_stake exists",
      "op": "assert // check self.total_stake exists",
      "stack_out": [
        "tmp%3#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%15#0",
        "maybe_value%6#0"
      ]
    },
    "486": {
      "op": "+",
      "defined_out": [
        "new_state_value%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "new_state_value%0#0"
      ]
    },
    "487": {
      "op": "bytec 7 // \"total_stake\"",
      "stack_out": [
        "tmp%3#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "new_state_value%0#0",
        "\"total_stake\""
      ]
    },
    "489": {
      "op": "swap",
      "stack_out": [
        "tmp%3#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "\"total_stake\"",
        "new_state_value%0#0"
      ]
    },
    "490": {
      "op": "app_global_put",
      "stack_out": [
        "tmp%3#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0"
      ]
    },
    "491": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%3#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "0"
      ]
    },
    "492": {
      "op": "bytec_0 // \"total_players\"",
      "stack_out": [
        "tmp%3#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "0",
        "\"total_players\""
      ]
    },
    "493": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%7#0",
        "maybe_value%7#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "maybe_value%7#0",
        "maybe_exists%7#0"
      ]
    },
    "494": {
      "error": "check self.total_players exists",
      "op": "assert // check self.total_players exists",
      "stack_out": [
        "tmp%3#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "maybe_value%7#0"
      ]
    },
    "495": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%7#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "maybe_value%7#0",
        "1"
      ]
    },
    "496": {
      "op": "+",
      "defined_out": [
        "new_state_value%1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "new_state_value%1#0"
      ]
    },
    "497": {
      "op": "bytec_0 // \"total_players\"",
      "stack_out": [
        "tmp%3#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "new_state_value%1#0",
        "\"total_players\""
      ]
    },
    "498": {
      "op": "swap",
      "stack_out": [
        "tmp%3#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "\"total_players\"",
        "new_state_value%1#0"
      ]
    },
    "499": {
      "op": "app_global_put",
      "stack_out": [
        "tmp%3#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0"
      ]
    },
    "500": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%3#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "0"
      ]
    },
    "501": {
      "op": "bytec_0 // \"total_players\"",
      "stack_out": [
        "tmp%3#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "0",
        "\"total_players\""
      ]
    },
    "502": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%8#0",
        "maybe_value%8#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "maybe_value%8#0",
        "maybe_exists%8#0"
      ]
    },
    "503": {
      "error": "check self.total_players exists",
      "op": "assert // check self.total_players exists",
      "stack_out": [
        "tmp%3#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "maybe_value%8#0"
      ]
    },
    "504": {
      "op": "intc_2 // 10",
      "stack_out": [
        "tmp%3#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "maybe_value%8#0",
        "10"
      ]
    },
    "505": {
      "op": "==",
      "defined_out": [
        "tmp%20#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%20#0"
      ]
    },
    "506": {
      "op": "bz stake_after_if_else@12",
      "stack_out": [
        "tmp%3#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0"
      ]
    },
    "509": {
      "op": "bytec 5 // \"staking_finalized\"",
      "defined_out": [
        "\"staking_finalized\"",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "\"staking_finalized\""
      ]
    },
    "511": {
      "op": "intc_1 // 1",
      "stack_out": [
        "tmp%3#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "\"staking_finalized\"",
        "1"
      ]
    },
    "512": {
      "op": "app_global_put",
      "stack_out": [
        "tmp%3#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0"
      ]
    },
    "513": {
      "block": "stake_after_if_else@12",
      "stack_in": [
        "tmp%3#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "tmp%3#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "0"
      ]
    },
    "514": {
      "op": "bytec_3 // \"pa_box_offset\"",
      "defined_out": [
        "\"pa_box_offset\"",
        "0"
      ],
      "stack_out": [
        "tmp%3#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "0",
        "\"pa_box_offset\""
      ]
    },
    "515": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%9#0",
        "maybe_value%9#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "maybe_value%9#0",
        "maybe_exists%9#0"
      ]
    },
    "516": {
      "error": "check self.pa_box_offset exists",
      "op": "assert // check self.pa_box_offset exists",
      "stack_out": [
        "tmp%3#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "maybe_value%9#0"
      ]
    },
    "517": {
      "op": "pushint 288 // 288",
      "defined_out": [
        "288",
        "maybe_value%9#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "maybe_value%9#0",
        "288"
      ]
    },
    "520": {
      "op": "<=",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "tmp%21#0"
      ]
    },
    "521": {
      "op": "bz stake_after_if_else@14",
      "stack_out": [
        "tmp%3#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0"
      ]
    },
    "524": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%3#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "0"
      ]
    },
    "525": {
      "op": "bytec_3 // \"pa_box_offset\"",
      "stack_out": [
        "tmp%3#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "0",
        "\"pa_box_offset\""
      ]
    },
    "526": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%10#0",
        "maybe_value%10#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "maybe_value%10#0",
        "maybe_exists%10#0"
      ]
    },
    "527": {
      "error": "check self.pa_box_offset exists",
      "op": "assert // check self.pa_box_offset exists",
      "stack_out": [
        "tmp%3#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "maybe_value%10#0"
      ]
    },
    "528": {
      "op": "bytec 9 // 0x70615f",
      "defined_out": [
        "0x70615f",
        "maybe_value%10#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "maybe_value%10#0",
        "0x70615f"
      ]
    },
    "530": {
      "op": "swap",
      "stack_out": [
        "tmp%3#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "0x70615f",
        "maybe_value%10#0"
      ]
    },
    "531": {
      "op": "frame_dig 1",
      "defined_out": [
        "0x70615f",
        "maybe_value%10#0",
        "txn_sender#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "0x70615f",
        "maybe_value%10#0",
        "txn_sender#0"
      ]
    },
    "533": {
      "op": "box_replace",
      "stack_out": [
        "tmp%3#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0"
      ]
    },
    "534": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%3#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "0"
      ]
    },
    "535": {
      "op": "bytec_3 // \"pa_box_offset\"",
      "stack_out": [
        "tmp%3#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "0",
        "\"pa_box_offset\""
      ]
    },
    "536": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%11#0",
        "maybe_value%11#0",
        "txn_sender#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "maybe_value%11#0",
        "maybe_exists%11#0"
      ]
    },
    "537": {
      "error": "check self.pa_box_offset exists",
      "op": "assert // check self.pa_box_offset exists",
      "stack_out": [
        "tmp%3#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "maybe_value%11#0"
      ]
    },
    "538": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "32",
        "maybe_value%11#0",
        "txn_sender#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "maybe_value%11#0",
        "32"
      ]
    },
    "540": {
      "op": "+",
      "defined_out": [
        "new_state_value%2#0",
        "txn_sender#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "new_state_value%2#0"
      ]
    },
    "541": {
      "op": "bytec_3 // \"pa_box_offset\"",
      "stack_out": [
        "tmp%3#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "new_state_value%2#0",
        "\"pa_box_offset\""
      ]
    },
    "542": {
      "op": "swap",
      "stack_out": [
        "tmp%3#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "\"pa_box_offset\"",
        "new_state_value%2#0"
      ]
    },
    "543": {
      "op": "app_global_put",
      "stack_out": [
        "tmp%3#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0"
      ]
    },
    "544": {
      "block": "stake_after_if_else@14",
      "stack_in": [
        "tmp%3#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0"
      ],
      "retsub": true,
      "op": "retsub"
    },
    "545": {
      "block": "stake_bool_false@9",
      "stack_in": [
        "tmp%3#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%1#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "and_result%1#0"
      ]
    },
    "546": {
      "op": "b stake_bool_merge@10"
    },
    "549": {
      "block": "stake_bool_false@5",
      "stack_in": [
        "tmp%3#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "txn_sender#0",
        "app_address#0",
        "creator_address#0",
        "and_result%0#0"
      ]
    },
    "550": {
      "op": "b stake_bool_merge@6"
    },
    "553": {
      "subroutine": "smart_contracts.pieout.contract.Pieout.gamba",
      "params": {},
      "block": "gamba",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "556": {
      "op": "intc_0 // 0",
      "stack_out": [
        "method_selector#0"
      ]
    },
    "557": {
      "op": "dupn 2",
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0"
      ]
    },
    "559": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0"
      ]
    },
    "561": {
      "op": "dupn 5",
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0"
      ]
    },
    "563": {
      "block": "gamba_while_top@25",
      "stack_in": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0"
      ],
      "op": "pushint 1410 // 1410",
      "defined_out": [
        "1410"
      ],
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "1410"
      ]
    },
    "566": {
      "op": "global OpcodeBudget",
      "defined_out": [
        "1410",
        "tmp%0#1"
      ],
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "1410",
        "tmp%0#1"
      ]
    },
    "568": {
      "op": ">",
      "defined_out": [
        "tmp%1#1"
      ],
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "tmp%1#1"
      ]
    },
    "569": {
      "op": "bz gamba_after_while@30",
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0"
      ]
    },
    "572": {
      "op": "itxn_begin"
    },
    "573": {
      "op": "pushint 6 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "appl"
      ]
    },
    "575": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0"
      ]
    },
    "577": {
      "op": "pushint 5 // DeleteApplication",
      "defined_out": [
        "DeleteApplication"
      ],
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "DeleteApplication"
      ]
    },
    "579": {
      "op": "itxn_field OnCompletion",
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0"
      ]
    },
    "581": {
      "op": "bytec 11 // 0x068101",
      "defined_out": [
        "0x068101"
      ],
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "0x068101"
      ]
    },
    "583": {
      "op": "itxn_field ApprovalProgram",
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0"
      ]
    },
    "585": {
      "op": "bytec 11 // 0x068101",
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "0x068101"
      ]
    },
    "587": {
      "op": "itxn_field ClearStateProgram",
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0"
      ]
    },
    "589": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "0"
      ]
    },
    "590": {
      "op": "itxn_field Fee",
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0"
      ]
    },
    "592": {
      "op": "itxn_submit"
    },
    "593": {
      "op": "b gamba_while_top@25"
    },
    "596": {
      "block": "gamba_after_while@30",
      "stack_in": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0"
      ],
      "op": "txn Sender",
      "defined_out": [
        "txn_sender#0"
      ],
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "txn_sender#0"
      ]
    },
    "598": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "method_selector#0",
        "txn_sender#0"
      ],
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "txn_sender#0",
        "method_selector#0"
      ]
    },
    "601": {
      "op": "frame_bury 0",
      "defined_out": [
        "method_selector#0",
        "txn_sender#0"
      ],
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "txn_sender#0"
      ]
    },
    "603": {
      "op": "global CurrentApplicationID",
      "defined_out": [
        "current_app_id#0",
        "method_selector#0",
        "txn_sender#0"
      ],
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "txn_sender#0",
        "current_app_id#0"
      ]
    },
    "605": {
      "op": "frame_bury 4",
      "defined_out": [
        "current_app_id#0",
        "method_selector#0",
        "txn_sender#0"
      ],
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "txn_sender#0"
      ]
    },
    "607": {
      "op": "global GroupSize",
      "defined_out": [
        "atxn_group_size#0",
        "current_app_id#0",
        "method_selector#0",
        "txn_sender#0"
      ],
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "txn_sender#0",
        "atxn_group_size#0"
      ]
    },
    "609": {
      "op": "dup",
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "txn_sender#0",
        "atxn_group_size#0",
        "atxn_group_size#0 (copy)"
      ]
    },
    "610": {
      "op": "cover 2",
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "atxn_group_size#0",
        "txn_sender#0",
        "atxn_group_size#0"
      ]
    },
    "612": {
      "op": "frame_bury 3",
      "defined_out": [
        "atxn_group_size#0",
        "current_app_id#0",
        "method_selector#0",
        "txn_sender#0"
      ],
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "atxn_group_size#0",
        "txn_sender#0"
      ]
    },
    "614": {
      "op": "bytec 10 // 0x705f",
      "defined_out": [
        "0x705f",
        "atxn_group_size#0",
        "current_app_id#0",
        "method_selector#0",
        "txn_sender#0"
      ],
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "atxn_group_size#0",
        "txn_sender#0",
        "0x705f"
      ]
    },
    "616": {
      "op": "swap",
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "atxn_group_size#0",
        "0x705f",
        "txn_sender#0"
      ]
    },
    "617": {
      "op": "concat",
      "defined_out": [
        "atxn_group_size#0",
        "current_app_id#0",
        "method_selector#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "atxn_group_size#0",
        "tmp%0#0"
      ]
    },
    "618": {
      "op": "dup",
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "atxn_group_size#0",
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "619": {
      "op": "frame_bury 2",
      "defined_out": [
        "atxn_group_size#0",
        "current_app_id#0",
        "method_selector#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "atxn_group_size#0",
        "tmp%0#0"
      ]
    },
    "621": {
      "op": "box_get",
      "defined_out": [
        "atxn_group_size#0",
        "current_app_id#0",
        "maybe_exists%0#0",
        "method_selector#0",
        "player#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "atxn_group_size#0",
        "player#0",
        "maybe_exists%0#0"
      ]
    },
    "622": {
      "op": "swap",
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "atxn_group_size#0",
        "maybe_exists%0#0",
        "player#0"
      ]
    },
    "623": {
      "op": "dup",
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "atxn_group_size#0",
        "maybe_exists%0#0",
        "player#0",
        "player#0 (copy)"
      ]
    },
    "624": {
      "op": "cover 2",
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "atxn_group_size#0",
        "player#0",
        "maybe_exists%0#0",
        "player#0"
      ]
    },
    "626": {
      "op": "frame_bury 1",
      "defined_out": [
        "atxn_group_size#0",
        "current_app_id#0",
        "maybe_exists%0#0",
        "method_selector#0",
        "player#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "atxn_group_size#0",
        "player#0",
        "maybe_exists%0#0"
      ]
    },
    "628": {
      "error": "check self.box_player entry exists",
      "op": "assert // check self.box_player entry exists",
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "atxn_group_size#0",
        "player#0"
      ]
    },
    "629": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "atxn_group_size#0",
        "current_app_id#0",
        "method_selector#0",
        "player#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "atxn_group_size#0",
        "player#0",
        "1"
      ]
    },
    "630": {
      "op": "getbyte",
      "defined_out": [
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "method_selector#0",
        "player#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "atxn_group_size#0",
        "current_player_turn#0"
      ]
    },
    "631": {
      "op": "frame_bury 5",
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "atxn_group_size#0"
      ]
    },
    "633": {
      "op": "intc_3 // 2",
      "defined_out": [
        "2",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "method_selector#0",
        "player#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "atxn_group_size#0",
        "2"
      ]
    },
    "634": {
      "op": ">=",
      "defined_out": [
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "tmp%2#0"
      ]
    },
    "635": {
      "op": "bz gamba_bool_false@3",
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0"
      ]
    },
    "638": {
      "op": "frame_dig 3",
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "atxn_group_size#0"
      ]
    },
    "640": {
      "op": "intc_2 // 10",
      "defined_out": [
        "10",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "method_selector#0",
        "player#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "atxn_group_size#0",
        "10"
      ]
    },
    "641": {
      "op": "<=",
      "defined_out": [
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "tmp%3#0"
      ]
    },
    "642": {
      "op": "bz gamba_bool_false@3",
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0"
      ]
    },
    "645": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "method_selector#0",
        "player#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "and_result%0#0"
      ]
    },
    "646": {
      "block": "gamba_bool_merge@4",
      "stack_in": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "and_result%0#0"
      ],
      "error": "gamba(): Rejected. Atomic transaction group size is out of bounds.",
      "op": "assert // gamba(): Rejected. Atomic transaction group size is out of bounds.",
      "defined_out": [],
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0"
      ]
    },
    "647": {
      "op": "intc_0 // 0",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "i#0"
      ]
    },
    "648": {
      "op": "frame_bury 6",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0"
      ]
    },
    "650": {
      "block": "gamba_for_header@5",
      "stack_in": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0"
      ],
      "op": "frame_dig 6",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "i#0"
      ]
    },
    "652": {
      "op": "frame_dig 3",
      "defined_out": [
        "atxn_group_size#0",
        "i#0"
      ],
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "i#0",
        "atxn_group_size#0"
      ]
    },
    "654": {
      "op": "<",
      "defined_out": [
        "atxn_group_size#0",
        "continue_looping%0#0",
        "i#0"
      ],
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "continue_looping%0#0"
      ]
    },
    "655": {
      "op": "bz gamba_after_for@12",
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0"
      ]
    },
    "658": {
      "op": "intc_0 // 0",
      "defined_out": [
        "atxn_group_size#0",
        "i#0",
        "j#0"
      ],
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "j#0"
      ]
    },
    "659": {
      "op": "frame_bury 7",
      "defined_out": [
        "atxn_group_size#0",
        "i#0",
        "j#0"
      ],
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0"
      ]
    },
    "661": {
      "block": "gamba_for_header@7",
      "stack_in": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0"
      ],
      "op": "frame_dig 7",
      "defined_out": [
        "j#0"
      ],
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "j#0"
      ]
    },
    "663": {
      "op": "frame_dig 6",
      "defined_out": [
        "i#0",
        "j#0"
      ],
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "j#0",
        "i#0"
      ]
    },
    "665": {
      "op": "<",
      "defined_out": [
        "continue_looping%1#0",
        "i#0",
        "j#0"
      ],
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "continue_looping%1#0"
      ]
    },
    "666": {
      "op": "bz gamba_after_for@10",
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0"
      ]
    },
    "669": {
      "op": "frame_dig 6",
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "i#0"
      ]
    },
    "671": {
      "op": "gtxns Sender",
      "defined_out": [
        "i#0",
        "j#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "tmp%4#0"
      ]
    },
    "673": {
      "op": "frame_dig 7",
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "tmp%4#0",
        "j#0"
      ]
    },
    "675": {
      "op": "dup",
      "defined_out": [
        "i#0",
        "j#0",
        "j#0 (copy)",
        "tmp%4#0"
      ],
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "tmp%4#0",
        "j#0 (copy)",
        "j#0 (copy)"
      ]
    },
    "676": {
      "op": "cover 2",
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "j#0",
        "tmp%4#0",
        "j#0 (copy)"
      ]
    },
    "678": {
      "op": "gtxns Sender",
      "defined_out": [
        "i#0",
        "j#0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "j#0",
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "680": {
      "op": "!=",
      "defined_out": [
        "i#0",
        "j#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "j#0",
        "tmp%6#0"
      ]
    },
    "681": {
      "error": "gamba(): Rejected. Every transaction in group must have unique sender address.",
      "op": "assert // gamba(): Rejected. Every transaction in group must have unique sender address.",
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "j#0"
      ]
    },
    "682": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "i#0",
        "j#0"
      ],
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "j#0",
        "1"
      ]
    },
    "683": {
      "op": "+",
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "j#0"
      ]
    },
    "684": {
      "op": "frame_bury 7",
      "defined_out": [
        "i#0",
        "j#0"
      ],
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0"
      ]
    },
    "686": {
      "op": "b gamba_for_header@7"
    },
    "689": {
      "block": "gamba_after_for@10",
      "stack_in": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0"
      ],
      "op": "frame_dig 6",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "i#0"
      ]
    },
    "691": {
      "op": "dup",
      "defined_out": [
        "i#0",
        "i#0 (copy)"
      ],
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "i#0",
        "i#0 (copy)"
      ]
    },
    "692": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "i#0",
        "i#0 (copy)"
      ],
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "i#0",
        "i#0 (copy)",
        "0"
      ]
    },
    "693": {
      "op": "gtxnsas ApplicationArgs",
      "defined_out": [
        "i#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "i#0",
        "tmp%7#0"
      ]
    },
    "695": {
      "op": "frame_dig 0",
      "defined_out": [
        "i#0",
        "method_selector#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "i#0",
        "tmp%7#0",
        "method_selector#0"
      ]
    },
    "697": {
      "op": "==",
      "defined_out": [
        "i#0",
        "method_selector#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "i#0",
        "tmp%8#0"
      ]
    },
    "698": {
      "error": "gamba(): Rejected. Method selector mismatch not allowed.",
      "op": "assert // gamba(): Rejected. Method selector mismatch not allowed.",
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "i#0"
      ]
    },
    "699": {
      "op": "dup",
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "i#0",
        "i#0 (copy)"
      ]
    },
    "700": {
      "op": "gtxns ApplicationID",
      "defined_out": [
        "i#0",
        "method_selector#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "i#0",
        "tmp%9#0"
      ]
    },
    "702": {
      "op": "frame_dig 4",
      "defined_out": [
        "current_app_id#0",
        "i#0",
        "method_selector#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "i#0",
        "tmp%9#0",
        "current_app_id#0"
      ]
    },
    "704": {
      "op": "==",
      "defined_out": [
        "current_app_id#0",
        "i#0",
        "method_selector#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "i#0",
        "tmp%10#0"
      ]
    },
    "705": {
      "error": "gamba(): Rejected. Application ID mismatch not allowed.",
      "op": "assert // gamba(): Rejected. Application ID mismatch not allowed.",
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "i#0"
      ]
    },
    "706": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "current_app_id#0",
        "i#0",
        "method_selector#0"
      ],
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "i#0",
        "1"
      ]
    },
    "707": {
      "op": "+",
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "i#0"
      ]
    },
    "708": {
      "op": "frame_bury 6",
      "defined_out": [
        "current_app_id#0",
        "i#0",
        "method_selector#0"
      ],
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0"
      ]
    },
    "710": {
      "op": "b gamba_for_header@5"
    },
    "713": {
      "block": "gamba_after_for@12",
      "stack_in": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "0"
      ]
    },
    "714": {
      "op": "bytec 5 // \"staking_finalized\"",
      "defined_out": [
        "\"staking_finalized\"",
        "0"
      ],
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "0",
        "\"staking_finalized\""
      ]
    },
    "716": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "717": {
      "error": "check self.staking_finalized exists",
      "op": "assert // check self.staking_finalized exists",
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "maybe_value%1#0"
      ]
    },
    "718": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "maybe_value%1#0",
        "1"
      ]
    },
    "719": {
      "op": "==",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "tmp%11#0"
      ]
    },
    "720": {
      "error": "gamba(): Rejected. Gamba not available until staking is finalized.",
      "op": "assert // gamba(): Rejected. Gamba not available until staking is finalized.",
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0"
      ]
    },
    "721": {
      "op": "intc_0 // 0",
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "0"
      ]
    },
    "722": {
      "op": "bytec_0 // \"total_players\"",
      "defined_out": [
        "\"total_players\"",
        "0"
      ],
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "0",
        "\"total_players\""
      ]
    },
    "723": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "724": {
      "error": "check self.total_players exists",
      "op": "assert // check self.total_players exists",
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "maybe_value%2#0"
      ]
    },
    "725": {
      "op": "intc_3 // 2",
      "defined_out": [
        "2",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "maybe_value%2#0",
        "2"
      ]
    },
    "726": {
      "op": ">=",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "tmp%12#0"
      ]
    },
    "727": {
      "op": "bz gamba_bool_false@15",
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0"
      ]
    },
    "730": {
      "op": "intc_0 // 0",
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "0"
      ]
    },
    "731": {
      "op": "bytec_0 // \"total_players\"",
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "0",
        "\"total_players\""
      ]
    },
    "732": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "733": {
      "error": "check self.total_players exists",
      "op": "assert // check self.total_players exists",
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "maybe_value%3#0"
      ]
    },
    "734": {
      "op": "intc_2 // 10",
      "defined_out": [
        "10",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "maybe_value%3#0",
        "10"
      ]
    },
    "735": {
      "op": "<=",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "tmp%13#0"
      ]
    },
    "736": {
      "op": "bz gamba_bool_false@15",
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0"
      ]
    },
    "739": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%1#0"
      ],
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "and_result%1#0"
      ]
    },
    "740": {
      "block": "gamba_bool_merge@16",
      "stack_in": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "and_result%1#0"
      ],
      "error": "gamba(): Rejected. Total number of players must not be out of bounds.",
      "op": "assert // gamba(): Rejected. Total number of players must not be out of bounds.",
      "defined_out": [],
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0"
      ]
    },
    "741": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "0"
      ]
    },
    "742": {
      "op": "bytec 4 // \"current_turn\"",
      "defined_out": [
        "\"current_turn\"",
        "0"
      ],
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "0",
        "\"current_turn\""
      ]
    },
    "744": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "745": {
      "error": "check self.current_turn exists",
      "op": "assert // check self.current_turn exists",
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "maybe_value%4#0"
      ]
    },
    "746": {
      "op": "frame_dig 5",
      "defined_out": [
        "current_player_turn#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "maybe_value%4#0",
        "current_player_turn#0"
      ]
    },
    "748": {
      "op": "==",
      "defined_out": [
        "current_player_turn#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "tmp%14#0"
      ]
    },
    "749": {
      "error": "gamba(): Rejected. Transaction sender turn is not aligned with current turn.",
      "op": "assert // gamba(): Rejected. Transaction sender turn is not aligned with current turn.",
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0"
      ]
    },
    "750": {
      "op": "global Round",
      "defined_out": [
        "current_player_turn#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "tmp%15#0"
      ]
    },
    "752": {
      "op": "itob",
      "defined_out": [
        "current_player_turn#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "tmp%16#0"
      ]
    },
    "753": {
      "op": "txn TxID",
      "defined_out": [
        "current_player_turn#0",
        "tmp%16#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "tmp%16#0",
        "tmp%17#0"
      ]
    },
    "755": {
      "op": "concat",
      "defined_out": [
        "current_player_turn#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "tmp%18#0"
      ]
    },
    "756": {
      "op": "sha256",
      "defined_out": [
        "current_player_turn#0",
        "temp_seed#0"
      ],
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "temp_seed#0"
      ]
    },
    "757": {
      "op": "pushint 16 // 16",
      "defined_out": [
        "16",
        "current_player_turn#0",
        "temp_seed#0"
      ],
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "temp_seed#0",
        "16"
      ]
    },
    "759": {
      "op": "extract_uint16",
      "defined_out": [
        "current_player_turn#0",
        "roll#0"
      ],
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "roll#0"
      ]
    },
    "760": {
      "op": "dup",
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "roll#0",
        "roll#0"
      ]
    },
    "761": {
      "op": "frame_bury 8",
      "defined_out": [
        "current_player_turn#0",
        "roll#0"
      ],
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "roll#0"
      ]
    },
    "763": {
      "op": "pushint 10992 // 10992",
      "defined_out": [
        "10992",
        "current_player_turn#0",
        "roll#0"
      ],
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "roll#0",
        "10992"
      ]
    },
    "766": {
      "op": ">=",
      "defined_out": [
        "current_player_turn#0",
        "roll#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "tmp%19#0"
      ]
    },
    "767": {
      "op": "bz gamba_else_body@18",
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0"
      ]
    },
    "770": {
      "op": "frame_dig 5",
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "current_player_turn#0"
      ]
    },
    "772": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "current_player_turn#0",
        "roll#0"
      ],
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "current_player_turn#0",
        "1"
      ]
    },
    "773": {
      "op": "+",
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "current_player_turn#0"
      ]
    },
    "774": {
      "op": "itob",
      "defined_out": [
        "current_player_turn#0",
        "roll#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "val_as_bytes%0#0"
      ]
    },
    "775": {
      "op": "dup",
      "defined_out": [
        "current_player_turn#0",
        "roll#0",
        "val_as_bytes%0#0",
        "val_as_bytes%0#0 (copy)"
      ],
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "val_as_bytes%0#0",
        "val_as_bytes%0#0 (copy)"
      ]
    },
    "776": {
      "op": "bitlen",
      "defined_out": [
        "bitlen%0#0",
        "current_player_turn#0",
        "roll#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "val_as_bytes%0#0",
        "bitlen%0#0"
      ]
    },
    "777": {
      "op": "pushint 8 // 8",
      "defined_out": [
        "8",
        "bitlen%0#0",
        "current_player_turn#0",
        "roll#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "val_as_bytes%0#0",
        "bitlen%0#0",
        "8"
      ]
    },
    "779": {
      "op": "<=",
      "defined_out": [
        "current_player_turn#0",
        "no_overflow%0#0",
        "roll#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "val_as_bytes%0#0",
        "no_overflow%0#0"
      ]
    },
    "780": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "val_as_bytes%0#0"
      ]
    },
    "781": {
      "op": "extract 7 1",
      "defined_out": [
        "current_player_turn#0",
        "roll#0",
        "uint8%0#0"
      ],
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "uint8%0#0"
      ]
    },
    "784": {
      "op": "frame_dig 1",
      "defined_out": [
        "current_player_turn#0",
        "player#0",
        "roll#0",
        "uint8%0#0"
      ],
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "uint8%0#0",
        "player#0"
      ]
    },
    "786": {
      "op": "swap",
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "player#0",
        "uint8%0#0"
      ]
    },
    "787": {
      "op": "replace2 1",
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "player#0"
      ]
    },
    "789": {
      "op": "frame_dig 2",
      "defined_out": [
        "current_player_turn#0",
        "player#0",
        "roll#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "player#0",
        "tmp%0#0"
      ]
    },
    "791": {
      "op": "swap",
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "tmp%0#0",
        "player#0"
      ]
    },
    "792": {
      "op": "box_put",
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0"
      ]
    },
    "793": {
      "block": "gamba_after_if_else@19",
      "stack_in": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "0"
      ]
    },
    "794": {
      "op": "bytec_2 // \"players_pending\"",
      "defined_out": [
        "\"players_pending\"",
        "0"
      ],
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "0",
        "\"players_pending\""
      ]
    },
    "795": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%6#0",
        "maybe_value%6#0"
      ],
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "maybe_value%6#0",
        "maybe_exists%6#0"
      ]
    },
    "796": {
      "error": "check self.players_pending exists",
      "op": "assert // check self.players_pending exists",
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "maybe_value%6#0"
      ]
    },
    "797": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%6#0"
      ],
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "maybe_value%6#0",
        "1"
      ]
    },
    "798": {
      "op": "+",
      "defined_out": [
        "new_state_value%1#0"
      ],
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "new_state_value%1#0"
      ]
    },
    "799": {
      "op": "bytec_2 // \"players_pending\"",
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "new_state_value%1#0",
        "\"players_pending\""
      ]
    },
    "800": {
      "op": "swap",
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "\"players_pending\"",
        "new_state_value%1#0"
      ]
    },
    "801": {
      "op": "app_global_put",
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0"
      ]
    },
    "802": {
      "op": "intc_0 // 0",
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "0"
      ]
    },
    "803": {
      "op": "bytec_2 // \"players_pending\"",
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "0",
        "\"players_pending\""
      ]
    },
    "804": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%7#0",
        "maybe_value%7#0"
      ],
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "maybe_value%7#0",
        "maybe_exists%7#0"
      ]
    },
    "805": {
      "error": "check self.players_pending exists",
      "op": "assert // check self.players_pending exists",
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "maybe_value%7#0"
      ]
    },
    "806": {
      "op": "intc_0 // 0",
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "maybe_value%7#0",
        "0"
      ]
    },
    "807": {
      "op": "bytec_0 // \"total_players\"",
      "defined_out": [
        "\"total_players\"",
        "0",
        "maybe_value%7#0"
      ],
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "maybe_value%7#0",
        "0",
        "\"total_players\""
      ]
    },
    "808": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%8#0",
        "maybe_value%7#0",
        "maybe_value%8#0"
      ],
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "maybe_exists%8#0"
      ]
    },
    "809": {
      "error": "check self.total_players exists",
      "op": "assert // check self.total_players exists",
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "maybe_value%7#0",
        "maybe_value%8#0"
      ]
    },
    "810": {
      "op": "==",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "tmp%21#0"
      ]
    },
    "811": {
      "op": "bz gamba_after_if_else@23",
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0"
      ]
    },
    "814": {
      "op": "intc_0 // 0",
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "0"
      ]
    },
    "815": {
      "op": "bytec_1 // \"players_elim\"",
      "defined_out": [
        "\"players_elim\"",
        "0"
      ],
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "0",
        "\"players_elim\""
      ]
    },
    "816": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%9#0",
        "maybe_value%9#0"
      ],
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "maybe_value%9#0",
        "maybe_exists%9#0"
      ]
    },
    "817": {
      "error": "check self.players_elim exists",
      "op": "assert // check self.players_elim exists",
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "maybe_value%9#0"
      ]
    },
    "818": {
      "op": "intc_0 // 0",
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "maybe_value%9#0",
        "0"
      ]
    },
    "819": {
      "op": "bytec_0 // \"total_players\"",
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "maybe_value%9#0",
        "0",
        "\"total_players\""
      ]
    },
    "820": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%10#0",
        "maybe_value%10#0",
        "maybe_value%9#0"
      ],
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "maybe_value%9#0",
        "maybe_value%10#0",
        "maybe_exists%10#0"
      ]
    },
    "821": {
      "error": "check self.total_players exists",
      "op": "assert // check self.total_players exists",
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "maybe_value%9#0",
        "maybe_value%10#0"
      ]
    },
    "822": {
      "op": "!=",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "tmp%22#0"
      ]
    },
    "823": {
      "op": "bz gamba_after_if_else@22",
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0"
      ]
    },
    "826": {
      "op": "intc_0 // 0",
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "0"
      ]
    },
    "827": {
      "op": "bytec_0 // \"total_players\"",
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "0",
        "\"total_players\""
      ]
    },
    "828": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%11#0",
        "maybe_value%11#0"
      ],
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "maybe_value%11#0",
        "maybe_exists%11#0"
      ]
    },
    "829": {
      "error": "check self.total_players exists",
      "op": "assert // check self.total_players exists",
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "maybe_value%11#0"
      ]
    },
    "830": {
      "op": "intc_0 // 0",
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "maybe_value%11#0",
        "0"
      ]
    },
    "831": {
      "op": "bytec_1 // \"players_elim\"",
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "maybe_value%11#0",
        "0",
        "\"players_elim\""
      ]
    },
    "832": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%12#0",
        "maybe_value%11#0",
        "maybe_value%12#0"
      ],
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "maybe_value%11#0",
        "maybe_value%12#0",
        "maybe_exists%12#0"
      ]
    },
    "833": {
      "error": "check self.players_elim exists",
      "op": "assert // check self.players_elim exists",
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "maybe_value%11#0",
        "maybe_value%12#0"
      ]
    },
    "834": {
      "op": "-",
      "defined_out": [
        "new_state_value%2#0"
      ],
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "new_state_value%2#0"
      ]
    },
    "835": {
      "op": "bytec_0 // \"total_players\"",
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "new_state_value%2#0",
        "\"total_players\""
      ]
    },
    "836": {
      "op": "swap",
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "\"total_players\"",
        "new_state_value%2#0"
      ]
    },
    "837": {
      "op": "app_global_put",
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0"
      ]
    },
    "838": {
      "op": "intc_0 // 0",
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "0"
      ]
    },
    "839": {
      "op": "bytec 4 // \"current_turn\"",
      "defined_out": [
        "\"current_turn\"",
        "0"
      ],
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "0",
        "\"current_turn\""
      ]
    },
    "841": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%13#0",
        "maybe_value%13#0"
      ],
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "maybe_value%13#0",
        "maybe_exists%13#0"
      ]
    },
    "842": {
      "error": "check self.current_turn exists",
      "op": "assert // check self.current_turn exists",
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "maybe_value%13#0"
      ]
    },
    "843": {
      "op": "intc_1 // 1",
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "maybe_value%13#0",
        "1"
      ]
    },
    "844": {
      "op": "+",
      "defined_out": [
        "new_state_value%3#0"
      ],
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "new_state_value%3#0"
      ]
    },
    "845": {
      "op": "bytec 4 // \"current_turn\"",
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "new_state_value%3#0",
        "\"current_turn\""
      ]
    },
    "847": {
      "op": "swap",
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "\"current_turn\"",
        "new_state_value%3#0"
      ]
    },
    "848": {
      "op": "app_global_put",
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0"
      ]
    },
    "849": {
      "block": "gamba_after_if_else@22",
      "stack_in": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0"
      ],
      "op": "bytec_1 // \"players_elim\"",
      "defined_out": [
        "\"players_elim\""
      ],
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "\"players_elim\""
      ]
    },
    "850": {
      "op": "intc_0 // 0",
      "defined_out": [
        "\"players_elim\"",
        "0"
      ],
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "\"players_elim\"",
        "0"
      ]
    },
    "851": {
      "op": "app_global_put",
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0"
      ]
    },
    "852": {
      "op": "bytec_2 // \"players_pending\"",
      "defined_out": [
        "\"players_pending\""
      ],
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "\"players_pending\""
      ]
    },
    "853": {
      "op": "intc_0 // 0",
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "\"players_pending\"",
        "0"
      ]
    },
    "854": {
      "op": "app_global_put",
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0"
      ]
    },
    "855": {
      "block": "gamba_after_if_else@23",
      "stack_in": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0"
      ],
      "op": "frame_dig 8",
      "defined_out": [
        "roll#0"
      ],
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "roll#0"
      ]
    },
    "857": {
      "op": "frame_bury 0"
    },
    "859": {
      "retsub": true,
      "op": "retsub"
    },
    "860": {
      "block": "gamba_else_body@18",
      "stack_in": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "0"
      ]
    },
    "861": {
      "op": "bytec_1 // \"players_elim\"",
      "defined_out": [
        "\"players_elim\"",
        "0"
      ],
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "0",
        "\"players_elim\""
      ]
    },
    "862": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%5#0",
        "maybe_value%5#0"
      ],
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "863": {
      "error": "check self.players_elim exists",
      "op": "assert // check self.players_elim exists",
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "maybe_value%5#0"
      ]
    },
    "864": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%5#0"
      ],
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "maybe_value%5#0",
        "1"
      ]
    },
    "865": {
      "op": "+",
      "defined_out": [
        "new_state_value%0#0"
      ],
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "new_state_value%0#0"
      ]
    },
    "866": {
      "op": "bytec_1 // \"players_elim\"",
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "new_state_value%0#0",
        "\"players_elim\""
      ]
    },
    "867": {
      "op": "swap",
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "\"players_elim\"",
        "new_state_value%0#0"
      ]
    },
    "868": {
      "op": "app_global_put",
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0"
      ]
    },
    "869": {
      "op": "b gamba_after_if_else@19"
    },
    "872": {
      "block": "gamba_bool_false@15",
      "stack_in": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%1#0"
      ],
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "and_result%1#0"
      ]
    },
    "873": {
      "op": "b gamba_bool_merge@16"
    },
    "876": {
      "block": "gamba_bool_false@3",
      "stack_in": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "method_selector#0",
        "player#0",
        "tmp%0#0",
        "atxn_group_size#0",
        "current_app_id#0",
        "current_player_turn#0",
        "i#0",
        "j#0",
        "roll#0",
        "and_result%0#0"
      ]
    },
    "877": {
      "op": "b gamba_bool_merge@4"
    },
    "880": {
      "subroutine": "smart_contracts.pieout.contract.Pieout.terminate",
      "params": {},
      "block": "terminate",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "882": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "884": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "885": {
      "error": "Transaction sender address must match application creator address.",
      "op": "assert // Transaction sender address must match application creator address.",
      "stack_out": []
    },
    "886": {
      "op": "intc 5 // TMPL_DELETABLE",
      "defined_out": [
        "TMPL_DELETABLE"
      ],
      "stack_out": [
        "TMPL_DELETABLE"
      ]
    },
    "888": {
      "error": "Template variable 'DELETABLE' needs to be 'True' at deploy-time.",
      "op": "assert // Template variable 'DELETABLE' needs to be 'True' at deploy-time.",
      "stack_out": []
    },
    "889": {
      "retsub": true,
      "op": "retsub"
    }
  }
}