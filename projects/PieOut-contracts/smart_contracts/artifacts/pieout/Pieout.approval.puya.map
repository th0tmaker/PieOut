{
  "version": 3,
  "sources": [
    "../../../.venv/Lib/site-packages/lib_pcg/pcg32.py",
    "../../pieout/contract.py",
    "../../pieout/subroutines.py"
  ],
  "mappings": "AC2BA;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAomBK;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AArTA;;AAAA;AAAA;AAAA;;AAAA;AA/SL;;;AAAA;AA+SK;;;AAAA;;AAxDA;;AAAA;AAAA;AAAA;;AAAA;AAvPL;;;AAAA;AAuPK;;;AAAA;;AAtCA;;AAAA;AAAA;AAAA;;AAAA;AAjNL;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAiNK;;;AAAA;;AApDA;;AAAA;AAAA;AAAA;;AAAA;AA7JL;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AA6JK;;;AAAA;;AAhDA;;AAAA;AAAA;AAAA;;AAAA;AA7GL;;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AA6GK;;;AAAA;;AA/BA;;AAAA;AAAA;AAAA;;AAAA;AA9EL;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AA8EK;;;AAAA;;AAXA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAfA;;AAAA;AAAA;AAAA;;AAAA;AApDL;;;AAAA;AAoDK;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAnBA;;AAAA;AAAA;AAAA;;AAAA;AAjCL;;;AAAA;AAiCK;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AALA;;AAAA;AAAA;AAAA;;AAAA;AAEU;;AAFV;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAfA;;AAAA;AAAA;AAAA;;AAAA;AAbL;;;AAAA;;;AAaK;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AChCL;;;;;AAQmB;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEf;;AAAqC;AAAf;AAGD;AAGL;AAAP;;AAAA;;AAAA;;;;;AAAb;;;AAEQ;;AAAA;;AAAgD;AAA5B;AAGjB;;AAAA;AAAX;;;AACiC;AAArB;;AAGZ;;AAAA;;;AAEgB;;AAAA;;AAAuB;;AAAvB;;;;;AAIZ;AAfS;;AAA+B;AAA/B;AAAA;;;;;ADgBb;;;AAQY;;AAAA;AAAkB;;AAAA;AAAlB;AADO;;;AAAA;AAKJ;;;AAAA;AAAP;AAQR;;;AAGqB;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAKT;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AACA;;AAAA;;;AACA;;AAAA;;;AACA;;AAAA;;;AACA;;AAAA;;;AACA;;AAAA;;;AACA;;AAAA;;;AACA;;AAAA;;;AATG;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAP;AAaR;;;;;AAGuB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAEL;;;;AAAA;AACS;AAAH;AAAP;;AAAA;;AAAA;AAAjB;;;AACY;;AAAA;;AAAgD;AAA5B;AAApB;AAAA;;AACwB;;AAArB;;;;;AAAf;;;AAEgB;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;;;;;;AAJC;;AAA+B;AAA/B;AAAA;;;;;AAMT;;AAAA;;AAAA;AAQO;;AAAc;;AAAd;AAAP;AAGA;AAAe;AAAf;AACA;;;;;;;;;;;;;;;AAAqB;AAArB;;AAER;;;AAOqB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGN;;AAAA;AAAA;;AAAP;AACO;AAAA;;;AAA8B;;AAA9B;AAAP;AACO;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAgC;AAAhC;AAAP;AACO;;AAAA;;AAAoB;;AAApB;AAAP;AACO;;AAAA;;AAAsB;;AAAtB;AAAP;AACO;;AAAA;;AAAoB;;AAApB;AAAP;AAI4B;;AAA5B;;AAAyB;AAAzB;;AAAA;AAEA;AAAA;AAAA;AAC4B;;;AAA5B;;AACwB;AAAxB;;AAC6B;;AAA7B;;AACwB;;;;;;;;;;AAAxB;;AACyC;;AAAzC;;AAGA;;AAER;;;AASe;;AAAiB;;AAAjB;AAAP;AAEO;;AAAA;;AAAoB;;AAApB;AAAP;AACO;;AAAA;;AAAoB;;AAApB;AAAP;AACO;;AAAA;;AAAoB;;AAApB;AAAP;AAEO;;AAAA;;AAAsB;;AAAtB;AAAP;AACO;;AAAA;;AAAsB;;AAAtB;AAAP;AACO;;AAAA;;AAAsB;;AAAtB;AAAP;AAEO;;AAAA;;AAAoB;;;;AAApB;AAAP;AACO;;AAAA;;AAEoB;AAAA;;AAAA;AAAZ;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AADF;;;AADc;AAAA;;;AAApB;;AAAA;AAAP;AAIO;;AAAA;;AAAA;AAAoB;;AAApB;AAAP;AAKgB;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAID;AAAA;AACkB;;AACD;;AAPV;AADc;;AAAA;AAGjB;;;AAHiB;AAIrB;AAJqB;AAKhB;;AALgB;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAhB;AAAA;AAAA;AAAA;AAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAYsB;AAAA;AAAA;AAAA;AAAtB;AAAA;AAAA;AAAA;AAAsC;AAAA;AAAtC;;AAAA;;AAAA;AAGyE;AAAA;AAAA;AAAA;AAAR;AAAnC;AAA9B;AAA8B;AACL;AAAG;;AAA5B;AAGA;AAAA;AAAA;AAAA;AAAgB;AAAhB;AAAA;AAAA;AAAA;;AAER;;;AAOe;;AAAA;AAAW;AAAX;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAP;AAEO;;AAAA;;AAAoB;;AAApB;AAAP;AACO;;AAAA;;AAAsB;;AAAtB;AAAP;AACO;;AAAA;;AAAA;AAAoB;;;;AAApB;AAAP;AAGa;;AAAA;AAAA;AAMQ;;AAAA;AAAA;AAAA;AAAA;AAHjB;;AAEqB;AAFrB;;AAIiB;AAJjB;;;AAAA;AADJ;AAUO;AAAA;;;AAA6B;;AAAA;;;AAA7B;AAAP;AACO;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAP;AAEI;AAAA;;AAAA;AAAuD;;AAAA;AAAA;AAAnB;AAAA;AAApC;;AAAA;AADJ;AAK8B;AAA9B;;AAA8B;AAC8B;;AAA5D;AAAA;;AAAA;AAGuC;AAAA;AAAA;AAAmC;AAAnC;AAAX;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAA5B;;AAGyC;AAAA;;AAAA;AAAoC;AAApC;AAAZ;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAA7B;;AAGoC;AAAA;;AAAA;AAAA;;AAAA;AAAZ;AAAxB;;AAAA;;AAGG;;;AAA6B;;AAAA;;;AAA7B;AAAX;;;AACY;;AAAA;AAAA;AAAA;;;AAGJ;;;;AAAA;;AAER;;;AAOe;;AAAA;AAAW;AAAX;;AAAA;AAAA;AAAA;AAAA;;AAAP;AAEO;;AAAA;;AAAoB;;AAApB;AAAP;AACO;;AAAA;;AAAsB;;AAAtB;AAAP;AACO;;AAAA;;AAAoB;;;;AAApB;AAAP;AAMqB;AAAA;AAAA;AAAA;AAHjB;;AAEqB;AAFrB;;AAIiB;AAJjB;;;AAMO;AANP;AADJ;AAYiC;;AAAoB;;AAAR;AAAZ;AAAV;;AAAnB;AAA0E;;AAA1E;AACE;AADF;AAKW;;AAAA;AAIE;AAFkB;AAAnC;;;;AAAqB;;AAArB;AAAA;AAAA;;AAMR;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAMe;;AAAA;AAAW;AAAX;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAP;AAKqB;AAAA;AAAA;AAAA;AAAA;AAHjB;;AAEqB;AAFrB;;AAIiB;AAJjB;;;AAMO;AANP;AADJ;AAWa;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAGN;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAgC;AAAhC;AAAP;AAEe;;AAAuB;;AAAA;;AC5PlB;AAAA;;;AFzBjB;AAAe;;AAAf;AAAP;;;AAEoB;AAoIC;AAkHe;;AAAf;AAAA;;AAtPc;;AAuPd;AAAA;;AAlHD;AAAA;;AAiHgB;;AAAf;AAAA;;AAtPc;;AAuPd;AAAA;;AAxEX;;;;AAAA;;AA8FqB;;;;;;;;;;;AAAQ;AAAhB;AAAA;;AAQP;;AAAT;AAjFkB;;AAET;AAAZ;;AAES;AAAL;;;;AAAK;;AE5KF;;AF4KE;AAAjB;;;AA8CyB;;AAAA;AAAe;;AAAf;AAAA;;AAfM;;AAgBN;AAAA;;AAAA;AASE;AAAS;;AAAT;AAAD;;AAAA;AAA0B;;AAA3B;AAqBL;;AAAT;AArB8C;AAAS;;AAAT;AAO7C;AAAA;AAMuB;AAAA;AAAQ;AAAhB;AAAA;;AANiD;;AAArB;AAAV;;AAAA;AAAA;AAczB;;AAAT;AAdA;AAAA;AAAA;;AA5DQ;;AAAA;AAAnB;;;AAEiC;;AATJ;;AASI;AEnLb;AFmLY;AAAR;AADM;;;AAAV;;AAAA;AAAA;AAAA;;AAJH;;AAAA;AAAA;AAAA;;;;;;;;;;;;AEzKL;AAAR;;AACmB;;AAAA;AAAA;;AAAH;AAAZ;;AAAK;;AAAA;;AAAA;AAAb;;;AACiC;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAzB;;AAAO;AAEI;;;AAAR;AAAX;;;AAGQ;;AAAS;AAAT;AAAA;;AANK;;AAAiC;AAAjC;AAAA;;;;;AAQG;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAAA;;AACG;;AAAA;AAAA;;AAAA;;;AAAZ;;;;AAAP;;;AACQ;;AAAA;;AAAA;;AACA;;AAAA;;;;;;AD2OuC;AAAA;AAAA;AAAmC;AAAnC;AAAX;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAA5B;;AAGA;;AAAA;AAAA;;AA2BR;;;AAGe;;AAAA;AAAW;AAAX;AAAA;AAAA;AAAA;AAAA;;AAAP;AAGa;AAAA;AAAA;AAGN;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAgC;AAAhC;AAAP;AACO;AAAA;AAAA;AAAA;AAAP;AACO;AAAA;;;AAA6B;;AAA7B;AAAP;AAIA;AACa;;AACF;;AAAA;;AAAA;;;;;AAFX;;;AAAA;;;AAAA;AAMwB;;;;;;;;;;AAAxB;;AAGA;;AAiSI;;AAAc;;AAAd;AADJ;AAIO;;AAAP;",
  "op_pc_offset": 2,
  "pc_events": {
    "0": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%0#2"
      ]
    },
    "2": {
      "op": "bz main_after_if_else@17",
      "stack_out": []
    },
    "5": {
      "op": "pushbytess 0x137d1094 0xb66d2f56 0xee030db4 0x7401ca83 0x5be219f0 0x102875e7 0xda7b6785 0x71af966e 0xc2d68aff 0x1a789ed0 0x8e856f92 0x5ff16da4 // method \"calc_single_box_fee(uint8,uint16)uint64\", method \"read_gen_unix()uint64\", method \"read_game_state(uint64)(uint64,bool,uint8,uint8,uint8,uint16,uint64,address,address)\", method \"read_game_players(uint64)address[]\", method \"generate()void\", method \"reset_game(uint64,pay)void\", method \"new_game(uint64,pay,pay,pay)void\", method \"join_game(uint64,pay)void\", method \"commit_rand(uint64,pay)void\", method \"play_game(uint64)void\", method \"claim_prize_pool(uint64)void\", method \"terminate()void\"",
      "defined_out": [
        "Method(calc_single_box_fee(uint8,uint16)uint64)",
        "Method(claim_prize_pool(uint64)void)",
        "Method(commit_rand(uint64,pay)void)",
        "Method(generate()void)",
        "Method(join_game(uint64,pay)void)",
        "Method(new_game(uint64,pay,pay,pay)void)",
        "Method(play_game(uint64)void)",
        "Method(read_game_players(uint64)address[])",
        "Method(read_game_state(uint64)(uint64,bool,uint8,uint8,uint8,uint16,uint64,address,address))",
        "Method(read_gen_unix()uint64)",
        "Method(reset_game(uint64,pay)void)",
        "Method(terminate()void)"
      ],
      "stack_out": [
        "Method(calc_single_box_fee(uint8,uint16)uint64)",
        "Method(read_gen_unix()uint64)",
        "Method(read_game_state(uint64)(uint64,bool,uint8,uint8,uint8,uint16,uint64,address,address))",
        "Method(read_game_players(uint64)address[])",
        "Method(generate()void)",
        "Method(reset_game(uint64,pay)void)",
        "Method(new_game(uint64,pay,pay,pay)void)",
        "Method(join_game(uint64,pay)void)",
        "Method(commit_rand(uint64,pay)void)",
        "Method(play_game(uint64)void)",
        "Method(claim_prize_pool(uint64)void)",
        "Method(terminate()void)"
      ]
    },
    "67": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(calc_single_box_fee(uint8,uint16)uint64)",
        "Method(claim_prize_pool(uint64)void)",
        "Method(commit_rand(uint64,pay)void)",
        "Method(generate()void)",
        "Method(join_game(uint64,pay)void)",
        "Method(new_game(uint64,pay,pay,pay)void)",
        "Method(play_game(uint64)void)",
        "Method(read_game_players(uint64)address[])",
        "Method(read_game_state(uint64)(uint64,bool,uint8,uint8,uint8,uint16,uint64,address,address))",
        "Method(read_gen_unix()uint64)",
        "Method(reset_game(uint64,pay)void)",
        "Method(terminate()void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(calc_single_box_fee(uint8,uint16)uint64)",
        "Method(read_gen_unix()uint64)",
        "Method(read_game_state(uint64)(uint64,bool,uint8,uint8,uint8,uint16,uint64,address,address))",
        "Method(read_game_players(uint64)address[])",
        "Method(generate()void)",
        "Method(reset_game(uint64,pay)void)",
        "Method(new_game(uint64,pay,pay,pay)void)",
        "Method(join_game(uint64,pay)void)",
        "Method(commit_rand(uint64,pay)void)",
        "Method(play_game(uint64)void)",
        "Method(claim_prize_pool(uint64)void)",
        "Method(terminate()void)",
        "tmp%2#0"
      ]
    },
    "70": {
      "op": "match main_calc_single_box_fee_route@5 main_read_gen_unix_route@6 main_read_game_state_route@7 main_read_game_players_route@8 main_generate_route@9 main_reset_game_route@10 main_new_game_route@11 main_join_game_route@12 main_commit_rand_route@13 main_play_game_route@14 main_claim_prize_pool_route@15 main_terminate_route@16",
      "stack_out": []
    },
    "96": {
      "block": "main_after_if_else@17",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "97": {
      "op": "return",
      "stack_out": []
    },
    "98": {
      "block": "main_terminate_route@16",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%67#0"
      ],
      "stack_out": [
        "tmp%67#0"
      ]
    },
    "100": {
      "op": "pushint 5 // DeleteApplication",
      "defined_out": [
        "DeleteApplication",
        "tmp%67#0"
      ],
      "stack_out": [
        "tmp%67#0",
        "DeleteApplication"
      ]
    },
    "102": {
      "op": "==",
      "defined_out": [
        "tmp%68#0"
      ],
      "stack_out": [
        "tmp%68#0"
      ]
    },
    "103": {
      "error": "OnCompletion is not DeleteApplication",
      "op": "assert // OnCompletion is not DeleteApplication",
      "stack_out": []
    },
    "104": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%69#0"
      ],
      "stack_out": [
        "tmp%69#0"
      ]
    },
    "106": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "107": {
      "callsub": "smart_contracts.pieout.contract.Pieout.terminate",
      "op": "callsub terminate"
    },
    "110": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "111": {
      "op": "return",
      "stack_out": []
    },
    "112": {
      "block": "main_claim_prize_pool_route@15",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%62#0"
      ],
      "stack_out": [
        "tmp%62#0"
      ]
    },
    "114": {
      "op": "!",
      "defined_out": [
        "tmp%63#0"
      ],
      "stack_out": [
        "tmp%63#0"
      ]
    },
    "115": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "116": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%64#0"
      ],
      "stack_out": [
        "tmp%64#0"
      ]
    },
    "118": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "119": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%7#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%7#0"
      ]
    },
    "122": {
      "op": "btoi",
      "defined_out": [
        "tmp%66#0"
      ],
      "stack_out": [
        "tmp%66#0"
      ]
    },
    "123": {
      "callsub": "smart_contracts.pieout.contract.Pieout.claim_prize_pool",
      "op": "callsub claim_prize_pool",
      "stack_out": []
    },
    "126": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "127": {
      "op": "return",
      "stack_out": []
    },
    "128": {
      "block": "main_play_game_route@14",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%57#0"
      ],
      "stack_out": [
        "tmp%57#0"
      ]
    },
    "130": {
      "op": "!",
      "defined_out": [
        "tmp%58#0"
      ],
      "stack_out": [
        "tmp%58#0"
      ]
    },
    "131": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "132": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%59#0"
      ],
      "stack_out": [
        "tmp%59#0"
      ]
    },
    "134": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "135": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%6#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%6#0"
      ]
    },
    "138": {
      "op": "btoi",
      "defined_out": [
        "tmp%61#0"
      ],
      "stack_out": [
        "tmp%61#0"
      ]
    },
    "139": {
      "callsub": "smart_contracts.pieout.contract.Pieout.play_game",
      "op": "callsub play_game",
      "stack_out": []
    },
    "142": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "143": {
      "op": "return",
      "stack_out": []
    },
    "144": {
      "block": "main_commit_rand_route@13",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%51#0"
      ],
      "stack_out": [
        "tmp%51#0"
      ]
    },
    "146": {
      "op": "!",
      "defined_out": [
        "tmp%52#0"
      ],
      "stack_out": [
        "tmp%52#0"
      ]
    },
    "147": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "148": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%53#0"
      ],
      "stack_out": [
        "tmp%53#0"
      ]
    },
    "150": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "151": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%5#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%5#0"
      ]
    },
    "154": {
      "op": "btoi",
      "defined_out": [
        "tmp%55#0"
      ],
      "stack_out": [
        "tmp%55#0"
      ]
    },
    "155": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%55#0",
        "tmp%56#0"
      ],
      "stack_out": [
        "tmp%55#0",
        "tmp%56#0"
      ]
    },
    "157": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "tmp%55#0",
        "tmp%56#0"
      ],
      "stack_out": [
        "tmp%55#0",
        "tmp%56#0",
        "1"
      ]
    },
    "158": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%5#0",
        "tmp%55#0"
      ],
      "stack_out": [
        "tmp%55#0",
        "gtxn_idx%5#0"
      ]
    },
    "159": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%5#0",
        "gtxn_idx%5#0 (copy)",
        "tmp%55#0"
      ],
      "stack_out": [
        "tmp%55#0",
        "gtxn_idx%5#0",
        "gtxn_idx%5#0 (copy)"
      ]
    },
    "160": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%5#0",
        "gtxn_type%5#0",
        "tmp%55#0"
      ],
      "stack_out": [
        "tmp%55#0",
        "gtxn_idx%5#0",
        "gtxn_type%5#0"
      ]
    },
    "162": {
      "op": "intc_0 // pay",
      "defined_out": [
        "gtxn_idx%5#0",
        "gtxn_type%5#0",
        "pay",
        "tmp%55#0"
      ],
      "stack_out": [
        "tmp%55#0",
        "gtxn_idx%5#0",
        "gtxn_type%5#0",
        "pay"
      ]
    },
    "163": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%5#0",
        "gtxn_type_matches%5#0",
        "tmp%55#0"
      ],
      "stack_out": [
        "tmp%55#0",
        "gtxn_idx%5#0",
        "gtxn_type_matches%5#0"
      ]
    },
    "164": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "tmp%55#0",
        "gtxn_idx%5#0"
      ]
    },
    "165": {
      "callsub": "smart_contracts.pieout.contract.Pieout.commit_rand",
      "op": "callsub commit_rand",
      "stack_out": []
    },
    "168": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "169": {
      "op": "return",
      "stack_out": []
    },
    "170": {
      "block": "main_join_game_route@12",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%45#0"
      ]
    },
    "172": {
      "op": "!",
      "defined_out": [
        "tmp%46#0"
      ],
      "stack_out": [
        "tmp%46#0"
      ]
    },
    "173": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "174": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%47#0"
      ],
      "stack_out": [
        "tmp%47#0"
      ]
    },
    "176": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "177": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%4#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%4#0"
      ]
    },
    "180": {
      "op": "btoi",
      "defined_out": [
        "tmp%49#0"
      ],
      "stack_out": [
        "tmp%49#0"
      ]
    },
    "181": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%49#0",
        "tmp%50#0"
      ],
      "stack_out": [
        "tmp%49#0",
        "tmp%50#0"
      ]
    },
    "183": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "tmp%49#0",
        "tmp%50#0"
      ],
      "stack_out": [
        "tmp%49#0",
        "tmp%50#0",
        "1"
      ]
    },
    "184": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%4#0",
        "tmp%49#0"
      ],
      "stack_out": [
        "tmp%49#0",
        "gtxn_idx%4#0"
      ]
    },
    "185": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%4#0",
        "gtxn_idx%4#0 (copy)",
        "tmp%49#0"
      ],
      "stack_out": [
        "tmp%49#0",
        "gtxn_idx%4#0",
        "gtxn_idx%4#0 (copy)"
      ]
    },
    "186": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%4#0",
        "gtxn_type%4#0",
        "tmp%49#0"
      ],
      "stack_out": [
        "tmp%49#0",
        "gtxn_idx%4#0",
        "gtxn_type%4#0"
      ]
    },
    "188": {
      "op": "intc_0 // pay",
      "defined_out": [
        "gtxn_idx%4#0",
        "gtxn_type%4#0",
        "pay",
        "tmp%49#0"
      ],
      "stack_out": [
        "tmp%49#0",
        "gtxn_idx%4#0",
        "gtxn_type%4#0",
        "pay"
      ]
    },
    "189": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%4#0",
        "gtxn_type_matches%4#0",
        "tmp%49#0"
      ],
      "stack_out": [
        "tmp%49#0",
        "gtxn_idx%4#0",
        "gtxn_type_matches%4#0"
      ]
    },
    "190": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "tmp%49#0",
        "gtxn_idx%4#0"
      ]
    },
    "191": {
      "callsub": "smart_contracts.pieout.contract.Pieout.join_game",
      "op": "callsub join_game",
      "stack_out": []
    },
    "194": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "195": {
      "op": "return",
      "stack_out": []
    },
    "196": {
      "block": "main_new_game_route@11",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%37#0"
      ]
    },
    "198": {
      "op": "!",
      "defined_out": [
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%38#0"
      ]
    },
    "199": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "200": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0"
      ]
    },
    "202": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "203": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%3#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%3#0"
      ]
    },
    "206": {
      "op": "btoi",
      "defined_out": [
        "tmp%41#0"
      ],
      "stack_out": [
        "tmp%41#0"
      ]
    },
    "207": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%41#0",
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%41#0",
        "tmp%42#0"
      ]
    },
    "209": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "tmp%41#0",
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%41#0",
        "tmp%42#0",
        "3"
      ]
    },
    "211": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%1#0",
        "tmp%41#0"
      ],
      "stack_out": [
        "tmp%41#0",
        "gtxn_idx%1#0"
      ]
    },
    "212": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%1#0 (copy)",
        "tmp%41#0"
      ],
      "stack_out": [
        "tmp%41#0",
        "gtxn_idx%1#0",
        "gtxn_idx%1#0 (copy)"
      ]
    },
    "213": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_type%1#0",
        "tmp%41#0"
      ],
      "stack_out": [
        "tmp%41#0",
        "gtxn_idx%1#0",
        "gtxn_type%1#0"
      ]
    },
    "215": {
      "op": "intc_0 // pay",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_type%1#0",
        "pay",
        "tmp%41#0"
      ],
      "stack_out": [
        "tmp%41#0",
        "gtxn_idx%1#0",
        "gtxn_type%1#0",
        "pay"
      ]
    },
    "216": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_type_matches%1#0",
        "tmp%41#0"
      ],
      "stack_out": [
        "tmp%41#0",
        "gtxn_idx%1#0",
        "gtxn_type_matches%1#0"
      ]
    },
    "217": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "tmp%41#0",
        "gtxn_idx%1#0"
      ]
    },
    "218": {
      "op": "txn GroupIndex",
      "defined_out": [
        "gtxn_idx%1#0",
        "tmp%41#0",
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%41#0",
        "gtxn_idx%1#0",
        "tmp%43#0"
      ]
    },
    "220": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "gtxn_idx%1#0",
        "tmp%41#0",
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%41#0",
        "gtxn_idx%1#0",
        "tmp%43#0",
        "2"
      ]
    },
    "221": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "tmp%41#0"
      ],
      "stack_out": [
        "tmp%41#0",
        "gtxn_idx%1#0",
        "gtxn_idx%2#0"
      ]
    },
    "222": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "gtxn_idx%2#0 (copy)",
        "tmp%41#0"
      ],
      "stack_out": [
        "tmp%41#0",
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "gtxn_idx%2#0 (copy)"
      ]
    },
    "223": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "gtxn_type%2#0",
        "tmp%41#0"
      ],
      "stack_out": [
        "tmp%41#0",
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "gtxn_type%2#0"
      ]
    },
    "225": {
      "op": "intc_0 // pay",
      "stack_out": [
        "tmp%41#0",
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "gtxn_type%2#0",
        "pay"
      ]
    },
    "226": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "gtxn_type_matches%2#0",
        "tmp%41#0"
      ],
      "stack_out": [
        "tmp%41#0",
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "gtxn_type_matches%2#0"
      ]
    },
    "227": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "tmp%41#0",
        "gtxn_idx%1#0",
        "gtxn_idx%2#0"
      ]
    },
    "228": {
      "op": "txn GroupIndex",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "tmp%41#0",
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%41#0",
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "tmp%44#0"
      ]
    },
    "230": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "tmp%41#0",
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%41#0",
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "tmp%44#0",
        "1"
      ]
    },
    "231": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "gtxn_idx%3#0",
        "tmp%41#0"
      ],
      "stack_out": [
        "tmp%41#0",
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "gtxn_idx%3#0"
      ]
    },
    "232": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "gtxn_idx%3#0",
        "gtxn_idx%3#0 (copy)",
        "tmp%41#0"
      ],
      "stack_out": [
        "tmp%41#0",
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "gtxn_idx%3#0",
        "gtxn_idx%3#0 (copy)"
      ]
    },
    "233": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "gtxn_idx%3#0",
        "gtxn_type%3#0",
        "tmp%41#0"
      ],
      "stack_out": [
        "tmp%41#0",
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "gtxn_idx%3#0",
        "gtxn_type%3#0"
      ]
    },
    "235": {
      "op": "intc_0 // pay",
      "stack_out": [
        "tmp%41#0",
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "gtxn_idx%3#0",
        "gtxn_type%3#0",
        "pay"
      ]
    },
    "236": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "gtxn_idx%3#0",
        "gtxn_type_matches%3#0",
        "tmp%41#0"
      ],
      "stack_out": [
        "tmp%41#0",
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "gtxn_idx%3#0",
        "gtxn_type_matches%3#0"
      ]
    },
    "237": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "tmp%41#0",
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "gtxn_idx%3#0"
      ]
    },
    "238": {
      "callsub": "smart_contracts.pieout.contract.Pieout.new_game",
      "op": "callsub new_game",
      "stack_out": []
    },
    "241": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "242": {
      "op": "return",
      "stack_out": []
    },
    "243": {
      "block": "main_reset_game_route@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0"
      ]
    },
    "245": {
      "op": "!",
      "defined_out": [
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0"
      ]
    },
    "246": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "247": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0"
      ]
    },
    "249": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "250": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%2#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%2#0"
      ]
    },
    "253": {
      "op": "btoi",
      "defined_out": [
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0"
      ]
    },
    "254": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%35#0",
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%35#0",
        "tmp%36#0"
      ]
    },
    "256": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "tmp%35#0",
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%35#0",
        "tmp%36#0",
        "1"
      ]
    },
    "257": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0",
        "gtxn_idx%0#0"
      ]
    },
    "258": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)",
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0",
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ]
    },
    "259": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0",
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ]
    },
    "261": {
      "op": "intc_0 // pay",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay",
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0",
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay"
      ]
    },
    "262": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0",
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0",
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ]
    },
    "263": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "tmp%35#0",
        "gtxn_idx%0#0"
      ]
    },
    "264": {
      "callsub": "smart_contracts.pieout.contract.Pieout.reset_game",
      "op": "callsub reset_game",
      "stack_out": []
    },
    "267": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "268": {
      "op": "return",
      "stack_out": []
    },
    "269": {
      "block": "main_generate_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0"
      ]
    },
    "271": {
      "op": "!",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "272": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "273": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0"
      ]
    },
    "275": {
      "op": "!",
      "defined_out": [
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0"
      ]
    },
    "276": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "277": {
      "callsub": "smart_contracts.pieout.contract.Pieout.generate",
      "op": "callsub generate"
    },
    "280": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "281": {
      "op": "return",
      "stack_out": []
    },
    "282": {
      "block": "main_read_game_players_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "284": {
      "op": "!",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "285": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "286": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "288": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "289": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%1#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%1#0"
      ]
    },
    "292": {
      "op": "btoi",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "293": {
      "callsub": "smart_contracts.pieout.contract.Pieout.read_game_players",
      "op": "callsub read_game_players",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "296": {
      "op": "bytec 4 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0",
        "0x151f7c75"
      ]
    },
    "298": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%25#0"
      ]
    },
    "299": {
      "op": "concat",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "300": {
      "op": "log",
      "stack_out": []
    },
    "301": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "302": {
      "op": "return",
      "stack_out": []
    },
    "303": {
      "block": "main_read_game_state_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "305": {
      "op": "!",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "306": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "307": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "309": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "310": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%0#0"
      ]
    },
    "313": {
      "op": "btoi",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "314": {
      "callsub": "smart_contracts.pieout.contract.Pieout.read_game_state",
      "op": "callsub read_game_state",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "317": {
      "op": "bytec 4 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0",
        "0x151f7c75"
      ]
    },
    "319": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%18#0"
      ]
    },
    "320": {
      "op": "concat",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "321": {
      "op": "log",
      "stack_out": []
    },
    "322": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "323": {
      "op": "return",
      "stack_out": []
    },
    "324": {
      "block": "main_read_gen_unix_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "326": {
      "op": "!",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "327": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "328": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "330": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "331": {
      "op": "intc 9 // TMPL_GEN_UNIX",
      "defined_out": [
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0"
      ]
    },
    "333": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0"
      ]
    },
    "334": {
      "op": "bytec 4 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0",
        "0x151f7c75"
      ]
    },
    "336": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%1#0"
      ]
    },
    "337": {
      "op": "concat",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "338": {
      "op": "log",
      "stack_out": []
    },
    "339": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "340": {
      "op": "return",
      "stack_out": []
    },
    "341": {
      "block": "main_calc_single_box_fee_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "343": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "344": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "345": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "347": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "348": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%0#0"
      ]
    },
    "351": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[1]%0#0",
        "reinterpret_bytes[2]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%0#0",
        "reinterpret_bytes[2]%0#0"
      ]
    },
    "354": {
      "callsub": "smart_contracts.pieout.contract.Pieout.calc_single_box_fee",
      "op": "callsub calc_single_box_fee",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "357": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "358": {
      "op": "bytec 4 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "360": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ]
    },
    "361": {
      "op": "concat",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "362": {
      "op": "log",
      "stack_out": []
    },
    "363": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "364": {
      "op": "return",
      "stack_out": []
    },
    "365": {
      "subroutine": "smart_contracts.pieout.subroutines.check_sender_in_game",
      "params": {
        "game_id#0": "uint64",
        "box_game_players#0": "bytes",
        "player_count#0": "uint64",
        "clear_player#0": "uint64"
      },
      "block": "check_sender_in_game",
      "stack_in": [],
      "op": "proto 4 1"
    },
    "368": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "txn_sender_in_game#5"
      ]
    },
    "370": {
      "op": "frame_dig -4",
      "defined_out": [
        "game_id#0 (copy)"
      ],
      "stack_out": [
        "txn_sender_in_game#5",
        "game_id#0 (copy)"
      ]
    },
    "372": {
      "op": "itob",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "txn_sender_in_game#5",
        "tmp%0#0"
      ]
    },
    "373": {
      "op": "frame_dig -3",
      "defined_out": [
        "box_game_players#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "txn_sender_in_game#5",
        "tmp%0#0",
        "box_game_players#0 (copy)"
      ]
    },
    "375": {
      "op": "swap",
      "stack_out": [
        "txn_sender_in_game#5",
        "box_game_players#0 (copy)",
        "tmp%0#0"
      ]
    },
    "376": {
      "op": "concat",
      "defined_out": [
        "players_ref#0"
      ],
      "stack_out": [
        "txn_sender_in_game#5",
        "players_ref#0"
      ]
    },
    "377": {
      "op": "dup",
      "defined_out": [
        "players_ref#0"
      ],
      "stack_out": [
        "txn_sender_in_game#5",
        "players_ref#0",
        "players_ref#0"
      ]
    },
    "378": {
      "op": "box_get",
      "defined_out": [
        "game_players#0",
        "maybe_exists%0#0",
        "players_ref#0"
      ],
      "stack_out": [
        "txn_sender_in_game#5",
        "players_ref#0",
        "game_players#0",
        "maybe_exists%0#0"
      ]
    },
    "379": {
      "error": "check BoxMap entry exists",
      "op": "assert // check BoxMap entry exists",
      "stack_out": [
        "txn_sender_in_game#5",
        "players_ref#0",
        "game_players#0"
      ]
    },
    "380": {
      "op": "frame_dig -2",
      "defined_out": [
        "game_players#0",
        "player_count#0 (copy)",
        "players_ref#0"
      ],
      "stack_out": [
        "txn_sender_in_game#5",
        "players_ref#0",
        "game_players#0",
        "player_count#0 (copy)"
      ]
    },
    "382": {
      "op": "intc_3 // 32",
      "defined_out": [
        "32",
        "game_players#0",
        "player_count#0 (copy)",
        "players_ref#0"
      ],
      "stack_out": [
        "txn_sender_in_game#5",
        "players_ref#0",
        "game_players#0",
        "player_count#0 (copy)",
        "32"
      ]
    },
    "383": {
      "op": "*",
      "defined_out": [
        "game_players#0",
        "game_players_length#0",
        "players_ref#0"
      ],
      "stack_out": [
        "txn_sender_in_game#5",
        "players_ref#0",
        "game_players#0",
        "game_players_length#0"
      ]
    },
    "384": {
      "op": "intc_1 // 0"
    },
    "385": {
      "op": "dup",
      "defined_out": [
        "game_players#0",
        "game_players_length#0",
        "i#0",
        "players_ref#0",
        "txn_sender_in_game#0"
      ],
      "stack_out": [
        "txn_sender_in_game#5",
        "players_ref#0",
        "game_players#0",
        "game_players_length#0",
        "txn_sender_in_game#0",
        "i#0"
      ]
    },
    "386": {
      "block": "check_sender_in_game_for_header@1",
      "stack_in": [
        "txn_sender_in_game#5",
        "players_ref#0",
        "game_players#0",
        "game_players_length#0",
        "txn_sender_in_game#0",
        "i#0"
      ],
      "op": "frame_dig 5",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "txn_sender_in_game#5",
        "players_ref#0",
        "game_players#0",
        "game_players_length#0",
        "txn_sender_in_game#0",
        "i#0",
        "i#0"
      ]
    },
    "388": {
      "op": "frame_dig 3",
      "defined_out": [
        "game_players_length#0",
        "i#0"
      ],
      "stack_out": [
        "txn_sender_in_game#5",
        "players_ref#0",
        "game_players#0",
        "game_players_length#0",
        "txn_sender_in_game#0",
        "i#0",
        "i#0",
        "game_players_length#0"
      ]
    },
    "390": {
      "op": "<",
      "defined_out": [
        "continue_looping%0#0",
        "game_players_length#0",
        "i#0"
      ],
      "stack_out": [
        "txn_sender_in_game#5",
        "players_ref#0",
        "game_players#0",
        "game_players_length#0",
        "txn_sender_in_game#0",
        "i#0",
        "continue_looping%0#0"
      ]
    },
    "391": {
      "op": "frame_dig 4",
      "defined_out": [
        "continue_looping%0#0",
        "game_players_length#0",
        "i#0",
        "txn_sender_in_game#5"
      ],
      "stack_out": [
        "txn_sender_in_game#5",
        "players_ref#0",
        "game_players#0",
        "game_players_length#0",
        "txn_sender_in_game#0",
        "i#0",
        "continue_looping%0#0",
        "txn_sender_in_game#5"
      ]
    },
    "393": {
      "op": "frame_bury 0",
      "defined_out": [
        "continue_looping%0#0",
        "game_players_length#0",
        "i#0",
        "txn_sender_in_game#5"
      ],
      "stack_out": [
        "txn_sender_in_game#5",
        "players_ref#0",
        "game_players#0",
        "game_players_length#0",
        "txn_sender_in_game#0",
        "i#0",
        "continue_looping%0#0"
      ]
    },
    "395": {
      "op": "bz check_sender_in_game_after_for@8",
      "stack_out": [
        "txn_sender_in_game#5",
        "players_ref#0",
        "game_players#0",
        "game_players_length#0",
        "txn_sender_in_game#0",
        "i#0"
      ]
    },
    "398": {
      "op": "frame_dig 2",
      "defined_out": [
        "game_players#0",
        "game_players_length#0",
        "i#0",
        "txn_sender_in_game#5"
      ],
      "stack_out": [
        "txn_sender_in_game#5",
        "players_ref#0",
        "game_players#0",
        "game_players_length#0",
        "txn_sender_in_game#0",
        "i#0",
        "game_players#0"
      ]
    },
    "400": {
      "op": "frame_dig 5",
      "stack_out": [
        "txn_sender_in_game#5",
        "players_ref#0",
        "game_players#0",
        "game_players_length#0",
        "txn_sender_in_game#0",
        "i#0",
        "game_players#0",
        "i#0"
      ]
    },
    "402": {
      "op": "intc_3 // 32",
      "defined_out": [
        "32",
        "game_players#0",
        "game_players_length#0",
        "i#0",
        "txn_sender_in_game#5"
      ],
      "stack_out": [
        "txn_sender_in_game#5",
        "players_ref#0",
        "game_players#0",
        "game_players_length#0",
        "txn_sender_in_game#0",
        "i#0",
        "game_players#0",
        "i#0",
        "32"
      ]
    },
    "403": {
      "op": "extract3",
      "defined_out": [
        "game_players#0",
        "game_players_length#0",
        "i#0",
        "player_addr_bytes#0",
        "txn_sender_in_game#5"
      ],
      "stack_out": [
        "txn_sender_in_game#5",
        "players_ref#0",
        "game_players#0",
        "game_players_length#0",
        "txn_sender_in_game#0",
        "i#0",
        "player_addr_bytes#0"
      ]
    },
    "404": {
      "op": "txn Sender",
      "defined_out": [
        "game_players#0",
        "game_players_length#0",
        "i#0",
        "player_addr_bytes#0",
        "tmp%2#0",
        "txn_sender_in_game#5"
      ],
      "stack_out": [
        "txn_sender_in_game#5",
        "players_ref#0",
        "game_players#0",
        "game_players_length#0",
        "txn_sender_in_game#0",
        "i#0",
        "player_addr_bytes#0",
        "tmp%2#0"
      ]
    },
    "406": {
      "op": "==",
      "defined_out": [
        "game_players#0",
        "game_players_length#0",
        "i#0",
        "tmp%3#0",
        "txn_sender_in_game#5"
      ],
      "stack_out": [
        "txn_sender_in_game#5",
        "players_ref#0",
        "game_players#0",
        "game_players_length#0",
        "txn_sender_in_game#0",
        "i#0",
        "tmp%3#0"
      ]
    },
    "407": {
      "op": "bz check_sender_in_game_after_if_else@6",
      "stack_out": [
        "txn_sender_in_game#5",
        "players_ref#0",
        "game_players#0",
        "game_players_length#0",
        "txn_sender_in_game#0",
        "i#0"
      ]
    },
    "410": {
      "op": "intc_0 // 1",
      "defined_out": [
        "game_players#0",
        "game_players_length#0",
        "i#0",
        "txn_sender_in_game#0",
        "txn_sender_in_game#5"
      ],
      "stack_out": [
        "txn_sender_in_game#5",
        "players_ref#0",
        "game_players#0",
        "game_players_length#0",
        "txn_sender_in_game#0",
        "i#0",
        "txn_sender_in_game#0"
      ]
    },
    "411": {
      "op": "frame_bury 4",
      "defined_out": [
        "game_players#0",
        "game_players_length#0",
        "i#0",
        "txn_sender_in_game#0",
        "txn_sender_in_game#5"
      ],
      "stack_out": [
        "txn_sender_in_game#5",
        "players_ref#0",
        "game_players#0",
        "game_players_length#0",
        "txn_sender_in_game#0",
        "i#0"
      ]
    },
    "413": {
      "op": "frame_dig -1",
      "defined_out": [
        "clear_player#0 (copy)",
        "game_players#0",
        "game_players_length#0",
        "i#0",
        "txn_sender_in_game#0",
        "txn_sender_in_game#5"
      ],
      "stack_out": [
        "txn_sender_in_game#5",
        "players_ref#0",
        "game_players#0",
        "game_players_length#0",
        "txn_sender_in_game#0",
        "i#0",
        "clear_player#0 (copy)"
      ]
    },
    "415": {
      "op": "bz check_sender_in_game_after_if_else@5",
      "stack_out": [
        "txn_sender_in_game#5",
        "players_ref#0",
        "game_players#0",
        "game_players_length#0",
        "txn_sender_in_game#0",
        "i#0"
      ]
    },
    "418": {
      "op": "frame_dig 1",
      "defined_out": [
        "game_players#0",
        "game_players_length#0",
        "i#0",
        "players_ref#0",
        "txn_sender_in_game#0",
        "txn_sender_in_game#5"
      ],
      "stack_out": [
        "txn_sender_in_game#5",
        "players_ref#0",
        "game_players#0",
        "game_players_length#0",
        "txn_sender_in_game#0",
        "i#0",
        "players_ref#0"
      ]
    },
    "420": {
      "op": "frame_dig 5",
      "stack_out": [
        "txn_sender_in_game#5",
        "players_ref#0",
        "game_players#0",
        "game_players_length#0",
        "txn_sender_in_game#0",
        "i#0",
        "players_ref#0",
        "i#0"
      ]
    },
    "422": {
      "op": "bytec 5 // 0x0000000000000000000000000000000000000000000000000000000000000000",
      "defined_out": [
        "0x0000000000000000000000000000000000000000000000000000000000000000",
        "game_players#0",
        "game_players_length#0",
        "i#0",
        "players_ref#0",
        "txn_sender_in_game#0",
        "txn_sender_in_game#5"
      ],
      "stack_out": [
        "txn_sender_in_game#5",
        "players_ref#0",
        "game_players#0",
        "game_players_length#0",
        "txn_sender_in_game#0",
        "i#0",
        "players_ref#0",
        "i#0",
        "0x0000000000000000000000000000000000000000000000000000000000000000"
      ]
    },
    "424": {
      "op": "box_replace",
      "stack_out": [
        "txn_sender_in_game#5",
        "players_ref#0",
        "game_players#0",
        "game_players_length#0",
        "txn_sender_in_game#0",
        "i#0"
      ]
    },
    "425": {
      "block": "check_sender_in_game_after_if_else@5",
      "stack_in": [
        "txn_sender_in_game#5",
        "players_ref#0",
        "game_players#0",
        "game_players_length#0",
        "txn_sender_in_game#0",
        "i#0"
      ],
      "op": "frame_dig 4",
      "defined_out": [
        "txn_sender_in_game#5"
      ],
      "stack_out": [
        "txn_sender_in_game#5",
        "players_ref#0",
        "game_players#0",
        "game_players_length#0",
        "txn_sender_in_game#0",
        "i#0",
        "txn_sender_in_game#5"
      ]
    },
    "427": {
      "op": "frame_bury 0",
      "defined_out": [
        "txn_sender_in_game#5"
      ],
      "stack_out": [
        "txn_sender_in_game#5",
        "players_ref#0",
        "game_players#0",
        "game_players_length#0",
        "txn_sender_in_game#0",
        "i#0"
      ]
    },
    "429": {
      "block": "check_sender_in_game_after_for@8",
      "stack_in": [
        "txn_sender_in_game#5",
        "players_ref#0",
        "game_players#0",
        "game_players_length#0",
        "txn_sender_in_game#0",
        "i#0"
      ],
      "retsub": true,
      "op": "retsub",
      "defined_out": [
        "txn_sender_in_game#0"
      ],
      "stack_out": [
        "txn_sender_in_game#5",
        "players_ref#0",
        "game_players#0",
        "game_players_length#0",
        "txn_sender_in_game#0",
        "i#0",
        "txn_sender_in_game#0"
      ]
    },
    "430": {
      "block": "check_sender_in_game_after_if_else@6",
      "stack_in": [
        "txn_sender_in_game#5",
        "players_ref#0",
        "game_players#0",
        "game_players_length#0",
        "txn_sender_in_game#0",
        "i#0"
      ],
      "op": "frame_dig 5",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "txn_sender_in_game#5",
        "players_ref#0",
        "game_players#0",
        "game_players_length#0",
        "txn_sender_in_game#0",
        "i#0",
        "i#0"
      ]
    },
    "432": {
      "op": "intc_3 // 32",
      "defined_out": [
        "32",
        "i#0"
      ],
      "stack_out": [
        "txn_sender_in_game#5",
        "players_ref#0",
        "game_players#0",
        "game_players_length#0",
        "txn_sender_in_game#0",
        "i#0",
        "i#0",
        "32"
      ]
    },
    "433": {
      "op": "+",
      "stack_out": [
        "txn_sender_in_game#5",
        "players_ref#0",
        "game_players#0",
        "game_players_length#0",
        "txn_sender_in_game#0",
        "i#0",
        "i#0"
      ]
    },
    "434": {
      "op": "frame_bury 5",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "txn_sender_in_game#5",
        "players_ref#0",
        "game_players#0",
        "game_players_length#0",
        "txn_sender_in_game#0",
        "i#0"
      ]
    },
    "436": {
      "op": "b check_sender_in_game_for_header@1"
    },
    "439": {
      "subroutine": "smart_contracts.pieout.contract.Pieout.calc_single_box_fee",
      "params": {
        "key_size#0": "bytes",
        "value_size#0": "bytes"
      },
      "block": "calc_single_box_fee",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "442": {
      "op": "frame_dig -2",
      "defined_out": [
        "key_size#0 (copy)"
      ],
      "stack_out": [
        "key_size#0 (copy)"
      ]
    },
    "444": {
      "op": "btoi",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "445": {
      "op": "frame_dig -1",
      "defined_out": [
        "tmp%1#0",
        "value_size#0 (copy)"
      ],
      "stack_out": [
        "tmp%1#0",
        "value_size#0 (copy)"
      ]
    },
    "447": {
      "op": "btoi",
      "defined_out": [
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "448": {
      "op": "+",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "449": {
      "op": "pushint 400 // 400",
      "defined_out": [
        "400",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "400"
      ]
    },
    "452": {
      "op": "*",
      "defined_out": [
        "size_fee#0"
      ],
      "stack_out": [
        "size_fee#0"
      ]
    },
    "453": {
      "op": "pushint 2500 // 2500",
      "defined_out": [
        "2500",
        "size_fee#0"
      ],
      "stack_out": [
        "size_fee#0",
        "2500"
      ]
    },
    "456": {
      "op": "+",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "457": {
      "retsub": true,
      "op": "retsub"
    },
    "458": {
      "subroutine": "smart_contracts.pieout.contract.Pieout.read_game_state",
      "params": {
        "game_id#0": "uint64"
      },
      "block": "read_game_state",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "461": {
      "op": "frame_dig -1",
      "defined_out": [
        "game_id#0 (copy)"
      ],
      "stack_out": [
        "game_id#0 (copy)"
      ]
    },
    "463": {
      "op": "itob",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "464": {
      "op": "bytec_1 // \"s_\"",
      "defined_out": [
        "\"s_\"",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "\"s_\""
      ]
    },
    "465": {
      "op": "dig 1",
      "defined_out": [
        "\"s_\"",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "\"s_\"",
        "tmp%0#0 (copy)"
      ]
    },
    "467": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "468": {
      "op": "box_get",
      "defined_out": [
        "game_state#0",
        "maybe_exists%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "game_state#0",
        "maybe_exists%0#0"
      ]
    },
    "469": {
      "error": "check self.box_game_state entry exists",
      "op": "assert // check self.box_game_state entry exists",
      "stack_out": [
        "tmp%0#0",
        "game_state#0"
      ]
    },
    "470": {
      "op": "dup",
      "defined_out": [
        "game_state#0",
        "game_state#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "game_state#0",
        "game_state#0 (copy)"
      ]
    },
    "471": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "game_state#0",
        "game_state#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "game_state#0",
        "game_state#0 (copy)",
        "0"
      ]
    },
    "472": {
      "op": "getbit",
      "defined_out": [
        "game_state#0",
        "is_true%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "game_state#0",
        "is_true%0#0"
      ]
    },
    "473": {
      "op": "bytec_0 // 0x00",
      "defined_out": [
        "0x00",
        "game_state#0",
        "is_true%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "game_state#0",
        "is_true%0#0",
        "0x00"
      ]
    },
    "474": {
      "op": "intc_1 // 0",
      "stack_out": [
        "tmp%0#0",
        "game_state#0",
        "is_true%0#0",
        "0x00",
        "0"
      ]
    },
    "475": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "game_state#0",
        "0x00",
        "0",
        "is_true%0#0"
      ]
    },
    "477": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%0#0",
        "game_state#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "game_state#0",
        "encoded_bool%0#0"
      ]
    },
    "478": {
      "op": "dig 1",
      "stack_out": [
        "tmp%0#0",
        "game_state#0",
        "encoded_bool%0#0",
        "game_state#0 (copy)"
      ]
    },
    "480": {
      "error": "Index access is out of bounds",
      "op": "extract 1 1 // on error: Index access is out of bounds",
      "defined_out": [
        "encoded_bool%0#0",
        "game_state#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "game_state#0",
        "encoded_bool%0#0",
        "tmp%2#0"
      ]
    },
    "483": {
      "op": "dig 2",
      "stack_out": [
        "tmp%0#0",
        "game_state#0",
        "encoded_bool%0#0",
        "tmp%2#0",
        "game_state#0 (copy)"
      ]
    },
    "485": {
      "error": "Index access is out of bounds",
      "op": "extract 2 1 // on error: Index access is out of bounds",
      "defined_out": [
        "encoded_bool%0#0",
        "game_state#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "game_state#0",
        "encoded_bool%0#0",
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "488": {
      "op": "dig 3",
      "stack_out": [
        "tmp%0#0",
        "game_state#0",
        "encoded_bool%0#0",
        "tmp%2#0",
        "tmp%3#0",
        "game_state#0 (copy)"
      ]
    },
    "490": {
      "error": "Index access is out of bounds",
      "op": "extract 3 1 // on error: Index access is out of bounds",
      "defined_out": [
        "encoded_bool%0#0",
        "game_state#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "game_state#0",
        "encoded_bool%0#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0"
      ]
    },
    "493": {
      "op": "dig 4",
      "stack_out": [
        "tmp%0#0",
        "game_state#0",
        "encoded_bool%0#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0",
        "game_state#0 (copy)"
      ]
    },
    "495": {
      "error": "Index access is out of bounds",
      "op": "extract 4 2 // on error: Index access is out of bounds",
      "defined_out": [
        "encoded_bool%0#0",
        "game_state#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "game_state#0",
        "encoded_bool%0#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "498": {
      "op": "dig 5",
      "stack_out": [
        "tmp%0#0",
        "game_state#0",
        "encoded_bool%0#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "game_state#0 (copy)"
      ]
    },
    "500": {
      "error": "Index access is out of bounds",
      "op": "extract 6 8 // on error: Index access is out of bounds",
      "defined_out": [
        "encoded_bool%0#0",
        "game_state#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "game_state#0",
        "encoded_bool%0#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0"
      ]
    },
    "503": {
      "op": "dig 6",
      "stack_out": [
        "tmp%0#0",
        "game_state#0",
        "encoded_bool%0#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "game_state#0 (copy)"
      ]
    },
    "505": {
      "error": "Index access is out of bounds",
      "op": "extract 14 32 // on error: Index access is out of bounds",
      "defined_out": [
        "encoded_bool%0#0",
        "game_state#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "game_state#0",
        "encoded_bool%0#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0"
      ]
    },
    "508": {
      "op": "uncover 7",
      "stack_out": [
        "tmp%0#0",
        "encoded_bool%0#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0",
        "game_state#0"
      ]
    },
    "510": {
      "error": "Index access is out of bounds",
      "op": "extract 46 32 // on error: Index access is out of bounds",
      "defined_out": [
        "encoded_bool%0#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "encoded_bool%0#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0"
      ]
    },
    "513": {
      "op": "uncover 8",
      "stack_out": [
        "encoded_bool%0#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%0#0"
      ]
    },
    "515": {
      "op": "uncover 8",
      "stack_out": [
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%0#0",
        "encoded_bool%0#0"
      ]
    },
    "517": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "518": {
      "op": "uncover 7",
      "stack_out": [
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0",
        "encoded_tuple_buffer%2#0",
        "tmp%2#0"
      ]
    },
    "520": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "521": {
      "op": "uncover 6",
      "stack_out": [
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0",
        "encoded_tuple_buffer%3#0",
        "tmp%3#0"
      ]
    },
    "523": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%4#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "524": {
      "op": "uncover 5",
      "stack_out": [
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0",
        "encoded_tuple_buffer%4#0",
        "tmp%4#0"
      ]
    },
    "526": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%5#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "527": {
      "op": "uncover 4",
      "stack_out": [
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0",
        "encoded_tuple_buffer%5#0",
        "tmp%5#0"
      ]
    },
    "529": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%6#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "530": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0",
        "encoded_tuple_buffer%6#0",
        "tmp%6#0"
      ]
    },
    "532": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%7#0",
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "533": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%8#0",
        "encoded_tuple_buffer%7#0",
        "tmp%7#0"
      ]
    },
    "535": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%8#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "encoded_tuple_buffer%8#0"
      ]
    },
    "536": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%8#0",
        "tmp%8#0"
      ]
    },
    "537": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%9#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%9#0"
      ]
    },
    "538": {
      "retsub": true,
      "op": "retsub"
    },
    "539": {
      "subroutine": "smart_contracts.pieout.contract.Pieout.read_game_players",
      "params": {
        "game_id#0": "uint64"
      },
      "block": "read_game_players",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "542": {
      "op": "intc_1 // 0",
      "stack_out": [
        "player_addr_bytes#0"
      ]
    },
    "543": {
      "op": "dup",
      "stack_out": [
        "player_addr_bytes#0",
        "players#9"
      ]
    },
    "544": {
      "op": "frame_dig -1",
      "defined_out": [
        "game_id#0 (copy)"
      ],
      "stack_out": [
        "player_addr_bytes#0",
        "players#9",
        "game_id#0 (copy)"
      ]
    },
    "546": {
      "op": "itob",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "player_addr_bytes#0",
        "players#9",
        "tmp%0#0"
      ]
    },
    "547": {
      "op": "bytec_2 // \"p_\"",
      "defined_out": [
        "\"p_\"",
        "tmp%0#0"
      ],
      "stack_out": [
        "player_addr_bytes#0",
        "players#9",
        "tmp%0#0",
        "\"p_\""
      ]
    },
    "548": {
      "op": "swap",
      "stack_out": [
        "player_addr_bytes#0",
        "players#9",
        "\"p_\"",
        "tmp%0#0"
      ]
    },
    "549": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "player_addr_bytes#0",
        "players#9",
        "tmp%1#0"
      ]
    },
    "550": {
      "op": "box_get",
      "defined_out": [
        "game_players#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "player_addr_bytes#0",
        "players#9",
        "game_players#0",
        "maybe_exists%0#0"
      ]
    },
    "551": {
      "op": "swap",
      "stack_out": [
        "player_addr_bytes#0",
        "players#9",
        "maybe_exists%0#0",
        "game_players#0"
      ]
    },
    "552": {
      "op": "dup",
      "stack_out": [
        "player_addr_bytes#0",
        "players#9",
        "maybe_exists%0#0",
        "game_players#0",
        "game_players#0 (copy)"
      ]
    },
    "553": {
      "op": "uncover 2",
      "defined_out": [
        "game_players#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "player_addr_bytes#0",
        "players#9",
        "game_players#0",
        "game_players#0",
        "maybe_exists%0#0"
      ]
    },
    "555": {
      "error": "check self.box_game_players entry exists",
      "op": "assert // check self.box_game_players entry exists",
      "stack_out": [
        "player_addr_bytes#0",
        "players#9",
        "game_players#0",
        "game_players#0"
      ]
    },
    "556": {
      "op": "pushbytes 0x0000",
      "defined_out": [
        "game_players#0",
        "players#0"
      ],
      "stack_out": [
        "player_addr_bytes#0",
        "players#9",
        "game_players#0",
        "game_players#0",
        "players#0"
      ]
    },
    "560": {
      "op": "swap",
      "stack_out": [
        "player_addr_bytes#0",
        "players#9",
        "game_players#0",
        "players#0",
        "game_players#0"
      ]
    },
    "561": {
      "op": "len",
      "defined_out": [
        "game_players#0",
        "players#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "player_addr_bytes#0",
        "players#9",
        "game_players#0",
        "players#0",
        "tmp%2#0"
      ]
    },
    "562": {
      "op": "intc_1 // 0",
      "defined_out": [
        "game_players#0",
        "i#0",
        "players#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "player_addr_bytes#0",
        "players#9",
        "game_players#0",
        "players#0",
        "tmp%2#0",
        "i#0"
      ]
    },
    "563": {
      "block": "read_game_players_for_header@1",
      "stack_in": [
        "player_addr_bytes#0",
        "players#9",
        "game_players#0",
        "players#0",
        "tmp%2#0",
        "i#0"
      ],
      "op": "frame_dig 5",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "player_addr_bytes#0",
        "players#9",
        "game_players#0",
        "players#0",
        "tmp%2#0",
        "i#0",
        "i#0"
      ]
    },
    "565": {
      "op": "frame_dig 4",
      "defined_out": [
        "i#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "player_addr_bytes#0",
        "players#9",
        "game_players#0",
        "players#0",
        "tmp%2#0",
        "i#0",
        "i#0",
        "tmp%2#0"
      ]
    },
    "567": {
      "op": "<",
      "defined_out": [
        "continue_looping%0#0",
        "i#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "player_addr_bytes#0",
        "players#9",
        "game_players#0",
        "players#0",
        "tmp%2#0",
        "i#0",
        "continue_looping%0#0"
      ]
    },
    "568": {
      "op": "bz read_game_players_after_for@6",
      "stack_out": [
        "player_addr_bytes#0",
        "players#9",
        "game_players#0",
        "players#0",
        "tmp%2#0",
        "i#0"
      ]
    },
    "571": {
      "op": "frame_dig 2",
      "defined_out": [
        "game_players#0",
        "i#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "player_addr_bytes#0",
        "players#9",
        "game_players#0",
        "players#0",
        "tmp%2#0",
        "i#0",
        "game_players#0"
      ]
    },
    "573": {
      "op": "frame_dig 5",
      "stack_out": [
        "player_addr_bytes#0",
        "players#9",
        "game_players#0",
        "players#0",
        "tmp%2#0",
        "i#0",
        "game_players#0",
        "i#0"
      ]
    },
    "575": {
      "op": "intc_3 // 32",
      "defined_out": [
        "32",
        "game_players#0",
        "i#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "player_addr_bytes#0",
        "players#9",
        "game_players#0",
        "players#0",
        "tmp%2#0",
        "i#0",
        "game_players#0",
        "i#0",
        "32"
      ]
    },
    "576": {
      "op": "extract3",
      "defined_out": [
        "game_players#0",
        "i#0",
        "player_addr_bytes#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "player_addr_bytes#0",
        "players#9",
        "game_players#0",
        "players#0",
        "tmp%2#0",
        "i#0",
        "player_addr_bytes#0"
      ]
    },
    "577": {
      "op": "dup",
      "stack_out": [
        "player_addr_bytes#0",
        "players#9",
        "game_players#0",
        "players#0",
        "tmp%2#0",
        "i#0",
        "player_addr_bytes#0",
        "player_addr_bytes#0"
      ]
    },
    "578": {
      "op": "frame_bury 0",
      "defined_out": [
        "game_players#0",
        "i#0",
        "player_addr_bytes#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "player_addr_bytes#0",
        "players#9",
        "game_players#0",
        "players#0",
        "tmp%2#0",
        "i#0",
        "player_addr_bytes#0"
      ]
    },
    "580": {
      "op": "bytec 5 // 0x0000000000000000000000000000000000000000000000000000000000000000",
      "defined_out": [
        "0x0000000000000000000000000000000000000000000000000000000000000000",
        "game_players#0",
        "i#0",
        "player_addr_bytes#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "player_addr_bytes#0",
        "players#9",
        "game_players#0",
        "players#0",
        "tmp%2#0",
        "i#0",
        "player_addr_bytes#0",
        "0x0000000000000000000000000000000000000000000000000000000000000000"
      ]
    },
    "582": {
      "op": "!=",
      "defined_out": [
        "game_players#0",
        "i#0",
        "player_addr_bytes#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "player_addr_bytes#0",
        "players#9",
        "game_players#0",
        "players#0",
        "tmp%2#0",
        "i#0",
        "tmp%3#0"
      ]
    },
    "583": {
      "op": "frame_dig 3",
      "defined_out": [
        "game_players#0",
        "i#0",
        "player_addr_bytes#0",
        "players#9",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "player_addr_bytes#0",
        "players#9",
        "game_players#0",
        "players#0",
        "tmp%2#0",
        "i#0",
        "tmp%3#0",
        "players#9"
      ]
    },
    "585": {
      "op": "frame_bury 1",
      "defined_out": [
        "game_players#0",
        "i#0",
        "player_addr_bytes#0",
        "players#9",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "player_addr_bytes#0",
        "players#9",
        "game_players#0",
        "players#0",
        "tmp%2#0",
        "i#0",
        "tmp%3#0"
      ]
    },
    "587": {
      "op": "bz read_game_players_after_if_else@4",
      "stack_out": [
        "player_addr_bytes#0",
        "players#9",
        "game_players#0",
        "players#0",
        "tmp%2#0",
        "i#0"
      ]
    },
    "590": {
      "op": "frame_dig 3",
      "defined_out": [
        "game_players#0",
        "i#0",
        "player_addr_bytes#0",
        "players#0",
        "players#9",
        "tmp%2#0"
      ],
      "stack_out": [
        "player_addr_bytes#0",
        "players#9",
        "game_players#0",
        "players#0",
        "tmp%2#0",
        "i#0",
        "players#0"
      ]
    },
    "592": {
      "op": "extract 2 0",
      "defined_out": [
        "expr_value_trimmed%0#0",
        "game_players#0",
        "i#0",
        "player_addr_bytes#0",
        "players#0",
        "players#9",
        "tmp%2#0"
      ],
      "stack_out": [
        "player_addr_bytes#0",
        "players#9",
        "game_players#0",
        "players#0",
        "tmp%2#0",
        "i#0",
        "expr_value_trimmed%0#0"
      ]
    },
    "595": {
      "op": "frame_dig 0",
      "stack_out": [
        "player_addr_bytes#0",
        "players#9",
        "game_players#0",
        "players#0",
        "tmp%2#0",
        "i#0",
        "expr_value_trimmed%0#0",
        "player_addr_bytes#0"
      ]
    },
    "597": {
      "op": "concat",
      "defined_out": [
        "concatenated%0#0",
        "game_players#0",
        "i#0",
        "player_addr_bytes#0",
        "players#0",
        "players#9",
        "tmp%2#0"
      ],
      "stack_out": [
        "player_addr_bytes#0",
        "players#9",
        "game_players#0",
        "players#0",
        "tmp%2#0",
        "i#0",
        "concatenated%0#0"
      ]
    },
    "598": {
      "op": "dup",
      "defined_out": [
        "concatenated%0#0",
        "concatenated%0#0 (copy)",
        "game_players#0",
        "i#0",
        "player_addr_bytes#0",
        "players#0",
        "players#9",
        "tmp%2#0"
      ],
      "stack_out": [
        "player_addr_bytes#0",
        "players#9",
        "game_players#0",
        "players#0",
        "tmp%2#0",
        "i#0",
        "concatenated%0#0",
        "concatenated%0#0 (copy)"
      ]
    },
    "599": {
      "op": "len",
      "defined_out": [
        "byte_len%0#0",
        "concatenated%0#0",
        "game_players#0",
        "i#0",
        "player_addr_bytes#0",
        "players#0",
        "players#9",
        "tmp%2#0"
      ],
      "stack_out": [
        "player_addr_bytes#0",
        "players#9",
        "game_players#0",
        "players#0",
        "tmp%2#0",
        "i#0",
        "concatenated%0#0",
        "byte_len%0#0"
      ]
    },
    "600": {
      "op": "intc_3 // 32",
      "stack_out": [
        "player_addr_bytes#0",
        "players#9",
        "game_players#0",
        "players#0",
        "tmp%2#0",
        "i#0",
        "concatenated%0#0",
        "byte_len%0#0",
        "32"
      ]
    },
    "601": {
      "op": "/",
      "defined_out": [
        "concatenated%0#0",
        "game_players#0",
        "i#0",
        "len_%0#0",
        "player_addr_bytes#0",
        "players#0",
        "players#9",
        "tmp%2#0"
      ],
      "stack_out": [
        "player_addr_bytes#0",
        "players#9",
        "game_players#0",
        "players#0",
        "tmp%2#0",
        "i#0",
        "concatenated%0#0",
        "len_%0#0"
      ]
    },
    "602": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "concatenated%0#0",
        "game_players#0",
        "i#0",
        "player_addr_bytes#0",
        "players#0",
        "players#9",
        "tmp%2#0"
      ],
      "stack_out": [
        "player_addr_bytes#0",
        "players#9",
        "game_players#0",
        "players#0",
        "tmp%2#0",
        "i#0",
        "concatenated%0#0",
        "as_bytes%0#0"
      ]
    },
    "603": {
      "op": "extract 6 2",
      "defined_out": [
        "concatenated%0#0",
        "game_players#0",
        "i#0",
        "len_16_bit%0#0",
        "player_addr_bytes#0",
        "players#0",
        "players#9",
        "tmp%2#0"
      ],
      "stack_out": [
        "player_addr_bytes#0",
        "players#9",
        "game_players#0",
        "players#0",
        "tmp%2#0",
        "i#0",
        "concatenated%0#0",
        "len_16_bit%0#0"
      ]
    },
    "606": {
      "op": "swap",
      "stack_out": [
        "player_addr_bytes#0",
        "players#9",
        "game_players#0",
        "players#0",
        "tmp%2#0",
        "i#0",
        "len_16_bit%0#0",
        "concatenated%0#0"
      ]
    },
    "607": {
      "op": "concat",
      "stack_out": [
        "player_addr_bytes#0",
        "players#9",
        "game_players#0",
        "players#0",
        "tmp%2#0",
        "i#0",
        "players#9"
      ]
    },
    "608": {
      "op": "frame_bury 1",
      "stack_out": [
        "player_addr_bytes#0",
        "players#9",
        "game_players#0",
        "players#0",
        "tmp%2#0",
        "i#0"
      ]
    },
    "610": {
      "block": "read_game_players_after_if_else@4",
      "stack_in": [
        "player_addr_bytes#0",
        "players#9",
        "game_players#0",
        "players#0",
        "tmp%2#0",
        "i#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "players#0"
      ],
      "stack_out": [
        "player_addr_bytes#0",
        "players#9",
        "game_players#0",
        "players#0",
        "tmp%2#0",
        "i#0",
        "players#0"
      ]
    },
    "612": {
      "op": "frame_bury 3",
      "defined_out": [
        "players#0"
      ],
      "stack_out": [
        "player_addr_bytes#0",
        "players#9",
        "game_players#0",
        "players#0",
        "tmp%2#0",
        "i#0"
      ]
    },
    "614": {
      "op": "frame_dig 5",
      "defined_out": [
        "i#0",
        "players#0"
      ],
      "stack_out": [
        "player_addr_bytes#0",
        "players#9",
        "game_players#0",
        "players#0",
        "tmp%2#0",
        "i#0",
        "i#0"
      ]
    },
    "616": {
      "op": "intc_3 // 32",
      "defined_out": [
        "32",
        "i#0",
        "players#0"
      ],
      "stack_out": [
        "player_addr_bytes#0",
        "players#9",
        "game_players#0",
        "players#0",
        "tmp%2#0",
        "i#0",
        "i#0",
        "32"
      ]
    },
    "617": {
      "op": "+",
      "stack_out": [
        "player_addr_bytes#0",
        "players#9",
        "game_players#0",
        "players#0",
        "tmp%2#0",
        "i#0",
        "i#0"
      ]
    },
    "618": {
      "op": "frame_bury 5",
      "defined_out": [
        "i#0",
        "players#0"
      ],
      "stack_out": [
        "player_addr_bytes#0",
        "players#9",
        "game_players#0",
        "players#0",
        "tmp%2#0",
        "i#0"
      ]
    },
    "620": {
      "op": "b read_game_players_for_header@1"
    },
    "623": {
      "block": "read_game_players_after_for@6",
      "stack_in": [
        "player_addr_bytes#0",
        "players#9",
        "game_players#0",
        "players#0",
        "tmp%2#0",
        "i#0"
      ],
      "op": "frame_dig 3",
      "defined_out": [
        "players#0"
      ],
      "stack_out": [
        "player_addr_bytes#0",
        "players#9",
        "game_players#0",
        "players#0",
        "tmp%2#0",
        "i#0",
        "players#0"
      ]
    },
    "625": {
      "op": "frame_bury 0"
    },
    "627": {
      "retsub": true,
      "op": "retsub"
    },
    "628": {
      "subroutine": "smart_contracts.pieout.contract.Pieout.generate",
      "params": {},
      "block": "generate",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "630": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "632": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "633": {
      "error": "Transaction sender address must match application creator address.",
      "op": "assert // Transaction sender address must match application creator address.",
      "stack_out": []
    },
    "634": {
      "op": "bytec_3 // \"game_id\"",
      "defined_out": [
        "\"game_id\""
      ],
      "stack_out": [
        "\"game_id\""
      ]
    },
    "635": {
      "op": "intc_1 // 0",
      "defined_out": [
        "\"game_id\"",
        "0"
      ],
      "stack_out": [
        "\"game_id\"",
        "0"
      ]
    },
    "636": {
      "op": "app_global_put",
      "stack_out": []
    },
    "637": {
      "op": "pushbytes \"vrf_commit_id\"",
      "defined_out": [
        "\"vrf_commit_id\""
      ],
      "stack_out": [
        "\"vrf_commit_id\""
      ]
    },
    "652": {
      "op": "intc_1 // 0",
      "stack_out": [
        "\"vrf_commit_id\"",
        "0"
      ]
    },
    "653": {
      "op": "app_global_put",
      "stack_out": []
    },
    "654": {
      "retsub": true,
      "op": "retsub"
    },
    "655": {
      "subroutine": "smart_contracts.pieout.contract.Pieout.reset_game",
      "params": {
        "game_id#0": "uint64",
        "stake_pay#0": "uint64"
      },
      "block": "reset_game",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "658": {
      "op": "frame_dig -2",
      "defined_out": [
        "game_id#0 (copy)"
      ],
      "stack_out": [
        "game_id#0 (copy)"
      ]
    },
    "660": {
      "op": "itob",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "661": {
      "op": "bytec_1 // \"s_\"",
      "defined_out": [
        "\"s_\"",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "\"s_\""
      ]
    },
    "662": {
      "op": "swap",
      "stack_out": [
        "\"s_\"",
        "tmp%0#0"
      ]
    },
    "663": {
      "op": "concat",
      "defined_out": [
        "game_players_ref#0"
      ],
      "stack_out": [
        "game_players_ref#0"
      ]
    },
    "664": {
      "op": "dup",
      "defined_out": [
        "game_players_ref#0",
        "game_players_ref#0 (copy)"
      ],
      "stack_out": [
        "game_players_ref#0",
        "game_players_ref#0 (copy)"
      ]
    },
    "665": {
      "op": "box_get",
      "defined_out": [
        "game_players_ref#0",
        "game_state#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "game_players_ref#0",
        "game_state#0",
        "maybe_exists%0#0"
      ]
    },
    "666": {
      "error": "check self.box_game_state entry exists",
      "op": "assert // check self.box_game_state entry exists",
      "stack_out": [
        "game_players_ref#0",
        "game_state#0"
      ]
    },
    "667": {
      "op": "dig 1",
      "stack_out": [
        "game_players_ref#0",
        "game_state#0",
        "game_players_ref#0 (copy)"
      ]
    },
    "669": {
      "op": "box_len",
      "defined_out": [
        "game_players_ref#0",
        "game_state#0",
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "game_players_ref#0",
        "game_state#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "670": {
      "op": "bury 1",
      "stack_out": [
        "game_players_ref#0",
        "game_state#0",
        "maybe_exists%1#0"
      ]
    },
    "672": {
      "error": "Box game state not found. Check if Game ID is valid.",
      "op": "assert // Box game state not found. Check if Game ID is valid.",
      "stack_out": [
        "game_players_ref#0",
        "game_state#0"
      ]
    },
    "673": {
      "op": "dup",
      "defined_out": [
        "game_players_ref#0",
        "game_state#0",
        "game_state#0 (copy)"
      ],
      "stack_out": [
        "game_players_ref#0",
        "game_state#0",
        "game_state#0 (copy)"
      ]
    },
    "674": {
      "error": "Index access is out of bounds",
      "op": "extract 14 32 // on error: Index access is out of bounds",
      "defined_out": [
        "game_players_ref#0",
        "game_state#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "game_players_ref#0",
        "game_state#0",
        "tmp%4#0"
      ]
    },
    "677": {
      "op": "txn Sender",
      "defined_out": [
        "game_players_ref#0",
        "game_state#0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "game_players_ref#0",
        "game_state#0",
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "679": {
      "op": "==",
      "defined_out": [
        "game_players_ref#0",
        "game_state#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "game_players_ref#0",
        "game_state#0",
        "tmp%6#0"
      ]
    },
    "680": {
      "error": "Transaction sender is not recognized as valid manager address for this game.",
      "op": "assert // Transaction sender is not recognized as valid manager address for this game.",
      "stack_out": [
        "game_players_ref#0",
        "game_state#0"
      ]
    },
    "681": {
      "op": "dup",
      "stack_out": [
        "game_players_ref#0",
        "game_state#0",
        "game_state#0 (copy)"
      ]
    },
    "682": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "game_players_ref#0",
        "game_state#0",
        "game_state#0 (copy)"
      ],
      "stack_out": [
        "game_players_ref#0",
        "game_state#0",
        "game_state#0 (copy)",
        "0"
      ]
    },
    "683": {
      "op": "getbit",
      "defined_out": [
        "game_players_ref#0",
        "game_state#0",
        "is_true%0#0"
      ],
      "stack_out": [
        "game_players_ref#0",
        "game_state#0",
        "is_true%0#0"
      ]
    },
    "684": {
      "op": "bytec_0 // 0x00",
      "defined_out": [
        "0x00",
        "game_players_ref#0",
        "game_state#0",
        "is_true%0#0"
      ],
      "stack_out": [
        "game_players_ref#0",
        "game_state#0",
        "is_true%0#0",
        "0x00"
      ]
    },
    "685": {
      "op": "intc_1 // 0",
      "stack_out": [
        "game_players_ref#0",
        "game_state#0",
        "is_true%0#0",
        "0x00",
        "0"
      ]
    },
    "686": {
      "op": "uncover 2",
      "stack_out": [
        "game_players_ref#0",
        "game_state#0",
        "0x00",
        "0",
        "is_true%0#0"
      ]
    },
    "688": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%0#0",
        "game_players_ref#0",
        "game_state#0"
      ],
      "stack_out": [
        "game_players_ref#0",
        "game_state#0",
        "encoded_bool%0#0"
      ]
    },
    "689": {
      "op": "intc_1 // 0",
      "stack_out": [
        "game_players_ref#0",
        "game_state#0",
        "encoded_bool%0#0",
        "0"
      ]
    },
    "690": {
      "op": "getbit",
      "defined_out": [
        "game_players_ref#0",
        "game_state#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "game_players_ref#0",
        "game_state#0",
        "tmp%7#0"
      ]
    },
    "691": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "game_players_ref#0",
        "game_state#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "game_players_ref#0",
        "game_state#0",
        "tmp%7#0",
        "1"
      ]
    },
    "692": {
      "op": "==",
      "defined_out": [
        "game_players_ref#0",
        "game_state#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "game_players_ref#0",
        "game_state#0",
        "tmp%8#0"
      ]
    },
    "693": {
      "error": "Game state staking finalized value missmatch.",
      "op": "assert // Game state staking finalized value missmatch.",
      "stack_out": [
        "game_players_ref#0",
        "game_state#0"
      ]
    },
    "694": {
      "op": "frame_dig -1",
      "defined_out": [
        "game_players_ref#0",
        "game_state#0",
        "stake_pay#0 (copy)"
      ],
      "stack_out": [
        "game_players_ref#0",
        "game_state#0",
        "stake_pay#0 (copy)"
      ]
    },
    "696": {
      "op": "gtxns Sender",
      "defined_out": [
        "game_players_ref#0",
        "game_state#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "game_players_ref#0",
        "game_state#0",
        "tmp%9#0"
      ]
    },
    "698": {
      "op": "txn Sender",
      "defined_out": [
        "game_players_ref#0",
        "game_state#0",
        "tmp%10#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "game_players_ref#0",
        "game_state#0",
        "tmp%9#0",
        "tmp%10#0"
      ]
    },
    "700": {
      "op": "==",
      "defined_out": [
        "game_players_ref#0",
        "game_state#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "game_players_ref#0",
        "game_state#0",
        "tmp%11#0"
      ]
    },
    "701": {
      "error": "Stake payment sender address must match transaction sender address.",
      "op": "assert // Stake payment sender address must match transaction sender address.",
      "stack_out": [
        "game_players_ref#0",
        "game_state#0"
      ]
    },
    "702": {
      "op": "frame_dig -1",
      "stack_out": [
        "game_players_ref#0",
        "game_state#0",
        "stake_pay#0 (copy)"
      ]
    },
    "704": {
      "op": "gtxns Receiver",
      "defined_out": [
        "game_players_ref#0",
        "game_state#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "game_players_ref#0",
        "game_state#0",
        "tmp%12#0"
      ]
    },
    "706": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "game_players_ref#0",
        "game_state#0",
        "tmp%12#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "game_players_ref#0",
        "game_state#0",
        "tmp%12#0",
        "tmp%13#0"
      ]
    },
    "708": {
      "op": "==",
      "defined_out": [
        "game_players_ref#0",
        "game_state#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "game_players_ref#0",
        "game_state#0",
        "tmp%14#0"
      ]
    },
    "709": {
      "error": "Stake payment reciever address must match application address.",
      "op": "assert // Stake payment reciever address must match application address.",
      "stack_out": [
        "game_players_ref#0",
        "game_state#0"
      ]
    },
    "710": {
      "op": "frame_dig -1",
      "stack_out": [
        "game_players_ref#0",
        "game_state#0",
        "stake_pay#0 (copy)"
      ]
    },
    "712": {
      "op": "gtxns Amount",
      "defined_out": [
        "game_players_ref#0",
        "game_state#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "game_players_ref#0",
        "game_state#0",
        "tmp%15#0"
      ]
    },
    "714": {
      "op": "intc 7 // 740600",
      "defined_out": [
        "740600",
        "game_players_ref#0",
        "game_state#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "game_players_ref#0",
        "game_state#0",
        "tmp%15#0",
        "740600"
      ]
    },
    "716": {
      "op": ">=",
      "defined_out": [
        "game_players_ref#0",
        "game_state#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "game_players_ref#0",
        "game_state#0",
        "tmp%16#0"
      ]
    },
    "717": {
      "error": "Insufficient funds. Stake pay amount is not enough to cover application MBR.",
      "op": "assert // Insufficient funds. Stake pay amount is not enough to cover application MBR.",
      "stack_out": [
        "game_players_ref#0",
        "game_state#0"
      ]
    },
    "718": {
      "op": "txn Sender",
      "defined_out": [
        "game_players_ref#0",
        "game_state#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "game_players_ref#0",
        "game_state#0",
        "tmp%18#0"
      ]
    },
    "720": {
      "op": "dig 2",
      "stack_out": [
        "game_players_ref#0",
        "game_state#0",
        "tmp%18#0",
        "game_players_ref#0 (copy)"
      ]
    },
    "722": {
      "op": "intc_1 // 0",
      "stack_out": [
        "game_players_ref#0",
        "game_state#0",
        "tmp%18#0",
        "game_players_ref#0 (copy)",
        "0"
      ]
    },
    "723": {
      "op": "uncover 2",
      "stack_out": [
        "game_players_ref#0",
        "game_state#0",
        "game_players_ref#0 (copy)",
        "0",
        "tmp%18#0"
      ]
    },
    "725": {
      "op": "box_replace",
      "stack_out": [
        "game_players_ref#0",
        "game_state#0"
      ]
    },
    "726": {
      "op": "intc_1 // 0",
      "stack_out": [
        "game_players_ref#0",
        "game_state#0",
        "0"
      ]
    },
    "727": {
      "op": "dup",
      "stack_out": [
        "game_players_ref#0",
        "game_state#0",
        "0",
        "0"
      ]
    },
    "728": {
      "op": "setbit",
      "stack_out": [
        "game_players_ref#0",
        "game_state#0"
      ]
    },
    "729": {
      "op": "pushbytes 0x01",
      "defined_out": [
        "0x01",
        "game_players_ref#0",
        "game_state#0"
      ],
      "stack_out": [
        "game_players_ref#0",
        "game_state#0",
        "0x01"
      ]
    },
    "732": {
      "op": "replace2 2",
      "stack_out": [
        "game_players_ref#0",
        "game_state#0"
      ]
    },
    "734": {
      "op": "bytec_0 // 0x00",
      "stack_out": [
        "game_players_ref#0",
        "game_state#0",
        "0x00"
      ]
    },
    "735": {
      "op": "replace2 3",
      "stack_out": [
        "game_players_ref#0",
        "game_state#0"
      ]
    },
    "737": {
      "op": "bytec 6 // 0x0020",
      "defined_out": [
        "0x0020",
        "game_players_ref#0",
        "game_state#0"
      ],
      "stack_out": [
        "game_players_ref#0",
        "game_state#0",
        "0x0020"
      ]
    },
    "739": {
      "op": "replace2 4",
      "stack_out": [
        "game_players_ref#0",
        "game_state#0"
      ]
    },
    "741": {
      "op": "pushbytes 0x00000000000b4cf8",
      "defined_out": [
        "0x00000000000b4cf8",
        "game_players_ref#0",
        "game_state#0"
      ],
      "stack_out": [
        "game_players_ref#0",
        "game_state#0",
        "0x00000000000b4cf8"
      ]
    },
    "751": {
      "op": "replace2 6",
      "stack_out": [
        "game_players_ref#0",
        "game_state#0"
      ]
    },
    "753": {
      "op": "global ZeroAddress",
      "defined_out": [
        "assigned_value%5#0",
        "game_players_ref#0",
        "game_state#0"
      ],
      "stack_out": [
        "game_players_ref#0",
        "game_state#0",
        "assigned_value%5#0"
      ]
    },
    "755": {
      "op": "replace2 46",
      "stack_out": [
        "game_players_ref#0",
        "game_state#0"
      ]
    },
    "757": {
      "op": "box_put",
      "stack_out": []
    },
    "758": {
      "retsub": true,
      "op": "retsub"
    },
    "759": {
      "subroutine": "smart_contracts.pieout.contract.Pieout.new_game",
      "params": {
        "total_players#0": "uint64",
        "box_s_pay#0": "uint64",
        "box_p_pay#0": "uint64",
        "stake_pay#0": "uint64"
      },
      "block": "new_game",
      "stack_in": [],
      "op": "proto 4 0"
    },
    "762": {
      "op": "frame_dig -4",
      "defined_out": [
        "total_players#0 (copy)"
      ],
      "stack_out": [
        "total_players#0 (copy)"
      ]
    },
    "764": {
      "op": "pushint 10 // 10",
      "defined_out": [
        "10",
        "total_players#0 (copy)"
      ],
      "stack_out": [
        "total_players#0 (copy)",
        "10"
      ]
    },
    "766": {
      "op": "<=",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "767": {
      "error": "Player cap overflow. Max players limit must not be exceeded.",
      "op": "assert // Player cap overflow. Max players limit must not be exceeded.",
      "stack_out": []
    },
    "768": {
      "op": "frame_dig -3",
      "defined_out": [
        "box_s_pay#0 (copy)"
      ],
      "stack_out": [
        "box_s_pay#0 (copy)"
      ]
    },
    "770": {
      "op": "gtxns Sender",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "772": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "774": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "775": {
      "error": "Box payment sender address must match transaction sender address.",
      "op": "assert // Box payment sender address must match transaction sender address.",
      "stack_out": []
    },
    "776": {
      "op": "frame_dig -2",
      "defined_out": [
        "box_p_pay#0 (copy)"
      ],
      "stack_out": [
        "box_p_pay#0 (copy)"
      ]
    },
    "778": {
      "op": "gtxns Sender",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "780": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "782": {
      "op": "==",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "783": {
      "error": "Box payment sender address must match transaction sender address.",
      "op": "assert // Box payment sender address must match transaction sender address.",
      "stack_out": []
    },
    "784": {
      "op": "frame_dig -1",
      "defined_out": [
        "stake_pay#0 (copy)"
      ],
      "stack_out": [
        "stake_pay#0 (copy)"
      ]
    },
    "786": {
      "op": "gtxns Sender",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "788": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0"
      ]
    },
    "790": {
      "op": "==",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "791": {
      "error": "Stake payment sender address must match transaction sender address.",
      "op": "assert // Stake payment sender address must match transaction sender address.",
      "stack_out": []
    },
    "792": {
      "op": "frame_dig -3",
      "stack_out": [
        "box_s_pay#0 (copy)"
      ]
    },
    "794": {
      "op": "gtxns Receiver",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "796": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%10#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%11#0"
      ]
    },
    "798": {
      "op": "==",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "799": {
      "error": "Box payment reciever address must match application address.",
      "op": "assert // Box payment reciever address must match application address.",
      "stack_out": []
    },
    "800": {
      "op": "frame_dig -2",
      "stack_out": [
        "box_p_pay#0 (copy)"
      ]
    },
    "802": {
      "op": "gtxns Receiver",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "804": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%13#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "tmp%14#0"
      ]
    },
    "806": {
      "op": "==",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "807": {
      "error": "Box payment reciever address must match application address.",
      "op": "assert // Box payment reciever address must match application address.",
      "stack_out": []
    },
    "808": {
      "op": "frame_dig -1",
      "stack_out": [
        "stake_pay#0 (copy)"
      ]
    },
    "810": {
      "op": "gtxns Receiver",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "812": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%16#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "tmp%17#0"
      ]
    },
    "814": {
      "op": "==",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "815": {
      "error": "Stake payment reciever address must match application address.",
      "op": "assert // Stake payment reciever address must match application address.",
      "stack_out": []
    },
    "816": {
      "op": "frame_dig -3",
      "stack_out": [
        "box_s_pay#0 (copy)"
      ]
    },
    "818": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "820": {
      "op": "pushint 24900 // 24900",
      "defined_out": [
        "24900",
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0",
        "24900"
      ]
    },
    "824": {
      "op": ">=",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "825": {
      "error": "Insufficient funds. Box pay amount is not enough to cover application MBR.",
      "op": "assert // Insufficient funds. Box pay amount is not enough to cover application MBR.",
      "stack_out": []
    },
    "826": {
      "op": "frame_dig -2",
      "stack_out": [
        "box_p_pay#0 (copy)"
      ]
    },
    "828": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "830": {
      "op": "intc_3 // 32",
      "defined_out": [
        "32",
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0",
        "32"
      ]
    },
    "831": {
      "op": "frame_dig -4",
      "stack_out": [
        "tmp%21#0",
        "32",
        "total_players#0 (copy)"
      ]
    },
    "833": {
      "op": "*",
      "defined_out": [
        "tmp%21#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%21#0",
        "to_encode%0#0"
      ]
    },
    "834": {
      "op": "dup",
      "defined_out": [
        "tmp%21#0",
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%21#0",
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ]
    },
    "835": {
      "op": "itob",
      "defined_out": [
        "tmp%21#0",
        "to_encode%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%21#0",
        "to_encode%0#0",
        "val_as_bytes%0#0"
      ]
    },
    "836": {
      "op": "dup",
      "defined_out": [
        "tmp%21#0",
        "to_encode%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%21#0",
        "to_encode%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%0#0 (copy)"
      ]
    },
    "837": {
      "op": "bitlen",
      "defined_out": [
        "bitlen%0#0",
        "tmp%21#0",
        "to_encode%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%21#0",
        "to_encode%0#0",
        "val_as_bytes%0#0",
        "bitlen%0#0"
      ]
    },
    "838": {
      "op": "pushint 16 // 16",
      "defined_out": [
        "16",
        "bitlen%0#0",
        "tmp%21#0",
        "to_encode%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%21#0",
        "to_encode%0#0",
        "val_as_bytes%0#0",
        "bitlen%0#0",
        "16"
      ]
    },
    "840": {
      "op": "<=",
      "defined_out": [
        "no_overflow%0#0",
        "tmp%21#0",
        "to_encode%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%21#0",
        "to_encode%0#0",
        "val_as_bytes%0#0",
        "no_overflow%0#0"
      ]
    },
    "841": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "tmp%21#0",
        "to_encode%0#0",
        "val_as_bytes%0#0"
      ]
    },
    "842": {
      "op": "extract 6 2",
      "defined_out": [
        "tmp%21#0",
        "to_encode%0#0",
        "uint16%0#0"
      ],
      "stack_out": [
        "tmp%21#0",
        "to_encode%0#0",
        "uint16%0#0"
      ]
    },
    "845": {
      "op": "pushbytes 0x0a",
      "defined_out": [
        "0x0a",
        "tmp%21#0",
        "to_encode%0#0",
        "uint16%0#0"
      ],
      "stack_out": [
        "tmp%21#0",
        "to_encode%0#0",
        "uint16%0#0",
        "0x0a"
      ]
    },
    "848": {
      "op": "swap",
      "stack_out": [
        "tmp%21#0",
        "to_encode%0#0",
        "0x0a",
        "uint16%0#0"
      ]
    },
    "849": {
      "callsub": "smart_contracts.pieout.contract.Pieout.calc_single_box_fee",
      "op": "callsub calc_single_box_fee",
      "defined_out": [
        "tmp%21#0",
        "tmp%22#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%21#0",
        "to_encode%0#0",
        "tmp%22#0"
      ]
    },
    "852": {
      "op": "uncover 2",
      "stack_out": [
        "to_encode%0#0",
        "tmp%22#0",
        "tmp%21#0"
      ]
    },
    "854": {
      "op": "<=",
      "defined_out": [
        "tmp%23#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "tmp%23#0"
      ]
    },
    "855": {
      "error": "Insufficient funds. Box pay amount is not enough to cover application MBR.",
      "op": "assert // Insufficient funds. Box pay amount is not enough to cover application MBR.",
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "856": {
      "op": "frame_dig -1",
      "stack_out": [
        "to_encode%0#0",
        "stake_pay#0 (copy)"
      ]
    },
    "858": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%24#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "tmp%24#0"
      ]
    },
    "860": {
      "op": "dup",
      "defined_out": [
        "tmp%24#0",
        "tmp%24#0 (copy)",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "tmp%24#0",
        "tmp%24#0 (copy)"
      ]
    },
    "861": {
      "op": "intc 7 // 740600",
      "defined_out": [
        "740600",
        "tmp%24#0",
        "tmp%24#0 (copy)",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "tmp%24#0",
        "tmp%24#0 (copy)",
        "740600"
      ]
    },
    "863": {
      "op": ">=",
      "defined_out": [
        "tmp%24#0",
        "tmp%25#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "tmp%24#0",
        "tmp%25#0"
      ]
    },
    "864": {
      "error": "Insufficient funds. Stake pay amount is not enough to cover application MBR.",
      "op": "assert // Insufficient funds. Stake pay amount is not enough to cover application MBR.",
      "stack_out": [
        "to_encode%0#0",
        "tmp%24#0"
      ]
    },
    "865": {
      "op": "frame_dig -4",
      "stack_out": [
        "to_encode%0#0",
        "tmp%24#0",
        "total_players#0 (copy)"
      ]
    },
    "867": {
      "op": "itob",
      "defined_out": [
        "tmp%24#0",
        "to_encode%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "tmp%24#0",
        "val_as_bytes%1#0"
      ]
    },
    "868": {
      "op": "dup",
      "defined_out": [
        "tmp%24#0",
        "to_encode%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%1#0 (copy)"
      ],
      "stack_out": [
        "to_encode%0#0",
        "tmp%24#0",
        "val_as_bytes%1#0",
        "val_as_bytes%1#0 (copy)"
      ]
    },
    "869": {
      "op": "bitlen",
      "defined_out": [
        "bitlen%1#0",
        "tmp%24#0",
        "to_encode%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "tmp%24#0",
        "val_as_bytes%1#0",
        "bitlen%1#0"
      ]
    },
    "870": {
      "op": "pushint 8 // 8",
      "defined_out": [
        "8",
        "bitlen%1#0",
        "tmp%24#0",
        "to_encode%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "tmp%24#0",
        "val_as_bytes%1#0",
        "bitlen%1#0",
        "8"
      ]
    },
    "872": {
      "op": "<=",
      "defined_out": [
        "no_overflow%1#0",
        "tmp%24#0",
        "to_encode%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "tmp%24#0",
        "val_as_bytes%1#0",
        "no_overflow%1#0"
      ]
    },
    "873": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "to_encode%0#0",
        "tmp%24#0",
        "val_as_bytes%1#0"
      ]
    },
    "874": {
      "op": "extract 7 1",
      "defined_out": [
        "tmp%24#0",
        "to_encode%0#0",
        "uint8%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "tmp%24#0",
        "uint8%0#0"
      ]
    },
    "877": {
      "op": "swap",
      "stack_out": [
        "to_encode%0#0",
        "uint8%0#0",
        "tmp%24#0"
      ]
    },
    "878": {
      "op": "itob",
      "defined_out": [
        "to_encode%0#0",
        "uint8%0#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "uint8%0#0",
        "val_as_bytes%2#0"
      ]
    },
    "879": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%26#0",
        "to_encode%0#0",
        "uint8%0#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "uint8%0#0",
        "val_as_bytes%2#0",
        "tmp%26#0"
      ]
    },
    "881": {
      "op": "global ZeroAddress",
      "defined_out": [
        "tmp%26#0",
        "tmp%27#0",
        "to_encode%0#0",
        "uint8%0#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "uint8%0#0",
        "val_as_bytes%2#0",
        "tmp%26#0",
        "tmp%27#0"
      ]
    },
    "883": {
      "op": "bytec_0 // 0x00",
      "defined_out": [
        "0x00",
        "tmp%26#0",
        "tmp%27#0",
        "to_encode%0#0",
        "uint8%0#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "uint8%0#0",
        "val_as_bytes%2#0",
        "tmp%26#0",
        "tmp%27#0",
        "0x00"
      ]
    },
    "884": {
      "op": "uncover 4",
      "stack_out": [
        "to_encode%0#0",
        "val_as_bytes%2#0",
        "tmp%26#0",
        "tmp%27#0",
        "0x00",
        "uint8%0#0"
      ]
    },
    "886": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%26#0",
        "tmp%27#0",
        "to_encode%0#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "val_as_bytes%2#0",
        "tmp%26#0",
        "tmp%27#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "887": {
      "op": "pushbytes 0x01",
      "defined_out": [
        "0x01",
        "encoded_tuple_buffer%2#0",
        "tmp%26#0",
        "tmp%27#0",
        "to_encode%0#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "val_as_bytes%2#0",
        "tmp%26#0",
        "tmp%27#0",
        "encoded_tuple_buffer%2#0",
        "0x01"
      ]
    },
    "890": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "tmp%26#0",
        "tmp%27#0",
        "to_encode%0#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "val_as_bytes%2#0",
        "tmp%26#0",
        "tmp%27#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "891": {
      "op": "bytec_0 // 0x00",
      "stack_out": [
        "to_encode%0#0",
        "val_as_bytes%2#0",
        "tmp%26#0",
        "tmp%27#0",
        "encoded_tuple_buffer%3#0",
        "0x00"
      ]
    },
    "892": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%4#0",
        "tmp%26#0",
        "tmp%27#0",
        "to_encode%0#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "val_as_bytes%2#0",
        "tmp%26#0",
        "tmp%27#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "893": {
      "op": "bytec 6 // 0x0020",
      "defined_out": [
        "0x0020",
        "encoded_tuple_buffer%4#0",
        "tmp%26#0",
        "tmp%27#0",
        "to_encode%0#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "val_as_bytes%2#0",
        "tmp%26#0",
        "tmp%27#0",
        "encoded_tuple_buffer%4#0",
        "0x0020"
      ]
    },
    "895": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%5#0",
        "tmp%26#0",
        "tmp%27#0",
        "to_encode%0#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "val_as_bytes%2#0",
        "tmp%26#0",
        "tmp%27#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "896": {
      "op": "uncover 3",
      "stack_out": [
        "to_encode%0#0",
        "tmp%26#0",
        "tmp%27#0",
        "encoded_tuple_buffer%5#0",
        "val_as_bytes%2#0"
      ]
    },
    "898": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%6#0",
        "tmp%26#0",
        "tmp%27#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "tmp%26#0",
        "tmp%27#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "899": {
      "op": "uncover 2",
      "stack_out": [
        "to_encode%0#0",
        "tmp%27#0",
        "encoded_tuple_buffer%6#0",
        "tmp%26#0"
      ]
    },
    "901": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%7#0",
        "tmp%27#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "tmp%27#0",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "902": {
      "op": "swap",
      "stack_out": [
        "to_encode%0#0",
        "encoded_tuple_buffer%7#0",
        "tmp%27#0"
      ]
    },
    "903": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%8#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "encoded_tuple_buffer%8#0"
      ]
    },
    "904": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "encoded_tuple_buffer%8#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "encoded_tuple_buffer%8#0",
        "0"
      ]
    },
    "905": {
      "op": "bytec_3 // \"game_id\"",
      "defined_out": [
        "\"game_id\"",
        "0",
        "encoded_tuple_buffer%8#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "encoded_tuple_buffer%8#0",
        "0",
        "\"game_id\""
      ]
    },
    "906": {
      "op": "app_global_get_ex",
      "defined_out": [
        "encoded_tuple_buffer%8#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "encoded_tuple_buffer%8#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "907": {
      "error": "check self.game_id exists",
      "op": "assert // check self.game_id exists",
      "stack_out": [
        "to_encode%0#0",
        "encoded_tuple_buffer%8#0",
        "maybe_value%0#0"
      ]
    },
    "908": {
      "op": "itob",
      "defined_out": [
        "encoded_tuple_buffer%8#0",
        "tmp%28#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "encoded_tuple_buffer%8#0",
        "tmp%28#0"
      ]
    },
    "909": {
      "op": "bytec_1 // \"s_\"",
      "defined_out": [
        "\"s_\"",
        "encoded_tuple_buffer%8#0",
        "tmp%28#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "encoded_tuple_buffer%8#0",
        "tmp%28#0",
        "\"s_\""
      ]
    },
    "910": {
      "op": "swap",
      "stack_out": [
        "to_encode%0#0",
        "encoded_tuple_buffer%8#0",
        "\"s_\"",
        "tmp%28#0"
      ]
    },
    "911": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%8#0",
        "tmp%29#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "encoded_tuple_buffer%8#0",
        "tmp%29#0"
      ]
    },
    "912": {
      "op": "swap",
      "stack_out": [
        "to_encode%0#0",
        "tmp%29#0",
        "encoded_tuple_buffer%8#0"
      ]
    },
    "913": {
      "op": "box_put",
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "914": {
      "op": "intc_1 // 0",
      "stack_out": [
        "to_encode%0#0",
        "0"
      ]
    },
    "915": {
      "op": "bytec_3 // \"game_id\"",
      "stack_out": [
        "to_encode%0#0",
        "0",
        "\"game_id\""
      ]
    },
    "916": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "917": {
      "error": "check self.game_id exists",
      "op": "assert // check self.game_id exists",
      "stack_out": [
        "to_encode%0#0",
        "maybe_value%1#0"
      ]
    },
    "918": {
      "op": "itob",
      "defined_out": [
        "tmp%31#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "tmp%31#0"
      ]
    },
    "919": {
      "op": "bytec_2 // \"p_\"",
      "defined_out": [
        "\"p_\"",
        "tmp%31#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "tmp%31#0",
        "\"p_\""
      ]
    },
    "920": {
      "op": "swap",
      "stack_out": [
        "to_encode%0#0",
        "\"p_\"",
        "tmp%31#0"
      ]
    },
    "921": {
      "op": "concat",
      "defined_out": [
        "tmp%32#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "tmp%32#0"
      ]
    },
    "922": {
      "op": "swap",
      "stack_out": [
        "tmp%32#0",
        "to_encode%0#0"
      ]
    },
    "923": {
      "op": "bzero",
      "defined_out": [
        "new_box_value%0#0",
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0",
        "new_box_value%0#0"
      ]
    },
    "924": {
      "op": "dig 1",
      "defined_out": [
        "new_box_value%0#0",
        "tmp%32#0",
        "tmp%32#0 (copy)"
      ],
      "stack_out": [
        "tmp%32#0",
        "new_box_value%0#0",
        "tmp%32#0 (copy)"
      ]
    },
    "926": {
      "op": "box_del",
      "defined_out": [
        "new_box_value%0#0",
        "tmp%32#0",
        "{box_del}"
      ],
      "stack_out": [
        "tmp%32#0",
        "new_box_value%0#0",
        "{box_del}"
      ]
    },
    "927": {
      "op": "pop",
      "stack_out": [
        "tmp%32#0",
        "new_box_value%0#0"
      ]
    },
    "928": {
      "op": "box_put",
      "stack_out": []
    },
    "929": {
      "op": "intc_1 // 0",
      "stack_out": [
        "0"
      ]
    },
    "930": {
      "op": "bytec_3 // \"game_id\"",
      "stack_out": [
        "0",
        "\"game_id\""
      ]
    },
    "931": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "932": {
      "error": "check self.game_id exists",
      "op": "assert // check self.game_id exists",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "933": {
      "op": "itob",
      "defined_out": [
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0"
      ]
    },
    "934": {
      "op": "bytec_2 // \"p_\"",
      "stack_out": [
        "tmp%33#0",
        "\"p_\""
      ]
    },
    "935": {
      "op": "swap",
      "stack_out": [
        "\"p_\"",
        "tmp%33#0"
      ]
    },
    "936": {
      "op": "concat",
      "defined_out": [
        "game_players_ref#0"
      ],
      "stack_out": [
        "game_players_ref#0"
      ]
    },
    "937": {
      "op": "intc_1 // 0"
    },
    "938": {
      "op": "txn Sender",
      "defined_out": [
        "0",
        "game_players_ref#0",
        "tmp%34#0"
      ],
      "stack_out": [
        "game_players_ref#0",
        "0",
        "tmp%34#0"
      ]
    },
    "940": {
      "op": "box_replace",
      "stack_out": []
    },
    "941": {
      "op": "intc_1 // 0",
      "stack_out": [
        "0"
      ]
    },
    "942": {
      "op": "bytec_3 // \"game_id\"",
      "stack_out": [
        "0",
        "\"game_id\""
      ]
    },
    "943": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "944": {
      "error": "check self.game_id exists",
      "op": "assert // check self.game_id exists",
      "stack_out": [
        "maybe_value%3#0"
      ]
    },
    "945": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "1"
      ]
    },
    "946": {
      "op": "+",
      "defined_out": [
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0"
      ]
    },
    "947": {
      "op": "bytec_3 // \"game_id\"",
      "stack_out": [
        "new_state_value%0#0",
        "\"game_id\""
      ]
    },
    "948": {
      "op": "swap",
      "stack_out": [
        "\"game_id\"",
        "new_state_value%0#0"
      ]
    },
    "949": {
      "op": "app_global_put",
      "stack_out": []
    },
    "950": {
      "retsub": true,
      "op": "retsub"
    },
    "951": {
      "subroutine": "smart_contracts.pieout.contract.Pieout.join_game",
      "params": {
        "game_id#0": "uint64",
        "stake_pay#0": "uint64"
      },
      "block": "join_game",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "954": {
      "op": "frame_dig -2",
      "defined_out": [
        "game_id#0 (copy)"
      ],
      "stack_out": [
        "game_id#0 (copy)"
      ]
    },
    "956": {
      "op": "itob",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "957": {
      "op": "bytec_1 // \"s_\"",
      "defined_out": [
        "\"s_\"",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "\"s_\""
      ]
    },
    "958": {
      "op": "dig 1",
      "defined_out": [
        "\"s_\"",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "\"s_\"",
        "tmp%0#0 (copy)"
      ]
    },
    "960": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "961": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%1#0"
      ]
    },
    "962": {
      "op": "cover 2",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "964": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ]
    },
    "965": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0",
        "tmp%1#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "966": {
      "op": "bury 1",
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0",
        "tmp%1#0",
        "maybe_exists%0#0"
      ]
    },
    "968": {
      "error": "Box game state not found. Check if Game ID is valid.",
      "op": "assert // Box game state not found. Check if Game ID is valid.",
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "969": {
      "op": "frame_dig -1",
      "defined_out": [
        "stake_pay#0 (copy)",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0",
        "tmp%1#0",
        "stake_pay#0 (copy)"
      ]
    },
    "971": {
      "op": "gtxns Sender",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "973": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "975": {
      "op": "==",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%4#0"
      ]
    },
    "976": {
      "error": "Stake payment sender address must match transaction sender address.",
      "op": "assert // Stake payment sender address must match transaction sender address.",
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "977": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0",
        "tmp%1#0",
        "stake_pay#0 (copy)"
      ]
    },
    "979": {
      "op": "gtxns Receiver",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%5#0"
      ]
    },
    "981": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%5#0",
        "tmp%6#0"
      ]
    },
    "983": {
      "op": "==",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%7#0"
      ]
    },
    "984": {
      "error": "Stake payment reciever address must match application address.",
      "op": "assert // Stake payment reciever address must match application address.",
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "985": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0",
        "tmp%1#0",
        "stake_pay#0 (copy)"
      ]
    },
    "987": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%8#0"
      ]
    },
    "989": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%8#0",
        "tmp%8#0 (copy)"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%8#0",
        "tmp%8#0 (copy)"
      ]
    },
    "990": {
      "op": "pushint 1000000 // 1000000",
      "defined_out": [
        "1000000",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%8#0",
        "tmp%8#0 (copy)"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%8#0",
        "tmp%8#0 (copy)",
        "1000000"
      ]
    },
    "994": {
      "op": ">=",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "995": {
      "error": "Insufficient funds. Stake pay amount is not enough to cover application MBR.",
      "op": "assert // Insufficient funds. Stake pay amount is not enough to cover application MBR.",
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%8#0"
      ]
    },
    "996": {
      "op": "dig 1",
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%8#0",
        "tmp%1#0 (copy)"
      ]
    },
    "998": {
      "op": "box_get",
      "defined_out": [
        "game_state#0",
        "maybe_exists%1#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%8#0",
        "game_state#0",
        "maybe_exists%1#0"
      ]
    },
    "999": {
      "error": "check self.box_game_state entry exists",
      "op": "assert // check self.box_game_state entry exists",
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%8#0",
        "game_state#0"
      ]
    },
    "1000": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0",
        "tmp%8#0",
        "game_state#0",
        "tmp%1#0"
      ]
    },
    "1002": {
      "op": "box_get",
      "defined_out": [
        "game_state#0",
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0",
        "tmp%8#0",
        "game_state#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1003": {
      "error": "check self.box_game_state entry exists",
      "op": "assert // check self.box_game_state entry exists",
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0",
        "tmp%8#0",
        "game_state#0",
        "maybe_value%2#0"
      ]
    },
    "1004": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "game_state#0",
        "maybe_value%2#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0",
        "tmp%8#0",
        "game_state#0",
        "maybe_value%2#0",
        "2"
      ]
    },
    "1005": {
      "op": "getbyte",
      "defined_out": [
        "game_state#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%15#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0",
        "tmp%8#0",
        "game_state#0",
        "tmp%15#0"
      ]
    },
    "1006": {
      "op": "frame_dig -2",
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0",
        "tmp%8#0",
        "game_state#0",
        "tmp%15#0",
        "game_id#0 (copy)"
      ]
    },
    "1008": {
      "op": "bytec_2 // \"p_\"",
      "defined_out": [
        "\"p_\"",
        "game_id#0 (copy)",
        "game_state#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%15#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0",
        "tmp%8#0",
        "game_state#0",
        "tmp%15#0",
        "game_id#0 (copy)",
        "\"p_\""
      ]
    },
    "1009": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0",
        "tmp%8#0",
        "game_state#0",
        "game_id#0 (copy)",
        "\"p_\"",
        "tmp%15#0"
      ]
    },
    "1011": {
      "op": "intc_1 // 0",
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0",
        "tmp%8#0",
        "game_state#0",
        "game_id#0 (copy)",
        "\"p_\"",
        "tmp%15#0",
        "0"
      ]
    },
    "1012": {
      "callsub": "smart_contracts.pieout.subroutines.check_sender_in_game",
      "op": "callsub check_sender_in_game",
      "defined_out": [
        "game_state#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%16#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0",
        "tmp%8#0",
        "game_state#0",
        "tmp%16#0"
      ]
    },
    "1015": {
      "op": "!",
      "defined_out": [
        "game_state#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%17#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0",
        "tmp%8#0",
        "game_state#0",
        "tmp%17#0"
      ]
    },
    "1016": {
      "error": "Transaction sender is already recognized as a valid player for this game.",
      "op": "assert // Transaction sender is already recognized as a valid player for this game.",
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0",
        "tmp%8#0",
        "game_state#0"
      ]
    },
    "1017": {
      "op": "dup",
      "defined_out": [
        "game_state#0",
        "game_state#0 (copy)",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0",
        "tmp%8#0",
        "game_state#0",
        "game_state#0 (copy)"
      ]
    },
    "1018": {
      "error": "Index access is out of bounds",
      "op": "extract 2 1 // on error: Index access is out of bounds",
      "defined_out": [
        "game_state#0",
        "reinterpret_biguint%0#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0",
        "tmp%8#0",
        "game_state#0",
        "reinterpret_biguint%0#0"
      ]
    },
    "1021": {
      "op": "dig 1",
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0",
        "tmp%8#0",
        "game_state#0",
        "reinterpret_biguint%0#0",
        "game_state#0 (copy)"
      ]
    },
    "1023": {
      "error": "Index access is out of bounds",
      "op": "extract 1 1 // on error: Index access is out of bounds",
      "defined_out": [
        "game_state#0",
        "reinterpret_biguint%0#0",
        "reinterpret_biguint%1#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0",
        "tmp%8#0",
        "game_state#0",
        "reinterpret_biguint%0#0",
        "reinterpret_biguint%1#0"
      ]
    },
    "1026": {
      "op": "b<=",
      "defined_out": [
        "game_state#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%18#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0",
        "tmp%8#0",
        "game_state#0",
        "tmp%18#0"
      ]
    },
    "1027": {
      "error": "Number of active players must not exceed number of max players.",
      "op": "assert // Number of active players must not exceed number of max players.",
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0",
        "tmp%8#0",
        "game_state#0"
      ]
    },
    "1028": {
      "op": "dup",
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0",
        "tmp%8#0",
        "game_state#0",
        "game_state#0 (copy)"
      ]
    },
    "1029": {
      "op": "intc_1 // 0",
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0",
        "tmp%8#0",
        "game_state#0",
        "game_state#0 (copy)",
        "0"
      ]
    },
    "1030": {
      "op": "getbit",
      "defined_out": [
        "game_state#0",
        "is_true%0#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0",
        "tmp%8#0",
        "game_state#0",
        "is_true%0#0"
      ]
    },
    "1031": {
      "op": "bytec_0 // 0x00",
      "defined_out": [
        "0x00",
        "game_state#0",
        "is_true%0#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0",
        "tmp%8#0",
        "game_state#0",
        "is_true%0#0",
        "0x00"
      ]
    },
    "1032": {
      "op": "intc_1 // 0",
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0",
        "tmp%8#0",
        "game_state#0",
        "is_true%0#0",
        "0x00",
        "0"
      ]
    },
    "1033": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0",
        "tmp%8#0",
        "game_state#0",
        "0x00",
        "0",
        "is_true%0#0"
      ]
    },
    "1035": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%0#0",
        "game_state#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0",
        "tmp%8#0",
        "game_state#0",
        "encoded_bool%0#0"
      ]
    },
    "1036": {
      "op": "intc_1 // 0",
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0",
        "tmp%8#0",
        "game_state#0",
        "encoded_bool%0#0",
        "0"
      ]
    },
    "1037": {
      "op": "getbit",
      "defined_out": [
        "game_state#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%19#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0",
        "tmp%8#0",
        "game_state#0",
        "tmp%19#0"
      ]
    },
    "1038": {
      "op": "!",
      "defined_out": [
        "game_state#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%20#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0",
        "tmp%8#0",
        "game_state#0",
        "tmp%20#0"
      ]
    },
    "1039": {
      "error": "Game state staking finalized value missmatch.",
      "op": "assert // Game state staking finalized value missmatch.",
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0",
        "tmp%8#0",
        "game_state#0"
      ]
    },
    "1040": {
      "op": "dup",
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0",
        "tmp%8#0",
        "game_state#0",
        "game_state#0 (copy)"
      ]
    },
    "1041": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "game_state#0",
        "game_state#0 (copy)",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0",
        "tmp%8#0",
        "game_state#0",
        "game_state#0 (copy)",
        "4"
      ]
    },
    "1043": {
      "op": "extract_uint16",
      "defined_out": [
        "game_state#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%22#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0",
        "tmp%8#0",
        "game_state#0",
        "tmp%22#0"
      ]
    },
    "1044": {
      "op": "dig 1",
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0",
        "tmp%8#0",
        "game_state#0",
        "tmp%22#0",
        "game_state#0 (copy)"
      ]
    },
    "1046": {
      "op": "intc_0 // 1",
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0",
        "tmp%8#0",
        "game_state#0",
        "tmp%22#0",
        "game_state#0 (copy)",
        "1"
      ]
    },
    "1047": {
      "op": "getbyte",
      "defined_out": [
        "game_state#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%22#0",
        "tmp%24#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0",
        "tmp%8#0",
        "game_state#0",
        "tmp%22#0",
        "tmp%24#0"
      ]
    },
    "1048": {
      "op": "intc_3 // 32",
      "defined_out": [
        "32",
        "game_state#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%22#0",
        "tmp%24#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0",
        "tmp%8#0",
        "game_state#0",
        "tmp%22#0",
        "tmp%24#0",
        "32"
      ]
    },
    "1049": {
      "op": "*",
      "defined_out": [
        "game_state#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%22#0",
        "tmp%25#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0",
        "tmp%8#0",
        "game_state#0",
        "tmp%22#0",
        "tmp%25#0"
      ]
    },
    "1050": {
      "op": "dig 1",
      "defined_out": [
        "game_state#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%22#0",
        "tmp%22#0 (copy)",
        "tmp%25#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0",
        "tmp%8#0",
        "game_state#0",
        "tmp%22#0",
        "tmp%25#0",
        "tmp%22#0 (copy)"
      ]
    },
    "1052": {
      "op": ">",
      "defined_out": [
        "game_state#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%22#0",
        "tmp%26#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0",
        "tmp%8#0",
        "game_state#0",
        "tmp%22#0",
        "tmp%26#0"
      ]
    },
    "1053": {
      "error": "Players box start position index overflow. Can not store more addresses.",
      "op": "assert // Players box start position index overflow. Can not store more addresses.",
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0",
        "tmp%8#0",
        "game_state#0",
        "tmp%22#0"
      ]
    },
    "1054": {
      "op": "bytec_2 // \"p_\"",
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0",
        "tmp%8#0",
        "game_state#0",
        "tmp%22#0",
        "\"p_\""
      ]
    },
    "1055": {
      "op": "uncover 4",
      "stack_out": [
        "tmp%1#0",
        "tmp%8#0",
        "game_state#0",
        "tmp%22#0",
        "\"p_\"",
        "tmp%0#0"
      ]
    },
    "1057": {
      "op": "concat",
      "defined_out": [
        "game_players_ref#0",
        "game_state#0",
        "tmp%1#0",
        "tmp%22#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%8#0",
        "game_state#0",
        "tmp%22#0",
        "game_players_ref#0"
      ]
    },
    "1058": {
      "op": "txn Sender",
      "defined_out": [
        "game_players_ref#0",
        "game_state#0",
        "tmp%1#0",
        "tmp%22#0",
        "tmp%30#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%8#0",
        "game_state#0",
        "tmp%22#0",
        "game_players_ref#0",
        "tmp%30#0"
      ]
    },
    "1060": {
      "op": "swap",
      "stack_out": [
        "tmp%1#0",
        "tmp%8#0",
        "game_state#0",
        "tmp%22#0",
        "tmp%30#0",
        "game_players_ref#0"
      ]
    },
    "1061": {
      "op": "cover 2",
      "stack_out": [
        "tmp%1#0",
        "tmp%8#0",
        "game_state#0",
        "game_players_ref#0",
        "tmp%22#0",
        "tmp%30#0"
      ]
    },
    "1063": {
      "op": "box_replace",
      "stack_out": [
        "tmp%1#0",
        "tmp%8#0",
        "game_state#0"
      ]
    },
    "1064": {
      "op": "dup",
      "stack_out": [
        "tmp%1#0",
        "tmp%8#0",
        "game_state#0",
        "game_state#0 (copy)"
      ]
    },
    "1065": {
      "op": "intc_2 // 2",
      "stack_out": [
        "tmp%1#0",
        "tmp%8#0",
        "game_state#0",
        "game_state#0 (copy)",
        "2"
      ]
    },
    "1066": {
      "op": "getbyte",
      "defined_out": [
        "game_state#0",
        "tmp%1#0",
        "tmp%32#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%8#0",
        "game_state#0",
        "tmp%32#0"
      ]
    },
    "1067": {
      "op": "intc_0 // 1",
      "stack_out": [
        "tmp%1#0",
        "tmp%8#0",
        "game_state#0",
        "tmp%32#0",
        "1"
      ]
    },
    "1068": {
      "op": "+",
      "defined_out": [
        "game_state#0",
        "tmp%1#0",
        "tmp%8#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%8#0",
        "game_state#0",
        "to_encode%0#0"
      ]
    },
    "1069": {
      "op": "itob",
      "defined_out": [
        "game_state#0",
        "tmp%1#0",
        "tmp%8#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%8#0",
        "game_state#0",
        "val_as_bytes%0#0"
      ]
    },
    "1070": {
      "op": "dup",
      "defined_out": [
        "game_state#0",
        "tmp%1#0",
        "tmp%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%8#0",
        "game_state#0",
        "val_as_bytes%0#0",
        "val_as_bytes%0#0 (copy)"
      ]
    },
    "1071": {
      "op": "bitlen",
      "defined_out": [
        "bitlen%0#0",
        "game_state#0",
        "tmp%1#0",
        "tmp%8#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%8#0",
        "game_state#0",
        "val_as_bytes%0#0",
        "bitlen%0#0"
      ]
    },
    "1072": {
      "op": "pushint 8 // 8",
      "defined_out": [
        "8",
        "bitlen%0#0",
        "game_state#0",
        "tmp%1#0",
        "tmp%8#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%8#0",
        "game_state#0",
        "val_as_bytes%0#0",
        "bitlen%0#0",
        "8"
      ]
    },
    "1074": {
      "op": "<=",
      "defined_out": [
        "game_state#0",
        "no_overflow%0#0",
        "tmp%1#0",
        "tmp%8#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%8#0",
        "game_state#0",
        "val_as_bytes%0#0",
        "no_overflow%0#0"
      ]
    },
    "1075": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "tmp%1#0",
        "tmp%8#0",
        "game_state#0",
        "val_as_bytes%0#0"
      ]
    },
    "1076": {
      "op": "extract 7 1",
      "defined_out": [
        "game_state#0",
        "tmp%1#0",
        "tmp%8#0",
        "uint8%0#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%8#0",
        "game_state#0",
        "uint8%0#0"
      ]
    },
    "1079": {
      "op": "replace2 2",
      "stack_out": [
        "tmp%1#0",
        "tmp%8#0",
        "game_state#0"
      ]
    },
    "1081": {
      "op": "dup",
      "stack_out": [
        "tmp%1#0",
        "tmp%8#0",
        "game_state#0",
        "game_state#0 (copy)"
      ]
    },
    "1082": {
      "op": "pushint 4 // 4",
      "stack_out": [
        "tmp%1#0",
        "tmp%8#0",
        "game_state#0",
        "game_state#0 (copy)",
        "4"
      ]
    },
    "1084": {
      "op": "extract_uint16",
      "defined_out": [
        "game_state#0",
        "tmp%1#0",
        "tmp%34#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%8#0",
        "game_state#0",
        "tmp%34#0"
      ]
    },
    "1085": {
      "op": "intc_3 // 32",
      "stack_out": [
        "tmp%1#0",
        "tmp%8#0",
        "game_state#0",
        "tmp%34#0",
        "32"
      ]
    },
    "1086": {
      "op": "+",
      "defined_out": [
        "game_state#0",
        "tmp%1#0",
        "tmp%8#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%8#0",
        "game_state#0",
        "to_encode%1#0"
      ]
    },
    "1087": {
      "op": "itob",
      "defined_out": [
        "game_state#0",
        "tmp%1#0",
        "tmp%8#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%8#0",
        "game_state#0",
        "val_as_bytes%1#0"
      ]
    },
    "1088": {
      "op": "dup",
      "defined_out": [
        "game_state#0",
        "tmp%1#0",
        "tmp%8#0",
        "val_as_bytes%1#0",
        "val_as_bytes%1#0 (copy)"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%8#0",
        "game_state#0",
        "val_as_bytes%1#0",
        "val_as_bytes%1#0 (copy)"
      ]
    },
    "1089": {
      "op": "bitlen",
      "defined_out": [
        "bitlen%1#0",
        "game_state#0",
        "tmp%1#0",
        "tmp%8#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%8#0",
        "game_state#0",
        "val_as_bytes%1#0",
        "bitlen%1#0"
      ]
    },
    "1090": {
      "op": "pushint 16 // 16",
      "defined_out": [
        "16",
        "bitlen%1#0",
        "game_state#0",
        "tmp%1#0",
        "tmp%8#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%8#0",
        "game_state#0",
        "val_as_bytes%1#0",
        "bitlen%1#0",
        "16"
      ]
    },
    "1092": {
      "op": "<=",
      "defined_out": [
        "game_state#0",
        "no_overflow%1#0",
        "tmp%1#0",
        "tmp%8#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%8#0",
        "game_state#0",
        "val_as_bytes%1#0",
        "no_overflow%1#0"
      ]
    },
    "1093": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "tmp%1#0",
        "tmp%8#0",
        "game_state#0",
        "val_as_bytes%1#0"
      ]
    },
    "1094": {
      "op": "extract 6 2",
      "defined_out": [
        "game_state#0",
        "tmp%1#0",
        "tmp%8#0",
        "uint16%0#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%8#0",
        "game_state#0",
        "uint16%0#0"
      ]
    },
    "1097": {
      "op": "replace2 4",
      "stack_out": [
        "tmp%1#0",
        "tmp%8#0",
        "game_state#0"
      ]
    },
    "1099": {
      "op": "dup",
      "stack_out": [
        "tmp%1#0",
        "tmp%8#0",
        "game_state#0",
        "game_state#0 (copy)"
      ]
    },
    "1100": {
      "op": "pushint 6 // 6",
      "defined_out": [
        "6",
        "game_state#0",
        "game_state#0 (copy)",
        "tmp%1#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%8#0",
        "game_state#0",
        "game_state#0 (copy)",
        "6"
      ]
    },
    "1102": {
      "op": "extract_uint64",
      "defined_out": [
        "game_state#0",
        "tmp%1#0",
        "tmp%36#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%8#0",
        "game_state#0",
        "tmp%36#0"
      ]
    },
    "1103": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%1#0",
        "game_state#0",
        "tmp%36#0",
        "tmp%8#0"
      ]
    },
    "1105": {
      "op": "+",
      "defined_out": [
        "game_state#0",
        "tmp%1#0",
        "to_encode%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "game_state#0",
        "to_encode%2#0"
      ]
    },
    "1106": {
      "op": "itob",
      "defined_out": [
        "game_state#0",
        "tmp%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "game_state#0",
        "val_as_bytes%2#0"
      ]
    },
    "1107": {
      "op": "replace2 6",
      "stack_out": [
        "tmp%1#0",
        "game_state#0"
      ]
    },
    "1109": {
      "op": "dupn 2",
      "defined_out": [
        "game_state#0",
        "game_state#0 (copy)",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "game_state#0",
        "game_state#0",
        "game_state#0 (copy)"
      ]
    },
    "1111": {
      "error": "Index access is out of bounds",
      "op": "extract 2 1 // on error: Index access is out of bounds",
      "defined_out": [
        "game_state#0",
        "reinterpret_biguint%2#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "game_state#0",
        "game_state#0",
        "reinterpret_biguint%2#0"
      ]
    },
    "1114": {
      "op": "dig 1",
      "stack_out": [
        "tmp%1#0",
        "game_state#0",
        "game_state#0",
        "reinterpret_biguint%2#0",
        "game_state#0 (copy)"
      ]
    },
    "1116": {
      "error": "Index access is out of bounds",
      "op": "extract 1 1 // on error: Index access is out of bounds",
      "defined_out": [
        "game_state#0",
        "reinterpret_biguint%2#0",
        "reinterpret_biguint%3#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "game_state#0",
        "game_state#0",
        "reinterpret_biguint%2#0",
        "reinterpret_biguint%3#0"
      ]
    },
    "1119": {
      "op": "b==",
      "defined_out": [
        "game_state#0",
        "game_state#8",
        "tmp%1#0",
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "game_state#0",
        "game_state#8",
        "tmp%38#0"
      ]
    },
    "1120": {
      "op": "bz join_game_after_if_else@2",
      "stack_out": [
        "tmp%1#0",
        "game_state#0",
        "game_state#8"
      ]
    },
    "1123": {
      "op": "frame_dig 1",
      "stack_out": [
        "tmp%1#0",
        "game_state#0",
        "game_state#8",
        "game_state#0"
      ]
    },
    "1125": {
      "op": "intc_1 // 0",
      "stack_out": [
        "tmp%1#0",
        "game_state#0",
        "game_state#8",
        "game_state#0",
        "0"
      ]
    },
    "1126": {
      "op": "intc_0 // 1",
      "stack_out": [
        "tmp%1#0",
        "game_state#0",
        "game_state#8",
        "game_state#0",
        "0",
        "1"
      ]
    },
    "1127": {
      "op": "setbit",
      "stack_out": [
        "tmp%1#0",
        "game_state#0",
        "game_state#8",
        "game_state#8"
      ]
    },
    "1128": {
      "op": "frame_bury 2",
      "stack_out": [
        "tmp%1#0",
        "game_state#0",
        "game_state#8"
      ]
    },
    "1130": {
      "block": "join_game_after_if_else@2",
      "stack_in": [
        "tmp%1#0",
        "game_state#0",
        "game_state#8"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "game_state#0",
        "game_state#8",
        "tmp%1#0"
      ]
    },
    "1132": {
      "op": "frame_dig 2",
      "defined_out": [
        "game_state#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "game_state#0",
        "game_state#8",
        "tmp%1#0",
        "game_state#0"
      ]
    },
    "1134": {
      "op": "box_put",
      "stack_out": [
        "tmp%1#0",
        "game_state#0",
        "game_state#8"
      ]
    },
    "1135": {
      "retsub": true,
      "op": "retsub"
    },
    "1136": {
      "subroutine": "smart_contracts.pieout.contract.Pieout.commit_rand",
      "params": {
        "game_id#0": "uint64",
        "box_c_pay#0": "uint64"
      },
      "block": "commit_rand",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "1139": {
      "op": "frame_dig -2",
      "defined_out": [
        "game_id#0 (copy)"
      ],
      "stack_out": [
        "game_id#0 (copy)"
      ]
    },
    "1141": {
      "op": "itob",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1142": {
      "op": "bytec_1 // \"s_\"",
      "defined_out": [
        "\"s_\"",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "\"s_\""
      ]
    },
    "1143": {
      "op": "dig 1",
      "defined_out": [
        "\"s_\"",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "\"s_\"",
        "tmp%0#0 (copy)"
      ]
    },
    "1145": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "1146": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ]
    },
    "1147": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1148": {
      "op": "bury 1",
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "maybe_exists%0#0"
      ]
    },
    "1150": {
      "error": "Box game state not found. Check if Game ID is valid.",
      "op": "assert // Box game state not found. Check if Game ID is valid.",
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "1151": {
      "op": "frame_dig -1",
      "defined_out": [
        "box_c_pay#0 (copy)",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "box_c_pay#0 (copy)"
      ]
    },
    "1153": {
      "op": "gtxns Sender",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "1155": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "1157": {
      "op": "==",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%4#0"
      ]
    },
    "1158": {
      "error": "Box payment sender address must match transaction sender address.",
      "op": "assert // Box payment sender address must match transaction sender address.",
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "1159": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "box_c_pay#0 (copy)"
      ]
    },
    "1161": {
      "op": "gtxns Receiver",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%5#0"
      ]
    },
    "1163": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%5#0",
        "tmp%6#0"
      ]
    },
    "1165": {
      "op": "==",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%7#0"
      ]
    },
    "1166": {
      "error": "Box payment reciever address must match application address.",
      "op": "assert // Box payment reciever address must match application address.",
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "1167": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "box_c_pay#0 (copy)"
      ]
    },
    "1169": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%8#0"
      ]
    },
    "1171": {
      "op": "pushint 22500 // 22500",
      "defined_out": [
        "22500",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%8#0",
        "22500"
      ]
    },
    "1175": {
      "op": ">=",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%9#0"
      ]
    },
    "1176": {
      "error": "Insufficient funds. Box pay amount is not enough to cover application MBR.",
      "op": "assert // Insufficient funds. Box pay amount is not enough to cover application MBR.",
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "1177": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1178": {
      "error": "check self.box_game_state entry exists",
      "op": "assert // check self.box_game_state entry exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%1#0"
      ]
    },
    "1179": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "maybe_value%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%1#0",
        "1"
      ]
    },
    "1180": {
      "op": "getbyte",
      "defined_out": [
        "tmp%0#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%13#0"
      ]
    },
    "1181": {
      "op": "frame_dig -2",
      "stack_out": [
        "tmp%0#0",
        "tmp%13#0",
        "game_id#0 (copy)"
      ]
    },
    "1183": {
      "op": "bytec_2 // \"p_\"",
      "defined_out": [
        "\"p_\"",
        "game_id#0 (copy)",
        "tmp%0#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%13#0",
        "game_id#0 (copy)",
        "\"p_\""
      ]
    },
    "1184": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "game_id#0 (copy)",
        "\"p_\"",
        "tmp%13#0"
      ]
    },
    "1186": {
      "op": "intc_1 // 0",
      "defined_out": [
        "\"p_\"",
        "0",
        "game_id#0 (copy)",
        "tmp%0#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "game_id#0 (copy)",
        "\"p_\"",
        "tmp%13#0",
        "0"
      ]
    },
    "1187": {
      "callsub": "smart_contracts.pieout.subroutines.check_sender_in_game",
      "op": "callsub check_sender_in_game",
      "defined_out": [
        "tmp%0#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%14#0"
      ]
    },
    "1190": {
      "op": "intc_0 // 1",
      "stack_out": [
        "tmp%0#0",
        "tmp%14#0",
        "1"
      ]
    },
    "1191": {
      "op": "==",
      "defined_out": [
        "tmp%0#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%15#0"
      ]
    },
    "1192": {
      "error": "Transaction sender is not recognized as a valid player for this game.",
      "op": "assert // Transaction sender is not recognized as a valid player for this game.",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1193": {
      "op": "txn TxID",
      "defined_out": [
        "tmp%0#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%16#0"
      ]
    },
    "1195": {
      "op": "global Round",
      "defined_out": [
        "tmp%0#0",
        "tmp%16#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%16#0",
        "tmp%17#0"
      ]
    },
    "1197": {
      "op": "itob",
      "defined_out": [
        "tmp%0#0",
        "tmp%16#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%16#0",
        "tmp%18#0"
      ]
    },
    "1198": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%19#0"
      ]
    },
    "1199": {
      "op": "sha256",
      "defined_out": [
        "tmp%0#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%20#0"
      ]
    },
    "1200": {
      "op": "intc_1 // 0",
      "stack_out": [
        "tmp%0#0",
        "tmp%20#0",
        "0"
      ]
    },
    "1201": {
      "op": "extract_uint16",
      "defined_out": [
        "tmp%0#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%22#0"
      ]
    },
    "1202": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "tmp%0#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%22#0",
        "3"
      ]
    },
    "1204": {
      "op": "%",
      "defined_out": [
        "tmp%0#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%23#0"
      ]
    },
    "1205": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "tmp%0#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%23#0",
        "2"
      ]
    },
    "1206": {
      "op": "+",
      "defined_out": [
        "round_offset#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "round_offset#0"
      ]
    },
    "1207": {
      "op": "global Round",
      "defined_out": [
        "round_offset#0",
        "tmp%0#0",
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "round_offset#0",
        "tmp%24#0"
      ]
    },
    "1209": {
      "op": "+",
      "defined_out": [
        "commit_round#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "commit_round#0"
      ]
    },
    "1210": {
      "op": "itob",
      "defined_out": [
        "tmp%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "1211": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0"
      ]
    },
    "1212": {
      "op": "pushbytes \"c_\"",
      "defined_out": [
        "\"c_\"",
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "\"c_\""
      ]
    },
    "1216": {
      "op": "txn Sender",
      "defined_out": [
        "\"c_\"",
        "encoded_tuple_buffer%2#0",
        "tmp%25#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "\"c_\"",
        "tmp%25#0"
      ]
    },
    "1218": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%26#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%26#0"
      ]
    },
    "1219": {
      "op": "swap",
      "stack_out": [
        "tmp%26#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "1220": {
      "op": "box_put",
      "stack_out": []
    },
    "1221": {
      "retsub": true,
      "op": "retsub"
    },
    "1222": {
      "subroutine": "smart_contracts.pieout.contract.Pieout.play_game",
      "params": {
        "game_id#0": "uint64"
      },
      "block": "play_game",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "1225": {
      "op": "intc_1 // 0",
      "stack_out": [
        "game_state#0"
      ]
    },
    "1226": {
      "op": "dupn 5",
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0"
      ]
    },
    "1228": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0"
      ]
    },
    "1230": {
      "op": "dupn 5",
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1"
      ]
    },
    "1232": {
      "block": "play_game_while_top@2",
      "stack_in": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1"
      ],
      "op": "pushint 14010 // 14010",
      "defined_out": [
        "14010"
      ],
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "14010"
      ]
    },
    "1235": {
      "op": "global OpcodeBudget",
      "defined_out": [
        "14010",
        "tmp%0#1"
      ],
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "14010",
        "tmp%0#1"
      ]
    },
    "1237": {
      "op": ">",
      "defined_out": [
        "tmp%1#1"
      ],
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "tmp%1#1"
      ]
    },
    "1238": {
      "op": "bz play_game_after_while@7",
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1"
      ]
    },
    "1241": {
      "op": "itxn_begin"
    },
    "1242": {
      "op": "pushint 6 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "appl"
      ]
    },
    "1244": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1"
      ]
    },
    "1246": {
      "op": "pushint 5 // DeleteApplication",
      "defined_out": [
        "DeleteApplication"
      ],
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "DeleteApplication"
      ]
    },
    "1248": {
      "op": "itxn_field OnCompletion",
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1"
      ]
    },
    "1250": {
      "op": "bytec 7 // 0x068101",
      "defined_out": [
        "0x068101"
      ],
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "0x068101"
      ]
    },
    "1252": {
      "op": "itxn_field ApprovalProgram",
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1"
      ]
    },
    "1254": {
      "op": "bytec 7 // 0x068101",
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "0x068101"
      ]
    },
    "1256": {
      "op": "itxn_field ClearStateProgram",
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1"
      ]
    },
    "1258": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "0"
      ]
    },
    "1259": {
      "op": "itxn_field Fee",
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1"
      ]
    },
    "1261": {
      "op": "itxn_submit"
    },
    "1262": {
      "op": "b play_game_while_top@2"
    },
    "1265": {
      "block": "play_game_after_while@7",
      "stack_in": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1"
      ],
      "op": "frame_dig -1",
      "defined_out": [
        "game_id#0 (copy)"
      ],
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "game_id#0 (copy)"
      ]
    },
    "1267": {
      "op": "itob",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "tmp%0#0"
      ]
    },
    "1268": {
      "op": "bytec_1 // \"s_\"",
      "defined_out": [
        "\"s_\"",
        "tmp%0#0"
      ],
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "tmp%0#0",
        "\"s_\""
      ]
    },
    "1269": {
      "op": "swap",
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "\"s_\"",
        "tmp%0#0"
      ]
    },
    "1270": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "tmp%1#0"
      ]
    },
    "1271": {
      "op": "dup",
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "tmp%1#0",
        "tmp%1#0"
      ]
    },
    "1272": {
      "op": "frame_bury 5",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "tmp%1#0"
      ]
    },
    "1274": {
      "op": "dup",
      "defined_out": [
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ],
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ]
    },
    "1275": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "tmp%1#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1276": {
      "op": "bury 1",
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "tmp%1#0",
        "maybe_exists%0#0"
      ]
    },
    "1278": {
      "error": "Box game state not found. Check if Game ID is valid.",
      "op": "assert // Box game state not found. Check if Game ID is valid.",
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "tmp%1#0"
      ]
    },
    "1279": {
      "op": "dup",
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ]
    },
    "1280": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "tmp%1#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1281": {
      "error": "check self.box_game_state entry exists",
      "op": "assert // check self.box_game_state entry exists",
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "tmp%1#0",
        "maybe_value%1#0"
      ]
    },
    "1282": {
      "op": "intc_0 // 1",
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "tmp%1#0",
        "maybe_value%1#0",
        "1"
      ]
    },
    "1283": {
      "op": "getbyte",
      "defined_out": [
        "tmp%1#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "tmp%1#0",
        "tmp%5#0"
      ]
    },
    "1284": {
      "op": "frame_dig -1",
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "tmp%1#0",
        "tmp%5#0",
        "game_id#0 (copy)"
      ]
    },
    "1286": {
      "op": "bytec_2 // \"p_\"",
      "defined_out": [
        "\"p_\"",
        "game_id#0 (copy)",
        "tmp%1#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "tmp%1#0",
        "tmp%5#0",
        "game_id#0 (copy)",
        "\"p_\""
      ]
    },
    "1287": {
      "op": "uncover 2",
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "tmp%1#0",
        "game_id#0 (copy)",
        "\"p_\"",
        "tmp%5#0"
      ]
    },
    "1289": {
      "op": "intc_0 // 1",
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "tmp%1#0",
        "game_id#0 (copy)",
        "\"p_\"",
        "tmp%5#0",
        "1"
      ]
    },
    "1290": {
      "callsub": "smart_contracts.pieout.subroutines.check_sender_in_game",
      "op": "callsub check_sender_in_game",
      "defined_out": [
        "tmp%1#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "tmp%1#0",
        "tmp%6#0"
      ]
    },
    "1293": {
      "op": "intc_0 // 1",
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "tmp%1#0",
        "tmp%6#0",
        "1"
      ]
    },
    "1294": {
      "op": "==",
      "defined_out": [
        "tmp%1#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "tmp%1#0",
        "tmp%7#0"
      ]
    },
    "1295": {
      "error": "Transaction sender is not recognized as a valid player for this game.",
      "op": "assert // Transaction sender is not recognized as a valid player for this game.",
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "tmp%1#0"
      ]
    },
    "1296": {
      "op": "box_get",
      "defined_out": [
        "game_state#0",
        "maybe_exists%2#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "game_state#0",
        "maybe_exists%2#0"
      ]
    },
    "1297": {
      "op": "swap",
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "maybe_exists%2#0",
        "game_state#0"
      ]
    },
    "1298": {
      "op": "dup",
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "maybe_exists%2#0",
        "game_state#0",
        "game_state#0 (copy)"
      ]
    },
    "1299": {
      "op": "cover 2",
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "game_state#0",
        "maybe_exists%2#0",
        "game_state#0"
      ]
    },
    "1301": {
      "op": "frame_bury 0",
      "defined_out": [
        "game_state#0",
        "maybe_exists%2#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "game_state#0",
        "maybe_exists%2#0"
      ]
    },
    "1303": {
      "error": "check self.box_game_state entry exists",
      "op": "assert // check self.box_game_state entry exists",
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "game_state#0"
      ]
    },
    "1304": {
      "op": "intc_1 // 0",
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "game_state#0",
        "0"
      ]
    },
    "1305": {
      "op": "getbit",
      "defined_out": [
        "game_state#0",
        "is_true%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "is_true%0#0"
      ]
    },
    "1306": {
      "op": "bytec_0 // 0x00",
      "defined_out": [
        "0x00",
        "game_state#0",
        "is_true%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "is_true%0#0",
        "0x00"
      ]
    },
    "1307": {
      "op": "intc_1 // 0",
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "is_true%0#0",
        "0x00",
        "0"
      ]
    },
    "1308": {
      "op": "uncover 2",
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "0x00",
        "0",
        "is_true%0#0"
      ]
    },
    "1310": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%0#0",
        "game_state#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "encoded_bool%0#0"
      ]
    },
    "1311": {
      "op": "intc_1 // 0",
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "encoded_bool%0#0",
        "0"
      ]
    },
    "1312": {
      "op": "getbit",
      "defined_out": [
        "game_state#0",
        "tmp%1#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "tmp%10#0"
      ]
    },
    "1313": {
      "op": "intc_0 // 1",
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "tmp%10#0",
        "1"
      ]
    },
    "1314": {
      "op": "==",
      "defined_out": [
        "game_state#0",
        "tmp%1#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "tmp%11#0"
      ]
    },
    "1315": {
      "error": "Game state staking finalized value missmatch.",
      "op": "assert // Game state staking finalized value missmatch.",
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1"
      ]
    },
    "1316": {
      "op": "txn TxID",
      "defined_out": [
        "game_state#0",
        "seed#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "seed#0"
      ]
    },
    "1318": {
      "op": "txn Sender",
      "defined_out": [
        "game_state#0",
        "player#0",
        "seed#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "seed#0",
        "player#0"
      ]
    },
    "1320": {
      "op": "frame_bury 3",
      "defined_out": [
        "game_state#0",
        "player#0",
        "seed#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "seed#0"
      ]
    },
    "1322": {
      "op": "dup",
      "defined_out": [
        "game_state#0",
        "player#0",
        "seed#0",
        "seed#0 (copy)",
        "tmp%1#0"
      ],
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "seed#0",
        "seed#0 (copy)"
      ]
    },
    "1323": {
      "op": "extract 16 8",
      "defined_out": [
        "game_state#0",
        "player#0",
        "seed#0",
        "seed#1",
        "tmp%1#0"
      ],
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "seed#0",
        "seed#1"
      ]
    },
    "1326": {
      "op": "len",
      "defined_out": [
        "game_state#0",
        "player#0",
        "seed#0",
        "tmp%0#1",
        "tmp%1#0"
      ],
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "seed#0",
        "tmp%0#1"
      ]
    },
    "1327": {
      "op": "pushint 8 // 8",
      "defined_out": [
        "8",
        "game_state#0",
        "player#0",
        "seed#0",
        "tmp%0#1",
        "tmp%1#0"
      ],
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "seed#0",
        "tmp%0#1",
        "8"
      ]
    },
    "1329": {
      "op": "==",
      "defined_out": [
        "game_state#0",
        "player#0",
        "seed#0",
        "tmp%1#0",
        "tmp%1#1"
      ],
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "seed#0",
        "tmp%1#1"
      ]
    },
    "1330": {
      "op": "assert",
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "seed#0"
      ]
    },
    "1331": {
      "op": "pushint 16 // 16",
      "defined_out": [
        "16",
        "game_state#0",
        "player#0",
        "seed#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "seed#0",
        "16"
      ]
    },
    "1333": {
      "op": "extract_uint64",
      "defined_out": [
        "game_state#0",
        "initial_state#0",
        "player#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "initial_state#0"
      ]
    },
    "1334": {
      "op": "intc_1 // 0",
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "initial_state#0",
        "0"
      ]
    },
    "1335": {
      "op": "intc 4 // 6364136223846793005",
      "defined_out": [
        "0",
        "6364136223846793005",
        "game_state#0",
        "initial_state#0",
        "player#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "initial_state#0",
        "0",
        "6364136223846793005"
      ]
    },
    "1337": {
      "op": "mulw",
      "defined_out": [
        "_high_mul#0",
        "game_state#0",
        "initial_state#0",
        "low_mul#0",
        "player#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "initial_state#0",
        "_high_mul#0",
        "low_mul#0"
      ]
    },
    "1338": {
      "op": "bury 1",
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "initial_state#0",
        "low_mul#0"
      ]
    },
    "1340": {
      "op": "intc 5 // 1442695040888963407",
      "defined_out": [
        "1442695040888963407",
        "game_state#0",
        "initial_state#0",
        "low_mul#0",
        "player#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "initial_state#0",
        "low_mul#0",
        "1442695040888963407"
      ]
    },
    "1342": {
      "op": "addw",
      "defined_out": [
        "_high_add#0",
        "game_state#0",
        "initial_state#0",
        "low_add#0",
        "player#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "initial_state#0",
        "_high_add#0",
        "low_add#0"
      ]
    },
    "1343": {
      "op": "bury 1",
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "initial_state#0",
        "low_add#0"
      ]
    },
    "1345": {
      "op": "addw",
      "defined_out": [
        "_high_addw#0",
        "game_state#0",
        "player#0",
        "state#2",
        "tmp%1#0"
      ],
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "_high_addw#0",
        "state#2"
      ]
    },
    "1346": {
      "op": "bury 1",
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "state#2"
      ]
    },
    "1348": {
      "op": "intc 4 // 6364136223846793005",
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "state#2",
        "6364136223846793005"
      ]
    },
    "1350": {
      "op": "mulw",
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "_high_mul#0",
        "low_mul#0"
      ]
    },
    "1351": {
      "op": "bury 1",
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "low_mul#0"
      ]
    },
    "1353": {
      "op": "intc 5 // 1442695040888963407",
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "low_mul#0",
        "1442695040888963407"
      ]
    },
    "1355": {
      "op": "addw",
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "_high_add#0",
        "low_add#0"
      ]
    },
    "1356": {
      "op": "bury 1",
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "low_add#0"
      ]
    },
    "1358": {
      "op": "pushbytes 0x0064",
      "defined_out": [
        "game_state#0",
        "low_add#0",
        "player#0",
        "result#1",
        "state#2",
        "tmp%1#0"
      ],
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "low_add#0",
        "result#1"
      ]
    },
    "1362": {
      "op": "frame_bury 4",
      "defined_out": [
        "game_state#0",
        "low_add#0",
        "player#0",
        "result#1",
        "state#2",
        "tmp%1#0"
      ],
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "low_add#0"
      ]
    },
    "1364": {
      "op": "pushint 18446744073709486080 // 18446744073709486080",
      "defined_out": [
        "18446744073709486080",
        "game_state#0",
        "low_add#0",
        "player#0",
        "result#1",
        "state#2",
        "tmp%1#0"
      ],
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "low_add#0",
        "18446744073709486080"
      ]
    },
    "1375": {
      "op": "intc_0 // 1",
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "low_add#0",
        "18446744073709486080",
        "1"
      ]
    },
    "1376": {
      "op": "addw",
      "defined_out": [
        "_addw_high#0",
        "addw_low#0",
        "game_state#0",
        "low_add#0",
        "player#0",
        "result#1",
        "state#2",
        "tmp%1#0"
      ],
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "low_add#0",
        "_addw_high#0",
        "addw_low#0"
      ]
    },
    "1377": {
      "op": "bury 1",
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "low_add#0",
        "addw_low#0"
      ]
    },
    "1379": {
      "op": "intc 6 // 4294967295",
      "defined_out": [
        "4294967295",
        "addw_low#0",
        "game_state#0",
        "low_add#0",
        "player#0",
        "result#1",
        "state#2",
        "tmp%1#0"
      ],
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "low_add#0",
        "addw_low#0",
        "4294967295"
      ]
    },
    "1381": {
      "op": "&",
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "low_add#0",
        "tmp%0#1"
      ]
    },
    "1382": {
      "op": "intc 8 // 65535",
      "defined_out": [
        "65535",
        "game_state#0",
        "low_add#0",
        "player#0",
        "result#1",
        "state#2",
        "tmp%0#1",
        "tmp%1#0"
      ],
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "low_add#0",
        "tmp%0#1",
        "65535"
      ]
    },
    "1384": {
      "op": "%",
      "defined_out": [
        "game_state#0",
        "low_add#0",
        "player#0",
        "result#1",
        "state#2",
        "threshold#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "low_add#0",
        "threshold#0"
      ]
    },
    "1385": {
      "op": "frame_bury 10",
      "defined_out": [
        "game_state#0",
        "low_add#0",
        "player#0",
        "result#1",
        "state#2",
        "threshold#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "low_add#0"
      ]
    },
    "1387": {
      "op": "intc_1 // 0",
      "defined_out": [
        "game_state#0",
        "i#0",
        "low_add#0",
        "player#0",
        "result#1",
        "state#2",
        "threshold#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "low_add#0",
        "i#0"
      ]
    },
    "1388": {
      "op": "frame_bury 7",
      "defined_out": [
        "game_state#0",
        "i#0",
        "player#0",
        "result#1",
        "state#2",
        "threshold#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "state#2"
      ]
    },
    "1390": {
      "op": "frame_bury 9",
      "defined_out": [
        "game_state#0",
        "i#0",
        "player#0",
        "result#1",
        "state#2",
        "threshold#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1"
      ]
    },
    "1392": {
      "block": "play_game_for_header@11",
      "stack_in": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1"
      ],
      "op": "frame_dig 7",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "i#0"
      ]
    },
    "1394": {
      "op": "pushint 100 // 100",
      "defined_out": [
        "100",
        "i#0"
      ],
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "i#0",
        "100"
      ]
    },
    "1396": {
      "op": "<",
      "defined_out": [
        "continue_looping%1#0",
        "i#0"
      ],
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "continue_looping%1#0"
      ]
    },
    "1397": {
      "op": "bz play_game_after_for@16",
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1"
      ]
    },
    "1400": {
      "block": "play_game_while_top@13",
      "stack_in": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1"
      ],
      "op": "frame_dig 9",
      "defined_out": [
        "state#2"
      ],
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "state#2"
      ]
    },
    "1402": {
      "op": "dup",
      "defined_out": [
        "state#2",
        "state#2 (copy)"
      ],
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "state#2",
        "state#2 (copy)"
      ]
    },
    "1403": {
      "op": "intc 4 // 6364136223846793005",
      "defined_out": [
        "6364136223846793005",
        "state#2",
        "state#2 (copy)"
      ],
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "state#2",
        "state#2 (copy)",
        "6364136223846793005"
      ]
    },
    "1405": {
      "op": "mulw",
      "defined_out": [
        "_high_mul#0",
        "low_mul#0",
        "state#2"
      ],
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "state#2",
        "_high_mul#0",
        "low_mul#0"
      ]
    },
    "1406": {
      "op": "bury 1",
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "state#2",
        "low_mul#0"
      ]
    },
    "1408": {
      "op": "intc 5 // 1442695040888963407",
      "defined_out": [
        "1442695040888963407",
        "low_mul#0",
        "state#2"
      ],
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "state#2",
        "low_mul#0",
        "1442695040888963407"
      ]
    },
    "1410": {
      "op": "addw",
      "defined_out": [
        "_high_add#0",
        "low_add#0",
        "state#2"
      ],
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "state#2",
        "_high_add#0",
        "low_add#0"
      ]
    },
    "1411": {
      "op": "cover 2",
      "defined_out": [
        "_high_add#0",
        "low_add#0",
        "state#2"
      ],
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "low_add#0",
        "state#2",
        "_high_add#0"
      ]
    },
    "1413": {
      "op": "pop",
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "low_add#0",
        "state#2"
      ]
    },
    "1414": {
      "op": "dup",
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "low_add#0",
        "state#2",
        "state#2 (copy)"
      ]
    },
    "1415": {
      "op": "pushint 18 // 18",
      "defined_out": [
        "18",
        "low_add#0",
        "state#2",
        "state#2 (copy)"
      ],
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "low_add#0",
        "state#2",
        "state#2 (copy)",
        "18"
      ]
    },
    "1417": {
      "op": "shr",
      "defined_out": [
        "low_add#0",
        "state#2",
        "tmp%0#1"
      ],
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "low_add#0",
        "state#2",
        "tmp%0#1"
      ]
    },
    "1418": {
      "op": "dig 1",
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "low_add#0",
        "state#2",
        "tmp%0#1",
        "state#2 (copy)"
      ]
    },
    "1420": {
      "op": "^",
      "defined_out": [
        "low_add#0",
        "state#2",
        "tmp%1#5"
      ],
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "low_add#0",
        "state#2",
        "tmp%1#5"
      ]
    },
    "1421": {
      "op": "pushint 27 // 27",
      "defined_out": [
        "27",
        "low_add#0",
        "state#2",
        "tmp%1#5"
      ],
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "low_add#0",
        "state#2",
        "tmp%1#5",
        "27"
      ]
    },
    "1423": {
      "op": "shr",
      "defined_out": [
        "low_add#0",
        "state#2",
        "value#0"
      ],
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "low_add#0",
        "state#2",
        "value#0"
      ]
    },
    "1424": {
      "op": "intc 6 // 4294967295",
      "defined_out": [
        "4294967295",
        "low_add#0",
        "state#2",
        "value#0"
      ],
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "low_add#0",
        "state#2",
        "value#0",
        "4294967295"
      ]
    },
    "1426": {
      "op": "&",
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "low_add#0",
        "state#2",
        "value#0"
      ]
    },
    "1427": {
      "op": "swap",
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "low_add#0",
        "value#0",
        "state#2"
      ]
    },
    "1428": {
      "op": "pushint 59 // 59",
      "defined_out": [
        "59",
        "low_add#0",
        "state#2",
        "value#0"
      ],
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "low_add#0",
        "value#0",
        "state#2",
        "59"
      ]
    },
    "1430": {
      "op": "shr",
      "defined_out": [
        "low_add#0",
        "rot#0",
        "state#2",
        "value#0"
      ],
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "low_add#0",
        "value#0",
        "rot#0"
      ]
    },
    "1431": {
      "op": "dup2",
      "defined_out": [
        "low_add#0",
        "rot#0",
        "rot#0 (copy)",
        "state#2",
        "value#0",
        "value#0 (copy)"
      ],
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "low_add#0",
        "value#0",
        "rot#0",
        "value#0 (copy)",
        "rot#0 (copy)"
      ]
    },
    "1432": {
      "op": "shr",
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "low_add#0",
        "value#0",
        "rot#0",
        "tmp%0#1"
      ]
    },
    "1433": {
      "op": "swap",
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "low_add#0",
        "value#0",
        "tmp%0#1",
        "rot#0"
      ]
    },
    "1434": {
      "op": "~",
      "defined_out": [
        "low_add#0",
        "state#2",
        "tmp%0#1",
        "tmp%0#9",
        "value#0"
      ],
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "low_add#0",
        "value#0",
        "tmp%0#1",
        "tmp%0#9"
      ]
    },
    "1435": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "low_add#0",
        "state#2",
        "tmp%0#1",
        "tmp%0#9",
        "value#0"
      ],
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "low_add#0",
        "value#0",
        "tmp%0#1",
        "tmp%0#9",
        "1"
      ]
    },
    "1436": {
      "op": "addw",
      "defined_out": [
        "_addw_high#0",
        "addw_low#0",
        "low_add#0",
        "state#2",
        "tmp%0#1",
        "value#0"
      ],
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "low_add#0",
        "value#0",
        "tmp%0#1",
        "_addw_high#0",
        "addw_low#0"
      ]
    },
    "1437": {
      "op": "bury 1",
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "low_add#0",
        "value#0",
        "tmp%0#1",
        "addw_low#0"
      ]
    },
    "1439": {
      "op": "pushint 31 // 31",
      "defined_out": [
        "31",
        "addw_low#0",
        "low_add#0",
        "state#2",
        "tmp%0#1",
        "value#0"
      ],
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "low_add#0",
        "value#0",
        "tmp%0#1",
        "addw_low#0",
        "31"
      ]
    },
    "1441": {
      "op": "&",
      "defined_out": [
        "low_add#0",
        "state#2",
        "tmp%0#1",
        "tmp%2#1",
        "value#0"
      ],
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "low_add#0",
        "value#0",
        "tmp%0#1",
        "tmp%2#1"
      ]
    },
    "1442": {
      "op": "uncover 2",
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "low_add#0",
        "tmp%0#1",
        "tmp%2#1",
        "value#0"
      ]
    },
    "1444": {
      "op": "swap",
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "low_add#0",
        "tmp%0#1",
        "value#0",
        "tmp%2#1"
      ]
    },
    "1445": {
      "op": "shl",
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "low_add#0",
        "tmp%0#1",
        "value#0"
      ]
    },
    "1446": {
      "op": "intc 6 // 4294967295",
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "low_add#0",
        "tmp%0#1",
        "value#0",
        "4294967295"
      ]
    },
    "1448": {
      "op": "&",
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "low_add#0",
        "tmp%0#1",
        "tmp%0#9"
      ]
    },
    "1449": {
      "op": "|",
      "defined_out": [
        "candidate#0",
        "low_add#0",
        "state#2"
      ],
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "low_add#0",
        "candidate#0"
      ]
    },
    "1450": {
      "op": "dup",
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "low_add#0",
        "candidate#0",
        "candidate#0"
      ]
    },
    "1451": {
      "op": "frame_bury 6",
      "defined_out": [
        "candidate#0",
        "low_add#0",
        "state#2"
      ],
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "low_add#0",
        "candidate#0"
      ]
    },
    "1453": {
      "op": "frame_dig 10",
      "defined_out": [
        "candidate#0",
        "low_add#0",
        "state#2",
        "threshold#0"
      ],
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "low_add#0",
        "candidate#0",
        "threshold#0"
      ]
    },
    "1455": {
      "op": ">=",
      "defined_out": [
        "candidate#0",
        "low_add#0",
        "state#2",
        "threshold#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "low_add#0",
        "tmp%20#0"
      ]
    },
    "1456": {
      "op": "bz play_game_after_if_else@15",
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "low_add#0"
      ]
    },
    "1459": {
      "op": "frame_dig 6",
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "low_add#0",
        "candidate#0"
      ]
    },
    "1461": {
      "op": "intc 8 // 65535",
      "defined_out": [
        "65535",
        "candidate#0",
        "low_add#0",
        "state#2",
        "threshold#0"
      ],
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "low_add#0",
        "candidate#0",
        "65535"
      ]
    },
    "1463": {
      "op": "%",
      "defined_out": [
        "candidate#0",
        "low_add#0",
        "state#2",
        "threshold#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "low_add#0",
        "tmp%21#0"
      ]
    },
    "1464": {
      "op": "intc_0 // 1",
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "low_add#0",
        "tmp%21#0",
        "1"
      ]
    },
    "1465": {
      "op": "+",
      "defined_out": [
        "candidate#0",
        "low_add#0",
        "state#2",
        "threshold#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "low_add#0",
        "tmp%22#0"
      ]
    },
    "1466": {
      "op": "itob",
      "defined_out": [
        "candidate#0",
        "low_add#0",
        "state#2",
        "threshold#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "low_add#0",
        "tmp%23#0"
      ]
    },
    "1467": {
      "op": "extract 6 2",
      "defined_out": [
        "candidate#0",
        "low_add#0",
        "state#2",
        "threshold#0",
        "tmp%24#0"
      ],
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "low_add#0",
        "tmp%24#0"
      ]
    },
    "1470": {
      "op": "frame_dig 4",
      "defined_out": [
        "candidate#0",
        "low_add#0",
        "result#1",
        "state#2",
        "threshold#0",
        "tmp%24#0"
      ],
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "low_add#0",
        "tmp%24#0",
        "result#1"
      ]
    },
    "1472": {
      "op": "swap",
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "low_add#0",
        "result#1",
        "tmp%24#0"
      ]
    },
    "1473": {
      "op": "concat",
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "low_add#0",
        "result#1"
      ]
    },
    "1474": {
      "op": "frame_bury 4",
      "defined_out": [
        "candidate#0",
        "low_add#0",
        "result#1",
        "state#2",
        "threshold#0"
      ],
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "low_add#0"
      ]
    },
    "1476": {
      "op": "frame_dig 7",
      "defined_out": [
        "candidate#0",
        "i#0",
        "low_add#0",
        "result#1",
        "state#2",
        "threshold#0"
      ],
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "low_add#0",
        "i#0"
      ]
    },
    "1478": {
      "op": "intc_0 // 1",
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "low_add#0",
        "i#0",
        "1"
      ]
    },
    "1479": {
      "op": "+",
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "low_add#0",
        "i#0"
      ]
    },
    "1480": {
      "op": "frame_bury 7",
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "state#2"
      ]
    },
    "1482": {
      "op": "frame_bury 9",
      "defined_out": [
        "candidate#0",
        "i#0",
        "result#1",
        "state#2",
        "threshold#0"
      ],
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1"
      ]
    },
    "1484": {
      "op": "b play_game_for_header@11"
    },
    "1487": {
      "block": "play_game_after_if_else@15",
      "stack_in": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "low_add#0"
      ],
      "op": "frame_bury 9",
      "defined_out": [
        "state#2"
      ],
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1"
      ]
    },
    "1489": {
      "op": "b play_game_while_top@13"
    },
    "1492": {
      "block": "play_game_after_for@16",
      "stack_in": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1"
      ],
      "op": "intc_1 // 0",
      "defined_out": [
        "score#0"
      ],
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "score#0"
      ]
    },
    "1493": {
      "op": "frame_bury 8",
      "defined_out": [
        "score#0"
      ],
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1"
      ]
    },
    "1495": {
      "op": "frame_dig 4",
      "defined_out": [
        "result#1",
        "score#0"
      ],
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "result#1"
      ]
    },
    "1497": {
      "op": "len",
      "defined_out": [
        "result#1",
        "score#0",
        "tmp%3#1"
      ],
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "tmp%3#1"
      ]
    },
    "1498": {
      "op": "frame_bury 11",
      "defined_out": [
        "result#1",
        "score#0",
        "tmp%3#1"
      ],
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1"
      ]
    },
    "1500": {
      "op": "intc_2 // 2",
      "defined_out": [
        "i#0",
        "result#1",
        "score#0",
        "tmp%3#1"
      ],
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "i#0"
      ]
    },
    "1501": {
      "op": "frame_bury 7",
      "defined_out": [
        "i#0",
        "result#1",
        "score#0",
        "tmp%3#1"
      ],
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1"
      ]
    },
    "1503": {
      "block": "play_game_for_header@18",
      "stack_in": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1"
      ],
      "op": "frame_dig 7",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "i#0"
      ]
    },
    "1505": {
      "op": "frame_dig 11",
      "defined_out": [
        "i#0",
        "tmp%3#1"
      ],
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "i#0",
        "tmp%3#1"
      ]
    },
    "1507": {
      "op": "<",
      "defined_out": [
        "continue_looping%0#0",
        "i#0",
        "tmp%3#1"
      ],
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "continue_looping%0#0"
      ]
    },
    "1508": {
      "op": "bz play_game_after_for@21",
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1"
      ]
    },
    "1511": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "i#0",
        "tmp%3#1"
      ],
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "2"
      ]
    },
    "1512": {
      "op": "frame_dig 11",
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "2",
        "tmp%3#1"
      ]
    },
    "1514": {
      "op": "dup",
      "defined_out": [
        "2",
        "i#0",
        "tmp%3#1",
        "tmp%3#1 (copy)"
      ],
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "2",
        "tmp%3#1 (copy)",
        "tmp%3#1 (copy)"
      ]
    },
    "1515": {
      "op": "cover 2",
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "tmp%3#1",
        "2",
        "tmp%3#1 (copy)"
      ]
    },
    "1517": {
      "op": ">=",
      "defined_out": [
        "i#0",
        "is_out_of_bounds%0#0",
        "tmp%3#1"
      ],
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "tmp%3#1",
        "is_out_of_bounds%0#0"
      ]
    },
    "1518": {
      "op": "intc_2 // 2",
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "tmp%3#1",
        "is_out_of_bounds%0#0",
        "2"
      ]
    },
    "1519": {
      "op": "dig 2",
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "tmp%3#1",
        "is_out_of_bounds%0#0",
        "2",
        "tmp%3#1 (copy)"
      ]
    },
    "1521": {
      "op": "uncover 2",
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "tmp%3#1",
        "2",
        "tmp%3#1 (copy)",
        "is_out_of_bounds%0#0"
      ]
    },
    "1523": {
      "op": "select",
      "defined_out": [
        "bounded_index%0#0",
        "i#0",
        "tmp%3#1"
      ],
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "tmp%3#1",
        "bounded_index%0#0"
      ]
    },
    "1524": {
      "op": "frame_dig 4",
      "defined_out": [
        "bounded_index%0#0",
        "i#0",
        "result#1",
        "tmp%3#1"
      ],
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "tmp%3#1",
        "bounded_index%0#0",
        "result#1"
      ]
    },
    "1526": {
      "op": "swap",
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "tmp%3#1",
        "result#1",
        "bounded_index%0#0"
      ]
    },
    "1527": {
      "op": "uncover 2",
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "result#1",
        "bounded_index%0#0",
        "tmp%3#1"
      ]
    },
    "1529": {
      "op": "substring3",
      "defined_out": [
        "i#0",
        "result#1",
        "tmp%3#1",
        "tmp%4#1"
      ],
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "tmp%4#1"
      ]
    },
    "1530": {
      "op": "frame_dig 7",
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "tmp%4#1",
        "i#0"
      ]
    },
    "1532": {
      "op": "extract_uint16",
      "defined_out": [
        "i#0",
        "result#1",
        "roll#0",
        "tmp%3#1"
      ],
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "roll#0"
      ]
    },
    "1533": {
      "op": "pushint 10992 // 10992",
      "defined_out": [
        "10992",
        "i#0",
        "result#1",
        "roll#0",
        "tmp%3#1"
      ],
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "roll#0",
        "10992"
      ]
    },
    "1536": {
      "op": "<=",
      "defined_out": [
        "i#0",
        "result#1",
        "tmp%3#1",
        "tmp%5#1"
      ],
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "tmp%5#1"
      ]
    },
    "1537": {
      "op": "bnz play_game_after_for@21",
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1"
      ]
    },
    "1540": {
      "op": "frame_dig 8",
      "defined_out": [
        "i#0",
        "result#1",
        "score#0",
        "tmp%3#1"
      ],
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "score#0"
      ]
    },
    "1542": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "i#0",
        "result#1",
        "score#0",
        "tmp%3#1"
      ],
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "score#0",
        "1"
      ]
    },
    "1543": {
      "op": "+",
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "score#0"
      ]
    },
    "1544": {
      "op": "frame_bury 8",
      "defined_out": [
        "i#0",
        "result#1",
        "score#0",
        "tmp%3#1"
      ],
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1"
      ]
    },
    "1546": {
      "op": "frame_dig 7",
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "i#0"
      ]
    },
    "1548": {
      "op": "intc_2 // 2",
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "i#0",
        "2"
      ]
    },
    "1549": {
      "op": "+",
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "i#0"
      ]
    },
    "1550": {
      "op": "frame_bury 7",
      "defined_out": [
        "i#0",
        "result#1",
        "score#0",
        "tmp%3#1"
      ],
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1"
      ]
    },
    "1552": {
      "op": "b play_game_for_header@18"
    },
    "1555": {
      "block": "play_game_after_for@21",
      "stack_in": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1"
      ],
      "op": "frame_dig 8",
      "defined_out": [
        "score#0"
      ],
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "score#0"
      ]
    },
    "1557": {
      "op": "itob",
      "defined_out": [
        "score#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "val_as_bytes%0#0"
      ]
    },
    "1558": {
      "op": "dup",
      "defined_out": [
        "score#0",
        "val_as_bytes%0#0",
        "val_as_bytes%0#0 (copy)"
      ],
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "val_as_bytes%0#0",
        "val_as_bytes%0#0 (copy)"
      ]
    },
    "1559": {
      "op": "bitlen",
      "defined_out": [
        "bitlen%0#0",
        "score#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "val_as_bytes%0#0",
        "bitlen%0#0"
      ]
    },
    "1560": {
      "op": "pushint 8 // 8",
      "defined_out": [
        "8",
        "bitlen%0#0",
        "score#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "val_as_bytes%0#0",
        "bitlen%0#0",
        "8"
      ]
    },
    "1562": {
      "op": "<=",
      "defined_out": [
        "no_overflow%0#0",
        "score#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "val_as_bytes%0#0",
        "no_overflow%0#0"
      ]
    },
    "1563": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "val_as_bytes%0#0"
      ]
    },
    "1564": {
      "op": "extract 7 1",
      "defined_out": [
        "new_score#0",
        "score#0"
      ],
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "new_score#0"
      ]
    },
    "1567": {
      "op": "dup",
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "new_score#0",
        "new_score#0"
      ]
    },
    "1568": {
      "op": "frame_bury 2",
      "defined_out": [
        "new_score#0",
        "score#0"
      ],
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "new_score#0"
      ]
    },
    "1570": {
      "op": "frame_dig 0",
      "defined_out": [
        "game_state#0",
        "new_score#0",
        "score#0"
      ],
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "new_score#0",
        "game_state#0"
      ]
    },
    "1572": {
      "op": "dup",
      "defined_out": [
        "game_state#0",
        "game_state#0 (copy)",
        "new_score#0",
        "score#0"
      ],
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "new_score#0",
        "game_state#0 (copy)",
        "game_state#0 (copy)"
      ]
    },
    "1573": {
      "op": "cover 2",
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "game_state#0",
        "new_score#0",
        "game_state#0 (copy)"
      ]
    },
    "1575": {
      "error": "Index access is out of bounds",
      "op": "extract 3 1 // on error: Index access is out of bounds",
      "defined_out": [
        "game_state#0",
        "new_score#0",
        "reinterpret_biguint%1#0",
        "score#0"
      ],
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "game_state#0",
        "new_score#0",
        "reinterpret_biguint%1#0"
      ]
    },
    "1578": {
      "op": "b>",
      "defined_out": [
        "game_state#0",
        "new_score#0",
        "score#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "game_state#0",
        "tmp%6#0"
      ]
    },
    "1579": {
      "op": "swap",
      "defined_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "score#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "tmp%6#0",
        "game_state#11"
      ]
    },
    "1580": {
      "op": "frame_bury 1",
      "defined_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "score#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "tmp%6#0"
      ]
    },
    "1582": {
      "op": "bz play_game_after_if_else@23",
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1"
      ]
    },
    "1585": {
      "op": "frame_dig 0",
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "game_state#0"
      ]
    },
    "1587": {
      "op": "frame_dig 2",
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "game_state#0",
        "new_score#0"
      ]
    },
    "1589": {
      "op": "replace2 3",
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "game_state#0"
      ]
    },
    "1591": {
      "op": "frame_dig 3",
      "defined_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "score#0"
      ],
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "game_state#0",
        "player#0"
      ]
    },
    "1593": {
      "op": "replace2 46",
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "game_state#11"
      ]
    },
    "1595": {
      "op": "frame_bury 1",
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1"
      ]
    },
    "1597": {
      "block": "play_game_after_if_else@23",
      "stack_in": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "game_state#0"
      ],
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "game_state#0"
      ]
    },
    "1599": {
      "op": "dup",
      "defined_out": [
        "game_state#0",
        "game_state#0 (copy)"
      ],
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "game_state#0",
        "game_state#0 (copy)"
      ]
    },
    "1600": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "game_state#0",
        "game_state#0 (copy)"
      ],
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "game_state#0",
        "game_state#0 (copy)",
        "2"
      ]
    },
    "1601": {
      "op": "getbyte",
      "defined_out": [
        "game_state#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "game_state#0",
        "tmp%15#0"
      ]
    },
    "1602": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "game_state#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "game_state#0",
        "tmp%15#0",
        "1"
      ]
    },
    "1603": {
      "op": "-",
      "defined_out": [
        "game_state#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "game_state#0",
        "to_encode%0#0"
      ]
    },
    "1604": {
      "op": "itob",
      "defined_out": [
        "game_state#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "game_state#0",
        "val_as_bytes%0#0"
      ]
    },
    "1605": {
      "op": "dup",
      "defined_out": [
        "game_state#0",
        "val_as_bytes%0#0",
        "val_as_bytes%0#0 (copy)"
      ],
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "game_state#0",
        "val_as_bytes%0#0",
        "val_as_bytes%0#0 (copy)"
      ]
    },
    "1606": {
      "op": "bitlen",
      "defined_out": [
        "bitlen%0#0",
        "game_state#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "game_state#0",
        "val_as_bytes%0#0",
        "bitlen%0#0"
      ]
    },
    "1607": {
      "op": "pushint 8 // 8",
      "defined_out": [
        "8",
        "bitlen%0#0",
        "game_state#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "game_state#0",
        "val_as_bytes%0#0",
        "bitlen%0#0",
        "8"
      ]
    },
    "1609": {
      "op": "<=",
      "defined_out": [
        "game_state#0",
        "no_overflow%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "game_state#0",
        "val_as_bytes%0#0",
        "no_overflow%0#0"
      ]
    },
    "1610": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "game_state#0",
        "val_as_bytes%0#0"
      ]
    },
    "1611": {
      "op": "extract 7 1",
      "defined_out": [
        "game_state#0",
        "uint8%0#0"
      ],
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "game_state#0",
        "uint8%0#0"
      ]
    },
    "1614": {
      "op": "replace2 2",
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "game_state#0"
      ]
    },
    "1616": {
      "op": "frame_dig 5",
      "defined_out": [
        "game_state#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "game_state#0",
        "tmp%1#0"
      ]
    },
    "1618": {
      "op": "swap",
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1",
        "tmp%1#0",
        "game_state#0"
      ]
    },
    "1619": {
      "op": "box_put",
      "stack_out": [
        "game_state#0",
        "game_state#11",
        "new_score#0",
        "player#0",
        "result#1",
        "tmp%1#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%3#1"
      ]
    },
    "1620": {
      "retsub": true,
      "op": "retsub"
    },
    "1621": {
      "subroutine": "smart_contracts.pieout.contract.Pieout.claim_prize_pool",
      "params": {
        "game_id#0": "uint64"
      },
      "block": "claim_prize_pool",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "1624": {
      "op": "frame_dig -1",
      "defined_out": [
        "game_id#0 (copy)"
      ],
      "stack_out": [
        "game_id#0 (copy)"
      ]
    },
    "1626": {
      "op": "itob",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1627": {
      "op": "bytec_1 // \"s_\"",
      "defined_out": [
        "\"s_\"",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "\"s_\""
      ]
    },
    "1628": {
      "op": "swap",
      "stack_out": [
        "\"s_\"",
        "tmp%0#0"
      ]
    },
    "1629": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1630": {
      "op": "dup",
      "defined_out": [
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ]
    },
    "1631": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1632": {
      "op": "bury 1",
      "stack_out": [
        "tmp%1#0",
        "maybe_exists%0#0"
      ]
    },
    "1634": {
      "error": "Box game state not found. Check if Game ID is valid.",
      "op": "assert // Box game state not found. Check if Game ID is valid.",
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1635": {
      "op": "dup",
      "stack_out": [
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ]
    },
    "1636": {
      "op": "box_get",
      "defined_out": [
        "game_state#0",
        "maybe_exists%1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "game_state#0",
        "maybe_exists%1#0"
      ]
    },
    "1637": {
      "error": "check self.box_game_state entry exists",
      "op": "assert // check self.box_game_state entry exists",
      "stack_out": [
        "tmp%1#0",
        "game_state#0"
      ]
    },
    "1638": {
      "op": "dup",
      "defined_out": [
        "game_state#0",
        "game_state#0 (copy)",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "game_state#0",
        "game_state#0 (copy)"
      ]
    },
    "1639": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "game_state#0",
        "game_state#0 (copy)",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "game_state#0",
        "game_state#0 (copy)",
        "0"
      ]
    },
    "1640": {
      "op": "getbit",
      "defined_out": [
        "game_state#0",
        "is_true%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "game_state#0",
        "is_true%0#0"
      ]
    },
    "1641": {
      "op": "bytec_0 // 0x00",
      "defined_out": [
        "0x00",
        "game_state#0",
        "is_true%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "game_state#0",
        "is_true%0#0",
        "0x00"
      ]
    },
    "1642": {
      "op": "intc_1 // 0",
      "stack_out": [
        "tmp%1#0",
        "game_state#0",
        "is_true%0#0",
        "0x00",
        "0"
      ]
    },
    "1643": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%1#0",
        "game_state#0",
        "0x00",
        "0",
        "is_true%0#0"
      ]
    },
    "1645": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%0#0",
        "game_state#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "game_state#0",
        "encoded_bool%0#0"
      ]
    },
    "1646": {
      "op": "intc_1 // 0",
      "stack_out": [
        "tmp%1#0",
        "game_state#0",
        "encoded_bool%0#0",
        "0"
      ]
    },
    "1647": {
      "op": "getbit",
      "defined_out": [
        "game_state#0",
        "tmp%1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "game_state#0",
        "tmp%4#0"
      ]
    },
    "1648": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "game_state#0",
        "tmp%1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "game_state#0",
        "tmp%4#0",
        "1"
      ]
    },
    "1649": {
      "op": "==",
      "defined_out": [
        "game_state#0",
        "tmp%1#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "game_state#0",
        "tmp%5#0"
      ]
    },
    "1650": {
      "error": "Game state staking finalized value missmatch.",
      "op": "assert // Game state staking finalized value missmatch.",
      "stack_out": [
        "tmp%1#0",
        "game_state#0"
      ]
    },
    "1651": {
      "op": "dup",
      "stack_out": [
        "tmp%1#0",
        "game_state#0",
        "game_state#0 (copy)"
      ]
    },
    "1652": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "game_state#0",
        "game_state#0 (copy)",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "game_state#0",
        "game_state#0 (copy)",
        "2"
      ]
    },
    "1653": {
      "op": "getbyte",
      "defined_out": [
        "game_state#0",
        "tmp%1#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "game_state#0",
        "tmp%7#0"
      ]
    },
    "1654": {
      "op": "!",
      "defined_out": [
        "game_state#0",
        "tmp%1#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "game_state#0",
        "tmp%8#0"
      ]
    },
    "1655": {
      "error": "Game lobby not empty. Number of active players must be zero.",
      "op": "assert // Game lobby not empty. Number of active players must be zero.",
      "stack_out": [
        "tmp%1#0",
        "game_state#0"
      ]
    },
    "1656": {
      "op": "dup",
      "stack_out": [
        "tmp%1#0",
        "game_state#0",
        "game_state#0 (copy)"
      ]
    },
    "1657": {
      "error": "Index access is out of bounds",
      "op": "extract 46 32 // on error: Index access is out of bounds",
      "defined_out": [
        "game_state#0",
        "tmp%1#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "game_state#0",
        "tmp%9#0"
      ]
    },
    "1660": {
      "op": "txn Sender",
      "defined_out": [
        "game_state#0",
        "tmp%1#0",
        "tmp%10#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "game_state#0",
        "tmp%9#0",
        "tmp%10#0"
      ]
    },
    "1662": {
      "op": "==",
      "defined_out": [
        "game_state#0",
        "tmp%1#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "game_state#0",
        "tmp%11#0"
      ]
    },
    "1663": {
      "error": "Transaction sender is not recognized as valid winner address for this game.",
      "op": "assert // Transaction sender is not recognized as valid winner address for this game.",
      "stack_out": [
        "tmp%1#0",
        "game_state#0"
      ]
    },
    "1664": {
      "op": "itxn_begin"
    },
    "1665": {
      "op": "txn Sender",
      "defined_out": [
        "game_state#0",
        "inner_txn_params%0%%param_Receiver_idx_0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "game_state#0",
        "inner_txn_params%0%%param_Receiver_idx_0#0"
      ]
    },
    "1667": {
      "op": "dig 1",
      "stack_out": [
        "tmp%1#0",
        "game_state#0",
        "inner_txn_params%0%%param_Receiver_idx_0#0",
        "game_state#0 (copy)"
      ]
    },
    "1669": {
      "op": "pushint 6 // 6",
      "defined_out": [
        "6",
        "game_state#0",
        "game_state#0 (copy)",
        "inner_txn_params%0%%param_Receiver_idx_0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "game_state#0",
        "inner_txn_params%0%%param_Receiver_idx_0#0",
        "game_state#0 (copy)",
        "6"
      ]
    },
    "1671": {
      "op": "extract_uint64",
      "defined_out": [
        "game_state#0",
        "inner_txn_params%0%%param_Amount_idx_0#0",
        "inner_txn_params%0%%param_Receiver_idx_0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "game_state#0",
        "inner_txn_params%0%%param_Receiver_idx_0#0",
        "inner_txn_params%0%%param_Amount_idx_0#0"
      ]
    },
    "1672": {
      "op": "itxn_field Amount",
      "stack_out": [
        "tmp%1#0",
        "game_state#0",
        "inner_txn_params%0%%param_Receiver_idx_0#0"
      ]
    },
    "1674": {
      "op": "itxn_field Receiver",
      "stack_out": [
        "tmp%1#0",
        "game_state#0"
      ]
    },
    "1676": {
      "op": "intc_0 // pay",
      "defined_out": [
        "game_state#0",
        "pay",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "game_state#0",
        "pay"
      ]
    },
    "1677": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "tmp%1#0",
        "game_state#0"
      ]
    },
    "1679": {
      "op": "intc_1 // 0",
      "stack_out": [
        "tmp%1#0",
        "game_state#0",
        "0"
      ]
    },
    "1680": {
      "op": "itxn_field Fee",
      "stack_out": [
        "tmp%1#0",
        "game_state#0"
      ]
    },
    "1682": {
      "op": "itxn_submit"
    },
    "1683": {
      "op": "pushbytes 0x0000000000000000",
      "defined_out": [
        "0x0000000000000000",
        "game_state#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "game_state#0",
        "0x0000000000000000"
      ]
    },
    "1693": {
      "op": "replace2 6",
      "stack_out": [
        "tmp%1#0",
        "game_state#0"
      ]
    },
    "1695": {
      "op": "box_put",
      "stack_out": []
    },
    "1696": {
      "retsub": true,
      "op": "retsub"
    },
    "1697": {
      "subroutine": "smart_contracts.pieout.contract.Pieout.terminate",
      "params": {},
      "block": "terminate",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1699": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "1701": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1702": {
      "error": "Transaction sender address must match application creator address.",
      "op": "assert // Transaction sender address must match application creator address.",
      "stack_out": []
    },
    "1703": {
      "op": "intc 10 // TMPL_DELETABLE",
      "defined_out": [
        "TMPL_DELETABLE"
      ],
      "stack_out": [
        "TMPL_DELETABLE"
      ]
    },
    "1705": {
      "error": "Template variable 'DELETABLE' needs to be 'True' at deploy-time.",
      "op": "assert // Template variable 'DELETABLE' needs to be 'True' at deploy-time.",
      "stack_out": []
    },
    "1706": {
      "retsub": true,
      "op": "retsub"
    }
  }
}