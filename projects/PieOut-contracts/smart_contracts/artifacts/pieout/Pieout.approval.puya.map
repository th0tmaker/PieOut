{
  "version": 3,
  "sources": [
    "../../../.venv/Lib/site-packages/lib_pcg/pcg32.py",
    "../../pieout/contract.py",
    "../../pieout/subroutines.py"
  ],
  "mappings": "AC8BA;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AA4pBK;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAjEA;;AAAA;AAAA;AAAA;;AAAA;AA3lBL;;;AAAA;AA2lBK;;;AAAA;;AApDA;;AAAA;AAAA;AAAA;;AAAA;AAviBL;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAuiBK;;;AAAA;;AAnCA;;AAAA;AAAA;AAAA;;AAAA;AApgBL;;;AAAA;AAAA;;;AAogBK;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AArGA;;AAAA;AAAA;AAAA;;AAAA;AA/ZL;;;AAAA;AA+ZK;;;AAAA;;AAhCA;;AAAA;AAAA;AAAA;;AAAA;AA/XL;;;AAAA;AAAA;;;AAAA;AAAA;;AA+XK;;;AAAA;;AArBA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAtDA;;AAAA;AAAA;AAAA;;AAAA;AApTL;;;AAAA;AAoTK;;;AAAA;;AAnBA;;AAAA;AAAA;AAAA;;AAAA;AAjSL;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAiSK;;;AAAA;;AAlEA;;AAAA;AAAA;AAAA;;AAAA;AA/NL;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AA+NK;;;AAAA;;AAnEA;;AAAA;AAAA;AAAA;;AAAA;AA5JL;;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AA4JK;;;AAAA;;AAfA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAhDA;;AAAA;AAAA;AAAA;;AAAA;AA7FL;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AA6FK;;;AAAA;;AAdA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAfA;;AAAA;AAAA;AAAA;;AAAA;AAhEL;;;AAAA;AAgEK;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AA5BA;;AAAA;AAAA;AAAA;;AAAA;AApCL;;;AAAA;AAoCK;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AALA;;AAAA;AAAA;AAAA;;AAAA;AAEU;;AAFV;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAfA;;AAAA;AAAA;AAAA;;AAAA;AAhBL;;;AAAA;;;AAgBK;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;ACVL;;;AAEI;;;;;;;;;;;;;AAAA;;;AAAA;;;AAAA;;AAQJ;;;;;;AASI;;AAAqC;AAAf;AAGR;AAGE;AAAP;;AAAA;;AAAA;;;;;AAAb;;;AAEwD;;AAAA;AAAjB;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAA/B;;AAA6D;AAAzC;AAGjB;;AAAA;AAAX;;;AAC0B;AAAd;;AAGZ;;AAAA;;;AAEgB;;AAAA;;AAAuB;;AAAvB;;;;;;;AAMZ;;AAAA;AAjBS;;AAA+B;AAA/B;AAAA;;;;;AAoGb;;;AAIS;;AAAA;;;AAAuB;;AAAvB;AAAA;AAAA;;;AACG;;AAAA;;;AAA6B;;;AAA7B;AADH;;;AAEE;;AAAA;;;AAA6B;;AAAA;;;AAA7B;AAFH;;;AAKA;;AAAA;AAAA;AAAA;AAAA;;AAII;;AAA0B;;AAA1B;AADmB;AAAvB;;AAAA;AAAA;;;AAAA;;AAOI;AAAA;AAAA;AAAA;AAAA;;AAAA;AACA;;AAAA;;;AAHJ;AAAA;;;;;;AAAA;AAAA;AAAA;AAMO;;;AAAP;;AAAA;AAEO;AAAP;;AAAA;AAIR;;;;;;;;;;AAMQ;;AAAA;;;AAAuB;;AAAvB;AAAA;AAAA;;;AACG;;AAAA;AAAA;AADH;;;AAKuB;;AAAA;AAAA;AAAnB;AAAA;AADwB;AAAX;;AAAA;AAAjB;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAKA;;AAA4B;AAA5B;;;AAAA;;AAKI;;;AACA;;AAAA;;;AAAA;AAAA;;AACA;;AAAA;;;AAAA;AAAA;;AAAA;;AACA;;AAAA;;;AAAA;AAAA;;AAAA;;AALJ;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;;;;;AAAA;AAAA;AAAA;AAUI;;AAAA;;AAAA;AAAA;AAA+B;;AAA/B;AAA6C;;AAA7C;AADJ;AAAA;;AAAA;;AAII;AAA+B;;AAA/B;AAA6C;;AAA7C;AADJ;AAAA;;AAII;AAAA;;AAAA;AADJ;AACI;AADJ;;AAOgD;;AAAzC;AADH;;;;;;;AAMG;;AAA0C;;AAA1C;AADH;;;;;;;AAMG;;AAAyC;;AAAzC;AADH;;;;;AAMJ;;AAAA;;AAGS;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAHT;;;AAOA;;AAAA;;AAGS;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAHT;;;AAOA;;AAGS;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAHT;;;AASA;;AAAwB;;AAAxB;;AAAA;;AAEO;;;AAAP;;AAAA;;AAAA;;AAAA;AA7BS;;AAAA;;;;;;AALA;;AAAA;;;;;;;;AALA;;AAAA;;;;;;;;AAyCF;AAAP;;AAAA;;AAAA;;AAAA;ADlOR;;;AAQY;;AAAA;AAAkB;;AAAA;AAAlB;AADO;;;AAAA;AAKJ;;;AAAA;AAAP;AAQR;;;AAIY;;AAAA;AADS;;AAAA;;AAAA;AAAA;AAAA;AAQL;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AACA;;AAAA;;;AACA;;AAAA;;;AACA;;AAAA;;;AACA;;AAAA;;;AACA;;AAAA;;;AACA;;AAAA;;;AACA;;AAAA;;;AACA;;AAAA;;;AACA;;AAAA;;;AACA;;AAAA;;;AACA;;AAAA;;;AACA;;AAAA;;;AAfD;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAP;AAoBR;;;;;AAG6C;;AAAA;AAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAEL;;;;AAAA;AACS;AAAH;AAAP;;AAAA;;AAAA;AAAjB;;;AACY;;AAAA;;AAAgD;AAA5B;AAApB;AAAA;;AACwB;;AAArB;;;;;AAAf;;;AAEgB;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;;;;;;AAJC;;AAA+B;AAA/B;AAAA;;;;;AAMT;;AAAA;;AAAA;AAQO;;AAAc;;AAAd;AAAP;AAGA;;AAAe;AAAf;AACA;;AAAgB;AAAhB;AACA;;AAAiB;AAAjB;AACA;;AAAmB;;AAAnB;;AAGR;;;AAOe;;AAAqB;;AAArB;AAAP;AAEO;;AAAA;;AAAoB;;AAApB;AAAP;AACO;;AAAA;;AAAoB;;AAApB;AAAP;AAEI;;AAAA;;AAAsB;;AAAtB;AADJ;AAKI;;AAAA;;AAAmB;;AAAnB;AADJ;AAGO;;AAAA;;AAAmB;;AAAnB;AAAP;AAEI;;AAAA;;AAAqB;;AAArB;AADJ;AAIW;AAAJ;AAAA;;AAAA;AAAP;AAEY;AAQA;;AAED;;AAEF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAPU;;;AADN;;;AADE;;;;;;;;;;;;;;;;;;;;;;;AADD;;;;;;;;AADJ;;;AADE;;;;AAAA;;;AAAA;;;AAgBZ;AAAA;;AAAA;;AAEa;AACkB;;AAFF;AAA7B;AAAA;AAAA;;AAQO;;AAAqB;AAArB;AAAP;AAEO;;AACG;AAAA;AAAA;AAAA;AAAA;AADH;AAAA;;AAAA;;AAAA;;AAAP;AAIA;AAEmB;;AACF;;;;;;;AAHjB;;;;AAAA;;;AAAA;;AAOR;;;AASe;;AAAqB;;AAArB;AAAP;AAGI;;AAAe;;AAAf;AAAA;;;AACI;;AAAe;;AAAf;AADJ;;;;AADJ;AAKO;;AAAA;;AAAA;AAAoB;;AAApB;AAAP;AACO;;AAAA;;AAAoB;;AAApB;AAAP;AACO;;AAAA;;AAEoB;AAAA;;AAAA;AAAZ;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AADF;;;AADc;AAAA;;;AAApB;;AAAA;AAAP;AAKO;;AAAA;;AAAoB;;AAApB;AAAP;AACO;;AAAA;;AAAoB;;AAApB;AAAP;AACO;;AAAA;;AAAoB;;AAApB;AAAP;AAGI;;AAAA;;AAAsB;;AAAtB;AADJ;AAII;;AAAA;;AAAsB;;AAAtB;AADJ;AAII;;AAAA;;AAAsB;;AAAtB;AADJ;AAOgB;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAMU;;AAA0B;;AAA1B;AAAZ;AACC;;AAAA;AACgB;;AACM;;AACC;;AAXhB;AADc;;AAAA;AAGjB;;;AAHiB;AAId;AAJc;AAKb;AALa;AAMd;AANc;AAOhB;;AAPgB;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAhB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAApB;;AAAA;;AAAA;AAAA;;AAAA;AAiBsC;;AAAA;AAAtC;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAM0B;AAAG;;AAA7B;AAGgB;AAAhB;AAAA;;AAAA;AAAA;;;;;;AAGR;;;AAOe;;AAAqB;AAArB;AAAP;AACO;;AAAA;AAAW;;AAAX;;AAAA;AAAA;AAAA;AAAA;;AAAP;AAEO;;AAAA;;AAAA;AAAoB;;;;AAApB;AAAP;AACO;;AAAA;;AAAoB;;AAApB;AAAP;AAEI;;AAAA;;AAAsB;;AAAtB;AADJ;AAKa;;AAAA;AAAA;AAOG;;AAEK;;AAAA;AAAA;AAJjB;;AAAA;;AAGqB;AAHrB;;AAKiB;AALjB;;;AAAA;AADJ;AAWO;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAP;AACO;;AAAA;;;AAAwB;;AAAxB;AAAA;AAAP;AACO;;AAAA;;;AAA6B;;AAAA;;;AAA7B;AAAP;AAEI;;AAAA;;AAAA;AACqB;;AAAA;AAAA;AAAnB;AAAA;AADF;;AAAA;AADJ;AAOQ;AADR;;AACQ;AAEqD;;AAA7D;AAAA;;AAAA;AAG0E;AAAnC;AAAX;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAA5B;;AAII;AAAA;;AAAA;AAAoC;AAApC;AADyB;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAA7B;;AAMI;AAAA;;AAAA;AAAA;;AAAA;AADoB;AAAxB;;AAKA;;;AAAA;;AAGA;;AAGR;;;AAGe;;AAAqB;AAArB;AAAP;AACyB;AAAlB;;AAAA;AAAA;AAAA;;AAAA;AAAP;AAEO;;AAAA;;AAAoB;;AAApB;AAAP;AACO;;AAAA;;AAAoB;;AAApB;AAAP;AAEI;;AAAA;;AAAsB;;AAAtB;AADJ;AAKA;AAAqB;;AAArB;AAAmC;;;;;;;;;;;;;;;;;;AAAnC;;AAMR;;;AAgBe;;AAAA;AAAW;;AAAX;;AAAA;AAAA;AAAA;AAAA;;AAAP;AACqB;AAAd;;AAAA;AAAA;AAAA;;AAAP;AAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAkD;AAAlD;AADJ;AAOgB;;AAEK;AAAA;AAAA;AAJjB;;AAAA;;AAGqB;AAHrB;;AAKiB;AALjB;;;AAOG;AAPH;AADJ;AAYc;AACV;;AADU;AAAA;AAAA;AAIP;AAAA;;AAAA;AAAA;AAAP;AAGuC;;AAAe;;AAAf;AAAZ;AAA3B;;AACA;AAAA;;AAGA;AAAqB;;AAArB;AAAA;AAAA;;AAYO;;AAAqB;AAArB;AAAP;AACqB;AAAd;;AAAA;AAAA;AAAA;;AAAP;AAEO;AAAqB;;AAArB;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAP;AAGI;AAAqB;;AAArB;AAAJ;;AAIa;;AACF;;AACF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAHT;;;;AASR;;;AAGe;;AAAqB;AAArB;AAAP;AACO;;AAAA;AAAW;;AAAX;AAAA;AAAA;AAAA;AAAA;;AAAP;AACO;;AAAc;AAAA;AAAA;AAAA;AAAA;;;AAAd;;AAAA;AAAP;AACkB;AAAX;;AAAA;AAAA;AAAA;AAAA;;AAAP;AAOqB;AAAA;AAAA;AAJjB;;AAAA;;AAGqB;AAHrB;;AAKiB;AALjB;;;AAAA;AADJ;AAYA;;AAGA;;AAEW;;AACF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAHT;;;;AASR;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgBe;;AAAA;AAAA;AAAA;;AAAW;;AAAX;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAP;AACqB;AAAd;;AAAA;AAAA;AAAA;;AAAP;AACO;AAAA;AAAA;;AAAP;AAKgB;;AAEK;;AAAA;AAAA;AAAA;AAAA;AAJjB;;AAAA;;AAGqB;AAHrB;;AAKiB;AALjB;;;AAOG;AAPH;AADJ;AAYa;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAKN;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAgC;AAAhC;AAAP;AACO;;;AAAwB;;AAAxB;AAAA;AAAP;AAEO;AAAqB;;AAArB;AAAA;AAAA;AAAA;;;AAAiD;;AAAjD;AAAP;AACO;AAAqB;;AAArB;AAAA;AAAA;AAAA;;;AAA4C;;AAA5C;AAAP;AAGI;;AAAgB;AAAqB;;AAArB;AAAA;AAAA;AAAA;;AAAA;AAAhB;AADJ;AAca;AAAA;;AAAA;AAAA;AAEF;;AAAA;;AACQ;AAAA;AAAA;;AAAV;AC9ZW;AAAA;;;AFvEjB;AAAe;;AAAf;AAAP;;;AAEoB;AAoIC;AAkHe;;AAAf;AAAA;;AAtPc;;AAuPd;AAAA;;AAlHD;AAAA;;AAiHgB;;AAAf;AAAA;;AAtPc;;AAuPd;AAAA;;AAxEX;;;;AAAA;;AA8FqB;;;;;;;;;;;AAAQ;AAAhB;AAAA;;AAQP;;AAAT;AAjFkB;;AAET;AAAZ;;AAES;AAAL;;;;AAAK;;AE5HF;;;AF4HE;AAAjB;;;AA8CyB;;AAAA;AAAe;;AAAf;AAAA;;AAfM;;AAgBN;AAAA;;AAAA;AASE;AAAS;;AAAT;AAAD;;AAAA;AAA0B;;AAA3B;AAqBL;;AAAT;AArB8C;AAAS;;AAAT;AAO7C;AAAA;AAMuB;AAAA;AAAQ;AAAhB;AAAA;;AANiD;;AAArB;AAAV;;AAAA;AAAA;AAczB;;AAAT;AAdA;AAAA;AAAA;;AA5DQ;;AAAA;AAAnB;;;AAEiC;;AATJ;;AASI;AEnIb;AFmIY;AAAR;AADM;;;AAAV;;AAAA;AAAA;AAAA;;AAJH;;AAAA;AAAA;AAAA;;;;;;;;;;;;AExHL;AAAR;;AAGmB;;AAAA;AAAA;;AAAH;AAAZ;;AAAK;;AAAA;;AAAA;AAAb;;;AAEiC;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAzB;;AAAO;AAGI;;;AAAR;AAAX;;;AAIQ;;AAAS;AAAT;AAAA;;AATK;;AAAiC;AAAjC;AAAA;;;;;AAiBL;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAAA;;AALJ;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;;;AAAA;AAAA;AAAA;AAWI;;AAAA;;;AAA+C;;AAA/C;AAAA;;;AACW;;AAAA;;AAAA;AAAR;;AAAA;AADH;;;AAIA;;AAAA;AAA+B;;;AAA/B;;AACA;AAAiC;;;AAAjC;;AAEA;AAAgC;;;AAAhC;;AACA;AAAkC;;;AAAlC;;AAEA;;AAAA;;AACA;;AAAA;;AAAA;;ADkXA;AAAA;;AAAA;AAAA;AAAiB;AAAjB;AAAA;;AAAA;AAAA;AAGG;;AAAA;;AAAA;AAAA;AAAA;;AAAsC;AAAA;;AAAA;AAAA;AAAtC;AAAX;;;AAEY;;AAAA;;AAAA;AAEG;AAAA;;AAAA;AAAA;AAAoB;;AAApB;AAAf;;;AAEoB;AAAA;AAAA;AAAA;AAAA;;;AACA;AAAA;AAAA;AAFiB;;AAAA;AAAA;;AAMlB;;;AAAc;;AAAW;AAAX;AAAd;;;AAEc;AAAA;AAAA;AAAA;AAAA;AAAA;AACI;AAAA;;;AACE;;ACnfnC;AAIiB;;;;;;;;;AAJjB;;;;AAAA;;;AAAA;ADuf2B;;AAAnB;;AAAA;;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAGmC;;AAAA;AAAA;AAAA;AAAmC;AAAnC;AAAX;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAA5B;;AAGA;;AAAA;AAAsC;AAAtC;;;AAAA;;AAGA;;AAAA;AAAA;;ACjZA;;AAAA;;;AAAgD;;AAAhD;AAAA;;;AACW;;AAAA;;AAAA;AAAR;;AAAA;AADH;;;AAIA;;AAAA;AAA+B;;;AAA/B;;AACA;AAAiC;;;AAAjC;;AAEA;;AAAA;;AACA;;AAAA;;;;;;;;;;;AAGA;;AAAA;;;AAA+C;;AAA/C;AAAA;;;AACW;;AAAA;AAAA;;AAAA;AAAR;;AAAA;;;;AADH;;;AAIA;;AAAA;;AAAA;;AACA;;AAAA;;;;;;;ADoYR;;;AAGe;;AAAqB;AAArB;AAAP;AACO;;AAAA;AAAW;;AAAX;AAAA;AAAA;AAAA;AAAA;;AAAP;AAGa;AAAA;AAAA;AAAA;;AAAA;AAMD;;AAEK;AAAA;AAAA;AAJjB;;AAAA;;AAGqB;AAHrB;;AAKiB;AALH;;;AAAd;AASG;;AAAA;AAAA;AAAA;;AAAX;;;AACY;;AAAA;AACe;;;AAAA;AACf;;AAAA;AAEC;;AAAwB;AAAxB;AAAb;AACmB;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAgC;AAAhC;AAAP;AACO;AAAA;;;AAAuB;;AAAvB;AAAA;AAAP;AACA;;AAAA;AACe;;AAAA;AAAsC;AAAtC;;;AAAA;AACf;;AAAA;AAKZ;;;AAOe;;AAAqB;AAArB;AAAP;AACO;;AAAA;AAAW;;AAAX;;AAAA;AAAA;AAAA;AAAA;;AAAP;AAEO;;AAAA;;AAAoB;;AAApB;AAAP;AAEI;;AAAA;;AAAsB;;AAAtB;AADJ;AAGO;;AAAA;;AAAoB;;AAApB;AAAP;AAGa;AAAA;AAAA;AAKN;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAgC;AAAhC;AAAP;AACO;AAAA;;;AAA4B;;AAA5B;AAAP;AACO;AAAA;;AAAA;AAAA;AAAP;AACO;AAAA;AAAA;AAAA;AAAP;AAIQ;AADR;;AACQ;AAEkB;AAAG;;AAA7B;AAEA;AAAA;AAAA;AAC4B;;;AAA5B;;AAC+B;AAA/B;;AACgC;AAAhC;;AAC+B;AAA/B;;AAC6B;;AAA7B;;AAEI;;AAA0B;;AAA1B;AADmB;AAAvB;;AAII;AAAA;;AAAA;AAA+B;;AAA/B;AADoB;AAAxB;;AAG8C;;AAA9C;;AAC+C;;AAA/C;;AAC8C;;AAA9C;;AAGA;;AAER;;;AAMe;;AAAqB;AAArB;AAAP;AACO;;AAAA;AAAA;AAAW;;AAAX;AAAA;AAAA;;AAAA;AAAA;;AAAP;AAGa;AAAA;AAAA;AAAA;;AAAA;AAKN;AAAA;;;AAA4B;;AAA5B;AAAP;AAIG;AAAA;AAAA;AAAoC;AAApC;AAAX;;;AACY;;AAEY;;AACS;AACJ;AACA;AALH;;;AASQ;AAAf;AAAP;AAIa;;AACF;;AAAA;;AAAA;AACF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAHT;;;AAcJ;;AAAA;;AACI;AAAA;;AAAA;AAAJ;;AAK8C;;AAAA;AAAA;AAAnB;AAAA;AAAZ;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AADF;;;AADb;AAAY;;;AAOC;;AACF;;AAAA;;AAAA;AACF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAHT;;;;AAdW;;AAAA;AAAP;AACO;;AAAA;;AAAA;AAAA;AAAP;;;;AAyBG;;AAAc;;AAAd;AAAP;AACO;;AAAP;AAEI;AAAJ;;AAIa;;AACF;;AACF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAHT;;;",
  "op_pc_offset": 2,
  "pc_events": {
    "0": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%0#2"
      ]
    },
    "2": {
      "op": "bz main_after_if_else@23",
      "stack_out": []
    },
    "5": {
      "op": "pushbytess 0x137d1094 0xb66d2f56 0x627a73af 0x7401ca83 0x5be219f0 0xb2460ef6 0x3ae74f74 0xda7b6785 0x71af966e 0x74c7e053 0x3143e956 0x40c777d9 0x28a1b306 0x28a28b18 0xe9ba1695 0x102875e7 0x1898a02e 0x5ff16da4 // method \"calc_single_box_fee(uint8,uint16)uint64\", method \"read_gen_unix()uint64\", method \"read_game_state(uint64)(uint64,bool,uint8,uint8,uint8,uint8,uint8,uint16,uint64,uint64,address,address,address,address)\", method \"read_game_players(uint64)address[]\", method \"generate()void\", method \"mint_trophy(pay,pay)void\", method \"claim_trophy()void\", method \"new_game(uint64,pay,pay,pay)void\", method \"join_game(uint64,pay)void\", method \"get_box_commit_rand(pay)void\", method \"get_rand_commit_round(uint64)void\", method \"del_box_commit_rand_player()void\", method \"del_box_commit_rand_admin(uint64,account)void\", method \"resolve_score(uint64)void\", method \"check_game_event_trigger(uint64,uint8)bool\", method \"reset_game(uint64,pay)void\", method \"delete_game(uint64)void\", method \"terminate()void\"",
      "defined_out": [
        "Method(calc_single_box_fee(uint8,uint16)uint64)",
        "Method(check_game_event_trigger(uint64,uint8)bool)",
        "Method(claim_trophy()void)",
        "Method(del_box_commit_rand_admin(uint64,account)void)",
        "Method(del_box_commit_rand_player()void)",
        "Method(delete_game(uint64)void)",
        "Method(generate()void)",
        "Method(get_box_commit_rand(pay)void)",
        "Method(get_rand_commit_round(uint64)void)",
        "Method(join_game(uint64,pay)void)",
        "Method(mint_trophy(pay,pay)void)",
        "Method(new_game(uint64,pay,pay,pay)void)",
        "Method(read_game_players(uint64)address[])",
        "Method(read_game_state(uint64)(uint64,bool,uint8,uint8,uint8,uint8,uint8,uint16,uint64,uint64,address,address,address,address))",
        "Method(read_gen_unix()uint64)",
        "Method(reset_game(uint64,pay)void)",
        "Method(resolve_score(uint64)void)",
        "Method(terminate()void)"
      ],
      "stack_out": [
        "Method(calc_single_box_fee(uint8,uint16)uint64)",
        "Method(read_gen_unix()uint64)",
        "Method(read_game_state(uint64)(uint64,bool,uint8,uint8,uint8,uint8,uint8,uint16,uint64,uint64,address,address,address,address))",
        "Method(read_game_players(uint64)address[])",
        "Method(generate()void)",
        "Method(mint_trophy(pay,pay)void)",
        "Method(claim_trophy()void)",
        "Method(new_game(uint64,pay,pay,pay)void)",
        "Method(join_game(uint64,pay)void)",
        "Method(get_box_commit_rand(pay)void)",
        "Method(get_rand_commit_round(uint64)void)",
        "Method(del_box_commit_rand_player()void)",
        "Method(del_box_commit_rand_admin(uint64,account)void)",
        "Method(resolve_score(uint64)void)",
        "Method(check_game_event_trigger(uint64,uint8)bool)",
        "Method(reset_game(uint64,pay)void)",
        "Method(delete_game(uint64)void)",
        "Method(terminate()void)"
      ]
    },
    "97": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(calc_single_box_fee(uint8,uint16)uint64)",
        "Method(check_game_event_trigger(uint64,uint8)bool)",
        "Method(claim_trophy()void)",
        "Method(del_box_commit_rand_admin(uint64,account)void)",
        "Method(del_box_commit_rand_player()void)",
        "Method(delete_game(uint64)void)",
        "Method(generate()void)",
        "Method(get_box_commit_rand(pay)void)",
        "Method(get_rand_commit_round(uint64)void)",
        "Method(join_game(uint64,pay)void)",
        "Method(mint_trophy(pay,pay)void)",
        "Method(new_game(uint64,pay,pay,pay)void)",
        "Method(read_game_players(uint64)address[])",
        "Method(read_game_state(uint64)(uint64,bool,uint8,uint8,uint8,uint8,uint8,uint16,uint64,uint64,address,address,address,address))",
        "Method(read_gen_unix()uint64)",
        "Method(reset_game(uint64,pay)void)",
        "Method(resolve_score(uint64)void)",
        "Method(terminate()void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(calc_single_box_fee(uint8,uint16)uint64)",
        "Method(read_gen_unix()uint64)",
        "Method(read_game_state(uint64)(uint64,bool,uint8,uint8,uint8,uint8,uint8,uint16,uint64,uint64,address,address,address,address))",
        "Method(read_game_players(uint64)address[])",
        "Method(generate()void)",
        "Method(mint_trophy(pay,pay)void)",
        "Method(claim_trophy()void)",
        "Method(new_game(uint64,pay,pay,pay)void)",
        "Method(join_game(uint64,pay)void)",
        "Method(get_box_commit_rand(pay)void)",
        "Method(get_rand_commit_round(uint64)void)",
        "Method(del_box_commit_rand_player()void)",
        "Method(del_box_commit_rand_admin(uint64,account)void)",
        "Method(resolve_score(uint64)void)",
        "Method(check_game_event_trigger(uint64,uint8)bool)",
        "Method(reset_game(uint64,pay)void)",
        "Method(delete_game(uint64)void)",
        "Method(terminate()void)",
        "tmp%2#0"
      ]
    },
    "100": {
      "op": "match main_calc_single_box_fee_route@5 main_read_gen_unix_route@6 main_read_game_state_route@7 main_read_game_players_route@8 main_generate_route@9 main_mint_trophy_route@10 main_claim_trophy_route@11 main_new_game_route@12 main_join_game_route@13 main_get_box_commit_rand_route@14 main_get_rand_commit_round_route@15 main_del_box_commit_rand_player_route@16 main_del_box_commit_rand_admin_route@17 main_resolve_score_route@18 main_check_game_event_trigger_route@19 main_reset_game_route@20 main_delete_game_route@21 main_terminate_route@22",
      "stack_out": []
    },
    "138": {
      "block": "main_after_if_else@23",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "139": {
      "op": "return",
      "stack_out": []
    },
    "140": {
      "block": "main_terminate_route@22",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%99#0"
      ],
      "stack_out": [
        "tmp%99#0"
      ]
    },
    "142": {
      "op": "pushint 5 // DeleteApplication",
      "defined_out": [
        "DeleteApplication",
        "tmp%99#0"
      ],
      "stack_out": [
        "tmp%99#0",
        "DeleteApplication"
      ]
    },
    "144": {
      "op": "==",
      "defined_out": [
        "tmp%100#0"
      ],
      "stack_out": [
        "tmp%100#0"
      ]
    },
    "145": {
      "error": "OnCompletion is not DeleteApplication",
      "op": "assert // OnCompletion is not DeleteApplication",
      "stack_out": []
    },
    "146": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%101#0"
      ],
      "stack_out": [
        "tmp%101#0"
      ]
    },
    "148": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "149": {
      "callsub": "smart_contracts.pieout.contract.Pieout.terminate",
      "op": "callsub terminate"
    },
    "152": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "153": {
      "op": "return",
      "stack_out": []
    },
    "154": {
      "block": "main_delete_game_route@21",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%94#0"
      ],
      "stack_out": [
        "tmp%94#0"
      ]
    },
    "156": {
      "op": "!",
      "defined_out": [
        "tmp%95#0"
      ],
      "stack_out": [
        "tmp%95#0"
      ]
    },
    "157": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "158": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%96#0"
      ],
      "stack_out": [
        "tmp%96#0"
      ]
    },
    "160": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "161": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%9#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%9#0"
      ]
    },
    "164": {
      "op": "btoi",
      "defined_out": [
        "tmp%98#0"
      ],
      "stack_out": [
        "tmp%98#0"
      ]
    },
    "165": {
      "callsub": "smart_contracts.pieout.contract.Pieout.delete_game",
      "op": "callsub delete_game",
      "stack_out": []
    },
    "168": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "169": {
      "op": "return",
      "stack_out": []
    },
    "170": {
      "block": "main_reset_game_route@20",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%88#0"
      ],
      "stack_out": [
        "tmp%88#0"
      ]
    },
    "172": {
      "op": "!",
      "defined_out": [
        "tmp%89#0"
      ],
      "stack_out": [
        "tmp%89#0"
      ]
    },
    "173": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "174": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%90#0"
      ],
      "stack_out": [
        "tmp%90#0"
      ]
    },
    "176": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "177": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%8#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%8#0"
      ]
    },
    "180": {
      "op": "btoi",
      "defined_out": [
        "tmp%92#0"
      ],
      "stack_out": [
        "tmp%92#0"
      ]
    },
    "181": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%92#0",
        "tmp%93#0"
      ],
      "stack_out": [
        "tmp%92#0",
        "tmp%93#0"
      ]
    },
    "183": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "tmp%92#0",
        "tmp%93#0"
      ],
      "stack_out": [
        "tmp%92#0",
        "tmp%93#0",
        "1"
      ]
    },
    "184": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%7#0",
        "tmp%92#0"
      ],
      "stack_out": [
        "tmp%92#0",
        "gtxn_idx%7#0"
      ]
    },
    "185": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%7#0",
        "gtxn_idx%7#0 (copy)",
        "tmp%92#0"
      ],
      "stack_out": [
        "tmp%92#0",
        "gtxn_idx%7#0",
        "gtxn_idx%7#0 (copy)"
      ]
    },
    "186": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%7#0",
        "gtxn_type%7#0",
        "tmp%92#0"
      ],
      "stack_out": [
        "tmp%92#0",
        "gtxn_idx%7#0",
        "gtxn_type%7#0"
      ]
    },
    "188": {
      "op": "intc_0 // pay",
      "defined_out": [
        "gtxn_idx%7#0",
        "gtxn_type%7#0",
        "pay",
        "tmp%92#0"
      ],
      "stack_out": [
        "tmp%92#0",
        "gtxn_idx%7#0",
        "gtxn_type%7#0",
        "pay"
      ]
    },
    "189": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%7#0",
        "gtxn_type_matches%7#0",
        "tmp%92#0"
      ],
      "stack_out": [
        "tmp%92#0",
        "gtxn_idx%7#0",
        "gtxn_type_matches%7#0"
      ]
    },
    "190": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "tmp%92#0",
        "gtxn_idx%7#0"
      ]
    },
    "191": {
      "callsub": "smart_contracts.pieout.contract.Pieout.reset_game",
      "op": "callsub reset_game",
      "stack_out": []
    },
    "194": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "195": {
      "op": "return",
      "stack_out": []
    },
    "196": {
      "block": "main_check_game_event_trigger_route@19",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%81#0"
      ],
      "stack_out": [
        "tmp%81#0"
      ]
    },
    "198": {
      "op": "!",
      "defined_out": [
        "tmp%82#0"
      ],
      "stack_out": [
        "tmp%82#0"
      ]
    },
    "199": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "200": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%83#0"
      ],
      "stack_out": [
        "tmp%83#0"
      ]
    },
    "202": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "203": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%7#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%7#0"
      ]
    },
    "206": {
      "op": "btoi",
      "defined_out": [
        "tmp%85#0"
      ],
      "stack_out": [
        "tmp%85#0"
      ]
    },
    "207": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[1]%2#0",
        "tmp%85#0"
      ],
      "stack_out": [
        "tmp%85#0",
        "reinterpret_bytes[1]%2#0"
      ]
    },
    "210": {
      "callsub": "smart_contracts.pieout.contract.Pieout.check_game_event_trigger",
      "op": "callsub check_game_event_trigger",
      "defined_out": [
        "tmp%86#0"
      ],
      "stack_out": [
        "tmp%86#0"
      ]
    },
    "213": {
      "op": "bytec 5 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%86#0"
      ],
      "stack_out": [
        "tmp%86#0",
        "0x151f7c75"
      ]
    },
    "215": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%86#0"
      ]
    },
    "216": {
      "op": "concat",
      "defined_out": [
        "tmp%87#0"
      ],
      "stack_out": [
        "tmp%87#0"
      ]
    },
    "217": {
      "op": "log",
      "stack_out": []
    },
    "218": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "219": {
      "op": "return",
      "stack_out": []
    },
    "220": {
      "block": "main_resolve_score_route@18",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%76#0"
      ],
      "stack_out": [
        "tmp%76#0"
      ]
    },
    "222": {
      "op": "!",
      "defined_out": [
        "tmp%77#0"
      ],
      "stack_out": [
        "tmp%77#0"
      ]
    },
    "223": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "224": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%78#0"
      ],
      "stack_out": [
        "tmp%78#0"
      ]
    },
    "226": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "227": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%6#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%6#0"
      ]
    },
    "230": {
      "op": "btoi",
      "defined_out": [
        "tmp%80#0"
      ],
      "stack_out": [
        "tmp%80#0"
      ]
    },
    "231": {
      "callsub": "smart_contracts.pieout.contract.Pieout.resolve_score",
      "op": "callsub resolve_score",
      "stack_out": []
    },
    "234": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "235": {
      "op": "return",
      "stack_out": []
    },
    "236": {
      "block": "main_del_box_commit_rand_admin_route@17",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%69#0"
      ],
      "stack_out": [
        "tmp%69#0"
      ]
    },
    "238": {
      "op": "!",
      "defined_out": [
        "tmp%70#0"
      ],
      "stack_out": [
        "tmp%70#0"
      ]
    },
    "239": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "240": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%71#0"
      ],
      "stack_out": [
        "tmp%71#0"
      ]
    },
    "242": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "243": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%5#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%5#0"
      ]
    },
    "246": {
      "op": "btoi",
      "defined_out": [
        "tmp%73#0"
      ],
      "stack_out": [
        "tmp%73#0"
      ]
    },
    "247": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[1]%1#0",
        "tmp%73#0"
      ],
      "stack_out": [
        "tmp%73#0",
        "reinterpret_bytes[1]%1#0"
      ]
    },
    "250": {
      "op": "btoi",
      "defined_out": [
        "tmp%73#0",
        "tmp%74#0"
      ],
      "stack_out": [
        "tmp%73#0",
        "tmp%74#0"
      ]
    },
    "251": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%73#0",
        "tmp%75#0"
      ],
      "stack_out": [
        "tmp%73#0",
        "tmp%75#0"
      ]
    },
    "253": {
      "callsub": "smart_contracts.pieout.contract.Pieout.del_box_commit_rand_admin",
      "op": "callsub del_box_commit_rand_admin",
      "stack_out": []
    },
    "256": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "257": {
      "op": "return",
      "stack_out": []
    },
    "258": {
      "block": "main_del_box_commit_rand_player_route@16",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%65#0"
      ],
      "stack_out": [
        "tmp%65#0"
      ]
    },
    "260": {
      "op": "!",
      "defined_out": [
        "tmp%66#0"
      ],
      "stack_out": [
        "tmp%66#0"
      ]
    },
    "261": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "262": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%67#0"
      ],
      "stack_out": [
        "tmp%67#0"
      ]
    },
    "264": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "265": {
      "callsub": "smart_contracts.pieout.contract.Pieout.del_box_commit_rand_player",
      "op": "callsub del_box_commit_rand_player"
    },
    "268": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "269": {
      "op": "return",
      "stack_out": []
    },
    "270": {
      "block": "main_get_rand_commit_round_route@15",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%60#0"
      ],
      "stack_out": [
        "tmp%60#0"
      ]
    },
    "272": {
      "op": "!",
      "defined_out": [
        "tmp%61#0"
      ],
      "stack_out": [
        "tmp%61#0"
      ]
    },
    "273": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "274": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%62#0"
      ],
      "stack_out": [
        "tmp%62#0"
      ]
    },
    "276": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "277": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%4#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%4#0"
      ]
    },
    "280": {
      "op": "btoi",
      "defined_out": [
        "tmp%64#0"
      ],
      "stack_out": [
        "tmp%64#0"
      ]
    },
    "281": {
      "callsub": "smart_contracts.pieout.contract.Pieout.get_rand_commit_round",
      "op": "callsub get_rand_commit_round",
      "stack_out": []
    },
    "284": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "285": {
      "op": "return",
      "stack_out": []
    },
    "286": {
      "block": "main_get_box_commit_rand_route@14",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%55#0"
      ],
      "stack_out": [
        "tmp%55#0"
      ]
    },
    "288": {
      "op": "!",
      "defined_out": [
        "tmp%56#0"
      ],
      "stack_out": [
        "tmp%56#0"
      ]
    },
    "289": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "290": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%57#0"
      ],
      "stack_out": [
        "tmp%57#0"
      ]
    },
    "292": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "293": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%59#0"
      ],
      "stack_out": [
        "tmp%59#0"
      ]
    },
    "295": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "tmp%59#0"
      ],
      "stack_out": [
        "tmp%59#0",
        "1"
      ]
    },
    "296": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%6#0"
      ],
      "stack_out": [
        "gtxn_idx%6#0"
      ]
    },
    "297": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%6#0",
        "gtxn_idx%6#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%6#0",
        "gtxn_idx%6#0 (copy)"
      ]
    },
    "298": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%6#0",
        "gtxn_type%6#0"
      ],
      "stack_out": [
        "gtxn_idx%6#0",
        "gtxn_type%6#0"
      ]
    },
    "300": {
      "op": "intc_0 // pay",
      "defined_out": [
        "gtxn_idx%6#0",
        "gtxn_type%6#0",
        "pay"
      ],
      "stack_out": [
        "gtxn_idx%6#0",
        "gtxn_type%6#0",
        "pay"
      ]
    },
    "301": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%6#0",
        "gtxn_type_matches%6#0"
      ],
      "stack_out": [
        "gtxn_idx%6#0",
        "gtxn_type_matches%6#0"
      ]
    },
    "302": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%6#0"
      ]
    },
    "303": {
      "callsub": "smart_contracts.pieout.contract.Pieout.get_box_commit_rand",
      "op": "callsub get_box_commit_rand",
      "stack_out": []
    },
    "306": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "307": {
      "op": "return",
      "stack_out": []
    },
    "308": {
      "block": "main_join_game_route@13",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%49#0"
      ],
      "stack_out": [
        "tmp%49#0"
      ]
    },
    "310": {
      "op": "!",
      "defined_out": [
        "tmp%50#0"
      ],
      "stack_out": [
        "tmp%50#0"
      ]
    },
    "311": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "312": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%51#0"
      ],
      "stack_out": [
        "tmp%51#0"
      ]
    },
    "314": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "315": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%3#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%3#0"
      ]
    },
    "318": {
      "op": "btoi",
      "defined_out": [
        "tmp%53#0"
      ],
      "stack_out": [
        "tmp%53#0"
      ]
    },
    "319": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%53#0",
        "tmp%54#0"
      ],
      "stack_out": [
        "tmp%53#0",
        "tmp%54#0"
      ]
    },
    "321": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "tmp%53#0",
        "tmp%54#0"
      ],
      "stack_out": [
        "tmp%53#0",
        "tmp%54#0",
        "1"
      ]
    },
    "322": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%5#0",
        "tmp%53#0"
      ],
      "stack_out": [
        "tmp%53#0",
        "gtxn_idx%5#0"
      ]
    },
    "323": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%5#0",
        "gtxn_idx%5#0 (copy)",
        "tmp%53#0"
      ],
      "stack_out": [
        "tmp%53#0",
        "gtxn_idx%5#0",
        "gtxn_idx%5#0 (copy)"
      ]
    },
    "324": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%5#0",
        "gtxn_type%5#0",
        "tmp%53#0"
      ],
      "stack_out": [
        "tmp%53#0",
        "gtxn_idx%5#0",
        "gtxn_type%5#0"
      ]
    },
    "326": {
      "op": "intc_0 // pay",
      "defined_out": [
        "gtxn_idx%5#0",
        "gtxn_type%5#0",
        "pay",
        "tmp%53#0"
      ],
      "stack_out": [
        "tmp%53#0",
        "gtxn_idx%5#0",
        "gtxn_type%5#0",
        "pay"
      ]
    },
    "327": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%5#0",
        "gtxn_type_matches%5#0",
        "tmp%53#0"
      ],
      "stack_out": [
        "tmp%53#0",
        "gtxn_idx%5#0",
        "gtxn_type_matches%5#0"
      ]
    },
    "328": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "tmp%53#0",
        "gtxn_idx%5#0"
      ]
    },
    "329": {
      "callsub": "smart_contracts.pieout.contract.Pieout.join_game",
      "op": "callsub join_game",
      "stack_out": []
    },
    "332": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "333": {
      "op": "return",
      "stack_out": []
    },
    "334": {
      "block": "main_new_game_route@12",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%41#0"
      ],
      "stack_out": [
        "tmp%41#0"
      ]
    },
    "336": {
      "op": "!",
      "defined_out": [
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%42#0"
      ]
    },
    "337": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "338": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%43#0"
      ]
    },
    "340": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "341": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%2#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%2#0"
      ]
    },
    "344": {
      "op": "btoi",
      "defined_out": [
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%45#0"
      ]
    },
    "345": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%45#0",
        "tmp%46#0"
      ],
      "stack_out": [
        "tmp%45#0",
        "tmp%46#0"
      ]
    },
    "347": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "tmp%45#0",
        "tmp%46#0"
      ],
      "stack_out": [
        "tmp%45#0",
        "tmp%46#0",
        "3"
      ]
    },
    "349": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%2#0",
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%45#0",
        "gtxn_idx%2#0"
      ]
    },
    "350": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%2#0",
        "gtxn_idx%2#0 (copy)",
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%45#0",
        "gtxn_idx%2#0",
        "gtxn_idx%2#0 (copy)"
      ]
    },
    "351": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%2#0",
        "gtxn_type%2#0",
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%45#0",
        "gtxn_idx%2#0",
        "gtxn_type%2#0"
      ]
    },
    "353": {
      "op": "intc_0 // pay",
      "defined_out": [
        "gtxn_idx%2#0",
        "gtxn_type%2#0",
        "pay",
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%45#0",
        "gtxn_idx%2#0",
        "gtxn_type%2#0",
        "pay"
      ]
    },
    "354": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%2#0",
        "gtxn_type_matches%2#0",
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%45#0",
        "gtxn_idx%2#0",
        "gtxn_type_matches%2#0"
      ]
    },
    "355": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "tmp%45#0",
        "gtxn_idx%2#0"
      ]
    },
    "356": {
      "op": "txn GroupIndex",
      "defined_out": [
        "gtxn_idx%2#0",
        "tmp%45#0",
        "tmp%47#0"
      ],
      "stack_out": [
        "tmp%45#0",
        "gtxn_idx%2#0",
        "tmp%47#0"
      ]
    },
    "358": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "gtxn_idx%2#0",
        "tmp%45#0",
        "tmp%47#0"
      ],
      "stack_out": [
        "tmp%45#0",
        "gtxn_idx%2#0",
        "tmp%47#0",
        "2"
      ]
    },
    "359": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%2#0",
        "gtxn_idx%3#0",
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%45#0",
        "gtxn_idx%2#0",
        "gtxn_idx%3#0"
      ]
    },
    "360": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%2#0",
        "gtxn_idx%3#0",
        "gtxn_idx%3#0 (copy)",
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%45#0",
        "gtxn_idx%2#0",
        "gtxn_idx%3#0",
        "gtxn_idx%3#0 (copy)"
      ]
    },
    "361": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%2#0",
        "gtxn_idx%3#0",
        "gtxn_type%3#0",
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%45#0",
        "gtxn_idx%2#0",
        "gtxn_idx%3#0",
        "gtxn_type%3#0"
      ]
    },
    "363": {
      "op": "intc_0 // pay",
      "stack_out": [
        "tmp%45#0",
        "gtxn_idx%2#0",
        "gtxn_idx%3#0",
        "gtxn_type%3#0",
        "pay"
      ]
    },
    "364": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%2#0",
        "gtxn_idx%3#0",
        "gtxn_type_matches%3#0",
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%45#0",
        "gtxn_idx%2#0",
        "gtxn_idx%3#0",
        "gtxn_type_matches%3#0"
      ]
    },
    "365": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "tmp%45#0",
        "gtxn_idx%2#0",
        "gtxn_idx%3#0"
      ]
    },
    "366": {
      "op": "txn GroupIndex",
      "defined_out": [
        "gtxn_idx%2#0",
        "gtxn_idx%3#0",
        "tmp%45#0",
        "tmp%48#0"
      ],
      "stack_out": [
        "tmp%45#0",
        "gtxn_idx%2#0",
        "gtxn_idx%3#0",
        "tmp%48#0"
      ]
    },
    "368": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "gtxn_idx%2#0",
        "gtxn_idx%3#0",
        "tmp%45#0",
        "tmp%48#0"
      ],
      "stack_out": [
        "tmp%45#0",
        "gtxn_idx%2#0",
        "gtxn_idx%3#0",
        "tmp%48#0",
        "1"
      ]
    },
    "369": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%2#0",
        "gtxn_idx%3#0",
        "gtxn_idx%4#0",
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%45#0",
        "gtxn_idx%2#0",
        "gtxn_idx%3#0",
        "gtxn_idx%4#0"
      ]
    },
    "370": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%2#0",
        "gtxn_idx%3#0",
        "gtxn_idx%4#0",
        "gtxn_idx%4#0 (copy)",
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%45#0",
        "gtxn_idx%2#0",
        "gtxn_idx%3#0",
        "gtxn_idx%4#0",
        "gtxn_idx%4#0 (copy)"
      ]
    },
    "371": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%2#0",
        "gtxn_idx%3#0",
        "gtxn_idx%4#0",
        "gtxn_type%4#0",
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%45#0",
        "gtxn_idx%2#0",
        "gtxn_idx%3#0",
        "gtxn_idx%4#0",
        "gtxn_type%4#0"
      ]
    },
    "373": {
      "op": "intc_0 // pay",
      "stack_out": [
        "tmp%45#0",
        "gtxn_idx%2#0",
        "gtxn_idx%3#0",
        "gtxn_idx%4#0",
        "gtxn_type%4#0",
        "pay"
      ]
    },
    "374": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%2#0",
        "gtxn_idx%3#0",
        "gtxn_idx%4#0",
        "gtxn_type_matches%4#0",
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%45#0",
        "gtxn_idx%2#0",
        "gtxn_idx%3#0",
        "gtxn_idx%4#0",
        "gtxn_type_matches%4#0"
      ]
    },
    "375": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "tmp%45#0",
        "gtxn_idx%2#0",
        "gtxn_idx%3#0",
        "gtxn_idx%4#0"
      ]
    },
    "376": {
      "callsub": "smart_contracts.pieout.contract.Pieout.new_game",
      "op": "callsub new_game",
      "stack_out": []
    },
    "379": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "380": {
      "op": "return",
      "stack_out": []
    },
    "381": {
      "block": "main_claim_trophy_route@11",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%37#0"
      ]
    },
    "383": {
      "op": "!",
      "defined_out": [
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%38#0"
      ]
    },
    "384": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "385": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0"
      ]
    },
    "387": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "388": {
      "callsub": "smart_contracts.pieout.contract.Pieout.claim_trophy",
      "op": "callsub claim_trophy"
    },
    "391": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "392": {
      "op": "return",
      "stack_out": []
    },
    "393": {
      "block": "main_mint_trophy_route@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0"
      ]
    },
    "395": {
      "op": "!",
      "defined_out": [
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0"
      ]
    },
    "396": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "397": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0"
      ]
    },
    "399": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "400": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0"
      ]
    },
    "402": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0",
        "2"
      ]
    },
    "403": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0"
      ]
    },
    "404": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ]
    },
    "405": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ]
    },
    "407": {
      "op": "intc_0 // pay",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay"
      ]
    },
    "408": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ]
    },
    "409": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%0#0"
      ]
    },
    "410": {
      "op": "txn GroupIndex",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%36#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%36#0"
      ]
    },
    "412": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "gtxn_idx%0#0",
        "tmp%36#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%36#0",
        "1"
      ]
    },
    "413": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0"
      ]
    },
    "414": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "gtxn_idx%1#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "gtxn_idx%1#0 (copy)"
      ]
    },
    "415": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "gtxn_type%1#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "gtxn_type%1#0"
      ]
    },
    "417": {
      "op": "intc_0 // pay",
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "gtxn_type%1#0",
        "pay"
      ]
    },
    "418": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "gtxn_type_matches%1#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "gtxn_type_matches%1#0"
      ]
    },
    "419": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0"
      ]
    },
    "420": {
      "callsub": "smart_contracts.pieout.contract.Pieout.mint_trophy",
      "op": "callsub mint_trophy",
      "stack_out": []
    },
    "423": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "424": {
      "op": "return",
      "stack_out": []
    },
    "425": {
      "block": "main_generate_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0"
      ]
    },
    "427": {
      "op": "!",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "428": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "429": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0"
      ]
    },
    "431": {
      "op": "!",
      "defined_out": [
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0"
      ]
    },
    "432": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "433": {
      "callsub": "smart_contracts.pieout.contract.Pieout.generate",
      "op": "callsub generate"
    },
    "436": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "437": {
      "op": "return",
      "stack_out": []
    },
    "438": {
      "block": "main_read_game_players_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "440": {
      "op": "!",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "441": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "442": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "444": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "445": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%1#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%1#0"
      ]
    },
    "448": {
      "op": "btoi",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "449": {
      "callsub": "smart_contracts.pieout.contract.Pieout.read_game_players",
      "op": "callsub read_game_players",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "452": {
      "op": "bytec 5 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0",
        "0x151f7c75"
      ]
    },
    "454": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%25#0"
      ]
    },
    "455": {
      "op": "concat",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "456": {
      "op": "log",
      "stack_out": []
    },
    "457": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "458": {
      "op": "return",
      "stack_out": []
    },
    "459": {
      "block": "main_read_game_state_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "461": {
      "op": "!",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "462": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "463": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "465": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "466": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%0#0"
      ]
    },
    "469": {
      "op": "btoi",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "470": {
      "callsub": "smart_contracts.pieout.contract.Pieout.read_game_state",
      "op": "callsub read_game_state",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "473": {
      "op": "bytec 5 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0",
        "0x151f7c75"
      ]
    },
    "475": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%18#0"
      ]
    },
    "476": {
      "op": "concat",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "477": {
      "op": "log",
      "stack_out": []
    },
    "478": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "479": {
      "op": "return",
      "stack_out": []
    },
    "480": {
      "block": "main_read_gen_unix_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "482": {
      "op": "!",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "483": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "484": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "486": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "487": {
      "op": "intc 13 // TMPL_GEN_UNIX",
      "defined_out": [
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0"
      ]
    },
    "489": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0"
      ]
    },
    "490": {
      "op": "bytec 5 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0",
        "0x151f7c75"
      ]
    },
    "492": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%1#0"
      ]
    },
    "493": {
      "op": "concat",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "494": {
      "op": "log",
      "stack_out": []
    },
    "495": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "496": {
      "op": "return",
      "stack_out": []
    },
    "497": {
      "block": "main_calc_single_box_fee_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "499": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "500": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "501": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "503": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "504": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%0#0"
      ]
    },
    "507": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[1]%0#0",
        "reinterpret_bytes[2]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%0#0",
        "reinterpret_bytes[2]%0#0"
      ]
    },
    "510": {
      "callsub": "smart_contracts.pieout.contract.Pieout.calc_single_box_fee",
      "op": "callsub calc_single_box_fee",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "513": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "514": {
      "op": "bytec 5 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "516": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ]
    },
    "517": {
      "op": "concat",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "518": {
      "op": "log",
      "stack_out": []
    },
    "519": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "520": {
      "op": "return",
      "stack_out": []
    },
    "521": {
      "subroutine": "smart_contracts.pieout.subroutines.payout_itxn",
      "params": {
        "receiver#0": "bytes",
        "amount#0": "uint64",
        "note#0": "bytes"
      },
      "block": "payout_itxn",
      "stack_in": [],
      "op": "proto 3 0"
    },
    "524": {
      "op": "itxn_begin"
    },
    "525": {
      "op": "frame_dig -1",
      "defined_out": [
        "note#0 (copy)"
      ],
      "stack_out": [
        "note#0 (copy)"
      ]
    },
    "527": {
      "op": "itxn_field Note",
      "stack_out": []
    },
    "529": {
      "op": "frame_dig -2",
      "defined_out": [
        "amount#0 (copy)"
      ],
      "stack_out": [
        "amount#0 (copy)"
      ]
    },
    "531": {
      "op": "itxn_field Amount",
      "stack_out": []
    },
    "533": {
      "op": "frame_dig -3",
      "defined_out": [
        "receiver#0 (copy)"
      ],
      "stack_out": [
        "receiver#0 (copy)"
      ]
    },
    "535": {
      "op": "itxn_field Receiver",
      "stack_out": []
    },
    "537": {
      "op": "intc_0 // pay",
      "defined_out": [
        "pay"
      ],
      "stack_out": [
        "pay"
      ]
    },
    "538": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "540": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "541": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "543": {
      "op": "itxn_submit"
    },
    "544": {
      "retsub": true,
      "op": "retsub"
    },
    "545": {
      "subroutine": "smart_contracts.pieout.subroutines.check_acc_in_game",
      "params": {
        "game_id#0": "uint64",
        "account#0": "bytes",
        "box_game_players#0": "bytes",
        "player_count#0": "uint64",
        "clear_player#0": "uint64"
      },
      "block": "check_acc_in_game",
      "stack_in": [],
      "op": "proto 5 1"
    },
    "548": {
      "op": "intc_1 // 0",
      "stack_out": [
        "players_ref#0"
      ]
    },
    "549": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "players_ref#0",
        "acc_in_game#5"
      ]
    },
    "551": {
      "op": "frame_dig -2",
      "defined_out": [
        "player_count#0 (copy)"
      ],
      "stack_out": [
        "players_ref#0",
        "acc_in_game#5",
        "player_count#0 (copy)"
      ]
    },
    "553": {
      "op": "intc_3 // 32",
      "defined_out": [
        "32",
        "player_count#0 (copy)"
      ],
      "stack_out": [
        "players_ref#0",
        "acc_in_game#5",
        "player_count#0 (copy)",
        "32"
      ]
    },
    "554": {
      "op": "*",
      "defined_out": [
        "game_players_length#0"
      ],
      "stack_out": [
        "players_ref#0",
        "acc_in_game#5",
        "game_players_length#0"
      ]
    },
    "555": {
      "op": "intc_1 // 0"
    },
    "556": {
      "op": "dup",
      "defined_out": [
        "acc_in_game#0",
        "game_players_length#0",
        "i#0"
      ],
      "stack_out": [
        "players_ref#0",
        "acc_in_game#5",
        "game_players_length#0",
        "acc_in_game#0",
        "i#0"
      ]
    },
    "557": {
      "block": "check_acc_in_game_for_header@1",
      "stack_in": [
        "players_ref#0",
        "acc_in_game#5",
        "game_players_length#0",
        "acc_in_game#0",
        "i#0"
      ],
      "op": "frame_dig 4",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "players_ref#0",
        "acc_in_game#5",
        "game_players_length#0",
        "acc_in_game#0",
        "i#0",
        "i#0"
      ]
    },
    "559": {
      "op": "frame_dig 2",
      "defined_out": [
        "game_players_length#0",
        "i#0"
      ],
      "stack_out": [
        "players_ref#0",
        "acc_in_game#5",
        "game_players_length#0",
        "acc_in_game#0",
        "i#0",
        "i#0",
        "game_players_length#0"
      ]
    },
    "561": {
      "op": "<",
      "defined_out": [
        "continue_looping%0#0",
        "game_players_length#0",
        "i#0"
      ],
      "stack_out": [
        "players_ref#0",
        "acc_in_game#5",
        "game_players_length#0",
        "acc_in_game#0",
        "i#0",
        "continue_looping%0#0"
      ]
    },
    "562": {
      "op": "frame_dig 3",
      "defined_out": [
        "acc_in_game#5",
        "continue_looping%0#0",
        "game_players_length#0",
        "i#0"
      ],
      "stack_out": [
        "players_ref#0",
        "acc_in_game#5",
        "game_players_length#0",
        "acc_in_game#0",
        "i#0",
        "continue_looping%0#0",
        "acc_in_game#5"
      ]
    },
    "564": {
      "op": "frame_bury 1",
      "defined_out": [
        "acc_in_game#5",
        "continue_looping%0#0",
        "game_players_length#0",
        "i#0"
      ],
      "stack_out": [
        "players_ref#0",
        "acc_in_game#5",
        "game_players_length#0",
        "acc_in_game#0",
        "i#0",
        "continue_looping%0#0"
      ]
    },
    "566": {
      "op": "bz check_acc_in_game_after_for@8",
      "stack_out": [
        "players_ref#0",
        "acc_in_game#5",
        "game_players_length#0",
        "acc_in_game#0",
        "i#0"
      ]
    },
    "569": {
      "op": "frame_dig -5",
      "defined_out": [
        "acc_in_game#5",
        "game_id#0 (copy)",
        "game_players_length#0",
        "i#0"
      ],
      "stack_out": [
        "players_ref#0",
        "acc_in_game#5",
        "game_players_length#0",
        "acc_in_game#0",
        "i#0",
        "game_id#0 (copy)"
      ]
    },
    "571": {
      "op": "itob",
      "defined_out": [
        "acc_in_game#5",
        "encoded_value%0#0",
        "game_players_length#0",
        "i#0"
      ],
      "stack_out": [
        "players_ref#0",
        "acc_in_game#5",
        "game_players_length#0",
        "acc_in_game#0",
        "i#0",
        "encoded_value%0#0"
      ]
    },
    "572": {
      "op": "frame_dig -3",
      "defined_out": [
        "acc_in_game#5",
        "box_game_players#0 (copy)",
        "encoded_value%0#0",
        "game_players_length#0",
        "i#0"
      ],
      "stack_out": [
        "players_ref#0",
        "acc_in_game#5",
        "game_players_length#0",
        "acc_in_game#0",
        "i#0",
        "encoded_value%0#0",
        "box_game_players#0 (copy)"
      ]
    },
    "574": {
      "op": "swap",
      "stack_out": [
        "players_ref#0",
        "acc_in_game#5",
        "game_players_length#0",
        "acc_in_game#0",
        "i#0",
        "box_game_players#0 (copy)",
        "encoded_value%0#0"
      ]
    },
    "575": {
      "op": "concat",
      "defined_out": [
        "acc_in_game#5",
        "game_players_length#0",
        "i#0",
        "players_ref#0"
      ],
      "stack_out": [
        "players_ref#0",
        "acc_in_game#5",
        "game_players_length#0",
        "acc_in_game#0",
        "i#0",
        "players_ref#0"
      ]
    },
    "576": {
      "op": "dup",
      "stack_out": [
        "players_ref#0",
        "acc_in_game#5",
        "game_players_length#0",
        "acc_in_game#0",
        "i#0",
        "players_ref#0",
        "players_ref#0"
      ]
    },
    "577": {
      "op": "frame_bury 0",
      "defined_out": [
        "acc_in_game#5",
        "game_players_length#0",
        "i#0",
        "players_ref#0"
      ],
      "stack_out": [
        "players_ref#0",
        "acc_in_game#5",
        "game_players_length#0",
        "acc_in_game#0",
        "i#0",
        "players_ref#0"
      ]
    },
    "579": {
      "op": "box_get",
      "defined_out": [
        "acc_in_game#5",
        "game_players_length#0",
        "i#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "players_ref#0"
      ],
      "stack_out": [
        "players_ref#0",
        "acc_in_game#5",
        "game_players_length#0",
        "acc_in_game#0",
        "i#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "580": {
      "error": "check BoxMap entry exists",
      "op": "assert // check BoxMap entry exists",
      "stack_out": [
        "players_ref#0",
        "acc_in_game#5",
        "game_players_length#0",
        "acc_in_game#0",
        "i#0",
        "maybe_value%0#0"
      ]
    },
    "581": {
      "op": "frame_dig 4",
      "stack_out": [
        "players_ref#0",
        "acc_in_game#5",
        "game_players_length#0",
        "acc_in_game#0",
        "i#0",
        "maybe_value%0#0",
        "i#0"
      ]
    },
    "583": {
      "op": "intc_3 // 32",
      "defined_out": [
        "32",
        "acc_in_game#5",
        "game_players_length#0",
        "i#0",
        "maybe_value%0#0",
        "players_ref#0"
      ],
      "stack_out": [
        "players_ref#0",
        "acc_in_game#5",
        "game_players_length#0",
        "acc_in_game#0",
        "i#0",
        "maybe_value%0#0",
        "i#0",
        "32"
      ]
    },
    "584": {
      "op": "extract3",
      "defined_out": [
        "acc_in_game#5",
        "game_players_length#0",
        "i#0",
        "player_addr_bytes#0",
        "players_ref#0"
      ],
      "stack_out": [
        "players_ref#0",
        "acc_in_game#5",
        "game_players_length#0",
        "acc_in_game#0",
        "i#0",
        "player_addr_bytes#0"
      ]
    },
    "585": {
      "op": "frame_dig -4",
      "defined_out": [
        "acc_in_game#5",
        "account#0 (copy)",
        "game_players_length#0",
        "i#0",
        "player_addr_bytes#0",
        "players_ref#0"
      ],
      "stack_out": [
        "players_ref#0",
        "acc_in_game#5",
        "game_players_length#0",
        "acc_in_game#0",
        "i#0",
        "player_addr_bytes#0",
        "account#0 (copy)"
      ]
    },
    "587": {
      "op": "==",
      "defined_out": [
        "acc_in_game#5",
        "game_players_length#0",
        "i#0",
        "players_ref#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "players_ref#0",
        "acc_in_game#5",
        "game_players_length#0",
        "acc_in_game#0",
        "i#0",
        "tmp%0#0"
      ]
    },
    "588": {
      "op": "bz check_acc_in_game_after_if_else@6",
      "stack_out": [
        "players_ref#0",
        "acc_in_game#5",
        "game_players_length#0",
        "acc_in_game#0",
        "i#0"
      ]
    },
    "591": {
      "op": "intc_0 // 1",
      "defined_out": [
        "acc_in_game#0",
        "acc_in_game#5",
        "game_players_length#0",
        "i#0",
        "players_ref#0"
      ],
      "stack_out": [
        "players_ref#0",
        "acc_in_game#5",
        "game_players_length#0",
        "acc_in_game#0",
        "i#0",
        "acc_in_game#0"
      ]
    },
    "592": {
      "op": "frame_bury 3",
      "stack_out": [
        "players_ref#0",
        "acc_in_game#5",
        "game_players_length#0",
        "acc_in_game#0",
        "i#0"
      ]
    },
    "594": {
      "op": "frame_dig -1",
      "defined_out": [
        "acc_in_game#0",
        "acc_in_game#5",
        "clear_player#0 (copy)",
        "game_players_length#0",
        "i#0",
        "players_ref#0"
      ],
      "stack_out": [
        "players_ref#0",
        "acc_in_game#5",
        "game_players_length#0",
        "acc_in_game#0",
        "i#0",
        "clear_player#0 (copy)"
      ]
    },
    "596": {
      "op": "bz check_acc_in_game_after_if_else@5",
      "stack_out": [
        "players_ref#0",
        "acc_in_game#5",
        "game_players_length#0",
        "acc_in_game#0",
        "i#0"
      ]
    },
    "599": {
      "op": "frame_dig 0",
      "stack_out": [
        "players_ref#0",
        "acc_in_game#5",
        "game_players_length#0",
        "acc_in_game#0",
        "i#0",
        "players_ref#0"
      ]
    },
    "601": {
      "op": "frame_dig 4",
      "stack_out": [
        "players_ref#0",
        "acc_in_game#5",
        "game_players_length#0",
        "acc_in_game#0",
        "i#0",
        "players_ref#0",
        "i#0"
      ]
    },
    "603": {
      "op": "bytec 11 // 0x0000000000000000000000000000000000000000000000000000000000000000",
      "defined_out": [
        "0x0000000000000000000000000000000000000000000000000000000000000000",
        "acc_in_game#0",
        "acc_in_game#5",
        "game_players_length#0",
        "i#0",
        "players_ref#0"
      ],
      "stack_out": [
        "players_ref#0",
        "acc_in_game#5",
        "game_players_length#0",
        "acc_in_game#0",
        "i#0",
        "players_ref#0",
        "i#0",
        "0x0000000000000000000000000000000000000000000000000000000000000000"
      ]
    },
    "605": {
      "op": "box_replace",
      "stack_out": [
        "players_ref#0",
        "acc_in_game#5",
        "game_players_length#0",
        "acc_in_game#0",
        "i#0"
      ]
    },
    "606": {
      "block": "check_acc_in_game_after_if_else@5",
      "stack_in": [
        "players_ref#0",
        "acc_in_game#5",
        "game_players_length#0",
        "acc_in_game#0",
        "i#0"
      ],
      "op": "frame_dig 3",
      "defined_out": [
        "acc_in_game#5"
      ],
      "stack_out": [
        "players_ref#0",
        "acc_in_game#5",
        "game_players_length#0",
        "acc_in_game#0",
        "i#0",
        "acc_in_game#5"
      ]
    },
    "608": {
      "op": "frame_bury 1",
      "defined_out": [
        "acc_in_game#5"
      ],
      "stack_out": [
        "players_ref#0",
        "acc_in_game#5",
        "game_players_length#0",
        "acc_in_game#0",
        "i#0"
      ]
    },
    "610": {
      "block": "check_acc_in_game_after_for@8",
      "stack_in": [
        "players_ref#0",
        "acc_in_game#5",
        "game_players_length#0",
        "acc_in_game#0",
        "i#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "acc_in_game#0"
      ],
      "stack_out": [
        "players_ref#0",
        "acc_in_game#5",
        "game_players_length#0",
        "acc_in_game#0",
        "i#0",
        "acc_in_game#0"
      ]
    },
    "612": {
      "op": "frame_bury 0"
    },
    "614": {
      "retsub": true,
      "op": "retsub"
    },
    "615": {
      "block": "check_acc_in_game_after_if_else@6",
      "stack_in": [
        "players_ref#0",
        "acc_in_game#5",
        "game_players_length#0",
        "acc_in_game#0",
        "i#0"
      ],
      "op": "frame_dig 4",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "players_ref#0",
        "acc_in_game#5",
        "game_players_length#0",
        "acc_in_game#0",
        "i#0",
        "i#0"
      ]
    },
    "617": {
      "op": "intc_3 // 32",
      "defined_out": [
        "32",
        "i#0"
      ],
      "stack_out": [
        "players_ref#0",
        "acc_in_game#5",
        "game_players_length#0",
        "acc_in_game#0",
        "i#0",
        "i#0",
        "32"
      ]
    },
    "618": {
      "op": "+",
      "stack_out": [
        "players_ref#0",
        "acc_in_game#5",
        "game_players_length#0",
        "acc_in_game#0",
        "i#0",
        "i#0"
      ]
    },
    "619": {
      "op": "frame_bury 4",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "players_ref#0",
        "acc_in_game#5",
        "game_players_length#0",
        "acc_in_game#0",
        "i#0"
      ]
    },
    "621": {
      "op": "b check_acc_in_game_for_header@1"
    },
    "624": {
      "subroutine": "smart_contracts.pieout.subroutines.is_game_live",
      "params": {
        "game_state#0": "bytes"
      },
      "block": "is_game_live",
      "stack_in": [],
      "op": "proto 1 2"
    },
    "627": {
      "op": "frame_dig -1",
      "defined_out": [
        "game_state#0 (copy)"
      ],
      "stack_out": [
        "game_state#0 (copy)"
      ]
    },
    "629": {
      "error": "Index access is out of bounds",
      "op": "extract 8 8 // on error: Index access is out of bounds",
      "defined_out": [
        "reinterpret_biguint%0#0"
      ],
      "stack_out": [
        "reinterpret_biguint%0#0"
      ]
    },
    "632": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "reinterpret_biguint%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "reinterpret_biguint%0#0",
        "tmp%0#0"
      ]
    },
    "634": {
      "op": "itob",
      "defined_out": [
        "reinterpret_biguint%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "reinterpret_biguint%0#0",
        "tmp%1#0"
      ]
    },
    "635": {
      "op": "b<",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "636": {
      "op": "bz is_game_live_or_contd@2",
      "stack_out": []
    },
    "639": {
      "op": "frame_dig -1",
      "stack_out": [
        "game_state#0 (copy)"
      ]
    },
    "641": {
      "error": "Index access is out of bounds",
      "op": "extract 2 1 // on error: Index access is out of bounds",
      "defined_out": [
        "reinterpret_biguint%1#0"
      ],
      "stack_out": [
        "reinterpret_biguint%1#0"
      ]
    },
    "644": {
      "op": "pushbytes 0x04",
      "defined_out": [
        "0x04",
        "reinterpret_biguint%1#0"
      ],
      "stack_out": [
        "reinterpret_biguint%1#0",
        "0x04"
      ]
    },
    "647": {
      "op": "b>=",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "648": {
      "op": "bnz is_game_live_if_body@3",
      "stack_out": []
    },
    "651": {
      "block": "is_game_live_or_contd@2",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "game_state#0 (copy)"
      ],
      "stack_out": [
        "game_state#0 (copy)"
      ]
    },
    "653": {
      "error": "Index access is out of bounds",
      "op": "extract 2 1 // on error: Index access is out of bounds",
      "defined_out": [
        "reinterpret_biguint%3#0"
      ],
      "stack_out": [
        "reinterpret_biguint%3#0"
      ]
    },
    "656": {
      "op": "frame_dig -1",
      "stack_out": [
        "reinterpret_biguint%3#0",
        "game_state#0 (copy)"
      ]
    },
    "658": {
      "error": "Index access is out of bounds",
      "op": "extract 1 1 // on error: Index access is out of bounds",
      "defined_out": [
        "reinterpret_biguint%3#0",
        "reinterpret_biguint%4#0"
      ],
      "stack_out": [
        "reinterpret_biguint%3#0",
        "reinterpret_biguint%4#0"
      ]
    },
    "661": {
      "op": "b==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "662": {
      "op": "bz is_game_live_else_body@8",
      "stack_out": []
    },
    "665": {
      "block": "is_game_live_if_body@3",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "game_state#0 (copy)"
      ],
      "stack_out": [
        "game_state#0 (copy)"
      ]
    },
    "667": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "game_state#0 (copy)"
      ],
      "stack_out": [
        "game_state#0 (copy)",
        "0"
      ]
    },
    "668": {
      "op": "intc_0 // 1",
      "defined_out": [
        "0",
        "1",
        "game_state#0 (copy)"
      ],
      "stack_out": [
        "game_state#0 (copy)",
        "0",
        "1"
      ]
    },
    "669": {
      "op": "setbit",
      "defined_out": [
        "game_state#0"
      ],
      "stack_out": [
        "game_state#0"
      ]
    },
    "670": {
      "op": "frame_bury -1",
      "stack_out": []
    },
    "672": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "674": {
      "op": "intc 4 // 3600",
      "defined_out": [
        "3600",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "3600"
      ]
    },
    "676": {
      "op": "+",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "677": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "678": {
      "op": "frame_dig -1",
      "stack_out": [
        "val_as_bytes%0#0",
        "game_state#0 (copy)"
      ]
    },
    "680": {
      "op": "swap",
      "stack_out": [
        "game_state#0 (copy)",
        "val_as_bytes%0#0"
      ]
    },
    "681": {
      "op": "replace2 8",
      "stack_out": [
        "game_state#0"
      ]
    },
    "683": {
      "op": "dup"
    },
    "684": {
      "op": "frame_bury -1",
      "stack_out": [
        "game_state#0 (copy)"
      ]
    },
    "686": {
      "op": "intc_1 // 0",
      "stack_out": [
        "game_state#0 (copy)",
        "0"
      ]
    },
    "687": {
      "op": "getbit",
      "defined_out": [
        "is_true%1#0"
      ],
      "stack_out": [
        "is_true%1#0"
      ]
    },
    "688": {
      "op": "bytec_0 // 0x00",
      "defined_out": [
        "0x00",
        "is_true%1#0"
      ],
      "stack_out": [
        "is_true%1#0",
        "0x00"
      ]
    },
    "689": {
      "op": "intc_1 // 0",
      "stack_out": [
        "is_true%1#0",
        "0x00",
        "0"
      ]
    },
    "690": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "is_true%1#0"
      ]
    },
    "692": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%1#0"
      ],
      "stack_out": [
        "encoded_bool%1#0"
      ]
    },
    "693": {
      "op": "frame_dig -1",
      "stack_out": [
        "encoded_bool%1#0",
        "game_state#0 (copy)"
      ]
    },
    "695": {
      "error": "Index access is out of bounds",
      "op": "extract 8 8 // on error: Index access is out of bounds",
      "defined_out": [
        "encoded_bool%1#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "encoded_bool%1#0",
        "tmp%6#0"
      ]
    },
    "698": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0"
      ]
    },
    "699": {
      "op": "pushbytes 0xf1f3294a // method \"game_live(bool,uint64)\"",
      "defined_out": [
        "Method(game_live(bool,uint64))",
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "Method(game_live(bool,uint64))"
      ]
    },
    "705": {
      "op": "swap",
      "stack_out": [
        "Method(game_live(bool,uint64))",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "706": {
      "op": "concat",
      "defined_out": [
        "event%0#0"
      ],
      "stack_out": [
        "event%0#0"
      ]
    },
    "707": {
      "op": "log",
      "stack_out": []
    },
    "708": {
      "op": "pushbytes 0x80",
      "defined_out": [
        "0x80"
      ],
      "stack_out": [
        "0x80"
      ]
    },
    "711": {
      "op": "frame_dig -1",
      "stack_out": [
        "0x80",
        "game_state#0 (copy)"
      ]
    },
    "713": {
      "retsub": true,
      "op": "retsub"
    },
    "714": {
      "block": "is_game_live_else_body@8",
      "stack_in": [],
      "op": "bytec_0 // 0x00",
      "defined_out": [
        "0x00"
      ],
      "stack_out": [
        "0x00"
      ]
    },
    "715": {
      "op": "frame_dig -1",
      "defined_out": [
        "0x00",
        "game_state#0 (copy)"
      ],
      "stack_out": [
        "0x00",
        "game_state#0 (copy)"
      ]
    },
    "717": {
      "retsub": true,
      "op": "retsub"
    },
    "718": {
      "subroutine": "smart_contracts.pieout.subroutines.is_game_over",
      "params": {
        "game_id#0": "uint64",
        "game_state#0": "bytes",
        "box_game_players#0": "bytes"
      },
      "block": "is_game_over",
      "stack_in": [],
      "op": "proto 3 2"
    },
    "721": {
      "op": "intc_1 // 0",
      "stack_out": [
        "first_place_receiver#0"
      ]
    },
    "722": {
      "op": "dupn 4",
      "stack_out": [
        "first_place_receiver#0",
        "second_place_receiver#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0"
      ]
    },
    "724": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "first_place_receiver#0",
        "second_place_receiver#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "first_win_share#0"
      ]
    },
    "726": {
      "op": "dupn 2",
      "stack_out": [
        "first_place_receiver#0",
        "second_place_receiver#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "first_win_share#0",
        "second_win_share#0",
        "third_win_share#0"
      ]
    },
    "728": {
      "op": "frame_dig -2",
      "defined_out": [
        "game_state#0 (copy)"
      ],
      "stack_out": [
        "first_place_receiver#0",
        "second_place_receiver#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "first_win_share#0",
        "second_win_share#0",
        "third_win_share#0",
        "game_state#0 (copy)"
      ]
    },
    "730": {
      "error": "Index access is out of bounds",
      "op": "extract 8 8 // on error: Index access is out of bounds",
      "defined_out": [
        "reinterpret_biguint%0#0"
      ],
      "stack_out": [
        "first_place_receiver#0",
        "second_place_receiver#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "first_win_share#0",
        "second_win_share#0",
        "third_win_share#0",
        "reinterpret_biguint%0#0"
      ]
    },
    "733": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "reinterpret_biguint%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "first_place_receiver#0",
        "second_place_receiver#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "first_win_share#0",
        "second_win_share#0",
        "third_win_share#0",
        "reinterpret_biguint%0#0",
        "tmp%0#0"
      ]
    },
    "735": {
      "op": "itob",
      "defined_out": [
        "reinterpret_biguint%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "first_place_receiver#0",
        "second_place_receiver#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "first_win_share#0",
        "second_win_share#0",
        "third_win_share#0",
        "reinterpret_biguint%0#0",
        "tmp%1#0"
      ]
    },
    "736": {
      "op": "b<",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "first_place_receiver#0",
        "second_place_receiver#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "first_win_share#0",
        "second_win_share#0",
        "third_win_share#0",
        "tmp%2#0"
      ]
    },
    "737": {
      "op": "bnz is_game_over_if_body@2",
      "stack_out": [
        "first_place_receiver#0",
        "second_place_receiver#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "first_win_share#0",
        "second_win_share#0",
        "third_win_share#0"
      ]
    },
    "740": {
      "op": "frame_dig -2",
      "stack_out": [
        "first_place_receiver#0",
        "second_place_receiver#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "first_win_share#0",
        "second_win_share#0",
        "third_win_share#0",
        "game_state#0 (copy)"
      ]
    },
    "742": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "game_state#0 (copy)"
      ],
      "stack_out": [
        "first_place_receiver#0",
        "second_place_receiver#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "first_win_share#0",
        "second_win_share#0",
        "third_win_share#0",
        "game_state#0 (copy)",
        "2"
      ]
    },
    "743": {
      "op": "getbyte",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "first_place_receiver#0",
        "second_place_receiver#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "first_win_share#0",
        "second_win_share#0",
        "third_win_share#0",
        "tmp%4#0"
      ]
    },
    "744": {
      "op": "bnz is_game_over_else_body@16",
      "stack_out": [
        "first_place_receiver#0",
        "second_place_receiver#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "first_win_share#0",
        "second_win_share#0",
        "third_win_share#0"
      ]
    },
    "747": {
      "block": "is_game_over_if_body@2",
      "stack_in": [
        "first_place_receiver#0",
        "second_place_receiver#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "first_win_share#0",
        "second_win_share#0",
        "third_win_share#0"
      ],
      "op": "frame_dig -2",
      "defined_out": [
        "game_state#0 (copy)"
      ],
      "stack_out": [
        "first_place_receiver#0",
        "second_place_receiver#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "first_win_share#0",
        "second_win_share#0",
        "third_win_share#0",
        "game_state#0 (copy)"
      ]
    },
    "749": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "game_state#0 (copy)"
      ],
      "stack_out": [
        "first_place_receiver#0",
        "second_place_receiver#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "first_win_share#0",
        "second_win_share#0",
        "third_win_share#0",
        "game_state#0 (copy)",
        "1"
      ]
    },
    "750": {
      "op": "getbyte",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "first_place_receiver#0",
        "second_place_receiver#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "first_win_share#0",
        "second_win_share#0",
        "third_win_share#0",
        "tmp%7#0"
      ]
    },
    "751": {
      "op": "intc_3 // 32",
      "defined_out": [
        "32",
        "tmp%7#0"
      ],
      "stack_out": [
        "first_place_receiver#0",
        "second_place_receiver#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "first_win_share#0",
        "second_win_share#0",
        "third_win_share#0",
        "tmp%7#0",
        "32"
      ]
    },
    "752": {
      "op": "*",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "first_place_receiver#0",
        "second_place_receiver#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "first_win_share#0",
        "second_win_share#0",
        "third_win_share#0",
        "tmp%8#0"
      ]
    },
    "753": {
      "op": "bzero",
      "defined_out": [
        "materialized_values%0#0"
      ],
      "stack_out": [
        "first_place_receiver#0",
        "second_place_receiver#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "first_win_share#0",
        "second_win_share#0",
        "third_win_share#0",
        "materialized_values%0#0"
      ]
    },
    "754": {
      "op": "frame_dig -3",
      "defined_out": [
        "game_id#0 (copy)",
        "materialized_values%0#0"
      ],
      "stack_out": [
        "first_place_receiver#0",
        "second_place_receiver#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "first_win_share#0",
        "second_win_share#0",
        "third_win_share#0",
        "materialized_values%0#0",
        "game_id#0 (copy)"
      ]
    },
    "756": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0",
        "materialized_values%0#0"
      ],
      "stack_out": [
        "first_place_receiver#0",
        "second_place_receiver#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "first_win_share#0",
        "second_win_share#0",
        "third_win_share#0",
        "materialized_values%0#0",
        "encoded_value%0#0"
      ]
    },
    "757": {
      "op": "frame_dig -1",
      "defined_out": [
        "box_game_players#0 (copy)",
        "encoded_value%0#0",
        "materialized_values%0#0"
      ],
      "stack_out": [
        "first_place_receiver#0",
        "second_place_receiver#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "first_win_share#0",
        "second_win_share#0",
        "third_win_share#0",
        "materialized_values%0#0",
        "encoded_value%0#0",
        "box_game_players#0 (copy)"
      ]
    },
    "759": {
      "op": "swap",
      "stack_out": [
        "first_place_receiver#0",
        "second_place_receiver#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "first_win_share#0",
        "second_win_share#0",
        "third_win_share#0",
        "materialized_values%0#0",
        "box_game_players#0 (copy)",
        "encoded_value%0#0"
      ]
    },
    "760": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0",
        "materialized_values%0#0"
      ],
      "stack_out": [
        "first_place_receiver#0",
        "second_place_receiver#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "first_win_share#0",
        "second_win_share#0",
        "third_win_share#0",
        "materialized_values%0#0",
        "box_prefixed_key%0#0"
      ]
    },
    "761": {
      "op": "dup",
      "defined_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)",
        "materialized_values%0#0"
      ],
      "stack_out": [
        "first_place_receiver#0",
        "second_place_receiver#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "first_win_share#0",
        "second_win_share#0",
        "third_win_share#0",
        "materialized_values%0#0",
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)"
      ]
    },
    "762": {
      "op": "box_del",
      "defined_out": [
        "box_prefixed_key%0#0",
        "materialized_values%0#0",
        "{box_del}"
      ],
      "stack_out": [
        "first_place_receiver#0",
        "second_place_receiver#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "first_win_share#0",
        "second_win_share#0",
        "third_win_share#0",
        "materialized_values%0#0",
        "box_prefixed_key%0#0",
        "{box_del}"
      ]
    },
    "763": {
      "op": "pop",
      "stack_out": [
        "first_place_receiver#0",
        "second_place_receiver#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "first_win_share#0",
        "second_win_share#0",
        "third_win_share#0",
        "materialized_values%0#0",
        "box_prefixed_key%0#0"
      ]
    },
    "764": {
      "op": "swap",
      "stack_out": [
        "first_place_receiver#0",
        "second_place_receiver#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "first_win_share#0",
        "second_win_share#0",
        "third_win_share#0",
        "box_prefixed_key%0#0",
        "materialized_values%0#0"
      ]
    },
    "765": {
      "op": "box_put",
      "stack_out": [
        "first_place_receiver#0",
        "second_place_receiver#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "first_win_share#0",
        "second_win_share#0",
        "third_win_share#0"
      ]
    },
    "766": {
      "op": "frame_dig -2",
      "stack_out": [
        "first_place_receiver#0",
        "second_place_receiver#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "first_win_share#0",
        "second_win_share#0",
        "third_win_share#0",
        "game_state#0 (copy)"
      ]
    },
    "768": {
      "op": "bytec_0 // 0x00",
      "defined_out": [
        "0x00",
        "game_state#0 (copy)"
      ],
      "stack_out": [
        "first_place_receiver#0",
        "second_place_receiver#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "first_win_share#0",
        "second_win_share#0",
        "third_win_share#0",
        "game_state#0 (copy)",
        "0x00"
      ]
    },
    "769": {
      "op": "replace2 2",
      "defined_out": [
        "game_state#0"
      ],
      "stack_out": [
        "first_place_receiver#0",
        "second_place_receiver#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "first_win_share#0",
        "second_win_share#0",
        "third_win_share#0",
        "game_state#0"
      ]
    },
    "771": {
      "op": "dup"
    },
    "772": {
      "op": "frame_bury -2",
      "stack_out": [
        "first_place_receiver#0",
        "second_place_receiver#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "first_win_share#0",
        "second_win_share#0",
        "third_win_share#0",
        "game_state#0 (copy)"
      ]
    },
    "774": {
      "error": "Index access is out of bounds",
      "op": "extract 3 1 // on error: Index access is out of bounds",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "first_place_receiver#0",
        "second_place_receiver#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "first_win_share#0",
        "second_win_share#0",
        "third_win_share#0",
        "tmp%9#0"
      ]
    },
    "777": {
      "op": "frame_dig -2",
      "stack_out": [
        "first_place_receiver#0",
        "second_place_receiver#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "first_win_share#0",
        "second_win_share#0",
        "third_win_share#0",
        "tmp%9#0",
        "game_state#0 (copy)"
      ]
    },
    "779": {
      "error": "Index access is out of bounds",
      "op": "extract 56 32 // on error: Index access is out of bounds",
      "defined_out": [
        "tmp%10#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "first_place_receiver#0",
        "second_place_receiver#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "first_win_share#0",
        "second_win_share#0",
        "third_win_share#0",
        "tmp%9#0",
        "tmp%10#0"
      ]
    },
    "782": {
      "op": "dup",
      "stack_out": [
        "first_place_receiver#0",
        "second_place_receiver#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "first_win_share#0",
        "second_win_share#0",
        "third_win_share#0",
        "tmp%9#0",
        "tmp%10#0",
        "tmp%10#0"
      ]
    },
    "783": {
      "op": "frame_bury 2",
      "defined_out": [
        "tmp%10#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "first_place_receiver#0",
        "second_place_receiver#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "first_win_share#0",
        "second_win_share#0",
        "third_win_share#0",
        "tmp%9#0",
        "tmp%10#0"
      ]
    },
    "785": {
      "op": "frame_dig -2",
      "stack_out": [
        "first_place_receiver#0",
        "second_place_receiver#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "first_win_share#0",
        "second_win_share#0",
        "third_win_share#0",
        "tmp%9#0",
        "tmp%10#0",
        "game_state#0 (copy)"
      ]
    },
    "787": {
      "error": "Index access is out of bounds",
      "op": "extract 88 32 // on error: Index access is out of bounds",
      "defined_out": [
        "tmp%10#0",
        "tmp%11#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "first_place_receiver#0",
        "second_place_receiver#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "first_win_share#0",
        "second_win_share#0",
        "third_win_share#0",
        "tmp%9#0",
        "tmp%10#0",
        "tmp%11#0"
      ]
    },
    "790": {
      "op": "dup",
      "stack_out": [
        "first_place_receiver#0",
        "second_place_receiver#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "first_win_share#0",
        "second_win_share#0",
        "third_win_share#0",
        "tmp%9#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%11#0 (copy)"
      ]
    },
    "791": {
      "op": "cover 2",
      "stack_out": [
        "first_place_receiver#0",
        "second_place_receiver#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "first_win_share#0",
        "second_win_share#0",
        "third_win_share#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%10#0",
        "tmp%11#0"
      ]
    },
    "793": {
      "op": "frame_bury 3",
      "stack_out": [
        "first_place_receiver#0",
        "second_place_receiver#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "first_win_share#0",
        "second_win_share#0",
        "third_win_share#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%10#0"
      ]
    },
    "795": {
      "op": "frame_dig -2",
      "stack_out": [
        "first_place_receiver#0",
        "second_place_receiver#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "first_win_share#0",
        "second_win_share#0",
        "third_win_share#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%10#0",
        "game_state#0 (copy)"
      ]
    },
    "797": {
      "error": "Index access is out of bounds",
      "op": "extract 120 32 // on error: Index access is out of bounds",
      "defined_out": [
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "first_place_receiver#0",
        "second_place_receiver#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "first_win_share#0",
        "second_win_share#0",
        "third_win_share#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%10#0",
        "tmp%12#0"
      ]
    },
    "800": {
      "op": "dup",
      "stack_out": [
        "first_place_receiver#0",
        "second_place_receiver#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "first_win_share#0",
        "second_win_share#0",
        "third_win_share#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%10#0",
        "tmp%12#0",
        "tmp%12#0 (copy)"
      ]
    },
    "801": {
      "op": "cover 4",
      "stack_out": [
        "first_place_receiver#0",
        "second_place_receiver#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "first_win_share#0",
        "second_win_share#0",
        "third_win_share#0",
        "tmp%12#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%10#0",
        "tmp%12#0"
      ]
    },
    "803": {
      "op": "frame_bury 4",
      "defined_out": [
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "first_place_receiver#0",
        "second_place_receiver#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "first_win_share#0",
        "second_win_share#0",
        "third_win_share#0",
        "tmp%12#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%10#0"
      ]
    },
    "805": {
      "op": "uncover 2",
      "stack_out": [
        "first_place_receiver#0",
        "second_place_receiver#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "first_win_share#0",
        "second_win_share#0",
        "third_win_share#0",
        "tmp%12#0",
        "tmp%11#0",
        "tmp%10#0",
        "tmp%9#0"
      ]
    },
    "807": {
      "op": "dig 1",
      "defined_out": [
        "tmp%10#0",
        "tmp%10#0 (copy)",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "first_place_receiver#0",
        "second_place_receiver#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "first_win_share#0",
        "second_win_share#0",
        "third_win_share#0",
        "tmp%12#0",
        "tmp%11#0",
        "tmp%10#0",
        "tmp%9#0",
        "tmp%10#0 (copy)"
      ]
    },
    "809": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "first_place_receiver#0",
        "second_place_receiver#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "first_win_share#0",
        "second_win_share#0",
        "third_win_share#0",
        "tmp%12#0",
        "tmp%11#0",
        "tmp%10#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "810": {
      "op": "uncover 2",
      "stack_out": [
        "first_place_receiver#0",
        "second_place_receiver#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "first_win_share#0",
        "second_win_share#0",
        "third_win_share#0",
        "tmp%12#0",
        "tmp%10#0",
        "encoded_tuple_buffer%2#0",
        "tmp%11#0"
      ]
    },
    "812": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "first_place_receiver#0",
        "second_place_receiver#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "first_win_share#0",
        "second_win_share#0",
        "third_win_share#0",
        "tmp%12#0",
        "tmp%10#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "813": {
      "op": "uncover 2",
      "stack_out": [
        "first_place_receiver#0",
        "second_place_receiver#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "first_win_share#0",
        "second_win_share#0",
        "third_win_share#0",
        "tmp%10#0",
        "encoded_tuple_buffer%3#0",
        "tmp%12#0"
      ]
    },
    "815": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%4#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "first_place_receiver#0",
        "second_place_receiver#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "first_win_share#0",
        "second_win_share#0",
        "third_win_share#0",
        "tmp%10#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "816": {
      "op": "pushbytes 0x410b2150 // method \"game_over(uint8,address,address,address)\"",
      "defined_out": [
        "Method(game_over(uint8,address,address,address))",
        "encoded_tuple_buffer%4#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "first_place_receiver#0",
        "second_place_receiver#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "first_win_share#0",
        "second_win_share#0",
        "third_win_share#0",
        "tmp%10#0",
        "encoded_tuple_buffer%4#0",
        "Method(game_over(uint8,address,address,address))"
      ]
    },
    "822": {
      "op": "swap",
      "stack_out": [
        "first_place_receiver#0",
        "second_place_receiver#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "first_win_share#0",
        "second_win_share#0",
        "third_win_share#0",
        "tmp%10#0",
        "Method(game_over(uint8,address,address,address))",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "823": {
      "op": "concat",
      "defined_out": [
        "event%0#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "first_place_receiver#0",
        "second_place_receiver#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "first_win_share#0",
        "second_win_share#0",
        "third_win_share#0",
        "tmp%10#0",
        "event%0#0"
      ]
    },
    "824": {
      "op": "log",
      "stack_out": [
        "first_place_receiver#0",
        "second_place_receiver#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "first_win_share#0",
        "second_win_share#0",
        "third_win_share#0",
        "tmp%10#0"
      ]
    },
    "825": {
      "op": "frame_dig -2",
      "stack_out": [
        "first_place_receiver#0",
        "second_place_receiver#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "first_win_share#0",
        "second_win_share#0",
        "third_win_share#0",
        "tmp%10#0",
        "game_state#0 (copy)"
      ]
    },
    "827": {
      "op": "pushint 16 // 16",
      "defined_out": [
        "16",
        "game_state#0 (copy)",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "first_place_receiver#0",
        "second_place_receiver#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "first_win_share#0",
        "second_win_share#0",
        "third_win_share#0",
        "tmp%10#0",
        "game_state#0 (copy)",
        "16"
      ]
    },
    "829": {
      "op": "extract_uint64",
      "defined_out": [
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "first_place_receiver#0",
        "second_place_receiver#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "first_win_share#0",
        "second_win_share#0",
        "third_win_share#0",
        "tmp%10#0",
        "tmp%14#0"
      ]
    },
    "830": {
      "op": "dup",
      "defined_out": [
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%14#0",
        "tmp%14#0 (copy)"
      ],
      "stack_out": [
        "first_place_receiver#0",
        "second_place_receiver#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "first_win_share#0",
        "second_win_share#0",
        "third_win_share#0",
        "tmp%10#0",
        "tmp%14#0",
        "tmp%14#0 (copy)"
      ]
    },
    "831": {
      "op": "pushint 50 // 50",
      "defined_out": [
        "50",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%14#0",
        "tmp%14#0 (copy)"
      ],
      "stack_out": [
        "first_place_receiver#0",
        "second_place_receiver#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "first_win_share#0",
        "second_win_share#0",
        "third_win_share#0",
        "tmp%10#0",
        "tmp%14#0",
        "tmp%14#0 (copy)",
        "50"
      ]
    },
    "833": {
      "op": "*",
      "defined_out": [
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%14#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "first_place_receiver#0",
        "second_place_receiver#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "first_win_share#0",
        "second_win_share#0",
        "third_win_share#0",
        "tmp%10#0",
        "tmp%14#0",
        "tmp%15#0"
      ]
    },
    "834": {
      "op": "pushint 100 // 100",
      "defined_out": [
        "100",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%14#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "first_place_receiver#0",
        "second_place_receiver#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "first_win_share#0",
        "second_win_share#0",
        "third_win_share#0",
        "tmp%10#0",
        "tmp%14#0",
        "tmp%15#0",
        "100"
      ]
    },
    "836": {
      "op": "/",
      "defined_out": [
        "first_win_share#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "first_place_receiver#0",
        "second_place_receiver#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "first_win_share#0",
        "second_win_share#0",
        "third_win_share#0",
        "tmp%10#0",
        "tmp%14#0",
        "first_win_share#0"
      ]
    },
    "837": {
      "op": "dup",
      "stack_out": [
        "first_place_receiver#0",
        "second_place_receiver#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "first_win_share#0",
        "second_win_share#0",
        "third_win_share#0",
        "tmp%10#0",
        "tmp%14#0",
        "first_win_share#0",
        "first_win_share#0 (copy)"
      ]
    },
    "838": {
      "op": "cover 2",
      "stack_out": [
        "first_place_receiver#0",
        "second_place_receiver#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "first_win_share#0",
        "second_win_share#0",
        "third_win_share#0",
        "tmp%10#0",
        "first_win_share#0",
        "tmp%14#0",
        "first_win_share#0"
      ]
    },
    "840": {
      "op": "frame_bury 5",
      "defined_out": [
        "first_win_share#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "first_place_receiver#0",
        "second_place_receiver#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "first_win_share#0",
        "second_win_share#0",
        "third_win_share#0",
        "tmp%10#0",
        "first_win_share#0",
        "tmp%14#0"
      ]
    },
    "842": {
      "op": "dup",
      "stack_out": [
        "first_place_receiver#0",
        "second_place_receiver#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "first_win_share#0",
        "second_win_share#0",
        "third_win_share#0",
        "tmp%10#0",
        "first_win_share#0",
        "tmp%14#0",
        "tmp%14#0 (copy)"
      ]
    },
    "843": {
      "op": "pushint 30 // 30",
      "defined_out": [
        "30",
        "first_win_share#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%14#0",
        "tmp%14#0 (copy)"
      ],
      "stack_out": [
        "first_place_receiver#0",
        "second_place_receiver#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "first_win_share#0",
        "second_win_share#0",
        "third_win_share#0",
        "tmp%10#0",
        "first_win_share#0",
        "tmp%14#0",
        "tmp%14#0 (copy)",
        "30"
      ]
    },
    "845": {
      "op": "*",
      "defined_out": [
        "first_win_share#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%14#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "first_place_receiver#0",
        "second_place_receiver#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "first_win_share#0",
        "second_win_share#0",
        "third_win_share#0",
        "tmp%10#0",
        "first_win_share#0",
        "tmp%14#0",
        "tmp%18#0"
      ]
    },
    "846": {
      "op": "pushint 100 // 100",
      "stack_out": [
        "first_place_receiver#0",
        "second_place_receiver#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "first_win_share#0",
        "second_win_share#0",
        "third_win_share#0",
        "tmp%10#0",
        "first_win_share#0",
        "tmp%14#0",
        "tmp%18#0",
        "100"
      ]
    },
    "848": {
      "op": "/",
      "defined_out": [
        "first_win_share#0",
        "second_win_share#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "first_place_receiver#0",
        "second_place_receiver#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "first_win_share#0",
        "second_win_share#0",
        "third_win_share#0",
        "tmp%10#0",
        "first_win_share#0",
        "tmp%14#0",
        "second_win_share#0"
      ]
    },
    "849": {
      "op": "dup",
      "stack_out": [
        "first_place_receiver#0",
        "second_place_receiver#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "first_win_share#0",
        "second_win_share#0",
        "third_win_share#0",
        "tmp%10#0",
        "first_win_share#0",
        "tmp%14#0",
        "second_win_share#0",
        "second_win_share#0"
      ]
    },
    "850": {
      "op": "frame_bury 6",
      "defined_out": [
        "first_win_share#0",
        "second_win_share#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "first_place_receiver#0",
        "second_place_receiver#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "first_win_share#0",
        "second_win_share#0",
        "third_win_share#0",
        "tmp%10#0",
        "first_win_share#0",
        "tmp%14#0",
        "second_win_share#0"
      ]
    },
    "852": {
      "op": "swap",
      "stack_out": [
        "first_place_receiver#0",
        "second_place_receiver#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "first_win_share#0",
        "second_win_share#0",
        "third_win_share#0",
        "tmp%10#0",
        "first_win_share#0",
        "second_win_share#0",
        "tmp%14#0"
      ]
    },
    "853": {
      "op": "uncover 2",
      "stack_out": [
        "first_place_receiver#0",
        "second_place_receiver#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "first_win_share#0",
        "second_win_share#0",
        "third_win_share#0",
        "tmp%10#0",
        "second_win_share#0",
        "tmp%14#0",
        "first_win_share#0"
      ]
    },
    "855": {
      "op": "-",
      "defined_out": [
        "first_win_share#0",
        "second_win_share#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "first_place_receiver#0",
        "second_place_receiver#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "first_win_share#0",
        "second_win_share#0",
        "third_win_share#0",
        "tmp%10#0",
        "second_win_share#0",
        "tmp%21#0"
      ]
    },
    "856": {
      "op": "swap",
      "stack_out": [
        "first_place_receiver#0",
        "second_place_receiver#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "first_win_share#0",
        "second_win_share#0",
        "third_win_share#0",
        "tmp%10#0",
        "tmp%21#0",
        "second_win_share#0"
      ]
    },
    "857": {
      "op": "-",
      "defined_out": [
        "first_win_share#0",
        "second_win_share#0",
        "third_win_share#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "first_place_receiver#0",
        "second_place_receiver#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "first_win_share#0",
        "second_win_share#0",
        "third_win_share#0",
        "tmp%10#0",
        "third_win_share#0"
      ]
    },
    "858": {
      "op": "frame_bury 7",
      "stack_out": [
        "first_place_receiver#0",
        "second_place_receiver#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "first_win_share#0",
        "second_win_share#0",
        "third_win_share#0",
        "tmp%10#0"
      ]
    },
    "860": {
      "op": "global ZeroAddress",
      "defined_out": [
        "first_win_share#0",
        "second_win_share#0",
        "third_win_share#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "first_place_receiver#0",
        "second_place_receiver#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "first_win_share#0",
        "second_win_share#0",
        "third_win_share#0",
        "tmp%10#0",
        "tmp%22#0"
      ]
    },
    "862": {
      "op": "!=",
      "defined_out": [
        "first_win_share#0",
        "second_win_share#0",
        "third_win_share#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "first_place_receiver#0",
        "second_place_receiver#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "first_win_share#0",
        "second_win_share#0",
        "third_win_share#0",
        "tmp%23#0"
      ]
    },
    "863": {
      "op": "bz is_game_over_ternary_false@6",
      "stack_out": [
        "first_place_receiver#0",
        "second_place_receiver#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "first_win_share#0",
        "second_win_share#0",
        "third_win_share#0"
      ]
    },
    "866": {
      "op": "frame_dig 2",
      "defined_out": [
        "first_place_receiver#0",
        "first_win_share#0",
        "second_win_share#0",
        "third_win_share#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "first_place_receiver#0",
        "second_place_receiver#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "first_win_share#0",
        "second_win_share#0",
        "third_win_share#0",
        "first_place_receiver#0"
      ]
    },
    "868": {
      "op": "frame_bury 0",
      "defined_out": [
        "first_place_receiver#0",
        "first_win_share#0",
        "second_win_share#0",
        "third_win_share#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "first_place_receiver#0",
        "second_place_receiver#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "first_win_share#0",
        "second_win_share#0",
        "third_win_share#0"
      ]
    },
    "870": {
      "block": "is_game_over_ternary_merge@7",
      "stack_in": [
        "first_place_receiver#0",
        "second_place_receiver#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "first_win_share#0",
        "second_win_share#0",
        "third_win_share#0"
      ],
      "op": "frame_dig 3",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "first_place_receiver#0",
        "second_place_receiver#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "first_win_share#0",
        "second_win_share#0",
        "third_win_share#0",
        "tmp%11#0"
      ]
    },
    "872": {
      "op": "global ZeroAddress",
      "defined_out": [
        "tmp%11#0",
        "tmp%24#0"
      ],
      "stack_out": [
        "first_place_receiver#0",
        "second_place_receiver#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "first_win_share#0",
        "second_win_share#0",
        "third_win_share#0",
        "tmp%11#0",
        "tmp%24#0"
      ]
    },
    "874": {
      "op": "!=",
      "defined_out": [
        "tmp%11#0",
        "tmp%25#0"
      ],
      "stack_out": [
        "first_place_receiver#0",
        "second_place_receiver#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "first_win_share#0",
        "second_win_share#0",
        "third_win_share#0",
        "tmp%25#0"
      ]
    },
    "875": {
      "op": "bz is_game_over_ternary_false@9",
      "stack_out": [
        "first_place_receiver#0",
        "second_place_receiver#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "first_win_share#0",
        "second_win_share#0",
        "third_win_share#0"
      ]
    },
    "878": {
      "op": "frame_dig 3",
      "defined_out": [
        "second_place_receiver#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "first_place_receiver#0",
        "second_place_receiver#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "first_win_share#0",
        "second_win_share#0",
        "third_win_share#0",
        "second_place_receiver#0"
      ]
    },
    "880": {
      "op": "frame_bury 1",
      "defined_out": [
        "second_place_receiver#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "first_place_receiver#0",
        "second_place_receiver#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "first_win_share#0",
        "second_win_share#0",
        "third_win_share#0"
      ]
    },
    "882": {
      "block": "is_game_over_ternary_merge@10",
      "stack_in": [
        "first_place_receiver#0",
        "second_place_receiver#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "first_win_share#0",
        "second_win_share#0",
        "third_win_share#0"
      ],
      "op": "frame_dig 4",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "first_place_receiver#0",
        "second_place_receiver#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "first_win_share#0",
        "second_win_share#0",
        "third_win_share#0",
        "tmp%12#0"
      ]
    },
    "884": {
      "op": "global ZeroAddress",
      "defined_out": [
        "tmp%12#0",
        "tmp%26#0"
      ],
      "stack_out": [
        "first_place_receiver#0",
        "second_place_receiver#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "first_win_share#0",
        "second_win_share#0",
        "third_win_share#0",
        "tmp%12#0",
        "tmp%26#0"
      ]
    },
    "886": {
      "op": "!=",
      "defined_out": [
        "tmp%12#0",
        "tmp%27#0"
      ],
      "stack_out": [
        "first_place_receiver#0",
        "second_place_receiver#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "first_win_share#0",
        "second_win_share#0",
        "third_win_share#0",
        "tmp%27#0"
      ]
    },
    "887": {
      "op": "bz is_game_over_ternary_false@12",
      "stack_out": [
        "first_place_receiver#0",
        "second_place_receiver#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "first_win_share#0",
        "second_win_share#0",
        "third_win_share#0"
      ]
    },
    "890": {
      "op": "frame_dig 4",
      "defined_out": [
        "third_place_receiver#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "first_place_receiver#0",
        "second_place_receiver#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "first_win_share#0",
        "second_win_share#0",
        "third_win_share#0",
        "third_place_receiver#0"
      ]
    },
    "892": {
      "block": "is_game_over_ternary_merge@13",
      "stack_in": [
        "first_place_receiver#0",
        "second_place_receiver#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "first_win_share#0",
        "second_win_share#0",
        "third_win_share#0",
        "third_place_receiver#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "first_place_receiver#0"
      ],
      "stack_out": [
        "first_place_receiver#0",
        "second_place_receiver#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "first_win_share#0",
        "second_win_share#0",
        "third_win_share#0",
        "third_place_receiver#0",
        "first_place_receiver#0"
      ]
    },
    "894": {
      "op": "frame_dig 5",
      "defined_out": [
        "first_place_receiver#0",
        "first_win_share#0"
      ],
      "stack_out": [
        "first_place_receiver#0",
        "second_place_receiver#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "first_win_share#0",
        "second_win_share#0",
        "third_win_share#0",
        "third_place_receiver#0",
        "first_place_receiver#0",
        "first_win_share#0"
      ]
    },
    "896": {
      "op": "pushbytes \"sender:app_address,reciever:first_place_address,concern:prize_pool_first_win_share_payout\"",
      "defined_out": [
        "\"sender:app_address,reciever:first_place_address,concern:prize_pool_first_win_share_payout\"",
        "first_place_receiver#0",
        "first_win_share#0"
      ],
      "stack_out": [
        "first_place_receiver#0",
        "second_place_receiver#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "first_win_share#0",
        "second_win_share#0",
        "third_win_share#0",
        "third_place_receiver#0",
        "first_place_receiver#0",
        "first_win_share#0",
        "\"sender:app_address,reciever:first_place_address,concern:prize_pool_first_win_share_payout\""
      ]
    },
    "987": {
      "callsub": "smart_contracts.pieout.subroutines.payout_itxn",
      "op": "callsub payout_itxn",
      "stack_out": [
        "first_place_receiver#0",
        "second_place_receiver#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "first_win_share#0",
        "second_win_share#0",
        "third_win_share#0",
        "third_place_receiver#0"
      ]
    },
    "990": {
      "op": "frame_dig 1",
      "defined_out": [
        "first_place_receiver#0",
        "first_win_share#0",
        "second_place_receiver#0"
      ],
      "stack_out": [
        "first_place_receiver#0",
        "second_place_receiver#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "first_win_share#0",
        "second_win_share#0",
        "third_win_share#0",
        "third_place_receiver#0",
        "second_place_receiver#0"
      ]
    },
    "992": {
      "op": "frame_dig 6",
      "defined_out": [
        "first_place_receiver#0",
        "first_win_share#0",
        "second_place_receiver#0",
        "second_win_share#0"
      ],
      "stack_out": [
        "first_place_receiver#0",
        "second_place_receiver#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "first_win_share#0",
        "second_win_share#0",
        "third_win_share#0",
        "third_place_receiver#0",
        "second_place_receiver#0",
        "second_win_share#0"
      ]
    },
    "994": {
      "op": "pushbytes \"sender:app_address,reciever:second_place_address,concern:prize_pool_second_win_share_payout\"",
      "defined_out": [
        "\"sender:app_address,reciever:second_place_address,concern:prize_pool_second_win_share_payout\"",
        "first_place_receiver#0",
        "first_win_share#0",
        "second_place_receiver#0",
        "second_win_share#0"
      ],
      "stack_out": [
        "first_place_receiver#0",
        "second_place_receiver#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "first_win_share#0",
        "second_win_share#0",
        "third_win_share#0",
        "third_place_receiver#0",
        "second_place_receiver#0",
        "second_win_share#0",
        "\"sender:app_address,reciever:second_place_address,concern:prize_pool_second_win_share_payout\""
      ]
    },
    "1087": {
      "callsub": "smart_contracts.pieout.subroutines.payout_itxn",
      "op": "callsub payout_itxn",
      "defined_out": [
        "first_place_receiver#0",
        "first_win_share#0",
        "second_place_receiver#0",
        "second_win_share#0",
        "third_place_receiver#0"
      ],
      "stack_out": [
        "first_place_receiver#0",
        "second_place_receiver#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "first_win_share#0",
        "second_win_share#0",
        "third_win_share#0",
        "third_place_receiver#0"
      ]
    },
    "1090": {
      "op": "frame_dig 7",
      "defined_out": [
        "first_place_receiver#0",
        "first_win_share#0",
        "second_place_receiver#0",
        "second_win_share#0",
        "third_place_receiver#0",
        "third_win_share#0"
      ],
      "stack_out": [
        "first_place_receiver#0",
        "second_place_receiver#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "first_win_share#0",
        "second_win_share#0",
        "third_win_share#0",
        "third_place_receiver#0",
        "third_win_share#0"
      ]
    },
    "1092": {
      "op": "pushbytes \"sender:app_address,reciever:third_place_address,concern:prize_pool_third_win_share_payout\"",
      "defined_out": [
        "\"sender:app_address,reciever:third_place_address,concern:prize_pool_third_win_share_payout\"",
        "first_place_receiver#0",
        "first_win_share#0",
        "second_place_receiver#0",
        "second_win_share#0",
        "third_place_receiver#0",
        "third_win_share#0"
      ],
      "stack_out": [
        "first_place_receiver#0",
        "second_place_receiver#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "first_win_share#0",
        "second_win_share#0",
        "third_win_share#0",
        "third_place_receiver#0",
        "third_win_share#0",
        "\"sender:app_address,reciever:third_place_address,concern:prize_pool_third_win_share_payout\""
      ]
    },
    "1183": {
      "callsub": "smart_contracts.pieout.subroutines.payout_itxn",
      "op": "callsub payout_itxn",
      "stack_out": [
        "first_place_receiver#0",
        "second_place_receiver#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "first_win_share#0",
        "second_win_share#0",
        "third_win_share#0"
      ]
    },
    "1186": {
      "op": "frame_dig -2",
      "defined_out": [
        "first_place_receiver#0",
        "first_win_share#0",
        "game_state#0 (copy)",
        "second_place_receiver#0",
        "second_win_share#0",
        "third_win_share#0"
      ],
      "stack_out": [
        "first_place_receiver#0",
        "second_place_receiver#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "first_win_share#0",
        "second_win_share#0",
        "third_win_share#0",
        "game_state#0 (copy)"
      ]
    },
    "1188": {
      "op": "bytec 7 // 0x0000000000000000",
      "defined_out": [
        "0x0000000000000000",
        "first_place_receiver#0",
        "first_win_share#0",
        "game_state#0 (copy)",
        "second_place_receiver#0",
        "second_win_share#0",
        "third_win_share#0"
      ],
      "stack_out": [
        "first_place_receiver#0",
        "second_place_receiver#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "first_win_share#0",
        "second_win_share#0",
        "third_win_share#0",
        "game_state#0 (copy)",
        "0x0000000000000000"
      ]
    },
    "1190": {
      "op": "replace2 16",
      "defined_out": [
        "first_place_receiver#0",
        "first_win_share#0",
        "game_state#0",
        "second_place_receiver#0",
        "second_win_share#0",
        "third_win_share#0"
      ],
      "stack_out": [
        "first_place_receiver#0",
        "second_place_receiver#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "first_win_share#0",
        "second_win_share#0",
        "third_win_share#0",
        "game_state#0"
      ]
    },
    "1192": {
      "op": "frame_bury -2",
      "stack_out": [
        "first_place_receiver#0",
        "second_place_receiver#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "first_win_share#0",
        "second_win_share#0",
        "third_win_share#0"
      ]
    },
    "1194": {
      "op": "pushbytes 0x80",
      "defined_out": [
        "0x80",
        "first_place_receiver#0",
        "first_win_share#0",
        "second_place_receiver#0",
        "second_win_share#0",
        "third_win_share#0"
      ],
      "stack_out": [
        "first_place_receiver#0",
        "second_place_receiver#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "first_win_share#0",
        "second_win_share#0",
        "third_win_share#0",
        "0x80"
      ]
    },
    "1197": {
      "op": "frame_dig -2",
      "stack_out": [
        "first_place_receiver#0",
        "second_place_receiver#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "first_win_share#0",
        "second_win_share#0",
        "third_win_share#0",
        "0x80",
        "game_state#0 (copy)"
      ]
    },
    "1199": {
      "op": "frame_bury 1"
    },
    "1201": {
      "op": "frame_bury 0"
    },
    "1203": {
      "retsub": true,
      "op": "retsub"
    },
    "1204": {
      "block": "is_game_over_ternary_false@12",
      "stack_in": [
        "first_place_receiver#0",
        "second_place_receiver#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "first_win_share#0",
        "second_win_share#0",
        "third_win_share#0"
      ],
      "op": "frame_dig -2",
      "defined_out": [
        "game_state#0 (copy)"
      ],
      "stack_out": [
        "first_place_receiver#0",
        "second_place_receiver#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "first_win_share#0",
        "second_win_share#0",
        "third_win_share#0",
        "game_state#0 (copy)"
      ]
    },
    "1206": {
      "error": "Index access is out of bounds",
      "op": "extract 24 32 // on error: Index access is out of bounds",
      "defined_out": [
        "third_place_receiver#0"
      ],
      "stack_out": [
        "first_place_receiver#0",
        "second_place_receiver#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "first_win_share#0",
        "second_win_share#0",
        "third_win_share#0",
        "third_place_receiver#0"
      ]
    },
    "1209": {
      "op": "b is_game_over_ternary_merge@13"
    },
    "1212": {
      "block": "is_game_over_ternary_false@9",
      "stack_in": [
        "first_place_receiver#0",
        "second_place_receiver#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "first_win_share#0",
        "second_win_share#0",
        "third_win_share#0"
      ],
      "op": "frame_dig -2",
      "defined_out": [
        "game_state#0 (copy)"
      ],
      "stack_out": [
        "first_place_receiver#0",
        "second_place_receiver#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "first_win_share#0",
        "second_win_share#0",
        "third_win_share#0",
        "game_state#0 (copy)"
      ]
    },
    "1214": {
      "error": "Index access is out of bounds",
      "op": "extract 24 32 // on error: Index access is out of bounds",
      "defined_out": [
        "second_place_receiver#0"
      ],
      "stack_out": [
        "first_place_receiver#0",
        "second_place_receiver#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "first_win_share#0",
        "second_win_share#0",
        "third_win_share#0",
        "second_place_receiver#0"
      ]
    },
    "1217": {
      "op": "frame_bury 1",
      "defined_out": [
        "second_place_receiver#0"
      ],
      "stack_out": [
        "first_place_receiver#0",
        "second_place_receiver#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "first_win_share#0",
        "second_win_share#0",
        "third_win_share#0"
      ]
    },
    "1219": {
      "op": "b is_game_over_ternary_merge@10"
    },
    "1222": {
      "block": "is_game_over_ternary_false@6",
      "stack_in": [
        "first_place_receiver#0",
        "second_place_receiver#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "first_win_share#0",
        "second_win_share#0",
        "third_win_share#0"
      ],
      "op": "frame_dig -2",
      "defined_out": [
        "game_state#0 (copy)"
      ],
      "stack_out": [
        "first_place_receiver#0",
        "second_place_receiver#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "first_win_share#0",
        "second_win_share#0",
        "third_win_share#0",
        "game_state#0 (copy)"
      ]
    },
    "1224": {
      "error": "Index access is out of bounds",
      "op": "extract 24 32 // on error: Index access is out of bounds",
      "defined_out": [
        "first_place_receiver#0"
      ],
      "stack_out": [
        "first_place_receiver#0",
        "second_place_receiver#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "first_win_share#0",
        "second_win_share#0",
        "third_win_share#0",
        "first_place_receiver#0"
      ]
    },
    "1227": {
      "op": "frame_bury 0",
      "defined_out": [
        "first_place_receiver#0"
      ],
      "stack_out": [
        "first_place_receiver#0",
        "second_place_receiver#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "first_win_share#0",
        "second_win_share#0",
        "third_win_share#0"
      ]
    },
    "1229": {
      "op": "b is_game_over_ternary_merge@7"
    },
    "1232": {
      "block": "is_game_over_else_body@16",
      "stack_in": [
        "first_place_receiver#0",
        "second_place_receiver#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "first_win_share#0",
        "second_win_share#0",
        "third_win_share#0"
      ],
      "op": "bytec_0 // 0x00",
      "defined_out": [
        "0x00"
      ],
      "stack_out": [
        "first_place_receiver#0",
        "second_place_receiver#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "first_win_share#0",
        "second_win_share#0",
        "third_win_share#0",
        "0x00"
      ]
    },
    "1233": {
      "op": "frame_dig -2",
      "defined_out": [
        "0x00",
        "game_state#0 (copy)"
      ],
      "stack_out": [
        "first_place_receiver#0",
        "second_place_receiver#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "first_win_share#0",
        "second_win_share#0",
        "third_win_share#0",
        "0x00",
        "game_state#0 (copy)"
      ]
    },
    "1235": {
      "op": "frame_bury 1"
    },
    "1237": {
      "op": "frame_bury 0"
    },
    "1239": {
      "retsub": true,
      "op": "retsub"
    },
    "1240": {
      "subroutine": "smart_contracts.pieout.contract.Pieout.calc_single_box_fee",
      "params": {
        "key_size#0": "bytes",
        "value_size#0": "bytes"
      },
      "block": "calc_single_box_fee",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "1243": {
      "op": "frame_dig -2",
      "defined_out": [
        "key_size#0 (copy)"
      ],
      "stack_out": [
        "key_size#0 (copy)"
      ]
    },
    "1245": {
      "op": "btoi",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1246": {
      "op": "frame_dig -1",
      "defined_out": [
        "tmp%1#0",
        "value_size#0 (copy)"
      ],
      "stack_out": [
        "tmp%1#0",
        "value_size#0 (copy)"
      ]
    },
    "1248": {
      "op": "btoi",
      "defined_out": [
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "1249": {
      "op": "+",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1250": {
      "op": "pushint 400 // 400",
      "defined_out": [
        "400",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "400"
      ]
    },
    "1253": {
      "op": "*",
      "defined_out": [
        "size_fee#0"
      ],
      "stack_out": [
        "size_fee#0"
      ]
    },
    "1254": {
      "op": "pushint 2500 // 2500",
      "defined_out": [
        "2500",
        "size_fee#0"
      ],
      "stack_out": [
        "size_fee#0",
        "2500"
      ]
    },
    "1257": {
      "op": "+",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "1258": {
      "retsub": true,
      "op": "retsub"
    },
    "1259": {
      "subroutine": "smart_contracts.pieout.contract.Pieout.read_game_state",
      "params": {
        "game_id#0": "uint64"
      },
      "block": "read_game_state",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "1262": {
      "op": "frame_dig -1",
      "defined_out": [
        "game_id#0 (copy)"
      ],
      "stack_out": [
        "game_id#0 (copy)"
      ]
    },
    "1264": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "1265": {
      "op": "bytec 4 // \"s_\"",
      "defined_out": [
        "\"s_\"",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "\"s_\""
      ]
    },
    "1267": {
      "op": "dig 1",
      "defined_out": [
        "\"s_\"",
        "encoded_value%0#0",
        "encoded_value%0#0 (copy)"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "\"s_\"",
        "encoded_value%0#0 (copy)"
      ]
    },
    "1269": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0"
      ]
    },
    "1270": {
      "op": "box_get",
      "defined_out": [
        "encoded_value%0#0",
        "game_state#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "game_state#0",
        "maybe_exists%0#0"
      ]
    },
    "1271": {
      "error": "check self.box_game_state entry exists",
      "op": "assert // check self.box_game_state entry exists",
      "stack_out": [
        "encoded_value%0#0",
        "game_state#0"
      ]
    },
    "1272": {
      "op": "dup",
      "defined_out": [
        "encoded_value%0#0",
        "game_state#0",
        "game_state#0 (copy)"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "game_state#0",
        "game_state#0 (copy)"
      ]
    },
    "1273": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#0 (copy)"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "game_state#0",
        "game_state#0 (copy)",
        "0"
      ]
    },
    "1274": {
      "op": "getbit",
      "defined_out": [
        "encoded_value%0#0",
        "game_state#0",
        "is_true%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "game_state#0",
        "is_true%0#0"
      ]
    },
    "1275": {
      "op": "bytec_0 // 0x00",
      "defined_out": [
        "0x00",
        "encoded_value%0#0",
        "game_state#0",
        "is_true%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "game_state#0",
        "is_true%0#0",
        "0x00"
      ]
    },
    "1276": {
      "op": "intc_1 // 0",
      "stack_out": [
        "encoded_value%0#0",
        "game_state#0",
        "is_true%0#0",
        "0x00",
        "0"
      ]
    },
    "1277": {
      "op": "uncover 2",
      "stack_out": [
        "encoded_value%0#0",
        "game_state#0",
        "0x00",
        "0",
        "is_true%0#0"
      ]
    },
    "1279": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "game_state#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "game_state#0",
        "encoded_bool%0#0"
      ]
    },
    "1280": {
      "op": "dig 1",
      "stack_out": [
        "encoded_value%0#0",
        "game_state#0",
        "encoded_bool%0#0",
        "game_state#0 (copy)"
      ]
    },
    "1282": {
      "error": "Index access is out of bounds",
      "op": "extract 1 1 // on error: Index access is out of bounds",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "game_state#0",
        "encoded_bool%0#0",
        "tmp%0#0"
      ]
    },
    "1285": {
      "op": "dig 2",
      "stack_out": [
        "encoded_value%0#0",
        "game_state#0",
        "encoded_bool%0#0",
        "tmp%0#0",
        "game_state#0 (copy)"
      ]
    },
    "1287": {
      "error": "Index access is out of bounds",
      "op": "extract 2 1 // on error: Index access is out of bounds",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "game_state#0",
        "encoded_bool%0#0",
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "1290": {
      "op": "dig 3",
      "stack_out": [
        "encoded_value%0#0",
        "game_state#0",
        "encoded_bool%0#0",
        "tmp%0#0",
        "tmp%1#0",
        "game_state#0 (copy)"
      ]
    },
    "1292": {
      "error": "Index access is out of bounds",
      "op": "extract 3 1 // on error: Index access is out of bounds",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "game_state#0",
        "encoded_bool%0#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "1295": {
      "op": "dig 4",
      "stack_out": [
        "encoded_value%0#0",
        "game_state#0",
        "encoded_bool%0#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "game_state#0 (copy)"
      ]
    },
    "1297": {
      "error": "Index access is out of bounds",
      "op": "extract 4 1 // on error: Index access is out of bounds",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "game_state#0",
        "encoded_bool%0#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "1300": {
      "op": "dig 5",
      "stack_out": [
        "encoded_value%0#0",
        "game_state#0",
        "encoded_bool%0#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0",
        "game_state#0 (copy)"
      ]
    },
    "1302": {
      "error": "Index access is out of bounds",
      "op": "extract 5 1 // on error: Index access is out of bounds",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "game_state#0",
        "encoded_bool%0#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0"
      ]
    },
    "1305": {
      "op": "dig 6",
      "stack_out": [
        "encoded_value%0#0",
        "game_state#0",
        "encoded_bool%0#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0",
        "game_state#0 (copy)"
      ]
    },
    "1307": {
      "error": "Index access is out of bounds",
      "op": "extract 6 2 // on error: Index access is out of bounds",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "game_state#0",
        "encoded_bool%0#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "1310": {
      "op": "dig 7",
      "stack_out": [
        "encoded_value%0#0",
        "game_state#0",
        "encoded_bool%0#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "game_state#0 (copy)"
      ]
    },
    "1312": {
      "error": "Index access is out of bounds",
      "op": "extract 8 8 // on error: Index access is out of bounds",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "game_state#0",
        "encoded_bool%0#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0"
      ]
    },
    "1315": {
      "op": "dig 8",
      "stack_out": [
        "encoded_value%0#0",
        "game_state#0",
        "encoded_bool%0#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "game_state#0 (copy)"
      ]
    },
    "1317": {
      "error": "Index access is out of bounds",
      "op": "extract 16 8 // on error: Index access is out of bounds",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "game_state#0",
        "encoded_bool%0#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0"
      ]
    },
    "1320": {
      "op": "dig 9",
      "stack_out": [
        "encoded_value%0#0",
        "game_state#0",
        "encoded_bool%0#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0",
        "game_state#0 (copy)"
      ]
    },
    "1322": {
      "error": "Index access is out of bounds",
      "op": "extract 24 32 // on error: Index access is out of bounds",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "game_state#0",
        "encoded_bool%0#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0"
      ]
    },
    "1325": {
      "op": "dig 10",
      "stack_out": [
        "encoded_value%0#0",
        "game_state#0",
        "encoded_bool%0#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0",
        "game_state#0 (copy)"
      ]
    },
    "1327": {
      "error": "Index access is out of bounds",
      "op": "extract 56 32 // on error: Index access is out of bounds",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "game_state#0",
        "encoded_bool%0#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "1330": {
      "op": "dig 11",
      "stack_out": [
        "encoded_value%0#0",
        "game_state#0",
        "encoded_bool%0#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0",
        "game_state#0 (copy)"
      ]
    },
    "1332": {
      "error": "Index access is out of bounds",
      "op": "extract 88 32 // on error: Index access is out of bounds",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%10#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "game_state#0",
        "encoded_bool%0#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0",
        "tmp%10#0"
      ]
    },
    "1335": {
      "op": "uncover 12",
      "stack_out": [
        "encoded_value%0#0",
        "encoded_bool%0#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0",
        "tmp%10#0",
        "game_state#0"
      ]
    },
    "1337": {
      "error": "Index access is out of bounds",
      "op": "extract 120 32 // on error: Index access is out of bounds",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_bool%0#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0",
        "tmp%10#0",
        "tmp%11#0"
      ]
    },
    "1340": {
      "op": "uncover 13",
      "stack_out": [
        "encoded_bool%0#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0",
        "tmp%10#0",
        "tmp%11#0",
        "encoded_value%0#0"
      ]
    },
    "1342": {
      "op": "uncover 13",
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0",
        "tmp%10#0",
        "tmp%11#0",
        "encoded_value%0#0",
        "encoded_bool%0#0"
      ]
    },
    "1344": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0",
        "tmp%10#0",
        "tmp%11#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "1345": {
      "op": "uncover 12",
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0",
        "tmp%10#0",
        "tmp%11#0",
        "encoded_tuple_buffer%2#0",
        "tmp%0#0"
      ]
    },
    "1347": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "tmp%1#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0",
        "tmp%10#0",
        "tmp%11#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "1348": {
      "op": "uncover 11",
      "stack_out": [
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0",
        "tmp%10#0",
        "tmp%11#0",
        "encoded_tuple_buffer%3#0",
        "tmp%1#0"
      ]
    },
    "1350": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%4#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0",
        "tmp%10#0",
        "tmp%11#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "1351": {
      "op": "uncover 10",
      "stack_out": [
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0",
        "tmp%10#0",
        "tmp%11#0",
        "encoded_tuple_buffer%4#0",
        "tmp%2#0"
      ]
    },
    "1353": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%5#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0",
        "tmp%10#0",
        "tmp%11#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "1354": {
      "op": "uncover 9",
      "stack_out": [
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0",
        "tmp%10#0",
        "tmp%11#0",
        "encoded_tuple_buffer%5#0",
        "tmp%3#0"
      ]
    },
    "1356": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%6#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0",
        "tmp%10#0",
        "tmp%11#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "1357": {
      "op": "uncover 8",
      "stack_out": [
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0",
        "tmp%10#0",
        "tmp%11#0",
        "encoded_tuple_buffer%6#0",
        "tmp%4#0"
      ]
    },
    "1359": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%7#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0",
        "tmp%10#0",
        "tmp%11#0",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "1360": {
      "op": "uncover 7",
      "stack_out": [
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0",
        "tmp%10#0",
        "tmp%11#0",
        "encoded_tuple_buffer%7#0",
        "tmp%5#0"
      ]
    },
    "1362": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%8#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0",
        "tmp%10#0",
        "tmp%11#0",
        "encoded_tuple_buffer%8#0"
      ]
    },
    "1363": {
      "op": "uncover 6",
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0",
        "tmp%10#0",
        "tmp%11#0",
        "encoded_tuple_buffer%8#0",
        "tmp%6#0"
      ]
    },
    "1365": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%9#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0",
        "tmp%10#0",
        "tmp%11#0",
        "encoded_tuple_buffer%9#0"
      ]
    },
    "1366": {
      "op": "uncover 5",
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0",
        "tmp%10#0",
        "tmp%11#0",
        "encoded_tuple_buffer%9#0",
        "tmp%7#0"
      ]
    },
    "1368": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%10#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0",
        "tmp%10#0",
        "tmp%11#0",
        "encoded_tuple_buffer%10#0"
      ]
    },
    "1369": {
      "op": "uncover 4",
      "stack_out": [
        "tmp%9#0",
        "tmp%10#0",
        "tmp%11#0",
        "encoded_tuple_buffer%10#0",
        "tmp%8#0"
      ]
    },
    "1371": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%11#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%10#0",
        "tmp%11#0",
        "encoded_tuple_buffer%11#0"
      ]
    },
    "1372": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%10#0",
        "tmp%11#0",
        "encoded_tuple_buffer%11#0",
        "tmp%9#0"
      ]
    },
    "1374": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%12#0",
        "tmp%10#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%11#0",
        "encoded_tuple_buffer%12#0"
      ]
    },
    "1375": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%11#0",
        "encoded_tuple_buffer%12#0",
        "tmp%10#0"
      ]
    },
    "1377": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%13#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0",
        "encoded_tuple_buffer%13#0"
      ]
    },
    "1378": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%13#0",
        "tmp%11#0"
      ]
    },
    "1379": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%14#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%14#0"
      ]
    },
    "1380": {
      "retsub": true,
      "op": "retsub"
    },
    "1381": {
      "subroutine": "smart_contracts.pieout.contract.Pieout.read_game_players",
      "params": {
        "game_id#0": "uint64"
      },
      "block": "read_game_players",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "1384": {
      "op": "intc_1 // 0",
      "stack_out": [
        "player_addr_bytes#0"
      ]
    },
    "1385": {
      "op": "dup",
      "stack_out": [
        "player_addr_bytes#0",
        "players#9"
      ]
    },
    "1386": {
      "op": "frame_dig -1",
      "defined_out": [
        "game_id#0 (copy)"
      ],
      "stack_out": [
        "player_addr_bytes#0",
        "players#9",
        "game_id#0 (copy)"
      ]
    },
    "1388": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "player_addr_bytes#0",
        "players#9",
        "encoded_value%0#0"
      ]
    },
    "1389": {
      "op": "bytec_1 // \"p_\"",
      "defined_out": [
        "\"p_\"",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "player_addr_bytes#0",
        "players#9",
        "encoded_value%0#0",
        "\"p_\""
      ]
    },
    "1390": {
      "op": "swap",
      "stack_out": [
        "player_addr_bytes#0",
        "players#9",
        "\"p_\"",
        "encoded_value%0#0"
      ]
    },
    "1391": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "player_addr_bytes#0",
        "players#9",
        "box_prefixed_key%0#0"
      ]
    },
    "1392": {
      "op": "box_get",
      "defined_out": [
        "game_players#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "player_addr_bytes#0",
        "players#9",
        "game_players#0",
        "maybe_exists%0#0"
      ]
    },
    "1393": {
      "op": "swap",
      "stack_out": [
        "player_addr_bytes#0",
        "players#9",
        "maybe_exists%0#0",
        "game_players#0"
      ]
    },
    "1394": {
      "op": "dup",
      "stack_out": [
        "player_addr_bytes#0",
        "players#9",
        "maybe_exists%0#0",
        "game_players#0",
        "game_players#0 (copy)"
      ]
    },
    "1395": {
      "op": "uncover 2",
      "defined_out": [
        "game_players#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "player_addr_bytes#0",
        "players#9",
        "game_players#0",
        "game_players#0",
        "maybe_exists%0#0"
      ]
    },
    "1397": {
      "error": "check self.box_game_players entry exists",
      "op": "assert // check self.box_game_players entry exists",
      "stack_out": [
        "player_addr_bytes#0",
        "players#9",
        "game_players#0",
        "game_players#0"
      ]
    },
    "1398": {
      "op": "pushbytes 0x0000",
      "defined_out": [
        "game_players#0",
        "players#0"
      ],
      "stack_out": [
        "player_addr_bytes#0",
        "players#9",
        "game_players#0",
        "game_players#0",
        "players#0"
      ]
    },
    "1402": {
      "op": "swap",
      "stack_out": [
        "player_addr_bytes#0",
        "players#9",
        "game_players#0",
        "players#0",
        "game_players#0"
      ]
    },
    "1403": {
      "op": "len",
      "defined_out": [
        "game_players#0",
        "players#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "player_addr_bytes#0",
        "players#9",
        "game_players#0",
        "players#0",
        "tmp%0#0"
      ]
    },
    "1404": {
      "op": "intc_1 // 0",
      "defined_out": [
        "game_players#0",
        "i#0",
        "players#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "player_addr_bytes#0",
        "players#9",
        "game_players#0",
        "players#0",
        "tmp%0#0",
        "i#0"
      ]
    },
    "1405": {
      "block": "read_game_players_for_header@1",
      "stack_in": [
        "player_addr_bytes#0",
        "players#9",
        "game_players#0",
        "players#0",
        "tmp%0#0",
        "i#0"
      ],
      "op": "frame_dig 5",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "player_addr_bytes#0",
        "players#9",
        "game_players#0",
        "players#0",
        "tmp%0#0",
        "i#0",
        "i#0"
      ]
    },
    "1407": {
      "op": "frame_dig 4",
      "defined_out": [
        "i#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "player_addr_bytes#0",
        "players#9",
        "game_players#0",
        "players#0",
        "tmp%0#0",
        "i#0",
        "i#0",
        "tmp%0#0"
      ]
    },
    "1409": {
      "op": "<",
      "defined_out": [
        "continue_looping%0#0",
        "i#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "player_addr_bytes#0",
        "players#9",
        "game_players#0",
        "players#0",
        "tmp%0#0",
        "i#0",
        "continue_looping%0#0"
      ]
    },
    "1410": {
      "op": "bz read_game_players_after_for@6",
      "stack_out": [
        "player_addr_bytes#0",
        "players#9",
        "game_players#0",
        "players#0",
        "tmp%0#0",
        "i#0"
      ]
    },
    "1413": {
      "op": "frame_dig 2",
      "defined_out": [
        "game_players#0",
        "i#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "player_addr_bytes#0",
        "players#9",
        "game_players#0",
        "players#0",
        "tmp%0#0",
        "i#0",
        "game_players#0"
      ]
    },
    "1415": {
      "op": "frame_dig 5",
      "stack_out": [
        "player_addr_bytes#0",
        "players#9",
        "game_players#0",
        "players#0",
        "tmp%0#0",
        "i#0",
        "game_players#0",
        "i#0"
      ]
    },
    "1417": {
      "op": "intc_3 // 32",
      "defined_out": [
        "32",
        "game_players#0",
        "i#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "player_addr_bytes#0",
        "players#9",
        "game_players#0",
        "players#0",
        "tmp%0#0",
        "i#0",
        "game_players#0",
        "i#0",
        "32"
      ]
    },
    "1418": {
      "op": "extract3",
      "defined_out": [
        "game_players#0",
        "i#0",
        "player_addr_bytes#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "player_addr_bytes#0",
        "players#9",
        "game_players#0",
        "players#0",
        "tmp%0#0",
        "i#0",
        "player_addr_bytes#0"
      ]
    },
    "1419": {
      "op": "dup",
      "stack_out": [
        "player_addr_bytes#0",
        "players#9",
        "game_players#0",
        "players#0",
        "tmp%0#0",
        "i#0",
        "player_addr_bytes#0",
        "player_addr_bytes#0"
      ]
    },
    "1420": {
      "op": "frame_bury 0",
      "defined_out": [
        "game_players#0",
        "i#0",
        "player_addr_bytes#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "player_addr_bytes#0",
        "players#9",
        "game_players#0",
        "players#0",
        "tmp%0#0",
        "i#0",
        "player_addr_bytes#0"
      ]
    },
    "1422": {
      "op": "bytec 11 // 0x0000000000000000000000000000000000000000000000000000000000000000",
      "defined_out": [
        "0x0000000000000000000000000000000000000000000000000000000000000000",
        "game_players#0",
        "i#0",
        "player_addr_bytes#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "player_addr_bytes#0",
        "players#9",
        "game_players#0",
        "players#0",
        "tmp%0#0",
        "i#0",
        "player_addr_bytes#0",
        "0x0000000000000000000000000000000000000000000000000000000000000000"
      ]
    },
    "1424": {
      "op": "!=",
      "defined_out": [
        "game_players#0",
        "i#0",
        "player_addr_bytes#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "player_addr_bytes#0",
        "players#9",
        "game_players#0",
        "players#0",
        "tmp%0#0",
        "i#0",
        "tmp%1#0"
      ]
    },
    "1425": {
      "op": "frame_dig 3",
      "defined_out": [
        "game_players#0",
        "i#0",
        "player_addr_bytes#0",
        "players#9",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "player_addr_bytes#0",
        "players#9",
        "game_players#0",
        "players#0",
        "tmp%0#0",
        "i#0",
        "tmp%1#0",
        "players#9"
      ]
    },
    "1427": {
      "op": "frame_bury 1",
      "defined_out": [
        "game_players#0",
        "i#0",
        "player_addr_bytes#0",
        "players#9",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "player_addr_bytes#0",
        "players#9",
        "game_players#0",
        "players#0",
        "tmp%0#0",
        "i#0",
        "tmp%1#0"
      ]
    },
    "1429": {
      "op": "bz read_game_players_after_if_else@4",
      "stack_out": [
        "player_addr_bytes#0",
        "players#9",
        "game_players#0",
        "players#0",
        "tmp%0#0",
        "i#0"
      ]
    },
    "1432": {
      "op": "frame_dig 3",
      "defined_out": [
        "game_players#0",
        "i#0",
        "player_addr_bytes#0",
        "players#0",
        "players#9",
        "tmp%0#0"
      ],
      "stack_out": [
        "player_addr_bytes#0",
        "players#9",
        "game_players#0",
        "players#0",
        "tmp%0#0",
        "i#0",
        "players#0"
      ]
    },
    "1434": {
      "op": "extract 2 0",
      "defined_out": [
        "expr_value_trimmed%0#0",
        "game_players#0",
        "i#0",
        "player_addr_bytes#0",
        "players#0",
        "players#9",
        "tmp%0#0"
      ],
      "stack_out": [
        "player_addr_bytes#0",
        "players#9",
        "game_players#0",
        "players#0",
        "tmp%0#0",
        "i#0",
        "expr_value_trimmed%0#0"
      ]
    },
    "1437": {
      "op": "frame_dig 0",
      "stack_out": [
        "player_addr_bytes#0",
        "players#9",
        "game_players#0",
        "players#0",
        "tmp%0#0",
        "i#0",
        "expr_value_trimmed%0#0",
        "player_addr_bytes#0"
      ]
    },
    "1439": {
      "op": "concat",
      "defined_out": [
        "concatenated%0#0",
        "game_players#0",
        "i#0",
        "player_addr_bytes#0",
        "players#0",
        "players#9",
        "tmp%0#0"
      ],
      "stack_out": [
        "player_addr_bytes#0",
        "players#9",
        "game_players#0",
        "players#0",
        "tmp%0#0",
        "i#0",
        "concatenated%0#0"
      ]
    },
    "1440": {
      "op": "dup",
      "defined_out": [
        "concatenated%0#0",
        "concatenated%0#0 (copy)",
        "game_players#0",
        "i#0",
        "player_addr_bytes#0",
        "players#0",
        "players#9",
        "tmp%0#0"
      ],
      "stack_out": [
        "player_addr_bytes#0",
        "players#9",
        "game_players#0",
        "players#0",
        "tmp%0#0",
        "i#0",
        "concatenated%0#0",
        "concatenated%0#0 (copy)"
      ]
    },
    "1441": {
      "op": "len",
      "defined_out": [
        "byte_len%0#0",
        "concatenated%0#0",
        "game_players#0",
        "i#0",
        "player_addr_bytes#0",
        "players#0",
        "players#9",
        "tmp%0#0"
      ],
      "stack_out": [
        "player_addr_bytes#0",
        "players#9",
        "game_players#0",
        "players#0",
        "tmp%0#0",
        "i#0",
        "concatenated%0#0",
        "byte_len%0#0"
      ]
    },
    "1442": {
      "op": "intc_3 // 32",
      "stack_out": [
        "player_addr_bytes#0",
        "players#9",
        "game_players#0",
        "players#0",
        "tmp%0#0",
        "i#0",
        "concatenated%0#0",
        "byte_len%0#0",
        "32"
      ]
    },
    "1443": {
      "op": "/",
      "defined_out": [
        "concatenated%0#0",
        "game_players#0",
        "i#0",
        "len_%0#0",
        "player_addr_bytes#0",
        "players#0",
        "players#9",
        "tmp%0#0"
      ],
      "stack_out": [
        "player_addr_bytes#0",
        "players#9",
        "game_players#0",
        "players#0",
        "tmp%0#0",
        "i#0",
        "concatenated%0#0",
        "len_%0#0"
      ]
    },
    "1444": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "concatenated%0#0",
        "game_players#0",
        "i#0",
        "player_addr_bytes#0",
        "players#0",
        "players#9",
        "tmp%0#0"
      ],
      "stack_out": [
        "player_addr_bytes#0",
        "players#9",
        "game_players#0",
        "players#0",
        "tmp%0#0",
        "i#0",
        "concatenated%0#0",
        "as_bytes%0#0"
      ]
    },
    "1445": {
      "op": "extract 6 2",
      "defined_out": [
        "concatenated%0#0",
        "game_players#0",
        "i#0",
        "len_16_bit%0#0",
        "player_addr_bytes#0",
        "players#0",
        "players#9",
        "tmp%0#0"
      ],
      "stack_out": [
        "player_addr_bytes#0",
        "players#9",
        "game_players#0",
        "players#0",
        "tmp%0#0",
        "i#0",
        "concatenated%0#0",
        "len_16_bit%0#0"
      ]
    },
    "1448": {
      "op": "swap",
      "stack_out": [
        "player_addr_bytes#0",
        "players#9",
        "game_players#0",
        "players#0",
        "tmp%0#0",
        "i#0",
        "len_16_bit%0#0",
        "concatenated%0#0"
      ]
    },
    "1449": {
      "op": "concat",
      "stack_out": [
        "player_addr_bytes#0",
        "players#9",
        "game_players#0",
        "players#0",
        "tmp%0#0",
        "i#0",
        "players#9"
      ]
    },
    "1450": {
      "op": "frame_bury 1",
      "stack_out": [
        "player_addr_bytes#0",
        "players#9",
        "game_players#0",
        "players#0",
        "tmp%0#0",
        "i#0"
      ]
    },
    "1452": {
      "block": "read_game_players_after_if_else@4",
      "stack_in": [
        "player_addr_bytes#0",
        "players#9",
        "game_players#0",
        "players#0",
        "tmp%0#0",
        "i#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "players#0"
      ],
      "stack_out": [
        "player_addr_bytes#0",
        "players#9",
        "game_players#0",
        "players#0",
        "tmp%0#0",
        "i#0",
        "players#0"
      ]
    },
    "1454": {
      "op": "frame_bury 3",
      "defined_out": [
        "players#0"
      ],
      "stack_out": [
        "player_addr_bytes#0",
        "players#9",
        "game_players#0",
        "players#0",
        "tmp%0#0",
        "i#0"
      ]
    },
    "1456": {
      "op": "frame_dig 5",
      "defined_out": [
        "i#0",
        "players#0"
      ],
      "stack_out": [
        "player_addr_bytes#0",
        "players#9",
        "game_players#0",
        "players#0",
        "tmp%0#0",
        "i#0",
        "i#0"
      ]
    },
    "1458": {
      "op": "intc_3 // 32",
      "defined_out": [
        "32",
        "i#0",
        "players#0"
      ],
      "stack_out": [
        "player_addr_bytes#0",
        "players#9",
        "game_players#0",
        "players#0",
        "tmp%0#0",
        "i#0",
        "i#0",
        "32"
      ]
    },
    "1459": {
      "op": "+",
      "stack_out": [
        "player_addr_bytes#0",
        "players#9",
        "game_players#0",
        "players#0",
        "tmp%0#0",
        "i#0",
        "i#0"
      ]
    },
    "1460": {
      "op": "frame_bury 5",
      "defined_out": [
        "i#0",
        "players#0"
      ],
      "stack_out": [
        "player_addr_bytes#0",
        "players#9",
        "game_players#0",
        "players#0",
        "tmp%0#0",
        "i#0"
      ]
    },
    "1462": {
      "op": "b read_game_players_for_header@1"
    },
    "1465": {
      "block": "read_game_players_after_for@6",
      "stack_in": [
        "player_addr_bytes#0",
        "players#9",
        "game_players#0",
        "players#0",
        "tmp%0#0",
        "i#0"
      ],
      "op": "frame_dig 3",
      "defined_out": [
        "players#0"
      ],
      "stack_out": [
        "player_addr_bytes#0",
        "players#9",
        "game_players#0",
        "players#0",
        "tmp%0#0",
        "i#0",
        "players#0"
      ]
    },
    "1467": {
      "op": "frame_bury 0"
    },
    "1469": {
      "retsub": true,
      "op": "retsub"
    },
    "1470": {
      "subroutine": "smart_contracts.pieout.contract.Pieout.generate",
      "params": {},
      "block": "generate",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1472": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "1474": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1475": {
      "error": "Sender address must match application creator address.",
      "op": "assert // Sender address must match application creator address.",
      "stack_out": []
    },
    "1476": {
      "op": "bytec 8 // \"game_id\"",
      "defined_out": [
        "\"game_id\""
      ],
      "stack_out": [
        "\"game_id\""
      ]
    },
    "1478": {
      "op": "intc_0 // 1",
      "defined_out": [
        "\"game_id\"",
        "1"
      ],
      "stack_out": [
        "\"game_id\"",
        "1"
      ]
    },
    "1479": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1480": {
      "op": "bytec 6 // \"score_id\"",
      "defined_out": [
        "\"score_id\""
      ],
      "stack_out": [
        "\"score_id\""
      ]
    },
    "1482": {
      "op": "intc_0 // 1",
      "stack_out": [
        "\"score_id\"",
        "1"
      ]
    },
    "1483": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1484": {
      "op": "bytec 9 // \"ath_score\"",
      "defined_out": [
        "\"ath_score\""
      ],
      "stack_out": [
        "\"ath_score\""
      ]
    },
    "1486": {
      "op": "intc_1 // 0",
      "defined_out": [
        "\"ath_score\"",
        "0"
      ],
      "stack_out": [
        "\"ath_score\"",
        "0"
      ]
    },
    "1487": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1488": {
      "op": "bytec 10 // \"ath_address\"",
      "defined_out": [
        "\"ath_address\""
      ],
      "stack_out": [
        "\"ath_address\""
      ]
    },
    "1490": {
      "op": "global ZeroAddress",
      "defined_out": [
        "\"ath_address\"",
        "materialized_values%0#0"
      ],
      "stack_out": [
        "\"ath_address\"",
        "materialized_values%0#0"
      ]
    },
    "1492": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1493": {
      "retsub": true,
      "op": "retsub"
    },
    "1494": {
      "subroutine": "smart_contracts.pieout.contract.Pieout.mint_trophy",
      "params": {
        "box_t_pay#0": "uint64",
        "mint_pay#0": "uint64"
      },
      "block": "mint_trophy",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "1497": {
      "op": "global GroupSize",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1499": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "3"
      ]
    },
    "1501": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1502": {
      "error": "Invalid group size. Ensure number of transaction in group is within valid bounds.",
      "op": "assert // Invalid group size. Ensure number of transaction in group is within valid bounds.",
      "stack_out": []
    },
    "1503": {
      "op": "frame_dig -2",
      "defined_out": [
        "box_t_pay#0 (copy)"
      ],
      "stack_out": [
        "box_t_pay#0 (copy)"
      ]
    },
    "1505": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1507": {
      "op": "intc 10 // 19300",
      "defined_out": [
        "19300",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "19300"
      ]
    },
    "1509": {
      "op": ">=",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1510": {
      "error": "Insufficient funds. Box pay amount is not enough to cover application MBR.",
      "op": "assert // Insufficient funds. Box pay amount is not enough to cover application MBR.",
      "stack_out": []
    },
    "1511": {
      "op": "frame_dig -2",
      "stack_out": [
        "box_t_pay#0 (copy)"
      ]
    },
    "1513": {
      "op": "gtxns Sender",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "1515": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "1517": {
      "op": "==",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "1518": {
      "error": "Box payment sender address must match transaction sender address.",
      "op": "assert // Box payment sender address must match transaction sender address.",
      "stack_out": []
    },
    "1519": {
      "op": "frame_dig -2",
      "stack_out": [
        "box_t_pay#0 (copy)"
      ]
    },
    "1521": {
      "op": "gtxns Receiver",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "1523": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0"
      ]
    },
    "1525": {
      "op": "==",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "1526": {
      "error": "Box payment receiver address must match application address.",
      "op": "assert // Box payment receiver address must match application address.",
      "stack_out": []
    },
    "1527": {
      "op": "frame_dig -1",
      "defined_out": [
        "mint_pay#0 (copy)"
      ],
      "stack_out": [
        "mint_pay#0 (copy)"
      ]
    },
    "1529": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "1531": {
      "op": "global AssetCreateMinBalance",
      "defined_out": [
        "tmp%10#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%11#0"
      ]
    },
    "1533": {
      "op": ">=",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "1534": {
      "error": "Insufficient funds. Mint pay amount is not enough to cover asset creation cost.",
      "op": "assert // Insufficient funds. Mint pay amount is not enough to cover asset creation cost.",
      "stack_out": []
    },
    "1535": {
      "op": "frame_dig -1",
      "stack_out": [
        "mint_pay#0 (copy)"
      ]
    },
    "1537": {
      "op": "gtxns Sender",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "1539": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%13#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "tmp%14#0"
      ]
    },
    "1541": {
      "op": "==",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "1542": {
      "error": "Mint payment sender address must match transaction sender address.",
      "op": "assert // Mint payment sender address must match transaction sender address.",
      "stack_out": []
    },
    "1543": {
      "op": "frame_dig -1",
      "stack_out": [
        "mint_pay#0 (copy)"
      ]
    },
    "1545": {
      "op": "gtxns Receiver",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "1547": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%16#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "tmp%17#0"
      ]
    },
    "1549": {
      "op": "==",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "1550": {
      "error": "Mint payment receiver address must match application address.",
      "op": "assert // Mint payment receiver address must match application address.",
      "stack_out": []
    },
    "1551": {
      "op": "bytec_3 // 0x745f",
      "defined_out": [
        "0x745f"
      ],
      "stack_out": [
        "0x745f"
      ]
    },
    "1552": {
      "op": "box_len",
      "defined_out": [
        "_%0#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "_%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1553": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "1555": {
      "op": "!",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "1556": {
      "error": "Can only mint if it doesn't exist yet",
      "op": "assert // Can only mint if it doesn't exist yet",
      "stack_out": []
    },
    "1557": {
      "op": "itxn_begin"
    },
    "1558": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0"
      ]
    },
    "1560": {
      "op": "dupn 2",
      "defined_out": [
        "inner_txn_params%0%%param_ConfigAssetClawback_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetFreeze_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetFreeze_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetClawback_idx_0#0"
      ]
    },
    "1562": {
      "op": "pushbytes \"creator:app_address,fee_payer:creator_address,concern:mint_trophy_asset_create\"",
      "defined_out": [
        "\"creator:app_address,fee_payer:creator_address,concern:mint_trophy_asset_create\"",
        "inner_txn_params%0%%param_ConfigAssetClawback_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetFreeze_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetFreeze_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetClawback_idx_0#0",
        "\"creator:app_address,fee_payer:creator_address,concern:mint_trophy_asset_create\""
      ]
    },
    "1642": {
      "op": "itxn_field Note",
      "stack_out": [
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetFreeze_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetClawback_idx_0#0"
      ]
    },
    "1644": {
      "op": "itxn_field ConfigAssetClawback",
      "stack_out": [
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetFreeze_idx_0#0"
      ]
    },
    "1646": {
      "op": "itxn_field ConfigAssetFreeze",
      "stack_out": [
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0"
      ]
    },
    "1648": {
      "op": "itxn_field ConfigAssetManager",
      "stack_out": []
    },
    "1650": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1651": {
      "op": "itxn_field ConfigAssetDefaultFrozen",
      "stack_out": []
    },
    "1653": {
      "op": "intc_1 // 0",
      "stack_out": [
        "0"
      ]
    },
    "1654": {
      "op": "itxn_field ConfigAssetDecimals",
      "stack_out": []
    },
    "1656": {
      "op": "pushbytes \"Gamename-ATH-Trophy\"",
      "defined_out": [
        "\"Gamename-ATH-Trophy\""
      ],
      "stack_out": [
        "\"Gamename-ATH-Trophy\""
      ]
    },
    "1677": {
      "op": "itxn_field ConfigAssetName",
      "stack_out": []
    },
    "1679": {
      "op": "pushbytes \"TRFY\"",
      "defined_out": [
        "\"TRFY\""
      ],
      "stack_out": [
        "\"TRFY\""
      ]
    },
    "1685": {
      "op": "itxn_field ConfigAssetUnitName",
      "stack_out": []
    },
    "1687": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "1688": {
      "op": "itxn_field ConfigAssetTotal",
      "stack_out": []
    },
    "1690": {
      "op": "pushint 3 // acfg",
      "defined_out": [
        "acfg"
      ],
      "stack_out": [
        "acfg"
      ]
    },
    "1692": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "1694": {
      "op": "intc_1 // 0",
      "stack_out": [
        "0"
      ]
    },
    "1695": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "1697": {
      "op": "itxn_submit"
    },
    "1698": {
      "op": "itxn CreatedAssetID",
      "defined_out": [
        "acfg_itxn.CreatedAssetID#0"
      ],
      "stack_out": [
        "acfg_itxn.CreatedAssetID#0"
      ]
    },
    "1700": {
      "op": "bytec_3 // 0x745f",
      "stack_out": [
        "acfg_itxn.CreatedAssetID#0",
        "0x745f"
      ]
    },
    "1701": {
      "op": "pushint 40 // 40",
      "defined_out": [
        "0x745f",
        "40",
        "acfg_itxn.CreatedAssetID#0"
      ],
      "stack_out": [
        "acfg_itxn.CreatedAssetID#0",
        "0x745f",
        "40"
      ]
    },
    "1703": {
      "op": "box_create",
      "defined_out": [
        "acfg_itxn.CreatedAssetID#0",
        "{box_create}"
      ],
      "stack_out": [
        "acfg_itxn.CreatedAssetID#0",
        "{box_create}"
      ]
    },
    "1704": {
      "op": "pop",
      "stack_out": [
        "acfg_itxn.CreatedAssetID#0"
      ]
    },
    "1705": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "1706": {
      "op": "global ZeroAddress",
      "defined_out": [
        "tmp%20#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%20#0"
      ]
    },
    "1708": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0"
      ]
    },
    "1709": {
      "op": "bytec_3 // 0x745f",
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "0x745f"
      ]
    },
    "1710": {
      "op": "swap",
      "stack_out": [
        "0x745f",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "1711": {
      "op": "box_put",
      "stack_out": []
    },
    "1712": {
      "retsub": true,
      "op": "retsub"
    },
    "1713": {
      "subroutine": "smart_contracts.pieout.contract.Pieout.claim_trophy",
      "params": {},
      "block": "claim_trophy",
      "stack_in": [],
      "op": "global GroupSize",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1715": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "1"
      ]
    },
    "1716": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1717": {
      "error": "Invalid group size. This app call can only take standalone transactions.",
      "op": "assert // Invalid group size. This app call can only take standalone transactions.",
      "stack_out": []
    },
    "1718": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1720": {
      "op": "bytec_3 // 0x745f",
      "defined_out": [
        "0x745f",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "0x745f"
      ]
    },
    "1721": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1722": {
      "error": "check self.box_game_trophy exists",
      "op": "assert // check self.box_game_trophy exists",
      "stack_out": [
        "tmp%2#0",
        "maybe_value%0#0"
      ]
    },
    "1723": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "maybe_value%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "maybe_value%0#0",
        "0"
      ]
    },
    "1724": {
      "op": "extract_uint64",
      "defined_out": [
        "tmp%2#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%4#0"
      ]
    },
    "1725": {
      "op": "swap",
      "stack_out": [
        "tmp%4#0",
        "tmp%2#0"
      ]
    },
    "1726": {
      "op": "dig 1",
      "defined_out": [
        "tmp%2#0",
        "tmp%4#0",
        "tmp%4#0 (copy)"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%2#0",
        "tmp%4#0 (copy)"
      ]
    },
    "1728": {
      "op": "asset_holding_get AssetBalance",
      "defined_out": [
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0"
      ]
    },
    "1730": {
      "op": "bury 1",
      "stack_out": [
        "tmp%4#0",
        "tmp%6#0"
      ]
    },
    "1732": {
      "error": "Sender needs to be opt-in to receieve trophy",
      "op": "assert // Sender needs to be opt-in to receieve trophy",
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "1733": {
      "op": "itxn_begin"
    },
    "1734": {
      "op": "txn Sender",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "1736": {
      "op": "intc_0 // 1",
      "stack_out": [
        "tmp%4#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "1"
      ]
    },
    "1737": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "tmp%4#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "1739": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "1741": {
      "op": "itxn_field XferAsset",
      "stack_out": []
    },
    "1743": {
      "op": "pushint 4 // axfer",
      "defined_out": [
        "axfer"
      ],
      "stack_out": [
        "axfer"
      ]
    },
    "1745": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "1747": {
      "op": "intc_1 // 0",
      "stack_out": [
        "0"
      ]
    },
    "1748": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "1750": {
      "op": "itxn_submit"
    },
    "1751": {
      "retsub": true,
      "op": "retsub"
    },
    "1752": {
      "subroutine": "smart_contracts.pieout.contract.Pieout.new_game",
      "params": {
        "max_players#0": "uint64",
        "box_s_pay#0": "uint64",
        "box_p_pay#0": "uint64",
        "stake_pay#0": "uint64"
      },
      "block": "new_game",
      "stack_in": [],
      "op": "proto 4 0"
    },
    "1755": {
      "op": "global GroupSize",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1757": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "4"
      ]
    },
    "1759": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1760": {
      "error": "Invalid group size. Ensure number of transaction in group is within valid bounds.",
      "op": "assert // Invalid group size. Ensure number of transaction in group is within valid bounds.",
      "stack_out": []
    },
    "1761": {
      "op": "frame_dig -4",
      "defined_out": [
        "max_players#0 (copy)"
      ],
      "stack_out": [
        "max_players#0 (copy)"
      ]
    },
    "1763": {
      "op": "pushint 4 // 4",
      "stack_out": [
        "max_players#0 (copy)",
        "4"
      ]
    },
    "1765": {
      "op": ">=",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1766": {
      "op": "bz new_game_bool_false@3",
      "stack_out": []
    },
    "1769": {
      "op": "frame_dig -4",
      "stack_out": [
        "max_players#0 (copy)"
      ]
    },
    "1771": {
      "op": "pushint 16 // 16",
      "defined_out": [
        "16",
        "max_players#0 (copy)"
      ],
      "stack_out": [
        "max_players#0 (copy)",
        "16"
      ]
    },
    "1773": {
      "op": "<=",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1774": {
      "op": "bz new_game_bool_false@3",
      "stack_out": []
    },
    "1777": {
      "op": "intc_0 // 1",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "1778": {
      "block": "new_game_bool_merge@4",
      "stack_in": [
        "and_result%0#0"
      ],
      "error": "The number of max players must be within bounds.",
      "op": "assert // The number of max players must be within bounds.",
      "defined_out": [],
      "stack_out": []
    },
    "1779": {
      "op": "frame_dig -1",
      "defined_out": [
        "stake_pay#0 (copy)"
      ],
      "stack_out": [
        "stake_pay#0 (copy)"
      ]
    },
    "1781": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "1783": {
      "op": "dup",
      "defined_out": [
        "tmp%4#0",
        "tmp%4#0 (copy)"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%4#0 (copy)"
      ]
    },
    "1784": {
      "op": "intc 5 // 1000",
      "defined_out": [
        "1000",
        "tmp%4#0",
        "tmp%4#0 (copy)"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%4#0 (copy)",
        "1000"
      ]
    },
    "1786": {
      "op": ">=",
      "defined_out": [
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "1787": {
      "error": "Insufficient funds. Stake pay amount is not enough to cover staking requirements.",
      "op": "assert // Insufficient funds. Stake pay amount is not enough to cover staking requirements.",
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "1788": {
      "op": "frame_dig -3",
      "defined_out": [
        "box_s_pay#0 (copy)",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "box_s_pay#0 (copy)"
      ]
    },
    "1790": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%4#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%6#0"
      ]
    },
    "1792": {
      "op": "intc 11 // 67300",
      "defined_out": [
        "67300",
        "tmp%4#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%6#0",
        "67300"
      ]
    },
    "1794": {
      "op": ">=",
      "defined_out": [
        "tmp%4#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%7#0"
      ]
    },
    "1795": {
      "error": "Insufficient funds. Box pay amount is not enough to cover application MBR.",
      "op": "assert // Insufficient funds. Box pay amount is not enough to cover application MBR.",
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "1796": {
      "op": "frame_dig -2",
      "defined_out": [
        "box_p_pay#0 (copy)",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "box_p_pay#0 (copy)"
      ]
    },
    "1798": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%4#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%8#0"
      ]
    },
    "1800": {
      "op": "intc_3 // 32",
      "defined_out": [
        "32",
        "tmp%4#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%8#0",
        "32"
      ]
    },
    "1801": {
      "op": "frame_dig -4",
      "defined_out": [
        "32",
        "max_players#0 (copy)",
        "tmp%4#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%8#0",
        "32",
        "max_players#0 (copy)"
      ]
    },
    "1803": {
      "op": "*",
      "defined_out": [
        "tmp%4#0",
        "tmp%8#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%8#0",
        "to_encode%0#0"
      ]
    },
    "1804": {
      "op": "dup",
      "defined_out": [
        "tmp%4#0",
        "tmp%8#0",
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%8#0",
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ]
    },
    "1805": {
      "op": "itob",
      "defined_out": [
        "tmp%4#0",
        "tmp%8#0",
        "to_encode%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%8#0",
        "to_encode%0#0",
        "val_as_bytes%0#0"
      ]
    },
    "1806": {
      "op": "dup",
      "defined_out": [
        "tmp%4#0",
        "tmp%8#0",
        "to_encode%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%8#0",
        "to_encode%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%0#0 (copy)"
      ]
    },
    "1807": {
      "op": "bitlen",
      "defined_out": [
        "bitlen%0#0",
        "tmp%4#0",
        "tmp%8#0",
        "to_encode%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%8#0",
        "to_encode%0#0",
        "val_as_bytes%0#0",
        "bitlen%0#0"
      ]
    },
    "1808": {
      "op": "pushint 16 // 16",
      "defined_out": [
        "16",
        "bitlen%0#0",
        "tmp%4#0",
        "tmp%8#0",
        "to_encode%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%8#0",
        "to_encode%0#0",
        "val_as_bytes%0#0",
        "bitlen%0#0",
        "16"
      ]
    },
    "1810": {
      "op": "<=",
      "defined_out": [
        "no_overflow%0#0",
        "tmp%4#0",
        "tmp%8#0",
        "to_encode%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%8#0",
        "to_encode%0#0",
        "val_as_bytes%0#0",
        "no_overflow%0#0"
      ]
    },
    "1811": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "tmp%4#0",
        "tmp%8#0",
        "to_encode%0#0",
        "val_as_bytes%0#0"
      ]
    },
    "1812": {
      "op": "extract 6 2",
      "defined_out": [
        "tmp%4#0",
        "tmp%8#0",
        "to_encode%0#0",
        "uint16%0#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%8#0",
        "to_encode%0#0",
        "uint16%0#0"
      ]
    },
    "1815": {
      "op": "pushbytes 0x0a",
      "defined_out": [
        "0x0a",
        "tmp%4#0",
        "tmp%8#0",
        "to_encode%0#0",
        "uint16%0#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%8#0",
        "to_encode%0#0",
        "uint16%0#0",
        "0x0a"
      ]
    },
    "1818": {
      "op": "swap",
      "stack_out": [
        "tmp%4#0",
        "tmp%8#0",
        "to_encode%0#0",
        "0x0a",
        "uint16%0#0"
      ]
    },
    "1819": {
      "callsub": "smart_contracts.pieout.contract.Pieout.calc_single_box_fee",
      "op": "callsub calc_single_box_fee",
      "defined_out": [
        "tmp%4#0",
        "tmp%8#0",
        "tmp%9#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%8#0",
        "to_encode%0#0",
        "tmp%9#0"
      ]
    },
    "1822": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%4#0",
        "to_encode%0#0",
        "tmp%9#0",
        "tmp%8#0"
      ]
    },
    "1824": {
      "op": "<=",
      "defined_out": [
        "tmp%10#0",
        "tmp%4#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "to_encode%0#0",
        "tmp%10#0"
      ]
    },
    "1825": {
      "error": "Insufficient funds. Box pay amount is not enough to cover application MBR.",
      "op": "assert // Insufficient funds. Box pay amount is not enough to cover application MBR.",
      "stack_out": [
        "tmp%4#0",
        "to_encode%0#0"
      ]
    },
    "1826": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%4#0",
        "to_encode%0#0",
        "stake_pay#0 (copy)"
      ]
    },
    "1828": {
      "op": "gtxns Sender",
      "defined_out": [
        "tmp%11#0",
        "tmp%4#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "to_encode%0#0",
        "tmp%11#0"
      ]
    },
    "1830": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%11#0",
        "tmp%12#0",
        "tmp%4#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "to_encode%0#0",
        "tmp%11#0",
        "tmp%12#0"
      ]
    },
    "1832": {
      "op": "==",
      "defined_out": [
        "tmp%13#0",
        "tmp%4#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "to_encode%0#0",
        "tmp%13#0"
      ]
    },
    "1833": {
      "error": "Stake payment sender address must match transaction sender address.",
      "op": "assert // Stake payment sender address must match transaction sender address.",
      "stack_out": [
        "tmp%4#0",
        "to_encode%0#0"
      ]
    },
    "1834": {
      "op": "frame_dig -3",
      "stack_out": [
        "tmp%4#0",
        "to_encode%0#0",
        "box_s_pay#0 (copy)"
      ]
    },
    "1836": {
      "op": "gtxns Sender",
      "defined_out": [
        "tmp%14#0",
        "tmp%4#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "to_encode%0#0",
        "tmp%14#0"
      ]
    },
    "1838": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%14#0",
        "tmp%15#0",
        "tmp%4#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "to_encode%0#0",
        "tmp%14#0",
        "tmp%15#0"
      ]
    },
    "1840": {
      "op": "==",
      "defined_out": [
        "tmp%16#0",
        "tmp%4#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "to_encode%0#0",
        "tmp%16#0"
      ]
    },
    "1841": {
      "error": "Box payment sender address must match transaction sender address.",
      "op": "assert // Box payment sender address must match transaction sender address.",
      "stack_out": [
        "tmp%4#0",
        "to_encode%0#0"
      ]
    },
    "1842": {
      "op": "frame_dig -2",
      "stack_out": [
        "tmp%4#0",
        "to_encode%0#0",
        "box_p_pay#0 (copy)"
      ]
    },
    "1844": {
      "op": "gtxns Sender",
      "defined_out": [
        "tmp%17#0",
        "tmp%4#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "to_encode%0#0",
        "tmp%17#0"
      ]
    },
    "1846": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%17#0",
        "tmp%18#0",
        "tmp%4#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "to_encode%0#0",
        "tmp%17#0",
        "tmp%18#0"
      ]
    },
    "1848": {
      "op": "==",
      "defined_out": [
        "tmp%19#0",
        "tmp%4#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "to_encode%0#0",
        "tmp%19#0"
      ]
    },
    "1849": {
      "error": "Box payment sender address must match transaction sender address.",
      "op": "assert // Box payment sender address must match transaction sender address.",
      "stack_out": [
        "tmp%4#0",
        "to_encode%0#0"
      ]
    },
    "1850": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%4#0",
        "to_encode%0#0",
        "stake_pay#0 (copy)"
      ]
    },
    "1852": {
      "op": "gtxns Receiver",
      "defined_out": [
        "tmp%20#0",
        "tmp%4#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "to_encode%0#0",
        "tmp%20#0"
      ]
    },
    "1854": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%20#0",
        "tmp%21#0",
        "tmp%4#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "to_encode%0#0",
        "tmp%20#0",
        "tmp%21#0"
      ]
    },
    "1856": {
      "op": "==",
      "defined_out": [
        "tmp%22#0",
        "tmp%4#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "to_encode%0#0",
        "tmp%22#0"
      ]
    },
    "1857": {
      "error": "Stake payment receiver address must match application address.",
      "op": "assert // Stake payment receiver address must match application address.",
      "stack_out": [
        "tmp%4#0",
        "to_encode%0#0"
      ]
    },
    "1858": {
      "op": "frame_dig -3",
      "stack_out": [
        "tmp%4#0",
        "to_encode%0#0",
        "box_s_pay#0 (copy)"
      ]
    },
    "1860": {
      "op": "gtxns Receiver",
      "defined_out": [
        "tmp%23#0",
        "tmp%4#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "to_encode%0#0",
        "tmp%23#0"
      ]
    },
    "1862": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%23#0",
        "tmp%24#0",
        "tmp%4#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "to_encode%0#0",
        "tmp%23#0",
        "tmp%24#0"
      ]
    },
    "1864": {
      "op": "==",
      "defined_out": [
        "tmp%25#0",
        "tmp%4#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "to_encode%0#0",
        "tmp%25#0"
      ]
    },
    "1865": {
      "error": "Box payment receiver address must match application address.",
      "op": "assert // Box payment receiver address must match application address.",
      "stack_out": [
        "tmp%4#0",
        "to_encode%0#0"
      ]
    },
    "1866": {
      "op": "frame_dig -2",
      "stack_out": [
        "tmp%4#0",
        "to_encode%0#0",
        "box_p_pay#0 (copy)"
      ]
    },
    "1868": {
      "op": "gtxns Receiver",
      "defined_out": [
        "tmp%26#0",
        "tmp%4#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "to_encode%0#0",
        "tmp%26#0"
      ]
    },
    "1870": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%26#0",
        "tmp%27#0",
        "tmp%4#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "to_encode%0#0",
        "tmp%26#0",
        "tmp%27#0"
      ]
    },
    "1872": {
      "op": "==",
      "defined_out": [
        "tmp%28#0",
        "tmp%4#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "to_encode%0#0",
        "tmp%28#0"
      ]
    },
    "1873": {
      "error": "Box payment receiver address must match application address.",
      "op": "assert // Box payment receiver address must match application address.",
      "stack_out": [
        "tmp%4#0",
        "to_encode%0#0"
      ]
    },
    "1874": {
      "op": "frame_dig -4",
      "stack_out": [
        "tmp%4#0",
        "to_encode%0#0",
        "max_players#0 (copy)"
      ]
    },
    "1876": {
      "op": "itob",
      "defined_out": [
        "tmp%4#0",
        "to_encode%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "to_encode%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "1877": {
      "op": "dup",
      "defined_out": [
        "tmp%4#0",
        "to_encode%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%1#0 (copy)"
      ],
      "stack_out": [
        "tmp%4#0",
        "to_encode%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%1#0 (copy)"
      ]
    },
    "1878": {
      "op": "bitlen",
      "defined_out": [
        "bitlen%1#0",
        "tmp%4#0",
        "to_encode%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "to_encode%0#0",
        "val_as_bytes%1#0",
        "bitlen%1#0"
      ]
    },
    "1879": {
      "op": "pushint 8 // 8",
      "defined_out": [
        "8",
        "bitlen%1#0",
        "tmp%4#0",
        "to_encode%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "to_encode%0#0",
        "val_as_bytes%1#0",
        "bitlen%1#0",
        "8"
      ]
    },
    "1881": {
      "op": "<=",
      "defined_out": [
        "no_overflow%1#0",
        "tmp%4#0",
        "to_encode%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "to_encode%0#0",
        "val_as_bytes%1#0",
        "no_overflow%1#0"
      ]
    },
    "1882": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "tmp%4#0",
        "to_encode%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "1883": {
      "op": "extract 7 1",
      "defined_out": [
        "tmp%4#0",
        "to_encode%0#0",
        "uint8%0#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "to_encode%0#0",
        "uint8%0#0"
      ]
    },
    "1886": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "tmp%29#0",
        "tmp%4#0",
        "to_encode%0#0",
        "uint8%0#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "to_encode%0#0",
        "uint8%0#0",
        "tmp%29#0"
      ]
    },
    "1888": {
      "op": "intc 4 // 3600",
      "defined_out": [
        "3600",
        "tmp%29#0",
        "tmp%4#0",
        "to_encode%0#0",
        "uint8%0#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "to_encode%0#0",
        "uint8%0#0",
        "tmp%29#0",
        "3600"
      ]
    },
    "1890": {
      "op": "+",
      "defined_out": [
        "tmp%4#0",
        "to_encode%0#0",
        "to_encode%1#0",
        "uint8%0#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "to_encode%0#0",
        "uint8%0#0",
        "to_encode%1#0"
      ]
    },
    "1891": {
      "op": "itob",
      "defined_out": [
        "tmp%4#0",
        "to_encode%0#0",
        "uint8%0#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "to_encode%0#0",
        "uint8%0#0",
        "val_as_bytes%2#0"
      ]
    },
    "1892": {
      "op": "uncover 3",
      "stack_out": [
        "to_encode%0#0",
        "uint8%0#0",
        "val_as_bytes%2#0",
        "tmp%4#0"
      ]
    },
    "1894": {
      "op": "itob",
      "defined_out": [
        "to_encode%0#0",
        "uint8%0#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "uint8%0#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ]
    },
    "1895": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%30#0",
        "to_encode%0#0",
        "uint8%0#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "uint8%0#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%30#0"
      ]
    },
    "1897": {
      "op": "global ZeroAddress",
      "defined_out": [
        "tmp%30#0",
        "tmp%31#0",
        "to_encode%0#0",
        "uint8%0#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "uint8%0#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%30#0",
        "tmp%31#0"
      ]
    },
    "1899": {
      "op": "dupn 2",
      "defined_out": [
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "to_encode%0#0",
        "uint8%0#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "uint8%0#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0"
      ]
    },
    "1901": {
      "op": "bytec_0 // 0x00",
      "defined_out": [
        "0x00",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "to_encode%0#0",
        "uint8%0#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "uint8%0#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "0x00"
      ]
    },
    "1902": {
      "op": "uncover 7",
      "stack_out": [
        "to_encode%0#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "0x00",
        "uint8%0#0"
      ]
    },
    "1904": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "to_encode%0#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "1905": {
      "op": "pushbytes 0x01",
      "defined_out": [
        "0x01",
        "encoded_tuple_buffer%2#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "to_encode%0#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "encoded_tuple_buffer%2#0",
        "0x01"
      ]
    },
    "1908": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "to_encode%0#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "1909": {
      "op": "bytec_0 // 0x00",
      "stack_out": [
        "to_encode%0#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "encoded_tuple_buffer%3#0",
        "0x00"
      ]
    },
    "1910": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%4#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "to_encode%0#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "1911": {
      "op": "bytec_0 // 0x00",
      "stack_out": [
        "to_encode%0#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "encoded_tuple_buffer%4#0",
        "0x00"
      ]
    },
    "1912": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%5#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "to_encode%0#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "1913": {
      "op": "bytec_0 // 0x00",
      "stack_out": [
        "to_encode%0#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "encoded_tuple_buffer%5#0",
        "0x00"
      ]
    },
    "1914": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%6#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "to_encode%0#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "1915": {
      "op": "bytec 12 // 0x0020",
      "defined_out": [
        "0x0020",
        "encoded_tuple_buffer%6#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "to_encode%0#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "encoded_tuple_buffer%6#0",
        "0x0020"
      ]
    },
    "1917": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%7#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "to_encode%0#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "1918": {
      "op": "uncover 6",
      "stack_out": [
        "to_encode%0#0",
        "val_as_bytes%3#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "encoded_tuple_buffer%7#0",
        "val_as_bytes%2#0"
      ]
    },
    "1920": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%8#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "to_encode%0#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "val_as_bytes%3#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "encoded_tuple_buffer%8#0"
      ]
    },
    "1921": {
      "op": "uncover 5",
      "stack_out": [
        "to_encode%0#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "encoded_tuple_buffer%8#0",
        "val_as_bytes%3#0"
      ]
    },
    "1923": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%9#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "encoded_tuple_buffer%9#0"
      ]
    },
    "1924": {
      "op": "uncover 4",
      "stack_out": [
        "to_encode%0#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "encoded_tuple_buffer%9#0",
        "tmp%30#0"
      ]
    },
    "1926": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%10#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "encoded_tuple_buffer%10#0"
      ]
    },
    "1927": {
      "op": "uncover 3",
      "stack_out": [
        "to_encode%0#0",
        "tmp%32#0",
        "tmp%33#0",
        "encoded_tuple_buffer%10#0",
        "tmp%31#0"
      ]
    },
    "1929": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%11#0",
        "tmp%32#0",
        "tmp%33#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "tmp%32#0",
        "tmp%33#0",
        "encoded_tuple_buffer%11#0"
      ]
    },
    "1930": {
      "op": "uncover 2",
      "stack_out": [
        "to_encode%0#0",
        "tmp%33#0",
        "encoded_tuple_buffer%11#0",
        "tmp%32#0"
      ]
    },
    "1932": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%12#0",
        "tmp%33#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "tmp%33#0",
        "encoded_tuple_buffer%12#0"
      ]
    },
    "1933": {
      "op": "swap",
      "stack_out": [
        "to_encode%0#0",
        "encoded_tuple_buffer%12#0",
        "tmp%33#0"
      ]
    },
    "1934": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%13#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "encoded_tuple_buffer%13#0"
      ]
    },
    "1935": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "encoded_tuple_buffer%13#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "encoded_tuple_buffer%13#0",
        "0"
      ]
    },
    "1936": {
      "op": "bytec 8 // \"game_id\"",
      "defined_out": [
        "\"game_id\"",
        "0",
        "encoded_tuple_buffer%13#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "encoded_tuple_buffer%13#0",
        "0",
        "\"game_id\""
      ]
    },
    "1938": {
      "op": "app_global_get_ex",
      "defined_out": [
        "encoded_tuple_buffer%13#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "encoded_tuple_buffer%13#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1939": {
      "error": "check self.game_id exists",
      "op": "assert // check self.game_id exists",
      "stack_out": [
        "to_encode%0#0",
        "encoded_tuple_buffer%13#0",
        "maybe_value%0#0"
      ]
    },
    "1940": {
      "op": "dup",
      "defined_out": [
        "encoded_tuple_buffer%13#0",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "encoded_tuple_buffer%13#0",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ]
    },
    "1941": {
      "op": "itob",
      "defined_out": [
        "encoded_tuple_buffer%13#0",
        "encoded_value%0#0",
        "maybe_value%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "encoded_tuple_buffer%13#0",
        "maybe_value%0#0",
        "encoded_value%0#0"
      ]
    },
    "1942": {
      "op": "bytec 4 // \"s_\"",
      "defined_out": [
        "\"s_\"",
        "encoded_tuple_buffer%13#0",
        "encoded_value%0#0",
        "maybe_value%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "encoded_tuple_buffer%13#0",
        "maybe_value%0#0",
        "encoded_value%0#0",
        "\"s_\""
      ]
    },
    "1944": {
      "op": "dig 1",
      "defined_out": [
        "\"s_\"",
        "encoded_tuple_buffer%13#0",
        "encoded_value%0#0",
        "encoded_value%0#0 (copy)",
        "maybe_value%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "encoded_tuple_buffer%13#0",
        "maybe_value%0#0",
        "encoded_value%0#0",
        "\"s_\"",
        "encoded_value%0#0 (copy)"
      ]
    },
    "1946": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_tuple_buffer%13#0",
        "encoded_value%0#0",
        "maybe_value%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "encoded_tuple_buffer%13#0",
        "maybe_value%0#0",
        "encoded_value%0#0",
        "box_prefixed_key%0#0"
      ]
    },
    "1947": {
      "op": "uncover 3",
      "stack_out": [
        "to_encode%0#0",
        "maybe_value%0#0",
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "encoded_tuple_buffer%13#0"
      ]
    },
    "1949": {
      "op": "box_put",
      "stack_out": [
        "to_encode%0#0",
        "maybe_value%0#0",
        "encoded_value%0#0"
      ]
    },
    "1950": {
      "op": "uncover 2",
      "stack_out": [
        "maybe_value%0#0",
        "encoded_value%0#0",
        "to_encode%0#0"
      ]
    },
    "1952": {
      "op": "bzero",
      "defined_out": [
        "encoded_value%0#0",
        "materialized_values%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "encoded_value%0#0",
        "materialized_values%0#0"
      ]
    },
    "1953": {
      "op": "bytec_1 // \"p_\"",
      "defined_out": [
        "\"p_\"",
        "encoded_value%0#0",
        "materialized_values%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "encoded_value%0#0",
        "materialized_values%0#0",
        "\"p_\""
      ]
    },
    "1954": {
      "op": "uncover 2",
      "stack_out": [
        "maybe_value%0#0",
        "materialized_values%0#0",
        "\"p_\"",
        "encoded_value%0#0"
      ]
    },
    "1956": {
      "op": "concat",
      "defined_out": [
        "game_players_bref#0",
        "materialized_values%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "materialized_values%0#0",
        "game_players_bref#0"
      ]
    },
    "1957": {
      "op": "dup",
      "defined_out": [
        "game_players_bref#0",
        "game_players_bref#0 (copy)",
        "materialized_values%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "materialized_values%0#0",
        "game_players_bref#0",
        "game_players_bref#0 (copy)"
      ]
    },
    "1958": {
      "op": "box_del",
      "defined_out": [
        "game_players_bref#0",
        "materialized_values%0#0",
        "maybe_value%0#0",
        "{box_del}"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "materialized_values%0#0",
        "game_players_bref#0",
        "{box_del}"
      ]
    },
    "1959": {
      "op": "pop",
      "stack_out": [
        "maybe_value%0#0",
        "materialized_values%0#0",
        "game_players_bref#0"
      ]
    },
    "1960": {
      "op": "dup",
      "stack_out": [
        "maybe_value%0#0",
        "materialized_values%0#0",
        "game_players_bref#0",
        "game_players_bref#0 (copy)"
      ]
    },
    "1961": {
      "op": "uncover 2",
      "stack_out": [
        "maybe_value%0#0",
        "game_players_bref#0",
        "game_players_bref#0 (copy)",
        "materialized_values%0#0"
      ]
    },
    "1963": {
      "op": "box_put",
      "stack_out": [
        "maybe_value%0#0",
        "game_players_bref#0"
      ]
    },
    "1964": {
      "op": "intc_1 // 0"
    },
    "1965": {
      "op": "txn Sender",
      "defined_out": [
        "0",
        "game_players_bref#0",
        "maybe_value%0#0",
        "tmp%36#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "game_players_bref#0",
        "0",
        "tmp%36#0"
      ]
    },
    "1967": {
      "op": "box_replace",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1968": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "1"
      ]
    },
    "1969": {
      "op": "+",
      "defined_out": [
        "materialized_values%1#0"
      ],
      "stack_out": [
        "materialized_values%1#0"
      ]
    },
    "1970": {
      "op": "bytec 8 // \"game_id\"",
      "stack_out": [
        "materialized_values%1#0",
        "\"game_id\""
      ]
    },
    "1972": {
      "op": "swap",
      "stack_out": [
        "\"game_id\"",
        "materialized_values%1#0"
      ]
    },
    "1973": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1974": {
      "retsub": true,
      "op": "retsub"
    },
    "1975": {
      "block": "new_game_bool_false@3",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "1976": {
      "op": "b new_game_bool_merge@4"
    },
    "1979": {
      "subroutine": "smart_contracts.pieout.contract.Pieout.join_game",
      "params": {
        "game_id#0": "uint64",
        "stake_pay#0": "uint64"
      },
      "block": "join_game",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "1982": {
      "op": "global GroupSize",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1984": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "2"
      ]
    },
    "1985": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1986": {
      "error": "Invalid group size. Ensure number of transaction in group is within valid bounds.",
      "op": "assert // Invalid group size. Ensure number of transaction in group is within valid bounds.",
      "stack_out": []
    },
    "1987": {
      "op": "frame_dig -2",
      "defined_out": [
        "game_id#0 (copy)"
      ],
      "stack_out": [
        "game_id#0 (copy)"
      ]
    },
    "1989": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "1990": {
      "op": "bytec 4 // \"s_\"",
      "defined_out": [
        "\"s_\"",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "\"s_\""
      ]
    },
    "1992": {
      "op": "dig 1",
      "defined_out": [
        "\"s_\"",
        "encoded_value%0#0",
        "encoded_value%0#0 (copy)"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "\"s_\"",
        "encoded_value%0#0 (copy)"
      ]
    },
    "1994": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0"
      ]
    },
    "1995": {
      "op": "dup",
      "defined_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)"
      ]
    },
    "1996": {
      "op": "box_len",
      "defined_out": [
        "_%0#0",
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "_%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1997": {
      "op": "bury 1",
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1999": {
      "error": "Box game state not found. Check if Game ID is valid.",
      "op": "assert // Box game state not found. Check if Game ID is valid.",
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0"
      ]
    },
    "2000": {
      "op": "frame_dig -1",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "stake_pay#0 (copy)"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "stake_pay#0 (copy)"
      ]
    },
    "2002": {
      "op": "gtxns Amount",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "tmp%2#0"
      ]
    },
    "2004": {
      "op": "dup",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ]
    },
    "2005": {
      "op": "pushint 258400 // 258400",
      "defined_out": [
        "258400",
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "tmp%2#0",
        "tmp%2#0 (copy)",
        "258400"
      ]
    },
    "2009": {
      "op": ">=",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "2010": {
      "error": "Insufficient funds. Stake pay amount is not enough to cover staking requirements.",
      "op": "assert // Insufficient funds. Stake pay amount is not enough to cover staking requirements.",
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "tmp%2#0"
      ]
    },
    "2011": {
      "op": "frame_dig -1",
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "tmp%2#0",
        "stake_pay#0 (copy)"
      ]
    },
    "2013": {
      "op": "gtxns Sender",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "tmp%2#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "tmp%2#0",
        "tmp%4#0"
      ]
    },
    "2015": {
      "op": "txn Sender",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "tmp%2#0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "tmp%2#0",
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "2017": {
      "op": "==",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "tmp%2#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "tmp%2#0",
        "tmp%6#0"
      ]
    },
    "2018": {
      "error": "Stake payment sender address must match transaction sender address.",
      "op": "assert // Stake payment sender address must match transaction sender address.",
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "tmp%2#0"
      ]
    },
    "2019": {
      "op": "frame_dig -1",
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "tmp%2#0",
        "stake_pay#0 (copy)"
      ]
    },
    "2021": {
      "op": "gtxns Receiver",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "tmp%2#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "tmp%2#0",
        "tmp%7#0"
      ]
    },
    "2023": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "tmp%2#0",
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "tmp%2#0",
        "tmp%7#0",
        "tmp%8#0"
      ]
    },
    "2025": {
      "op": "==",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "tmp%2#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "tmp%2#0",
        "tmp%9#0"
      ]
    },
    "2026": {
      "error": "Stake payment receiver address must match application address.",
      "op": "assert // Stake payment receiver address must match application address.",
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "tmp%2#0"
      ]
    },
    "2027": {
      "op": "dig 1",
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "tmp%2#0",
        "box_prefixed_key%0#0 (copy)"
      ]
    },
    "2029": {
      "op": "box_get",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "maybe_exists%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "tmp%2#0",
        "game_state#0",
        "maybe_exists%1#0"
      ]
    },
    "2030": {
      "error": "check self.box_game_state entry exists",
      "op": "assert // check self.box_game_state entry exists",
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "tmp%2#0",
        "game_state#0"
      ]
    },
    "2031": {
      "op": "txn Sender",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "tmp%10#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "tmp%2#0",
        "game_state#0",
        "tmp%10#0"
      ]
    },
    "2033": {
      "op": "dig 1",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#0 (copy)",
        "tmp%10#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "tmp%2#0",
        "game_state#0",
        "tmp%10#0",
        "game_state#0 (copy)"
      ]
    },
    "2035": {
      "op": "intc_2 // 2",
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "tmp%2#0",
        "game_state#0",
        "tmp%10#0",
        "game_state#0 (copy)",
        "2"
      ]
    },
    "2036": {
      "op": "getbyte",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "tmp%10#0",
        "tmp%12#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "tmp%2#0",
        "game_state#0",
        "tmp%10#0",
        "tmp%12#0"
      ]
    },
    "2037": {
      "op": "frame_dig -2",
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "tmp%2#0",
        "game_state#0",
        "tmp%10#0",
        "tmp%12#0",
        "game_id#0 (copy)"
      ]
    },
    "2039": {
      "op": "uncover 2",
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "tmp%2#0",
        "game_state#0",
        "tmp%12#0",
        "game_id#0 (copy)",
        "tmp%10#0"
      ]
    },
    "2041": {
      "op": "bytec_1 // \"p_\"",
      "defined_out": [
        "\"p_\"",
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_id#0 (copy)",
        "game_state#0",
        "tmp%10#0",
        "tmp%12#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "tmp%2#0",
        "game_state#0",
        "tmp%12#0",
        "game_id#0 (copy)",
        "tmp%10#0",
        "\"p_\""
      ]
    },
    "2042": {
      "op": "dig 3",
      "defined_out": [
        "\"p_\"",
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_id#0 (copy)",
        "game_state#0",
        "tmp%10#0",
        "tmp%12#0",
        "tmp%12#0 (copy)",
        "tmp%2#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "tmp%2#0",
        "game_state#0",
        "tmp%12#0",
        "game_id#0 (copy)",
        "tmp%10#0",
        "\"p_\"",
        "tmp%12#0 (copy)"
      ]
    },
    "2044": {
      "op": "intc_1 // 0",
      "defined_out": [
        "\"p_\"",
        "0",
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_id#0 (copy)",
        "game_state#0",
        "tmp%10#0",
        "tmp%12#0",
        "tmp%12#0 (copy)",
        "tmp%2#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "tmp%2#0",
        "game_state#0",
        "tmp%12#0",
        "game_id#0 (copy)",
        "tmp%10#0",
        "\"p_\"",
        "tmp%12#0 (copy)",
        "0"
      ]
    },
    "2045": {
      "callsub": "smart_contracts.pieout.subroutines.check_acc_in_game",
      "op": "callsub check_acc_in_game",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "tmp%12#0",
        "tmp%13#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "tmp%2#0",
        "game_state#0",
        "tmp%12#0",
        "tmp%13#0"
      ]
    },
    "2048": {
      "op": "!",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "tmp%12#0",
        "tmp%14#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "tmp%2#0",
        "game_state#0",
        "tmp%12#0",
        "tmp%14#0"
      ]
    },
    "2049": {
      "error": "Player with this address must not be an active game participant in the game.",
      "op": "assert // Player with this address must not be an active game participant in the game.",
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "tmp%2#0",
        "game_state#0",
        "tmp%12#0"
      ]
    },
    "2050": {
      "op": "dig 1",
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "tmp%2#0",
        "game_state#0",
        "tmp%12#0",
        "game_state#0 (copy)"
      ]
    },
    "2052": {
      "op": "intc_1 // 0",
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "tmp%2#0",
        "game_state#0",
        "tmp%12#0",
        "game_state#0 (copy)",
        "0"
      ]
    },
    "2053": {
      "op": "getbit",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "is_true%0#0",
        "tmp%12#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "tmp%2#0",
        "game_state#0",
        "tmp%12#0",
        "is_true%0#0"
      ]
    },
    "2054": {
      "op": "bytec_0 // 0x00",
      "defined_out": [
        "0x00",
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "is_true%0#0",
        "tmp%12#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "tmp%2#0",
        "game_state#0",
        "tmp%12#0",
        "is_true%0#0",
        "0x00"
      ]
    },
    "2055": {
      "op": "intc_1 // 0",
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "tmp%2#0",
        "game_state#0",
        "tmp%12#0",
        "is_true%0#0",
        "0x00",
        "0"
      ]
    },
    "2056": {
      "op": "uncover 2",
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "tmp%2#0",
        "game_state#0",
        "tmp%12#0",
        "0x00",
        "0",
        "is_true%0#0"
      ]
    },
    "2058": {
      "op": "setbit",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "tmp%12#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "tmp%2#0",
        "game_state#0",
        "tmp%12#0",
        "encoded_bool%0#0"
      ]
    },
    "2059": {
      "op": "intc_1 // 0",
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "tmp%2#0",
        "game_state#0",
        "tmp%12#0",
        "encoded_bool%0#0",
        "0"
      ]
    },
    "2060": {
      "op": "getbit",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "tmp%12#0",
        "tmp%15#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "tmp%2#0",
        "game_state#0",
        "tmp%12#0",
        "tmp%15#0"
      ]
    },
    "2061": {
      "op": "!",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "tmp%12#0",
        "tmp%16#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "tmp%2#0",
        "game_state#0",
        "tmp%12#0",
        "tmp%16#0"
      ]
    },
    "2062": {
      "error": "Game state staking finalized value mismatch.",
      "op": "assert // Game state staking finalized value mismatch.",
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "tmp%2#0",
        "game_state#0",
        "tmp%12#0"
      ]
    },
    "2063": {
      "op": "dig 1",
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "tmp%2#0",
        "game_state#0",
        "tmp%12#0",
        "game_state#0 (copy)"
      ]
    },
    "2065": {
      "error": "Index access is out of bounds",
      "op": "extract 8 8 // on error: Index access is out of bounds",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "reinterpret_biguint%0#0",
        "tmp%12#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "tmp%2#0",
        "game_state#0",
        "tmp%12#0",
        "reinterpret_biguint%0#0"
      ]
    },
    "2068": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "reinterpret_biguint%0#0",
        "tmp%12#0",
        "tmp%17#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "tmp%2#0",
        "game_state#0",
        "tmp%12#0",
        "reinterpret_biguint%0#0",
        "tmp%17#0"
      ]
    },
    "2070": {
      "op": "itob",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "reinterpret_biguint%0#0",
        "tmp%12#0",
        "tmp%18#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "tmp%2#0",
        "game_state#0",
        "tmp%12#0",
        "reinterpret_biguint%0#0",
        "tmp%18#0"
      ]
    },
    "2071": {
      "op": "b>=",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "tmp%12#0",
        "tmp%19#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "tmp%2#0",
        "game_state#0",
        "tmp%12#0",
        "tmp%19#0"
      ]
    },
    "2072": {
      "error": "Phase deadline expired. Latest block timestamp must not exceed expiry timestamp.",
      "op": "assert // Phase deadline expired. Latest block timestamp must not exceed expiry timestamp.",
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "tmp%2#0",
        "game_state#0",
        "tmp%12#0"
      ]
    },
    "2073": {
      "op": "dig 1",
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "tmp%2#0",
        "game_state#0",
        "tmp%12#0",
        "game_state#0 (copy)"
      ]
    },
    "2075": {
      "error": "Index access is out of bounds",
      "op": "extract 2 1 // on error: Index access is out of bounds",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "reinterpret_biguint%1#0",
        "tmp%12#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "tmp%2#0",
        "game_state#0",
        "tmp%12#0",
        "reinterpret_biguint%1#0"
      ]
    },
    "2078": {
      "op": "dig 2",
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "tmp%2#0",
        "game_state#0",
        "tmp%12#0",
        "reinterpret_biguint%1#0",
        "game_state#0 (copy)"
      ]
    },
    "2080": {
      "error": "Index access is out of bounds",
      "op": "extract 1 1 // on error: Index access is out of bounds",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "reinterpret_biguint%1#0",
        "reinterpret_biguint%2#0",
        "tmp%12#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "tmp%2#0",
        "game_state#0",
        "tmp%12#0",
        "reinterpret_biguint%1#0",
        "reinterpret_biguint%2#0"
      ]
    },
    "2083": {
      "op": "b<=",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "tmp%12#0",
        "tmp%2#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "tmp%2#0",
        "game_state#0",
        "tmp%12#0",
        "tmp%20#0"
      ]
    },
    "2084": {
      "error": "Number of active players must not exceed number of max players.",
      "op": "assert // Number of active players must not exceed number of max players.",
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "tmp%2#0",
        "game_state#0",
        "tmp%12#0"
      ]
    },
    "2085": {
      "op": "dig 1",
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "tmp%2#0",
        "game_state#0",
        "tmp%12#0",
        "game_state#0 (copy)"
      ]
    },
    "2087": {
      "op": "pushint 6 // 6",
      "defined_out": [
        "6",
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#0 (copy)",
        "tmp%12#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "tmp%2#0",
        "game_state#0",
        "tmp%12#0",
        "game_state#0 (copy)",
        "6"
      ]
    },
    "2089": {
      "op": "extract_uint16",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "tmp%12#0",
        "tmp%2#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "tmp%2#0",
        "game_state#0",
        "tmp%12#0",
        "tmp%22#0"
      ]
    },
    "2090": {
      "op": "dig 2",
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "tmp%2#0",
        "game_state#0",
        "tmp%12#0",
        "tmp%22#0",
        "game_state#0 (copy)"
      ]
    },
    "2092": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#0 (copy)",
        "tmp%12#0",
        "tmp%2#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "tmp%2#0",
        "game_state#0",
        "tmp%12#0",
        "tmp%22#0",
        "game_state#0 (copy)",
        "1"
      ]
    },
    "2093": {
      "op": "getbyte",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "tmp%12#0",
        "tmp%2#0",
        "tmp%22#0",
        "tmp%24#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "tmp%2#0",
        "game_state#0",
        "tmp%12#0",
        "tmp%22#0",
        "tmp%24#0"
      ]
    },
    "2094": {
      "op": "intc_3 // 32",
      "defined_out": [
        "32",
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "tmp%12#0",
        "tmp%2#0",
        "tmp%22#0",
        "tmp%24#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "tmp%2#0",
        "game_state#0",
        "tmp%12#0",
        "tmp%22#0",
        "tmp%24#0",
        "32"
      ]
    },
    "2095": {
      "op": "*",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "tmp%12#0",
        "tmp%2#0",
        "tmp%22#0",
        "tmp%25#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "tmp%2#0",
        "game_state#0",
        "tmp%12#0",
        "tmp%22#0",
        "tmp%25#0"
      ]
    },
    "2096": {
      "op": "dig 1",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "tmp%12#0",
        "tmp%2#0",
        "tmp%22#0",
        "tmp%22#0 (copy)",
        "tmp%25#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "tmp%2#0",
        "game_state#0",
        "tmp%12#0",
        "tmp%22#0",
        "tmp%25#0",
        "tmp%22#0 (copy)"
      ]
    },
    "2098": {
      "op": ">",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "tmp%12#0",
        "tmp%2#0",
        "tmp%22#0",
        "tmp%26#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "tmp%2#0",
        "game_state#0",
        "tmp%12#0",
        "tmp%22#0",
        "tmp%26#0"
      ]
    },
    "2099": {
      "error": "Players box start position index overflow. Can not store more addresses.",
      "op": "assert // Players box start position index overflow. Can not store more addresses.",
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "tmp%2#0",
        "game_state#0",
        "tmp%12#0",
        "tmp%22#0"
      ]
    },
    "2100": {
      "op": "bytec_1 // \"p_\"",
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "tmp%2#0",
        "game_state#0",
        "tmp%12#0",
        "tmp%22#0",
        "\"p_\""
      ]
    },
    "2101": {
      "op": "uncover 6",
      "stack_out": [
        "box_prefixed_key%0#0",
        "tmp%2#0",
        "game_state#0",
        "tmp%12#0",
        "tmp%22#0",
        "\"p_\"",
        "encoded_value%0#0"
      ]
    },
    "2103": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0",
        "game_players_bref#0",
        "game_state#0",
        "tmp%12#0",
        "tmp%2#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "tmp%2#0",
        "game_state#0",
        "tmp%12#0",
        "tmp%22#0",
        "game_players_bref#0"
      ]
    },
    "2104": {
      "op": "txn Sender",
      "defined_out": [
        "box_prefixed_key%0#0",
        "game_players_bref#0",
        "game_state#0",
        "tmp%12#0",
        "tmp%2#0",
        "tmp%22#0",
        "tmp%30#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "tmp%2#0",
        "game_state#0",
        "tmp%12#0",
        "tmp%22#0",
        "game_players_bref#0",
        "tmp%30#0"
      ]
    },
    "2106": {
      "op": "swap",
      "stack_out": [
        "box_prefixed_key%0#0",
        "tmp%2#0",
        "game_state#0",
        "tmp%12#0",
        "tmp%22#0",
        "tmp%30#0",
        "game_players_bref#0"
      ]
    },
    "2107": {
      "op": "cover 2",
      "stack_out": [
        "box_prefixed_key%0#0",
        "tmp%2#0",
        "game_state#0",
        "tmp%12#0",
        "game_players_bref#0",
        "tmp%22#0",
        "tmp%30#0"
      ]
    },
    "2109": {
      "op": "box_replace",
      "stack_out": [
        "box_prefixed_key%0#0",
        "tmp%2#0",
        "game_state#0",
        "tmp%12#0"
      ]
    },
    "2110": {
      "op": "intc_0 // 1",
      "stack_out": [
        "box_prefixed_key%0#0",
        "tmp%2#0",
        "game_state#0",
        "tmp%12#0",
        "1"
      ]
    },
    "2111": {
      "op": "+",
      "defined_out": [
        "box_prefixed_key%0#0",
        "game_state#0",
        "tmp%2#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "tmp%2#0",
        "game_state#0",
        "to_encode%0#0"
      ]
    },
    "2112": {
      "op": "itob",
      "defined_out": [
        "box_prefixed_key%0#0",
        "game_state#0",
        "tmp%2#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "tmp%2#0",
        "game_state#0",
        "val_as_bytes%0#0"
      ]
    },
    "2113": {
      "op": "dup",
      "defined_out": [
        "box_prefixed_key%0#0",
        "game_state#0",
        "tmp%2#0",
        "val_as_bytes%0#0",
        "val_as_bytes%0#0 (copy)"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "tmp%2#0",
        "game_state#0",
        "val_as_bytes%0#0",
        "val_as_bytes%0#0 (copy)"
      ]
    },
    "2114": {
      "op": "bitlen",
      "defined_out": [
        "bitlen%0#0",
        "box_prefixed_key%0#0",
        "game_state#0",
        "tmp%2#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "tmp%2#0",
        "game_state#0",
        "val_as_bytes%0#0",
        "bitlen%0#0"
      ]
    },
    "2115": {
      "op": "pushint 8 // 8",
      "defined_out": [
        "8",
        "bitlen%0#0",
        "box_prefixed_key%0#0",
        "game_state#0",
        "tmp%2#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "tmp%2#0",
        "game_state#0",
        "val_as_bytes%0#0",
        "bitlen%0#0",
        "8"
      ]
    },
    "2117": {
      "op": "<=",
      "defined_out": [
        "box_prefixed_key%0#0",
        "game_state#0",
        "no_overflow%0#0",
        "tmp%2#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "tmp%2#0",
        "game_state#0",
        "val_as_bytes%0#0",
        "no_overflow%0#0"
      ]
    },
    "2118": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "box_prefixed_key%0#0",
        "tmp%2#0",
        "game_state#0",
        "val_as_bytes%0#0"
      ]
    },
    "2119": {
      "op": "extract 7 1",
      "defined_out": [
        "box_prefixed_key%0#0",
        "game_state#0",
        "tmp%2#0",
        "uint8%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "tmp%2#0",
        "game_state#0",
        "uint8%0#0"
      ]
    },
    "2122": {
      "op": "replace2 2",
      "stack_out": [
        "box_prefixed_key%0#0",
        "tmp%2#0",
        "game_state#0"
      ]
    },
    "2124": {
      "op": "dup",
      "stack_out": [
        "box_prefixed_key%0#0",
        "tmp%2#0",
        "game_state#0",
        "game_state#0 (copy)"
      ]
    },
    "2125": {
      "op": "pushint 6 // 6",
      "stack_out": [
        "box_prefixed_key%0#0",
        "tmp%2#0",
        "game_state#0",
        "game_state#0 (copy)",
        "6"
      ]
    },
    "2127": {
      "op": "extract_uint16",
      "defined_out": [
        "box_prefixed_key%0#0",
        "game_state#0",
        "tmp%2#0",
        "tmp%34#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "tmp%2#0",
        "game_state#0",
        "tmp%34#0"
      ]
    },
    "2128": {
      "op": "intc_3 // 32",
      "stack_out": [
        "box_prefixed_key%0#0",
        "tmp%2#0",
        "game_state#0",
        "tmp%34#0",
        "32"
      ]
    },
    "2129": {
      "op": "+",
      "defined_out": [
        "box_prefixed_key%0#0",
        "game_state#0",
        "tmp%2#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "tmp%2#0",
        "game_state#0",
        "to_encode%1#0"
      ]
    },
    "2130": {
      "op": "itob",
      "defined_out": [
        "box_prefixed_key%0#0",
        "game_state#0",
        "tmp%2#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "tmp%2#0",
        "game_state#0",
        "val_as_bytes%1#0"
      ]
    },
    "2131": {
      "op": "dup",
      "defined_out": [
        "box_prefixed_key%0#0",
        "game_state#0",
        "tmp%2#0",
        "val_as_bytes%1#0",
        "val_as_bytes%1#0 (copy)"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "tmp%2#0",
        "game_state#0",
        "val_as_bytes%1#0",
        "val_as_bytes%1#0 (copy)"
      ]
    },
    "2132": {
      "op": "bitlen",
      "defined_out": [
        "bitlen%1#0",
        "box_prefixed_key%0#0",
        "game_state#0",
        "tmp%2#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "tmp%2#0",
        "game_state#0",
        "val_as_bytes%1#0",
        "bitlen%1#0"
      ]
    },
    "2133": {
      "op": "pushint 16 // 16",
      "defined_out": [
        "16",
        "bitlen%1#0",
        "box_prefixed_key%0#0",
        "game_state#0",
        "tmp%2#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "tmp%2#0",
        "game_state#0",
        "val_as_bytes%1#0",
        "bitlen%1#0",
        "16"
      ]
    },
    "2135": {
      "op": "<=",
      "defined_out": [
        "box_prefixed_key%0#0",
        "game_state#0",
        "no_overflow%1#0",
        "tmp%2#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "tmp%2#0",
        "game_state#0",
        "val_as_bytes%1#0",
        "no_overflow%1#0"
      ]
    },
    "2136": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "box_prefixed_key%0#0",
        "tmp%2#0",
        "game_state#0",
        "val_as_bytes%1#0"
      ]
    },
    "2137": {
      "op": "extract 6 2",
      "defined_out": [
        "box_prefixed_key%0#0",
        "game_state#0",
        "tmp%2#0",
        "uint16%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "tmp%2#0",
        "game_state#0",
        "uint16%0#0"
      ]
    },
    "2140": {
      "op": "replace2 6",
      "stack_out": [
        "box_prefixed_key%0#0",
        "tmp%2#0",
        "game_state#0"
      ]
    },
    "2142": {
      "op": "dup",
      "stack_out": [
        "box_prefixed_key%0#0",
        "tmp%2#0",
        "game_state#0",
        "game_state#0 (copy)"
      ]
    },
    "2143": {
      "op": "pushint 16 // 16",
      "stack_out": [
        "box_prefixed_key%0#0",
        "tmp%2#0",
        "game_state#0",
        "game_state#0 (copy)",
        "16"
      ]
    },
    "2145": {
      "op": "extract_uint64",
      "defined_out": [
        "box_prefixed_key%0#0",
        "game_state#0",
        "tmp%2#0",
        "tmp%36#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "tmp%2#0",
        "game_state#0",
        "tmp%36#0"
      ]
    },
    "2146": {
      "op": "uncover 2",
      "stack_out": [
        "box_prefixed_key%0#0",
        "game_state#0",
        "tmp%36#0",
        "tmp%2#0"
      ]
    },
    "2148": {
      "op": "+",
      "defined_out": [
        "box_prefixed_key%0#0",
        "game_state#0",
        "to_encode%2#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "game_state#0",
        "to_encode%2#0"
      ]
    },
    "2149": {
      "op": "itob",
      "defined_out": [
        "box_prefixed_key%0#0",
        "game_state#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "game_state#0",
        "val_as_bytes%2#0"
      ]
    },
    "2150": {
      "op": "replace2 16",
      "stack_out": [
        "box_prefixed_key%0#0",
        "game_state#0"
      ]
    },
    "2152": {
      "callsub": "smart_contracts.pieout.subroutines.is_game_live",
      "op": "callsub is_game_live",
      "defined_out": [
        "box_prefixed_key%0#0",
        "game_state#0",
        "is_game_live%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "is_game_live%0#0",
        "game_state#0"
      ]
    },
    "2155": {
      "op": "bury 1",
      "stack_out": [
        "box_prefixed_key%0#0",
        "game_state#0"
      ]
    },
    "2157": {
      "op": "box_put",
      "stack_out": []
    },
    "2158": {
      "retsub": true,
      "op": "retsub"
    },
    "2159": {
      "subroutine": "smart_contracts.pieout.contract.Pieout.get_box_commit_rand",
      "params": {
        "box_c_pay#0": "uint64"
      },
      "block": "get_box_commit_rand",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "2162": {
      "op": "global GroupSize",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2164": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "2"
      ]
    },
    "2165": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "2166": {
      "error": "Invalid group size. This app call can only take standalone transactions.",
      "op": "assert // Invalid group size. This app call can only take standalone transactions.",
      "stack_out": []
    },
    "2167": {
      "op": "bytec_2 // \"c_\"",
      "defined_out": [
        "\"c_\""
      ],
      "stack_out": [
        "\"c_\""
      ]
    },
    "2168": {
      "op": "txn Sender",
      "defined_out": [
        "\"c_\"",
        "materialized_values%0#0"
      ],
      "stack_out": [
        "\"c_\"",
        "materialized_values%0#0"
      ]
    },
    "2170": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "2171": {
      "op": "box_len",
      "defined_out": [
        "_%0#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "_%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2172": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "2174": {
      "op": "!",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "2175": {
      "error": "Box found. Ensure the box you are trying to access does not exist already.",
      "op": "assert // Box found. Ensure the box you are trying to access does not exist already.",
      "stack_out": []
    },
    "2176": {
      "op": "frame_dig -1",
      "defined_out": [
        "box_c_pay#0 (copy)"
      ],
      "stack_out": [
        "box_c_pay#0 (copy)"
      ]
    },
    "2178": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "2180": {
      "op": "intc 6 // 22500",
      "defined_out": [
        "22500",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "22500"
      ]
    },
    "2182": {
      "op": ">=",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "2183": {
      "error": "Insufficient funds. Box pay amount is not enough to cover application MBR.",
      "op": "assert // Insufficient funds. Box pay amount is not enough to cover application MBR.",
      "stack_out": []
    },
    "2184": {
      "op": "frame_dig -1",
      "stack_out": [
        "box_c_pay#0 (copy)"
      ]
    },
    "2186": {
      "op": "gtxns Sender",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "2188": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "tmp%6#0"
      ]
    },
    "2190": {
      "op": "==",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "2191": {
      "error": "Box payment sender address must match transaction sender address.",
      "op": "assert // Box payment sender address must match transaction sender address.",
      "stack_out": []
    },
    "2192": {
      "op": "frame_dig -1",
      "stack_out": [
        "box_c_pay#0 (copy)"
      ]
    },
    "2194": {
      "op": "gtxns Receiver",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "2196": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "2198": {
      "op": "==",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "2199": {
      "error": "Box payment receiver address must match application address.",
      "op": "assert // Box payment receiver address must match application address.",
      "stack_out": []
    },
    "2200": {
      "op": "bytec_2 // \"c_\"",
      "stack_out": [
        "\"c_\""
      ]
    },
    "2201": {
      "op": "txn Sender",
      "defined_out": [
        "\"c_\"",
        "materialized_values%1#0"
      ],
      "stack_out": [
        "\"c_\"",
        "materialized_values%1#0"
      ]
    },
    "2203": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%1#0"
      ],
      "stack_out": [
        "box_prefixed_key%1#0"
      ]
    },
    "2204": {
      "op": "pushbytes 0x00000000000000000000000000000000",
      "defined_out": [
        "0x00000000000000000000000000000000",
        "box_prefixed_key%1#0"
      ],
      "stack_out": [
        "box_prefixed_key%1#0",
        "0x00000000000000000000000000000000"
      ]
    },
    "2222": {
      "op": "box_put",
      "stack_out": []
    },
    "2223": {
      "retsub": true,
      "op": "retsub"
    },
    "2224": {
      "subroutine": "smart_contracts.pieout.contract.Pieout.get_rand_commit_round",
      "params": {
        "game_id#0": "uint64"
      },
      "block": "get_rand_commit_round",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "2227": {
      "op": "frame_dig -1",
      "defined_out": [
        "game_id#0 (copy)"
      ],
      "stack_out": [
        "game_id#0 (copy)"
      ]
    },
    "2229": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "2230": {
      "op": "bytec 4 // \"s_\"",
      "defined_out": [
        "\"s_\"",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "\"s_\""
      ]
    },
    "2232": {
      "op": "dig 1",
      "defined_out": [
        "\"s_\"",
        "encoded_value%0#0",
        "encoded_value%0#0 (copy)"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "\"s_\"",
        "encoded_value%0#0 (copy)"
      ]
    },
    "2234": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0"
      ]
    },
    "2235": {
      "op": "dup",
      "defined_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)"
      ]
    },
    "2236": {
      "op": "box_len",
      "defined_out": [
        "_%0#0",
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "_%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2237": {
      "op": "bury 1",
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2239": {
      "error": "Box game state not found. Check if Game ID is valid.",
      "op": "assert // Box game state not found. Check if Game ID is valid.",
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0"
      ]
    },
    "2240": {
      "op": "bytec_2 // \"c_\"",
      "defined_out": [
        "\"c_\"",
        "box_prefixed_key%0#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "\"c_\""
      ]
    },
    "2241": {
      "op": "txn Sender",
      "defined_out": [
        "\"c_\"",
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "materialized_values%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "\"c_\"",
        "materialized_values%0#0"
      ]
    },
    "2243": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%1#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "box_prefixed_key%1#0"
      ]
    },
    "2244": {
      "op": "box_len",
      "defined_out": [
        "_%1#0",
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "maybe_exists%1#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "_%1#0",
        "maybe_exists%1#0"
      ]
    },
    "2245": {
      "op": "bury 1",
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "maybe_exists%1#0"
      ]
    },
    "2247": {
      "error": "Box not found. Ensure the box you are trying to access was created and still exists.",
      "op": "assert // Box not found. Ensure the box you are trying to access was created and still exists.",
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0"
      ]
    },
    "2248": {
      "op": "box_get",
      "defined_out": [
        "encoded_value%0#0",
        "maybe_exists%2#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "maybe_value%0#0",
        "maybe_exists%2#0"
      ]
    },
    "2249": {
      "error": "check self.box_game_state entry exists",
      "op": "assert // check self.box_game_state entry exists",
      "stack_out": [
        "encoded_value%0#0",
        "maybe_value%0#0"
      ]
    },
    "2250": {
      "op": "dup",
      "defined_out": [
        "encoded_value%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ]
    },
    "2251": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "encoded_value%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)",
        "0"
      ]
    },
    "2252": {
      "op": "getbit",
      "defined_out": [
        "encoded_value%0#0",
        "is_true%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "maybe_value%0#0",
        "is_true%0#0"
      ]
    },
    "2253": {
      "op": "bytec_0 // 0x00",
      "defined_out": [
        "0x00",
        "encoded_value%0#0",
        "is_true%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "maybe_value%0#0",
        "is_true%0#0",
        "0x00"
      ]
    },
    "2254": {
      "op": "intc_1 // 0",
      "stack_out": [
        "encoded_value%0#0",
        "maybe_value%0#0",
        "is_true%0#0",
        "0x00",
        "0"
      ]
    },
    "2255": {
      "op": "uncover 2",
      "stack_out": [
        "encoded_value%0#0",
        "maybe_value%0#0",
        "0x00",
        "0",
        "is_true%0#0"
      ]
    },
    "2257": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "maybe_value%0#0",
        "encoded_bool%0#0"
      ]
    },
    "2258": {
      "op": "intc_1 // 0",
      "stack_out": [
        "encoded_value%0#0",
        "maybe_value%0#0",
        "encoded_bool%0#0",
        "0"
      ]
    },
    "2259": {
      "op": "getbit",
      "defined_out": [
        "encoded_value%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ]
    },
    "2260": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "encoded_value%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "maybe_value%0#0",
        "tmp%0#0",
        "1"
      ]
    },
    "2261": {
      "op": "==",
      "defined_out": [
        "encoded_value%0#0",
        "maybe_value%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "maybe_value%0#0",
        "tmp%1#0"
      ]
    },
    "2262": {
      "error": "Game state staking finalized value mismatch.",
      "op": "assert // Game state staking finalized value mismatch.",
      "stack_out": [
        "encoded_value%0#0",
        "maybe_value%0#0"
      ]
    },
    "2263": {
      "op": "txn Sender",
      "defined_out": [
        "encoded_value%0#0",
        "maybe_value%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "maybe_value%0#0",
        "tmp%2#0"
      ]
    },
    "2265": {
      "op": "swap",
      "stack_out": [
        "encoded_value%0#0",
        "tmp%2#0",
        "maybe_value%0#0"
      ]
    },
    "2266": {
      "op": "intc_0 // 1",
      "stack_out": [
        "encoded_value%0#0",
        "tmp%2#0",
        "maybe_value%0#0",
        "1"
      ]
    },
    "2267": {
      "op": "getbyte",
      "defined_out": [
        "encoded_value%0#0",
        "tmp%2#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "tmp%2#0",
        "tmp%4#0"
      ]
    },
    "2268": {
      "op": "frame_dig -1",
      "stack_out": [
        "encoded_value%0#0",
        "tmp%2#0",
        "tmp%4#0",
        "game_id#0 (copy)"
      ]
    },
    "2270": {
      "op": "uncover 2",
      "stack_out": [
        "encoded_value%0#0",
        "tmp%4#0",
        "game_id#0 (copy)",
        "tmp%2#0"
      ]
    },
    "2272": {
      "op": "bytec_1 // \"p_\"",
      "defined_out": [
        "\"p_\"",
        "encoded_value%0#0",
        "game_id#0 (copy)",
        "tmp%2#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "tmp%4#0",
        "game_id#0 (copy)",
        "tmp%2#0",
        "\"p_\""
      ]
    },
    "2273": {
      "op": "uncover 3",
      "stack_out": [
        "encoded_value%0#0",
        "game_id#0 (copy)",
        "tmp%2#0",
        "\"p_\"",
        "tmp%4#0"
      ]
    },
    "2275": {
      "op": "intc_1 // 0",
      "stack_out": [
        "encoded_value%0#0",
        "game_id#0 (copy)",
        "tmp%2#0",
        "\"p_\"",
        "tmp%4#0",
        "0"
      ]
    },
    "2276": {
      "callsub": "smart_contracts.pieout.subroutines.check_acc_in_game",
      "op": "callsub check_acc_in_game",
      "defined_out": [
        "encoded_value%0#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "tmp%5#0"
      ]
    },
    "2279": {
      "op": "intc_0 // 1",
      "stack_out": [
        "encoded_value%0#0",
        "tmp%5#0",
        "1"
      ]
    },
    "2280": {
      "op": "==",
      "defined_out": [
        "encoded_value%0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "tmp%6#0"
      ]
    },
    "2281": {
      "error": "Sender address is not recognized as a valid player for this game.",
      "op": "assert // Sender address is not recognized as a valid player for this game.",
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "2282": {
      "op": "bytec_2 // \"c_\"",
      "stack_out": [
        "encoded_value%0#0",
        "\"c_\""
      ]
    },
    "2283": {
      "op": "txn Sender",
      "defined_out": [
        "\"c_\"",
        "encoded_value%0#0",
        "materialized_values%1#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "\"c_\"",
        "materialized_values%1#0"
      ]
    },
    "2285": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%4#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%4#0"
      ]
    },
    "2286": {
      "op": "box_get",
      "defined_out": [
        "commit_rand#0",
        "encoded_value%0#0",
        "maybe_exists%4#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "commit_rand#0",
        "maybe_exists%4#0"
      ]
    },
    "2287": {
      "error": "check self.box_commit_rand entry exists",
      "op": "assert // check self.box_commit_rand entry exists",
      "stack_out": [
        "encoded_value%0#0",
        "commit_rand#0"
      ]
    },
    "2288": {
      "op": "dup",
      "defined_out": [
        "commit_rand#0",
        "commit_rand#0 (copy)",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "commit_rand#0",
        "commit_rand#0 (copy)"
      ]
    },
    "2289": {
      "op": "pushint 8 // 8",
      "defined_out": [
        "8",
        "commit_rand#0",
        "commit_rand#0 (copy)",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "commit_rand#0",
        "commit_rand#0 (copy)",
        "8"
      ]
    },
    "2291": {
      "op": "extract_uint64",
      "defined_out": [
        "commit_rand#0",
        "encoded_value%0#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "commit_rand#0",
        "tmp%8#0"
      ]
    },
    "2292": {
      "op": "!",
      "defined_out": [
        "commit_rand#0",
        "encoded_value%0#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "commit_rand#0",
        "tmp%9#0"
      ]
    },
    "2293": {
      "error": "Commit rand round found. Exsisting round value must be zero to obtain a new one.",
      "op": "assert // Commit rand round found. Exsisting round value must be zero to obtain a new one.",
      "stack_out": [
        "encoded_value%0#0",
        "commit_rand#0"
      ]
    },
    "2294": {
      "op": "global Round",
      "defined_out": [
        "commit_rand#0",
        "encoded_value%0#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "commit_rand#0",
        "tmp%10#0"
      ]
    },
    "2296": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "commit_rand#0",
        "encoded_value%0#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "commit_rand#0",
        "tmp%10#0",
        "4"
      ]
    },
    "2298": {
      "op": "+",
      "defined_out": [
        "commit_rand#0",
        "encoded_value%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "commit_rand#0",
        "to_encode%0#0"
      ]
    },
    "2299": {
      "op": "itob",
      "defined_out": [
        "commit_rand#0",
        "encoded_value%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "commit_rand#0",
        "val_as_bytes%0#0"
      ]
    },
    "2300": {
      "op": "replace2 8",
      "stack_out": [
        "encoded_value%0#0",
        "commit_rand#0"
      ]
    },
    "2302": {
      "op": "swap",
      "stack_out": [
        "commit_rand#0",
        "encoded_value%0#0"
      ]
    },
    "2303": {
      "op": "replace2 0",
      "stack_out": [
        "commit_rand#0"
      ]
    },
    "2305": {
      "op": "bytec_2 // \"c_\"",
      "stack_out": [
        "commit_rand#0",
        "\"c_\""
      ]
    },
    "2306": {
      "op": "txn Sender",
      "defined_out": [
        "\"c_\"",
        "commit_rand#0",
        "materialized_values%2#0"
      ],
      "stack_out": [
        "commit_rand#0",
        "\"c_\"",
        "materialized_values%2#0"
      ]
    },
    "2308": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%5#0",
        "commit_rand#0"
      ],
      "stack_out": [
        "commit_rand#0",
        "box_prefixed_key%5#0"
      ]
    },
    "2309": {
      "op": "swap",
      "stack_out": [
        "box_prefixed_key%5#0",
        "commit_rand#0"
      ]
    },
    "2310": {
      "op": "box_put",
      "stack_out": []
    },
    "2311": {
      "retsub": true,
      "op": "retsub"
    },
    "2312": {
      "subroutine": "smart_contracts.pieout.contract.Pieout.del_box_commit_rand_player",
      "params": {},
      "block": "del_box_commit_rand_player",
      "stack_in": [],
      "op": "global GroupSize",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2314": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "1"
      ]
    },
    "2315": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "2316": {
      "error": "Invalid group size. This app call can only take standalone transactions.",
      "op": "assert // Invalid group size. This app call can only take standalone transactions.",
      "stack_out": []
    },
    "2317": {
      "op": "bytec_2 // \"c_\"",
      "defined_out": [
        "\"c_\""
      ],
      "stack_out": [
        "\"c_\""
      ]
    },
    "2318": {
      "op": "txn Sender",
      "defined_out": [
        "\"c_\"",
        "materialized_values%0#0"
      ],
      "stack_out": [
        "\"c_\"",
        "materialized_values%0#0"
      ]
    },
    "2320": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "2321": {
      "op": "box_len",
      "defined_out": [
        "_%0#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "_%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2322": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "2324": {
      "error": "Box not found. Ensure the box you are trying to access was created and still exists.",
      "op": "assert // Box not found. Ensure the box you are trying to access was created and still exists.",
      "stack_out": []
    },
    "2325": {
      "op": "bytec_2 // \"c_\"",
      "stack_out": [
        "\"c_\""
      ]
    },
    "2326": {
      "op": "txn Sender",
      "defined_out": [
        "\"c_\"",
        "materialized_values%1#0"
      ],
      "stack_out": [
        "\"c_\"",
        "materialized_values%1#0"
      ]
    },
    "2328": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%1#0"
      ],
      "stack_out": [
        "box_prefixed_key%1#0"
      ]
    },
    "2329": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%1#0"
      ]
    },
    "2330": {
      "error": "check self.box_commit_rand entry exists",
      "op": "assert // check self.box_commit_rand entry exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "2331": {
      "op": "pushint 8 // 8",
      "defined_out": [
        "8",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "8"
      ]
    },
    "2333": {
      "op": "extract_uint64",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "2334": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "2335": {
      "error": "Commit rand round found. Exsisting round value must be zero to obtain a new one.",
      "op": "assert // Commit rand round found. Exsisting round value must be zero to obtain a new one.",
      "stack_out": []
    },
    "2336": {
      "op": "bytec_2 // \"c_\"",
      "stack_out": [
        "\"c_\""
      ]
    },
    "2337": {
      "op": "txn Sender",
      "defined_out": [
        "\"c_\"",
        "materialized_values%2#0"
      ],
      "stack_out": [
        "\"c_\"",
        "materialized_values%2#0"
      ]
    },
    "2339": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%2#0"
      ],
      "stack_out": [
        "box_prefixed_key%2#0"
      ]
    },
    "2340": {
      "op": "box_del",
      "defined_out": [
        "{box_del}"
      ],
      "stack_out": [
        "{box_del}"
      ]
    },
    "2341": {
      "op": "pop",
      "stack_out": []
    },
    "2342": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "2344": {
      "op": "intc 6 // 22500",
      "defined_out": [
        "22500",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "22500"
      ]
    },
    "2346": {
      "op": "pushbytes \"sender:app_address,receiver:sender_address,concern:box_commit_rand_deletion\"",
      "defined_out": [
        "\"sender:app_address,receiver:sender_address,concern:box_commit_rand_deletion\"",
        "22500",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "22500",
        "\"sender:app_address,receiver:sender_address,concern:box_commit_rand_deletion\""
      ]
    },
    "2423": {
      "callsub": "smart_contracts.pieout.subroutines.payout_itxn",
      "op": "callsub payout_itxn",
      "stack_out": []
    },
    "2426": {
      "retsub": true,
      "op": "retsub"
    },
    "2427": {
      "subroutine": "smart_contracts.pieout.contract.Pieout.del_box_commit_rand_admin",
      "params": {
        "game_id#0": "uint64",
        "account#0": "bytes"
      },
      "block": "del_box_commit_rand_admin",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "2430": {
      "op": "global GroupSize",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2432": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "1"
      ]
    },
    "2433": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "2434": {
      "error": "Invalid group size. This app call can only take standalone transactions.",
      "op": "assert // Invalid group size. This app call can only take standalone transactions.",
      "stack_out": []
    },
    "2435": {
      "op": "frame_dig -2",
      "defined_out": [
        "game_id#0 (copy)"
      ],
      "stack_out": [
        "game_id#0 (copy)"
      ]
    },
    "2437": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "2438": {
      "op": "bytec 4 // \"s_\"",
      "defined_out": [
        "\"s_\"",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "\"s_\""
      ]
    },
    "2440": {
      "op": "swap",
      "stack_out": [
        "\"s_\"",
        "encoded_value%0#0"
      ]
    },
    "2441": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "2442": {
      "op": "dup",
      "defined_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)"
      ]
    },
    "2443": {
      "op": "box_len",
      "defined_out": [
        "_%0#0",
        "box_prefixed_key%0#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "_%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2444": {
      "op": "bury 1",
      "stack_out": [
        "box_prefixed_key%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2446": {
      "error": "Box game state not found. Check if Game ID is valid.",
      "op": "assert // Box game state not found. Check if Game ID is valid.",
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "2447": {
      "op": "txn Sender",
      "defined_out": [
        "box_prefixed_key%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "tmp%2#0"
      ]
    },
    "2449": {
      "op": "swap",
      "stack_out": [
        "tmp%2#0",
        "box_prefixed_key%0#0"
      ]
    },
    "2450": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "maybe_value%0#0",
        "maybe_exists%1#0"
      ]
    },
    "2451": {
      "error": "check self.box_game_state entry exists",
      "op": "assert // check self.box_game_state entry exists",
      "stack_out": [
        "tmp%2#0",
        "maybe_value%0#0"
      ]
    },
    "2452": {
      "op": "dup",
      "defined_out": [
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ]
    },
    "2453": {
      "error": "Index access is out of bounds",
      "op": "extract 24 32 // on error: Index access is out of bounds",
      "defined_out": [
        "maybe_value%0#0",
        "reinterpret_bytes[32]%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "maybe_value%0#0",
        "reinterpret_bytes[32]%0#0"
      ]
    },
    "2456": {
      "op": "uncover 2",
      "stack_out": [
        "maybe_value%0#0",
        "reinterpret_bytes[32]%0#0",
        "tmp%2#0"
      ]
    },
    "2458": {
      "op": "==",
      "defined_out": [
        "maybe_value%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "tmp%3#0"
      ]
    },
    "2459": {
      "error": "Sender address is not recognized as the admin address for this game.",
      "op": "assert // Sender address is not recognized as the admin address for this game.",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "2460": {
      "op": "bytec_2 // \"c_\"",
      "defined_out": [
        "\"c_\"",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "\"c_\""
      ]
    },
    "2461": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"c_\"",
        "account#0 (copy)",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "\"c_\"",
        "account#0 (copy)"
      ]
    },
    "2463": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%2#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "box_prefixed_key%2#0"
      ]
    },
    "2464": {
      "op": "dup",
      "defined_out": [
        "box_prefixed_key%2#0",
        "box_prefixed_key%2#0 (copy)",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "box_prefixed_key%2#0",
        "box_prefixed_key%2#0 (copy)"
      ]
    },
    "2465": {
      "op": "box_len",
      "defined_out": [
        "_%1#0",
        "box_prefixed_key%2#0",
        "maybe_exists%2#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "box_prefixed_key%2#0",
        "_%1#0",
        "maybe_exists%2#0"
      ]
    },
    "2466": {
      "op": "bury 1",
      "stack_out": [
        "maybe_value%0#0",
        "box_prefixed_key%2#0",
        "maybe_exists%2#0"
      ]
    },
    "2468": {
      "error": "Box not found. Ensure the box you are trying to access was created and still exists.",
      "op": "assert // Box not found. Ensure the box you are trying to access was created and still exists.",
      "stack_out": [
        "maybe_value%0#0",
        "box_prefixed_key%2#0"
      ]
    },
    "2469": {
      "op": "swap",
      "stack_out": [
        "box_prefixed_key%2#0",
        "maybe_value%0#0"
      ]
    },
    "2470": {
      "op": "intc_0 // 1",
      "stack_out": [
        "box_prefixed_key%2#0",
        "maybe_value%0#0",
        "1"
      ]
    },
    "2471": {
      "op": "getbyte",
      "defined_out": [
        "box_prefixed_key%2#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "box_prefixed_key%2#0",
        "tmp%5#0"
      ]
    },
    "2472": {
      "op": "frame_dig -2",
      "stack_out": [
        "box_prefixed_key%2#0",
        "tmp%5#0",
        "game_id#0 (copy)"
      ]
    },
    "2474": {
      "op": "frame_dig -1",
      "stack_out": [
        "box_prefixed_key%2#0",
        "tmp%5#0",
        "game_id#0 (copy)",
        "account#0 (copy)"
      ]
    },
    "2476": {
      "op": "bytec_1 // \"p_\"",
      "defined_out": [
        "\"p_\"",
        "account#0 (copy)",
        "box_prefixed_key%2#0",
        "game_id#0 (copy)",
        "tmp%5#0"
      ],
      "stack_out": [
        "box_prefixed_key%2#0",
        "tmp%5#0",
        "game_id#0 (copy)",
        "account#0 (copy)",
        "\"p_\""
      ]
    },
    "2477": {
      "op": "uncover 3",
      "stack_out": [
        "box_prefixed_key%2#0",
        "game_id#0 (copy)",
        "account#0 (copy)",
        "\"p_\"",
        "tmp%5#0"
      ]
    },
    "2479": {
      "op": "intc_1 // 0",
      "defined_out": [
        "\"p_\"",
        "0",
        "account#0 (copy)",
        "box_prefixed_key%2#0",
        "game_id#0 (copy)",
        "tmp%5#0"
      ],
      "stack_out": [
        "box_prefixed_key%2#0",
        "game_id#0 (copy)",
        "account#0 (copy)",
        "\"p_\"",
        "tmp%5#0",
        "0"
      ]
    },
    "2480": {
      "callsub": "smart_contracts.pieout.subroutines.check_acc_in_game",
      "op": "callsub check_acc_in_game",
      "defined_out": [
        "box_prefixed_key%2#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "box_prefixed_key%2#0",
        "tmp%6#0"
      ]
    },
    "2483": {
      "op": "!",
      "defined_out": [
        "box_prefixed_key%2#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "box_prefixed_key%2#0",
        "tmp%7#0"
      ]
    },
    "2484": {
      "error": "Player with this address must not be an active game participant in the game.",
      "op": "assert // Player with this address must not be an active game participant in the game.",
      "stack_out": [
        "box_prefixed_key%2#0"
      ]
    },
    "2485": {
      "op": "box_del",
      "defined_out": [
        "{box_del}"
      ],
      "stack_out": [
        "{box_del}"
      ]
    },
    "2486": {
      "op": "pop",
      "stack_out": []
    },
    "2487": {
      "op": "frame_dig -1",
      "stack_out": [
        "account#0 (copy)"
      ]
    },
    "2489": {
      "op": "intc 6 // 22500",
      "defined_out": [
        "22500",
        "account#0 (copy)"
      ],
      "stack_out": [
        "account#0 (copy)",
        "22500"
      ]
    },
    "2491": {
      "op": "pushbytes \"sender:app_address,receiver:account_address,concern:box_commit_rand_deletion\"",
      "defined_out": [
        "\"sender:app_address,receiver:account_address,concern:box_commit_rand_deletion\"",
        "22500",
        "account#0 (copy)"
      ],
      "stack_out": [
        "account#0 (copy)",
        "22500",
        "\"sender:app_address,receiver:account_address,concern:box_commit_rand_deletion\""
      ]
    },
    "2569": {
      "callsub": "smart_contracts.pieout.subroutines.payout_itxn",
      "op": "callsub payout_itxn",
      "stack_out": []
    },
    "2572": {
      "retsub": true,
      "op": "retsub"
    },
    "2573": {
      "subroutine": "smart_contracts.pieout.contract.Pieout.resolve_score",
      "params": {
        "game_id#0": "uint64"
      },
      "block": "resolve_score",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "2576": {
      "op": "intc_1 // 0",
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "2577": {
      "op": "dupn 7",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0"
      ]
    },
    "2579": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0"
      ]
    },
    "2581": {
      "op": "dupn 7",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1"
      ]
    },
    "2583": {
      "block": "resolve_score_while_top@11",
      "stack_in": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1"
      ],
      "op": "pushint 19610 // 19610",
      "defined_out": [
        "19610"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "19610"
      ]
    },
    "2587": {
      "op": "global OpcodeBudget",
      "defined_out": [
        "19610",
        "tmp%0#1"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "19610",
        "tmp%0#1"
      ]
    },
    "2589": {
      "op": ">",
      "defined_out": [
        "tmp%1#1"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "tmp%1#1"
      ]
    },
    "2590": {
      "op": "bz resolve_score_after_while@16",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1"
      ]
    },
    "2593": {
      "op": "itxn_begin"
    },
    "2594": {
      "op": "pushint 6 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "appl"
      ]
    },
    "2596": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1"
      ]
    },
    "2598": {
      "op": "pushint 5 // DeleteApplication",
      "defined_out": [
        "DeleteApplication"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "DeleteApplication"
      ]
    },
    "2600": {
      "op": "itxn_field OnCompletion",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1"
      ]
    },
    "2602": {
      "op": "bytec 13 // 0x068101",
      "defined_out": [
        "0x068101"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "0x068101"
      ]
    },
    "2604": {
      "op": "itxn_field ApprovalProgram",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1"
      ]
    },
    "2606": {
      "op": "bytec 13 // 0x068101",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "0x068101"
      ]
    },
    "2608": {
      "op": "itxn_field ClearStateProgram",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1"
      ]
    },
    "2610": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "0"
      ]
    },
    "2611": {
      "op": "itxn_field Fee",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1"
      ]
    },
    "2613": {
      "op": "itxn_submit"
    },
    "2614": {
      "op": "b resolve_score_while_top@11"
    },
    "2617": {
      "block": "resolve_score_after_while@16",
      "stack_in": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1"
      ],
      "op": "frame_dig -1",
      "defined_out": [
        "game_id#0 (copy)"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "game_id#0 (copy)"
      ]
    },
    "2619": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "encoded_value%0#0"
      ]
    },
    "2620": {
      "op": "dup",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "encoded_value%0#0",
        "encoded_value%0#0"
      ]
    },
    "2621": {
      "op": "frame_bury 1",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "encoded_value%0#0"
      ]
    },
    "2623": {
      "op": "bytec 4 // \"s_\"",
      "defined_out": [
        "\"s_\"",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "encoded_value%0#0",
        "\"s_\""
      ]
    },
    "2625": {
      "op": "swap",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "\"s_\"",
        "encoded_value%0#0"
      ]
    },
    "2626": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "box_prefixed_key%0#0"
      ]
    },
    "2627": {
      "op": "dup",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0"
      ]
    },
    "2628": {
      "op": "frame_bury 0",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "box_prefixed_key%0#0"
      ]
    },
    "2630": {
      "op": "dup",
      "defined_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)"
      ]
    },
    "2631": {
      "op": "box_len",
      "defined_out": [
        "_%0#0",
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "box_prefixed_key%0#0",
        "_%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2632": {
      "op": "bury 1",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "box_prefixed_key%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2634": {
      "error": "Box game state not found. Check if Game ID is valid.",
      "op": "assert // Box game state not found. Check if Game ID is valid.",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "box_prefixed_key%0#0"
      ]
    },
    "2635": {
      "op": "bytec_2 // \"c_\"",
      "defined_out": [
        "\"c_\"",
        "box_prefixed_key%0#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "box_prefixed_key%0#0",
        "\"c_\""
      ]
    },
    "2636": {
      "op": "txn Sender",
      "defined_out": [
        "\"c_\"",
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "materialized_values%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "box_prefixed_key%0#0",
        "\"c_\"",
        "materialized_values%0#0"
      ]
    },
    "2638": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%1#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "box_prefixed_key%0#0",
        "box_prefixed_key%1#0"
      ]
    },
    "2639": {
      "op": "box_len",
      "defined_out": [
        "_%1#0",
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "maybe_exists%1#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "box_prefixed_key%0#0",
        "_%1#0",
        "maybe_exists%1#0"
      ]
    },
    "2640": {
      "op": "bury 1",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "box_prefixed_key%0#0",
        "maybe_exists%1#0"
      ]
    },
    "2642": {
      "error": "Box not found. Ensure the box you are trying to access was created and still exists.",
      "op": "assert // Box not found. Ensure the box you are trying to access was created and still exists.",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "box_prefixed_key%0#0"
      ]
    },
    "2643": {
      "op": "bytec_3 // 0x745f",
      "defined_out": [
        "0x745f",
        "box_prefixed_key%0#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "box_prefixed_key%0#0",
        "0x745f"
      ]
    },
    "2644": {
      "op": "box_len",
      "defined_out": [
        "_%2#0",
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "maybe_exists%2#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "box_prefixed_key%0#0",
        "_%2#0",
        "maybe_exists%2#0"
      ]
    },
    "2645": {
      "op": "bury 1",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "box_prefixed_key%0#0",
        "maybe_exists%2#0"
      ]
    },
    "2647": {
      "error": "Box not found. Ensure the box you are trying to access was created and still exists.",
      "op": "assert // Box not found. Ensure the box you are trying to access was created and still exists.",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "box_prefixed_key%0#0"
      ]
    },
    "2648": {
      "op": "txn Sender",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "box_prefixed_key%0#0",
        "tmp%0#0"
      ]
    },
    "2650": {
      "op": "dig 1",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "box_prefixed_key%0#0",
        "tmp%0#0",
        "box_prefixed_key%0#0 (copy)"
      ]
    },
    "2652": {
      "op": "box_get",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "maybe_exists%3#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "box_prefixed_key%0#0",
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%3#0"
      ]
    },
    "2653": {
      "error": "check self.box_game_state entry exists",
      "op": "assert // check self.box_game_state entry exists",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "box_prefixed_key%0#0",
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "2654": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "box_prefixed_key%0#0",
        "tmp%0#0",
        "maybe_value%0#0",
        "1"
      ]
    },
    "2655": {
      "op": "getbyte",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "box_prefixed_key%0#0",
        "tmp%0#0",
        "tmp%2#0"
      ]
    },
    "2656": {
      "op": "frame_dig -1",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "box_prefixed_key%0#0",
        "tmp%0#0",
        "tmp%2#0",
        "game_id#0 (copy)"
      ]
    },
    "2658": {
      "op": "uncover 2",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "box_prefixed_key%0#0",
        "tmp%2#0",
        "game_id#0 (copy)",
        "tmp%0#0"
      ]
    },
    "2660": {
      "op": "bytec_1 // \"p_\"",
      "defined_out": [
        "\"p_\"",
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_id#0 (copy)",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "box_prefixed_key%0#0",
        "tmp%2#0",
        "game_id#0 (copy)",
        "tmp%0#0",
        "\"p_\""
      ]
    },
    "2661": {
      "op": "uncover 3",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "box_prefixed_key%0#0",
        "game_id#0 (copy)",
        "tmp%0#0",
        "\"p_\"",
        "tmp%2#0"
      ]
    },
    "2663": {
      "op": "intc_0 // 1",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "box_prefixed_key%0#0",
        "game_id#0 (copy)",
        "tmp%0#0",
        "\"p_\"",
        "tmp%2#0",
        "1"
      ]
    },
    "2664": {
      "callsub": "smart_contracts.pieout.subroutines.check_acc_in_game",
      "op": "callsub check_acc_in_game",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "box_prefixed_key%0#0",
        "tmp%3#0"
      ]
    },
    "2667": {
      "op": "intc_0 // 1",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "box_prefixed_key%0#0",
        "tmp%3#0",
        "1"
      ]
    },
    "2668": {
      "op": "==",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "box_prefixed_key%0#0",
        "tmp%4#0"
      ]
    },
    "2669": {
      "error": "Sender address is not recognized as a valid player for this game.",
      "op": "assert // Sender address is not recognized as a valid player for this game.",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "box_prefixed_key%0#0"
      ]
    },
    "2670": {
      "op": "box_get",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "maybe_exists%4#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "game_state#0",
        "maybe_exists%4#0"
      ]
    },
    "2671": {
      "op": "swap",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "maybe_exists%4#0",
        "game_state#0"
      ]
    },
    "2672": {
      "op": "dup",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "maybe_exists%4#0",
        "game_state#0",
        "game_state#0 (copy)"
      ]
    },
    "2673": {
      "op": "cover 2",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "game_state#0",
        "maybe_exists%4#0",
        "game_state#0"
      ]
    },
    "2675": {
      "op": "frame_bury 2",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "maybe_exists%4#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "game_state#0",
        "maybe_exists%4#0"
      ]
    },
    "2677": {
      "error": "check self.box_game_state entry exists",
      "op": "assert // check self.box_game_state entry exists",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "game_state#0"
      ]
    },
    "2678": {
      "op": "dup",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#0 (copy)"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "game_state#0",
        "game_state#0 (copy)"
      ]
    },
    "2679": {
      "op": "intc_1 // 0",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "game_state#0",
        "game_state#0 (copy)",
        "0"
      ]
    },
    "2680": {
      "op": "getbit",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "is_true%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "game_state#0",
        "is_true%0#0"
      ]
    },
    "2681": {
      "op": "bytec_0 // 0x00",
      "defined_out": [
        "0x00",
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "is_true%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "game_state#0",
        "is_true%0#0",
        "0x00"
      ]
    },
    "2682": {
      "op": "intc_1 // 0",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "game_state#0",
        "is_true%0#0",
        "0x00",
        "0"
      ]
    },
    "2683": {
      "op": "uncover 2",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "game_state#0",
        "0x00",
        "0",
        "is_true%0#0"
      ]
    },
    "2685": {
      "op": "setbit",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "game_state#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "game_state#0",
        "encoded_bool%0#0"
      ]
    },
    "2686": {
      "op": "intc_1 // 0",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "game_state#0",
        "encoded_bool%0#0",
        "0"
      ]
    },
    "2687": {
      "op": "getbit",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "game_state#0",
        "tmp%5#0"
      ]
    },
    "2688": {
      "op": "intc_0 // 1",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "game_state#0",
        "tmp%5#0",
        "1"
      ]
    },
    "2689": {
      "op": "==",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "game_state#0",
        "tmp%6#0"
      ]
    },
    "2690": {
      "error": "Game state staking finalized value mismatch.",
      "op": "assert // Game state staking finalized value mismatch.",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "game_state#0"
      ]
    },
    "2691": {
      "error": "Index access is out of bounds",
      "op": "extract 8 8 // on error: Index access is out of bounds",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "reinterpret_biguint%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "reinterpret_biguint%0#0"
      ]
    },
    "2694": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "reinterpret_biguint%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "reinterpret_biguint%0#0",
        "tmp%7#0"
      ]
    },
    "2696": {
      "op": "itob",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "reinterpret_biguint%0#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "reinterpret_biguint%0#0",
        "tmp%8#0"
      ]
    },
    "2697": {
      "op": "b>=",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "tmp%9#0"
      ]
    },
    "2698": {
      "error": "Phase deadline expired. Latest block timestamp must not exceed expiry timestamp.",
      "op": "assert // Phase deadline expired. Latest block timestamp must not exceed expiry timestamp.",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1"
      ]
    },
    "2699": {
      "op": "bytec_2 // \"c_\"",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "\"c_\""
      ]
    },
    "2700": {
      "op": "txn Sender",
      "defined_out": [
        "\"c_\"",
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "materialized_values%1#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "\"c_\"",
        "materialized_values%1#0"
      ]
    },
    "2702": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%4#0",
        "encoded_value%0#0",
        "game_state#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "box_prefixed_key%4#0"
      ]
    },
    "2703": {
      "op": "box_get",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "maybe_exists%5#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "maybe_value%2#0",
        "maybe_exists%5#0"
      ]
    },
    "2704": {
      "error": "check self.box_commit_rand entry exists",
      "op": "assert // check self.box_commit_rand entry exists",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "maybe_value%2#0"
      ]
    },
    "2705": {
      "error": "Index access is out of bounds",
      "op": "extract 8 8 // on error: Index access is out of bounds",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "reinterpret_biguint%1#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "reinterpret_biguint%1#0"
      ]
    },
    "2708": {
      "op": "bytec 7 // 0x0000000000000000",
      "defined_out": [
        "0x0000000000000000",
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "reinterpret_biguint%1#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "reinterpret_biguint%1#0",
        "0x0000000000000000"
      ]
    },
    "2710": {
      "op": "b!=",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "tmp%10#0"
      ]
    },
    "2711": {
      "error": "Invalid commit rand round. Can't be zero",
      "op": "assert // Invalid commit rand round. Can't be zero",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1"
      ]
    },
    "2712": {
      "op": "bytec_2 // \"c_\"",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "\"c_\""
      ]
    },
    "2713": {
      "op": "txn Sender",
      "defined_out": [
        "\"c_\"",
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "materialized_values%2#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "\"c_\"",
        "materialized_values%2#0"
      ]
    },
    "2715": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%5#0",
        "encoded_value%0#0",
        "game_state#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "box_prefixed_key%5#0"
      ]
    },
    "2716": {
      "op": "box_get",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "maybe_exists%6#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "maybe_value%3#0",
        "maybe_exists%6#0"
      ]
    },
    "2717": {
      "error": "check self.box_commit_rand entry exists",
      "op": "assert // check self.box_commit_rand entry exists",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "maybe_value%3#0"
      ]
    },
    "2718": {
      "error": "Index access is out of bounds",
      "op": "extract 0 8 // on error: Index access is out of bounds",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "reinterpret_biguint%3#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "reinterpret_biguint%3#0"
      ]
    },
    "2721": {
      "op": "bytec 7 // 0x0000000000000000",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "reinterpret_biguint%3#0",
        "0x0000000000000000"
      ]
    },
    "2723": {
      "op": "b!=",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "tmp%11#0"
      ]
    },
    "2724": {
      "op": "assert",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1"
      ]
    },
    "2725": {
      "op": "global Round",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "tmp%12#0"
      ]
    },
    "2727": {
      "op": "bytec_2 // \"c_\"",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "tmp%12#0",
        "\"c_\""
      ]
    },
    "2728": {
      "op": "txn Sender",
      "defined_out": [
        "\"c_\"",
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "materialized_values%3#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "tmp%12#0",
        "\"c_\"",
        "materialized_values%3#0"
      ]
    },
    "2730": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%6#0",
        "encoded_value%0#0",
        "game_state#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "tmp%12#0",
        "box_prefixed_key%6#0"
      ]
    },
    "2731": {
      "op": "box_get",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "maybe_exists%7#0",
        "maybe_value%4#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "tmp%12#0",
        "maybe_value%4#0",
        "maybe_exists%7#0"
      ]
    },
    "2732": {
      "error": "check self.box_commit_rand entry exists",
      "op": "assert // check self.box_commit_rand entry exists",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "tmp%12#0",
        "maybe_value%4#0"
      ]
    },
    "2733": {
      "op": "pushint 8 // 8",
      "defined_out": [
        "8",
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "maybe_value%4#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "tmp%12#0",
        "maybe_value%4#0",
        "8"
      ]
    },
    "2735": {
      "op": "extract_uint64",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "tmp%12#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "tmp%12#0",
        "tmp%14#0"
      ]
    },
    "2736": {
      "op": ">=",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "tmp%15#0"
      ]
    },
    "2737": {
      "error": "Randomness commit round not reached yet.",
      "op": "assert // Randomness commit round not reached yet.",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1"
      ]
    },
    "2738": {
      "op": "intc_1 // 0",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "0"
      ]
    },
    "2739": {
      "op": "bytec 6 // \"score_id\"",
      "defined_out": [
        "\"score_id\"",
        "0",
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "0",
        "\"score_id\""
      ]
    },
    "2741": {
      "op": "app_global_get_ex",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "maybe_exists%8#0",
        "score_id#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "score_id#0",
        "maybe_exists%8#0"
      ]
    },
    "2742": {
      "error": "check self.score_id exists",
      "op": "assert // check self.score_id exists",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "score_id#0"
      ]
    },
    "2743": {
      "op": "txn Sender",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "player#0",
        "score_id#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "score_id#0",
        "player#0"
      ]
    },
    "2745": {
      "op": "frame_bury 4",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "score_id#0"
      ]
    },
    "2747": {
      "op": "itob",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "player#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "tmp%17#0"
      ]
    },
    "2748": {
      "op": "dup",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "tmp%17#0",
        "tmp%17#0"
      ]
    },
    "2749": {
      "op": "frame_bury 6",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "player#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "tmp%17#0"
      ]
    },
    "2751": {
      "op": "sha256",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "player#0",
        "seed#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "seed#0"
      ]
    },
    "2752": {
      "op": "dup",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "player#0",
        "seed#0",
        "seed#0 (copy)",
        "tmp%17#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "seed#0",
        "seed#0 (copy)"
      ]
    },
    "2753": {
      "op": "extract 16 8",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "player#0",
        "seed#0",
        "seed#1",
        "tmp%17#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "seed#0",
        "seed#1"
      ]
    },
    "2756": {
      "op": "len",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "player#0",
        "seed#0",
        "tmp%0#1",
        "tmp%17#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "seed#0",
        "tmp%0#1"
      ]
    },
    "2757": {
      "op": "pushint 8 // 8",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "seed#0",
        "tmp%0#1",
        "8"
      ]
    },
    "2759": {
      "op": "==",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "player#0",
        "seed#0",
        "tmp%1#1",
        "tmp%17#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "seed#0",
        "tmp%1#1"
      ]
    },
    "2760": {
      "op": "assert",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "seed#0"
      ]
    },
    "2761": {
      "op": "pushint 16 // 16",
      "defined_out": [
        "16",
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "player#0",
        "seed#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "seed#0",
        "16"
      ]
    },
    "2763": {
      "op": "extract_uint64",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "initial_state#0",
        "player#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "initial_state#0"
      ]
    },
    "2764": {
      "op": "intc_1 // 0",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "initial_state#0",
        "0"
      ]
    },
    "2765": {
      "op": "intc 7 // 6364136223846793005",
      "defined_out": [
        "0",
        "6364136223846793005",
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "initial_state#0",
        "player#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "initial_state#0",
        "0",
        "6364136223846793005"
      ]
    },
    "2767": {
      "op": "mulw",
      "defined_out": [
        "_high_mul#0",
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "initial_state#0",
        "low_mul#0",
        "player#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "initial_state#0",
        "_high_mul#0",
        "low_mul#0"
      ]
    },
    "2768": {
      "op": "bury 1",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "initial_state#0",
        "low_mul#0"
      ]
    },
    "2770": {
      "op": "intc 8 // 1442695040888963407",
      "defined_out": [
        "1442695040888963407",
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "initial_state#0",
        "low_mul#0",
        "player#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "initial_state#0",
        "low_mul#0",
        "1442695040888963407"
      ]
    },
    "2772": {
      "op": "addw",
      "defined_out": [
        "_high_add#0",
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "initial_state#0",
        "low_add#0",
        "player#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "initial_state#0",
        "_high_add#0",
        "low_add#0"
      ]
    },
    "2773": {
      "op": "bury 1",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "initial_state#0",
        "low_add#0"
      ]
    },
    "2775": {
      "op": "addw",
      "defined_out": [
        "_high_addw#0",
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "player#0",
        "state#2",
        "tmp%17#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "_high_addw#0",
        "state#2"
      ]
    },
    "2776": {
      "op": "bury 1",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "state#2"
      ]
    },
    "2778": {
      "op": "intc 7 // 6364136223846793005",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "state#2",
        "6364136223846793005"
      ]
    },
    "2780": {
      "op": "mulw",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "_high_mul#0",
        "low_mul#0"
      ]
    },
    "2781": {
      "op": "bury 1",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "low_mul#0"
      ]
    },
    "2783": {
      "op": "intc 8 // 1442695040888963407",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "low_mul#0",
        "1442695040888963407"
      ]
    },
    "2785": {
      "op": "addw",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "_high_add#0",
        "low_add#0"
      ]
    },
    "2786": {
      "op": "bury 1",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "low_add#0"
      ]
    },
    "2788": {
      "op": "pushbytes 0x00ff",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "low_add#0",
        "player#0",
        "result#1",
        "state#2",
        "tmp%17#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "low_add#0",
        "result#1"
      ]
    },
    "2792": {
      "op": "frame_bury 5",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "low_add#0"
      ]
    },
    "2794": {
      "op": "pushint 18446744073709486080 // 18446744073709486080",
      "defined_out": [
        "18446744073709486080",
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "low_add#0",
        "player#0",
        "result#1",
        "state#2",
        "tmp%17#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "low_add#0",
        "18446744073709486080"
      ]
    },
    "2805": {
      "op": "intc_0 // 1",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "low_add#0",
        "18446744073709486080",
        "1"
      ]
    },
    "2806": {
      "op": "addw",
      "defined_out": [
        "_addw_high#0",
        "addw_low#0",
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "low_add#0",
        "player#0",
        "result#1",
        "state#2",
        "tmp%17#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "low_add#0",
        "_addw_high#0",
        "addw_low#0"
      ]
    },
    "2807": {
      "op": "bury 1",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "low_add#0",
        "addw_low#0"
      ]
    },
    "2809": {
      "op": "intc 9 // 4294967295",
      "defined_out": [
        "4294967295",
        "addw_low#0",
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "low_add#0",
        "player#0",
        "result#1",
        "state#2",
        "tmp%17#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "low_add#0",
        "addw_low#0",
        "4294967295"
      ]
    },
    "2811": {
      "op": "&",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "low_add#0",
        "tmp%0#1"
      ]
    },
    "2812": {
      "op": "intc 12 // 65535",
      "defined_out": [
        "65535",
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "low_add#0",
        "player#0",
        "result#1",
        "state#2",
        "tmp%0#1",
        "tmp%17#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "low_add#0",
        "tmp%0#1",
        "65535"
      ]
    },
    "2814": {
      "op": "%",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "low_add#0",
        "player#0",
        "result#1",
        "state#2",
        "threshold#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "low_add#0",
        "threshold#0"
      ]
    },
    "2815": {
      "op": "frame_bury 13",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "low_add#0",
        "player#0",
        "result#1",
        "state#2",
        "threshold#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "low_add#0"
      ]
    },
    "2817": {
      "op": "intc_1 // 0",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "i#0",
        "low_add#0",
        "player#0",
        "result#1",
        "state#2",
        "threshold#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "low_add#0",
        "i#0"
      ]
    },
    "2818": {
      "op": "frame_bury 10",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "state#2"
      ]
    },
    "2820": {
      "op": "frame_bury 12",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "i#0",
        "player#0",
        "result#1",
        "state#2",
        "threshold#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1"
      ]
    },
    "2822": {
      "block": "resolve_score_for_header@20",
      "stack_in": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1"
      ],
      "op": "frame_dig 10",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "i#0"
      ]
    },
    "2824": {
      "op": "pushint 255 // 255",
      "defined_out": [
        "255",
        "i#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "i#0",
        "255"
      ]
    },
    "2827": {
      "op": "<",
      "defined_out": [
        "continue_looping%1#0",
        "i#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "continue_looping%1#0"
      ]
    },
    "2828": {
      "op": "bz resolve_score_after_for@25",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1"
      ]
    },
    "2831": {
      "block": "resolve_score_while_top@22",
      "stack_in": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1"
      ],
      "op": "frame_dig 12",
      "defined_out": [
        "state#2"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "state#2"
      ]
    },
    "2833": {
      "op": "dup",
      "defined_out": [
        "state#2",
        "state#2 (copy)"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "state#2",
        "state#2 (copy)"
      ]
    },
    "2834": {
      "op": "intc 7 // 6364136223846793005",
      "defined_out": [
        "6364136223846793005",
        "state#2",
        "state#2 (copy)"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "state#2",
        "state#2 (copy)",
        "6364136223846793005"
      ]
    },
    "2836": {
      "op": "mulw",
      "defined_out": [
        "_high_mul#0",
        "low_mul#0",
        "state#2"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "state#2",
        "_high_mul#0",
        "low_mul#0"
      ]
    },
    "2837": {
      "op": "bury 1",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "state#2",
        "low_mul#0"
      ]
    },
    "2839": {
      "op": "intc 8 // 1442695040888963407",
      "defined_out": [
        "1442695040888963407",
        "low_mul#0",
        "state#2"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "state#2",
        "low_mul#0",
        "1442695040888963407"
      ]
    },
    "2841": {
      "op": "addw",
      "defined_out": [
        "_high_add#0",
        "low_add#0",
        "state#2"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "state#2",
        "_high_add#0",
        "low_add#0"
      ]
    },
    "2842": {
      "op": "cover 2",
      "defined_out": [
        "_high_add#0",
        "low_add#0",
        "state#2"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "low_add#0",
        "state#2",
        "_high_add#0"
      ]
    },
    "2844": {
      "op": "pop",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "low_add#0",
        "state#2"
      ]
    },
    "2845": {
      "op": "dup",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "low_add#0",
        "state#2",
        "state#2 (copy)"
      ]
    },
    "2846": {
      "op": "pushint 18 // 18",
      "defined_out": [
        "18",
        "low_add#0",
        "state#2",
        "state#2 (copy)"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "low_add#0",
        "state#2",
        "state#2 (copy)",
        "18"
      ]
    },
    "2848": {
      "op": "shr",
      "defined_out": [
        "low_add#0",
        "state#2",
        "tmp%0#1"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "low_add#0",
        "state#2",
        "tmp%0#1"
      ]
    },
    "2849": {
      "op": "dig 1",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "low_add#0",
        "state#2",
        "tmp%0#1",
        "state#2 (copy)"
      ]
    },
    "2851": {
      "op": "^",
      "defined_out": [
        "low_add#0",
        "state#2",
        "tmp%1#5"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "low_add#0",
        "state#2",
        "tmp%1#5"
      ]
    },
    "2852": {
      "op": "pushint 27 // 27",
      "defined_out": [
        "27",
        "low_add#0",
        "state#2",
        "tmp%1#5"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "low_add#0",
        "state#2",
        "tmp%1#5",
        "27"
      ]
    },
    "2854": {
      "op": "shr",
      "defined_out": [
        "low_add#0",
        "state#2",
        "value#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "low_add#0",
        "state#2",
        "value#0"
      ]
    },
    "2855": {
      "op": "intc 9 // 4294967295",
      "defined_out": [
        "4294967295",
        "low_add#0",
        "state#2",
        "value#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "low_add#0",
        "state#2",
        "value#0",
        "4294967295"
      ]
    },
    "2857": {
      "op": "&",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "low_add#0",
        "state#2",
        "value#0"
      ]
    },
    "2858": {
      "op": "swap",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "low_add#0",
        "value#0",
        "state#2"
      ]
    },
    "2859": {
      "op": "pushint 59 // 59",
      "defined_out": [
        "59",
        "low_add#0",
        "state#2",
        "value#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "low_add#0",
        "value#0",
        "state#2",
        "59"
      ]
    },
    "2861": {
      "op": "shr",
      "defined_out": [
        "low_add#0",
        "rot#0",
        "state#2",
        "value#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "low_add#0",
        "value#0",
        "rot#0"
      ]
    },
    "2862": {
      "op": "dup2",
      "defined_out": [
        "low_add#0",
        "rot#0",
        "rot#0 (copy)",
        "state#2",
        "value#0",
        "value#0 (copy)"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "low_add#0",
        "value#0",
        "rot#0",
        "value#0 (copy)",
        "rot#0 (copy)"
      ]
    },
    "2863": {
      "op": "shr",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "low_add#0",
        "value#0",
        "rot#0",
        "tmp%0#1"
      ]
    },
    "2864": {
      "op": "swap",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "low_add#0",
        "value#0",
        "tmp%0#1",
        "rot#0"
      ]
    },
    "2865": {
      "op": "~",
      "defined_out": [
        "low_add#0",
        "state#2",
        "tmp%0#1",
        "tmp%0#9",
        "value#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "low_add#0",
        "value#0",
        "tmp%0#1",
        "tmp%0#9"
      ]
    },
    "2866": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "low_add#0",
        "state#2",
        "tmp%0#1",
        "tmp%0#9",
        "value#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "low_add#0",
        "value#0",
        "tmp%0#1",
        "tmp%0#9",
        "1"
      ]
    },
    "2867": {
      "op": "addw",
      "defined_out": [
        "_addw_high#0",
        "addw_low#0",
        "low_add#0",
        "state#2",
        "tmp%0#1",
        "value#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "low_add#0",
        "value#0",
        "tmp%0#1",
        "_addw_high#0",
        "addw_low#0"
      ]
    },
    "2868": {
      "op": "bury 1",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "low_add#0",
        "value#0",
        "tmp%0#1",
        "addw_low#0"
      ]
    },
    "2870": {
      "op": "pushint 31 // 31",
      "defined_out": [
        "31",
        "addw_low#0",
        "low_add#0",
        "state#2",
        "tmp%0#1",
        "value#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "low_add#0",
        "value#0",
        "tmp%0#1",
        "addw_low#0",
        "31"
      ]
    },
    "2872": {
      "op": "&",
      "defined_out": [
        "low_add#0",
        "state#2",
        "tmp%0#1",
        "tmp%2#0",
        "value#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "low_add#0",
        "value#0",
        "tmp%0#1",
        "tmp%2#0"
      ]
    },
    "2873": {
      "op": "uncover 2",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "low_add#0",
        "tmp%0#1",
        "tmp%2#0",
        "value#0"
      ]
    },
    "2875": {
      "op": "swap",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "low_add#0",
        "tmp%0#1",
        "value#0",
        "tmp%2#0"
      ]
    },
    "2876": {
      "op": "shl",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "low_add#0",
        "tmp%0#1",
        "value#0"
      ]
    },
    "2877": {
      "op": "intc 9 // 4294967295",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "low_add#0",
        "tmp%0#1",
        "value#0",
        "4294967295"
      ]
    },
    "2879": {
      "op": "&",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "low_add#0",
        "tmp%0#1",
        "tmp%0#9"
      ]
    },
    "2880": {
      "op": "|",
      "defined_out": [
        "candidate#0",
        "low_add#0",
        "state#2"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "low_add#0",
        "candidate#0"
      ]
    },
    "2881": {
      "op": "dup",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "low_add#0",
        "candidate#0",
        "candidate#0"
      ]
    },
    "2882": {
      "op": "frame_bury 9",
      "defined_out": [
        "candidate#0",
        "low_add#0",
        "state#2"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "low_add#0",
        "candidate#0"
      ]
    },
    "2884": {
      "op": "frame_dig 13",
      "defined_out": [
        "candidate#0",
        "low_add#0",
        "state#2",
        "threshold#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "low_add#0",
        "candidate#0",
        "threshold#0"
      ]
    },
    "2886": {
      "op": ">=",
      "defined_out": [
        "candidate#0",
        "low_add#0",
        "state#2",
        "threshold#0",
        "tmp%20#1"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "low_add#0",
        "tmp%20#1"
      ]
    },
    "2887": {
      "op": "bz resolve_score_after_if_else@24",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "low_add#0"
      ]
    },
    "2890": {
      "op": "frame_dig 9",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "low_add#0",
        "candidate#0"
      ]
    },
    "2892": {
      "op": "intc 12 // 65535",
      "defined_out": [
        "65535",
        "candidate#0",
        "low_add#0",
        "state#2",
        "threshold#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "low_add#0",
        "candidate#0",
        "65535"
      ]
    },
    "2894": {
      "op": "%",
      "defined_out": [
        "candidate#0",
        "low_add#0",
        "state#2",
        "threshold#0",
        "tmp%21#2"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "low_add#0",
        "tmp%21#2"
      ]
    },
    "2895": {
      "op": "intc_0 // 1",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "low_add#0",
        "tmp%21#2",
        "1"
      ]
    },
    "2896": {
      "op": "+",
      "defined_out": [
        "candidate#0",
        "low_add#0",
        "state#2",
        "threshold#0",
        "tmp%22#1"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "low_add#0",
        "tmp%22#1"
      ]
    },
    "2897": {
      "op": "itob",
      "defined_out": [
        "candidate#0",
        "low_add#0",
        "state#2",
        "threshold#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "low_add#0",
        "tmp%23#0"
      ]
    },
    "2898": {
      "op": "extract 6 2",
      "defined_out": [
        "candidate#0",
        "low_add#0",
        "state#2",
        "threshold#0",
        "tmp%24#1"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "low_add#0",
        "tmp%24#1"
      ]
    },
    "2901": {
      "op": "frame_dig 5",
      "defined_out": [
        "candidate#0",
        "low_add#0",
        "result#1",
        "state#2",
        "threshold#0",
        "tmp%24#1"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "low_add#0",
        "tmp%24#1",
        "result#1"
      ]
    },
    "2903": {
      "op": "swap",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "low_add#0",
        "result#1",
        "tmp%24#1"
      ]
    },
    "2904": {
      "op": "concat",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "low_add#0",
        "result#1"
      ]
    },
    "2905": {
      "op": "frame_bury 5",
      "defined_out": [
        "candidate#0",
        "low_add#0",
        "result#1",
        "state#2",
        "threshold#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "low_add#0"
      ]
    },
    "2907": {
      "op": "frame_dig 10",
      "defined_out": [
        "candidate#0",
        "i#0",
        "low_add#0",
        "result#1",
        "state#2",
        "threshold#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "low_add#0",
        "i#0"
      ]
    },
    "2909": {
      "op": "intc_0 // 1",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "low_add#0",
        "i#0",
        "1"
      ]
    },
    "2910": {
      "op": "+",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "low_add#0",
        "i#0"
      ]
    },
    "2911": {
      "op": "frame_bury 10",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "state#2"
      ]
    },
    "2913": {
      "op": "frame_bury 12",
      "defined_out": [
        "candidate#0",
        "i#0",
        "result#1",
        "state#2",
        "threshold#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1"
      ]
    },
    "2915": {
      "op": "b resolve_score_for_header@20"
    },
    "2918": {
      "block": "resolve_score_after_if_else@24",
      "stack_in": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "low_add#0"
      ],
      "op": "frame_bury 12",
      "defined_out": [
        "state#2"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1"
      ]
    },
    "2920": {
      "op": "b resolve_score_while_top@22"
    },
    "2923": {
      "block": "resolve_score_after_for@25",
      "stack_in": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1"
      ],
      "op": "intc_1 // 0",
      "defined_out": [
        "score#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "score#0"
      ]
    },
    "2924": {
      "op": "frame_bury 11",
      "defined_out": [
        "score#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1"
      ]
    },
    "2926": {
      "op": "frame_dig 5",
      "defined_out": [
        "result#1",
        "score#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "result#1"
      ]
    },
    "2928": {
      "op": "len",
      "defined_out": [
        "result#1",
        "score#0",
        "tmp%3#1"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "tmp%3#1"
      ]
    },
    "2929": {
      "op": "frame_bury 15",
      "defined_out": [
        "result#1",
        "score#0",
        "tmp%3#1"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1"
      ]
    },
    "2931": {
      "op": "intc_2 // 2",
      "defined_out": [
        "i#0",
        "result#1",
        "score#0",
        "tmp%3#1"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "i#0"
      ]
    },
    "2932": {
      "op": "frame_bury 10",
      "defined_out": [
        "i#0",
        "result#1",
        "score#0",
        "tmp%3#1"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1"
      ]
    },
    "2934": {
      "block": "resolve_score_for_header@27",
      "stack_in": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1"
      ],
      "op": "frame_dig 10",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "i#0"
      ]
    },
    "2936": {
      "op": "frame_dig 15",
      "defined_out": [
        "i#0",
        "tmp%3#1"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "i#0",
        "tmp%3#1"
      ]
    },
    "2938": {
      "op": "<",
      "defined_out": [
        "continue_looping%0#0",
        "i#0",
        "tmp%3#1"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "continue_looping%0#0"
      ]
    },
    "2939": {
      "op": "bz resolve_score_after_for@30",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1"
      ]
    },
    "2942": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "i#0",
        "tmp%3#1"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "2"
      ]
    },
    "2943": {
      "op": "frame_dig 15",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "2",
        "tmp%3#1"
      ]
    },
    "2945": {
      "op": "dup",
      "defined_out": [
        "2",
        "i#0",
        "tmp%3#1",
        "tmp%3#1 (copy)"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "2",
        "tmp%3#1 (copy)",
        "tmp%3#1 (copy)"
      ]
    },
    "2946": {
      "op": "cover 2",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "tmp%3#1",
        "2",
        "tmp%3#1 (copy)"
      ]
    },
    "2948": {
      "op": ">=",
      "defined_out": [
        "i#0",
        "is_out_of_bounds%0#0",
        "tmp%3#1"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "tmp%3#1",
        "is_out_of_bounds%0#0"
      ]
    },
    "2949": {
      "op": "intc_2 // 2",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "tmp%3#1",
        "is_out_of_bounds%0#0",
        "2"
      ]
    },
    "2950": {
      "op": "dig 2",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "tmp%3#1",
        "is_out_of_bounds%0#0",
        "2",
        "tmp%3#1 (copy)"
      ]
    },
    "2952": {
      "op": "uncover 2",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "tmp%3#1",
        "2",
        "tmp%3#1 (copy)",
        "is_out_of_bounds%0#0"
      ]
    },
    "2954": {
      "op": "select",
      "defined_out": [
        "bounded_index%0#0",
        "i#0",
        "tmp%3#1"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "tmp%3#1",
        "bounded_index%0#0"
      ]
    },
    "2955": {
      "op": "frame_dig 5",
      "defined_out": [
        "bounded_index%0#0",
        "i#0",
        "result#1",
        "tmp%3#1"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "tmp%3#1",
        "bounded_index%0#0",
        "result#1"
      ]
    },
    "2957": {
      "op": "swap",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "tmp%3#1",
        "result#1",
        "bounded_index%0#0"
      ]
    },
    "2958": {
      "op": "uncover 2",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "result#1",
        "bounded_index%0#0",
        "tmp%3#1"
      ]
    },
    "2960": {
      "op": "substring3",
      "defined_out": [
        "i#0",
        "result#1",
        "tmp%3#1",
        "tmp%4#1"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "tmp%4#1"
      ]
    },
    "2961": {
      "op": "frame_dig 10",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "tmp%4#1",
        "i#0"
      ]
    },
    "2963": {
      "op": "extract_uint16",
      "defined_out": [
        "i#0",
        "result#1",
        "roll#0",
        "tmp%3#1"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "roll#0"
      ]
    },
    "2964": {
      "op": "pushint 10992 // 10992",
      "defined_out": [
        "10992",
        "i#0",
        "result#1",
        "roll#0",
        "tmp%3#1"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "roll#0",
        "10992"
      ]
    },
    "2967": {
      "op": "<=",
      "defined_out": [
        "i#0",
        "result#1",
        "tmp%3#1",
        "tmp%5#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "tmp%5#0"
      ]
    },
    "2968": {
      "op": "bnz resolve_score_after_for@30",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1"
      ]
    },
    "2971": {
      "op": "frame_dig 11",
      "defined_out": [
        "i#0",
        "result#1",
        "score#0",
        "tmp%3#1"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "score#0"
      ]
    },
    "2973": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "i#0",
        "result#1",
        "score#0",
        "tmp%3#1"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "score#0",
        "1"
      ]
    },
    "2974": {
      "op": "+",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "score#0"
      ]
    },
    "2975": {
      "op": "frame_bury 11",
      "defined_out": [
        "i#0",
        "result#1",
        "score#0",
        "tmp%3#1"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1"
      ]
    },
    "2977": {
      "op": "frame_dig 10",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "i#0"
      ]
    },
    "2979": {
      "op": "intc_2 // 2",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "i#0",
        "2"
      ]
    },
    "2980": {
      "op": "+",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "i#0"
      ]
    },
    "2981": {
      "op": "frame_bury 10",
      "defined_out": [
        "i#0",
        "result#1",
        "score#0",
        "tmp%3#1"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1"
      ]
    },
    "2983": {
      "op": "b resolve_score_for_header@27"
    },
    "2986": {
      "block": "resolve_score_after_for@30",
      "stack_in": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1"
      ],
      "op": "frame_dig 11",
      "defined_out": [
        "score#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "score#0"
      ]
    },
    "2988": {
      "op": "itob",
      "defined_out": [
        "score#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "val_as_bytes%2#0"
      ]
    },
    "2989": {
      "op": "dup",
      "defined_out": [
        "score#0",
        "val_as_bytes%2#0",
        "val_as_bytes%2#0 (copy)"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "val_as_bytes%2#0",
        "val_as_bytes%2#0 (copy)"
      ]
    },
    "2990": {
      "op": "bitlen",
      "defined_out": [
        "bitlen%0#0",
        "score#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "val_as_bytes%2#0",
        "bitlen%0#0"
      ]
    },
    "2991": {
      "op": "pushint 8 // 8",
      "defined_out": [
        "8",
        "bitlen%0#0",
        "score#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "val_as_bytes%2#0",
        "bitlen%0#0",
        "8"
      ]
    },
    "2993": {
      "op": "<=",
      "defined_out": [
        "no_overflow%0#0",
        "score#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "val_as_bytes%2#0",
        "no_overflow%0#0"
      ]
    },
    "2994": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "val_as_bytes%2#0"
      ]
    },
    "2995": {
      "op": "extract 7 1",
      "defined_out": [
        "score#0",
        "uint8%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "uint8%0#0"
      ]
    },
    "2998": {
      "op": "dup",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "uint8%0#0",
        "uint8%0#0"
      ]
    },
    "2999": {
      "op": "frame_bury 7",
      "defined_out": [
        "score#0",
        "uint8%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "uint8%0#0"
      ]
    },
    "3001": {
      "op": "frame_dig 1",
      "defined_out": [
        "encoded_value%0#0",
        "score#0",
        "uint8%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "uint8%0#0",
        "encoded_value%0#0"
      ]
    },
    "3003": {
      "op": "frame_dig 6",
      "defined_out": [
        "encoded_value%0#0",
        "score#0",
        "tmp%17#0",
        "uint8%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "uint8%0#0",
        "encoded_value%0#0",
        "tmp%17#0"
      ]
    },
    "3005": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "encoded_value%0#0",
        "score#0",
        "tmp%17#0",
        "uint8%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "uint8%0#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "3006": {
      "op": "frame_dig 4",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "encoded_value%0#0",
        "player#0",
        "score#0",
        "tmp%17#0",
        "uint8%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "uint8%0#0",
        "encoded_tuple_buffer%2#0",
        "player#0"
      ]
    },
    "3008": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "encoded_value%0#0",
        "player#0",
        "score#0",
        "tmp%17#0",
        "uint8%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "uint8%0#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "3009": {
      "op": "swap",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "encoded_tuple_buffer%3#0",
        "uint8%0#0"
      ]
    },
    "3010": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%4#0",
        "encoded_value%0#0",
        "player#0",
        "score#0",
        "tmp%17#0",
        "uint8%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "3011": {
      "op": "pushbytes 0x1cc2af51 // method \"player_score(uint64,uint64,address,uint8)\"",
      "defined_out": [
        "Method(player_score(uint64,uint64,address,uint8))",
        "encoded_tuple_buffer%4#0",
        "encoded_value%0#0",
        "player#0",
        "score#0",
        "tmp%17#0",
        "uint8%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "encoded_tuple_buffer%4#0",
        "Method(player_score(uint64,uint64,address,uint8))"
      ]
    },
    "3017": {
      "op": "swap",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "Method(player_score(uint64,uint64,address,uint8))",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "3018": {
      "op": "concat",
      "defined_out": [
        "encoded_value%0#0",
        "event%0#0",
        "player#0",
        "score#0",
        "tmp%17#0",
        "uint8%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "event%0#0"
      ]
    },
    "3019": {
      "op": "log",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1"
      ]
    },
    "3020": {
      "op": "frame_dig 2",
      "defined_out": [
        "encoded_value%0#0",
        "game_state#0",
        "player#0",
        "score#0",
        "tmp%17#0",
        "uint8%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "game_state#0"
      ]
    },
    "3022": {
      "error": "Index access is out of bounds",
      "op": "extract 56 32 // on error: Index access is out of bounds",
      "defined_out": [
        "encoded_value%0#0",
        "game_state#0",
        "player#0",
        "score#0",
        "tmp%17#0",
        "tmp%6#1",
        "uint8%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "tmp%6#1"
      ]
    },
    "3025": {
      "op": "global ZeroAddress",
      "defined_out": [
        "encoded_value%0#0",
        "game_state#0",
        "player#0",
        "score#0",
        "tmp%17#0",
        "tmp%6#1",
        "tmp%7#1",
        "uint8%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "tmp%6#1",
        "tmp%7#1"
      ]
    },
    "3027": {
      "op": "==",
      "defined_out": [
        "encoded_value%0#0",
        "game_state#0",
        "player#0",
        "score#0",
        "tmp%17#0",
        "tmp%8#1",
        "uint8%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "tmp%8#1"
      ]
    },
    "3028": {
      "op": "bnz resolve_score_if_body@32",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1"
      ]
    },
    "3031": {
      "op": "frame_dig 2",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "game_state#0"
      ]
    },
    "3033": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "encoded_value%0#0",
        "game_state#0",
        "player#0",
        "score#0",
        "tmp%17#0",
        "uint8%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "game_state#0",
        "3"
      ]
    },
    "3035": {
      "op": "getbyte",
      "defined_out": [
        "encoded_value%0#0",
        "game_state#0",
        "player#0",
        "score#0",
        "tmp%10#1",
        "tmp%17#0",
        "uint8%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "tmp%10#1"
      ]
    },
    "3036": {
      "op": "frame_dig 11",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "tmp%10#1",
        "score#0"
      ]
    },
    "3038": {
      "op": "<",
      "defined_out": [
        "encoded_value%0#0",
        "game_state#0",
        "player#0",
        "score#0",
        "tmp%11#0",
        "tmp%17#0",
        "uint8%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "tmp%11#0"
      ]
    },
    "3039": {
      "op": "bz resolve_score_else_body@33",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1"
      ]
    },
    "3042": {
      "block": "resolve_score_if_body@32",
      "stack_in": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1"
      ],
      "op": "frame_dig 2",
      "defined_out": [
        "game_state#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "game_state#0"
      ]
    },
    "3044": {
      "op": "dup",
      "defined_out": [
        "game_state#0",
        "game_state#0 (copy)"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "game_state#0",
        "game_state#0 (copy)"
      ]
    },
    "3045": {
      "error": "Index access is out of bounds",
      "op": "extract 4 1 // on error: Index access is out of bounds",
      "defined_out": [
        "assigned_value%0#1",
        "game_state#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "game_state#0",
        "assigned_value%0#1"
      ]
    },
    "3048": {
      "op": "replace2 5",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "game_state#0"
      ]
    },
    "3050": {
      "op": "dup",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "game_state#0",
        "game_state#0 (copy)"
      ]
    },
    "3051": {
      "error": "Index access is out of bounds",
      "op": "extract 88 32 // on error: Index access is out of bounds",
      "defined_out": [
        "assigned_value%1#1",
        "game_state#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "game_state#0",
        "assigned_value%1#1"
      ]
    },
    "3054": {
      "op": "replace2 120",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "game_state#0"
      ]
    },
    "3056": {
      "op": "dup",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "game_state#0",
        "game_state#0 (copy)"
      ]
    },
    "3057": {
      "error": "Index access is out of bounds",
      "op": "extract 3 1 // on error: Index access is out of bounds",
      "defined_out": [
        "assigned_value%2#0",
        "game_state#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "game_state#0",
        "assigned_value%2#0"
      ]
    },
    "3060": {
      "op": "replace2 4",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "game_state#0"
      ]
    },
    "3062": {
      "op": "dup",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "game_state#0",
        "game_state#0 (copy)"
      ]
    },
    "3063": {
      "error": "Index access is out of bounds",
      "op": "extract 56 32 // on error: Index access is out of bounds",
      "defined_out": [
        "assigned_value%3#0",
        "game_state#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "game_state#0",
        "assigned_value%3#0"
      ]
    },
    "3066": {
      "op": "replace2 88",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "game_state#0"
      ]
    },
    "3068": {
      "op": "frame_dig 7",
      "defined_out": [
        "game_state#0",
        "uint8%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "game_state#0",
        "uint8%0#0"
      ]
    },
    "3070": {
      "op": "replace2 3",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "game_state#0"
      ]
    },
    "3072": {
      "op": "frame_dig 4",
      "defined_out": [
        "game_state#0",
        "player#0",
        "uint8%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "game_state#0",
        "player#0"
      ]
    },
    "3074": {
      "op": "replace2 56",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "game_state#0"
      ]
    },
    "3076": {
      "op": "frame_bury 2",
      "defined_out": [
        "game_state#0",
        "player#0",
        "uint8%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1"
      ]
    },
    "3078": {
      "block": "resolve_score_after_if_else@41",
      "stack_in": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1"
      ],
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "0"
      ]
    },
    "3079": {
      "op": "bytec 6 // \"score_id\"",
      "defined_out": [
        "\"score_id\"",
        "0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "0",
        "\"score_id\""
      ]
    },
    "3081": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%10#0",
        "maybe_value%7#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "maybe_value%7#0",
        "maybe_exists%10#0"
      ]
    },
    "3082": {
      "error": "check self.score_id exists",
      "op": "assert // check self.score_id exists",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "maybe_value%7#0"
      ]
    },
    "3083": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "maybe_value%7#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "maybe_value%7#0",
        "1"
      ]
    },
    "3084": {
      "op": "+",
      "defined_out": [
        "materialized_values%4#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "materialized_values%4#0"
      ]
    },
    "3085": {
      "op": "bytec 6 // \"score_id\"",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "materialized_values%4#0",
        "\"score_id\""
      ]
    },
    "3087": {
      "op": "swap",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "\"score_id\"",
        "materialized_values%4#0"
      ]
    },
    "3088": {
      "op": "app_global_put",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1"
      ]
    },
    "3089": {
      "op": "frame_dig 2",
      "defined_out": [
        "game_state#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "game_state#0"
      ]
    },
    "3091": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "game_state#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "game_state#0",
        "3"
      ]
    },
    "3093": {
      "op": "getbyte",
      "defined_out": [
        "game_state#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "tmp%20#0"
      ]
    },
    "3094": {
      "op": "dup",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "tmp%20#0",
        "tmp%20#0"
      ]
    },
    "3095": {
      "op": "frame_bury 14",
      "defined_out": [
        "game_state#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "tmp%20#0"
      ]
    },
    "3097": {
      "op": "intc_1 // 0",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "tmp%20#0",
        "0"
      ]
    },
    "3098": {
      "op": "bytec 9 // \"ath_score\"",
      "defined_out": [
        "\"ath_score\"",
        "0",
        "game_state#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "tmp%20#0",
        "0",
        "\"ath_score\""
      ]
    },
    "3100": {
      "op": "app_global_get_ex",
      "defined_out": [
        "game_state#0",
        "maybe_exists%11#0",
        "maybe_value%8#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "tmp%20#0",
        "maybe_value%8#0",
        "maybe_exists%11#0"
      ]
    },
    "3101": {
      "error": "check self.ath_score exists",
      "op": "assert // check self.ath_score exists",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "tmp%20#0",
        "maybe_value%8#0"
      ]
    },
    "3102": {
      "op": ">",
      "defined_out": [
        "game_state#0",
        "tmp%20#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "tmp%21#0"
      ]
    },
    "3103": {
      "op": "bz resolve_score_after_if_else@7",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1"
      ]
    },
    "3106": {
      "op": "bytec 9 // \"ath_score\"",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "\"ath_score\""
      ]
    },
    "3108": {
      "op": "frame_dig 14",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "\"ath_score\"",
        "tmp%20#0"
      ]
    },
    "3110": {
      "op": "app_global_put",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1"
      ]
    },
    "3111": {
      "op": "intc_1 // 0",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "0"
      ]
    },
    "3112": {
      "op": "bytec 10 // \"ath_address\"",
      "defined_out": [
        "\"ath_address\"",
        "0",
        "game_state#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "0",
        "\"ath_address\""
      ]
    },
    "3114": {
      "op": "app_global_get_ex",
      "defined_out": [
        "game_state#0",
        "maybe_exists%12#0",
        "maybe_value%9#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "maybe_value%9#0",
        "maybe_exists%12#0"
      ]
    },
    "3115": {
      "error": "check self.ath_address exists",
      "op": "assert // check self.ath_address exists",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "maybe_value%9#0"
      ]
    },
    "3116": {
      "op": "global ZeroAddress",
      "defined_out": [
        "game_state#0",
        "maybe_value%9#0",
        "tmp%20#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "maybe_value%9#0",
        "tmp%23#0"
      ]
    },
    "3118": {
      "op": "!=",
      "defined_out": [
        "game_state#0",
        "tmp%20#0",
        "tmp%24#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "tmp%24#0"
      ]
    },
    "3119": {
      "op": "bz resolve_score_after_if_else@6",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1"
      ]
    },
    "3122": {
      "op": "bytec_3 // 0x745f",
      "defined_out": [
        "0x745f",
        "game_state#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "0x745f"
      ]
    },
    "3123": {
      "op": "box_get",
      "defined_out": [
        "game_state#0",
        "maybe_exists%13#0",
        "maybe_value%10#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "maybe_value%10#0",
        "maybe_exists%13#0"
      ]
    },
    "3124": {
      "error": "check self.box_game_trophy exists",
      "op": "assert // check self.box_game_trophy exists",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "maybe_value%10#0"
      ]
    },
    "3125": {
      "op": "dup",
      "defined_out": [
        "game_state#0",
        "maybe_value%10#0",
        "maybe_value%10#0 (copy)",
        "tmp%20#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "maybe_value%10#0",
        "maybe_value%10#0 (copy)"
      ]
    },
    "3126": {
      "error": "Index access is out of bounds",
      "op": "extract 8 32 // on error: Index access is out of bounds",
      "defined_out": [
        "game_state#0",
        "maybe_value%10#0",
        "reinterpret_bytes[32]%0#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "maybe_value%10#0",
        "reinterpret_bytes[32]%0#0"
      ]
    },
    "3129": {
      "op": "swap",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "reinterpret_bytes[32]%0#0",
        "maybe_value%10#0"
      ]
    },
    "3130": {
      "op": "intc_1 // 0",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "reinterpret_bytes[32]%0#0",
        "maybe_value%10#0",
        "0"
      ]
    },
    "3131": {
      "op": "extract_uint64",
      "defined_out": [
        "game_state#0",
        "reinterpret_bytes[32]%0#0",
        "tmp%20#0",
        "tmp%26#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "reinterpret_bytes[32]%0#0",
        "tmp%26#0"
      ]
    },
    "3132": {
      "op": "asset_holding_get AssetBalance",
      "defined_out": [
        "balance#0",
        "did_exist#0",
        "game_state#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "balance#0",
        "did_exist#0"
      ]
    },
    "3134": {
      "op": "swap",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "did_exist#0",
        "balance#0"
      ]
    },
    "3135": {
      "op": "frame_bury 8",
      "defined_out": [
        "balance#0",
        "did_exist#0",
        "game_state#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "did_exist#0"
      ]
    },
    "3137": {
      "op": "bz resolve_score_after_if_else@6",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1"
      ]
    },
    "3140": {
      "op": "frame_dig 8",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "balance#0"
      ]
    },
    "3142": {
      "op": "intc_0 // 1",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "balance#0",
        "1"
      ]
    },
    "3143": {
      "op": "==",
      "defined_out": [
        "balance#0",
        "game_state#0",
        "tmp%20#0",
        "tmp%27#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "tmp%27#0"
      ]
    },
    "3144": {
      "op": "bz resolve_score_after_if_else@6",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1"
      ]
    },
    "3147": {
      "op": "bytec_3 // 0x745f",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "0x745f"
      ]
    },
    "3148": {
      "op": "box_get",
      "defined_out": [
        "balance#0",
        "game_state#0",
        "maybe_exists%15#0",
        "maybe_value%12#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "maybe_value%12#0",
        "maybe_exists%15#0"
      ]
    },
    "3149": {
      "error": "check self.box_game_trophy exists",
      "op": "assert // check self.box_game_trophy exists",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "maybe_value%12#0"
      ]
    },
    "3150": {
      "op": "dup",
      "defined_out": [
        "balance#0",
        "game_state#0",
        "maybe_value%12#0",
        "maybe_value%12#0 (copy)",
        "tmp%20#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "maybe_value%12#0",
        "maybe_value%12#0 (copy)"
      ]
    },
    "3151": {
      "op": "intc_1 // 0",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "maybe_value%12#0",
        "maybe_value%12#0 (copy)",
        "0"
      ]
    },
    "3152": {
      "op": "extract_uint64",
      "defined_out": [
        "asset_id#0",
        "balance#0",
        "game_state#0",
        "maybe_value%12#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "maybe_value%12#0",
        "asset_id#0"
      ]
    },
    "3153": {
      "op": "swap",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "asset_id#0",
        "maybe_value%12#0"
      ]
    },
    "3154": {
      "error": "Index access is out of bounds",
      "op": "extract 8 32 // on error: Index access is out of bounds",
      "defined_out": [
        "asset_id#0",
        "asset_sender#0",
        "balance#0",
        "game_state#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "asset_id#0",
        "asset_sender#0"
      ]
    },
    "3157": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "asset_id#0",
        "asset_receiver#0",
        "asset_sender#0",
        "balance#0",
        "game_state#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "asset_id#0",
        "asset_sender#0",
        "asset_receiver#0"
      ]
    },
    "3159": {
      "op": "itxn_begin"
    },
    "3160": {
      "op": "intc_0 // 1",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "asset_id#0",
        "asset_sender#0",
        "asset_receiver#0",
        "1"
      ]
    },
    "3161": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "asset_id#0",
        "asset_sender#0",
        "asset_receiver#0"
      ]
    },
    "3163": {
      "op": "itxn_field AssetReceiver"
    },
    "3165": {
      "op": "itxn_field AssetSender",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "asset_id#0",
        "asset_receiver#0"
      ]
    },
    "3167": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1"
      ]
    },
    "3169": {
      "op": "pushint 4 // axfer",
      "defined_out": [
        "axfer",
        "balance#0",
        "game_state#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "axfer"
      ]
    },
    "3171": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1"
      ]
    },
    "3173": {
      "op": "intc_1 // 0",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "0"
      ]
    },
    "3174": {
      "op": "itxn_field Fee",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1"
      ]
    },
    "3176": {
      "op": "itxn_submit"
    },
    "3177": {
      "block": "resolve_score_after_if_else@6",
      "stack_in": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1"
      ],
      "op": "txn Sender",
      "defined_out": [
        "materialized_values%6#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "materialized_values%6#0"
      ]
    },
    "3179": {
      "op": "bytec 10 // \"ath_address\"",
      "defined_out": [
        "\"ath_address\"",
        "materialized_values%6#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "materialized_values%6#0",
        "\"ath_address\""
      ]
    },
    "3181": {
      "op": "dig 1",
      "defined_out": [
        "\"ath_address\"",
        "materialized_values%6#0",
        "materialized_values%6#0 (copy)"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "materialized_values%6#0",
        "\"ath_address\"",
        "materialized_values%6#0 (copy)"
      ]
    },
    "3183": {
      "op": "app_global_put",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "materialized_values%6#0"
      ]
    },
    "3184": {
      "op": "bytec_3 // 0x745f",
      "defined_out": [
        "0x745f",
        "materialized_values%6#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "materialized_values%6#0",
        "0x745f"
      ]
    },
    "3185": {
      "op": "box_get",
      "defined_out": [
        "materialized_values%6#0",
        "maybe_exists%18#0",
        "maybe_value%15#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "materialized_values%6#0",
        "maybe_value%15#0",
        "maybe_exists%18#0"
      ]
    },
    "3186": {
      "error": "check self.box_game_trophy exists",
      "op": "assert // check self.box_game_trophy exists",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "materialized_values%6#0",
        "maybe_value%15#0"
      ]
    },
    "3187": {
      "op": "swap",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "maybe_value%15#0",
        "materialized_values%6#0"
      ]
    },
    "3188": {
      "op": "replace2 8",
      "defined_out": [
        "updated_data%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "updated_data%0#0"
      ]
    },
    "3190": {
      "op": "bytec_3 // 0x745f",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "updated_data%0#0",
        "0x745f"
      ]
    },
    "3191": {
      "op": "swap",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "0x745f",
        "updated_data%0#0"
      ]
    },
    "3192": {
      "op": "box_put",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1"
      ]
    },
    "3193": {
      "block": "resolve_score_after_if_else@7",
      "stack_in": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1"
      ],
      "op": "frame_dig 2",
      "defined_out": [
        "game_state#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "game_state#0"
      ]
    },
    "3195": {
      "op": "dup",
      "defined_out": [
        "game_state#0",
        "game_state#0 (copy)"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "game_state#0",
        "game_state#0 (copy)"
      ]
    },
    "3196": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "game_state#0",
        "game_state#0 (copy)"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "game_state#0",
        "game_state#0 (copy)",
        "2"
      ]
    },
    "3197": {
      "op": "getbyte",
      "defined_out": [
        "game_state#0",
        "tmp%32#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "game_state#0",
        "tmp%32#0"
      ]
    },
    "3198": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "game_state#0",
        "tmp%32#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "game_state#0",
        "tmp%32#0",
        "1"
      ]
    },
    "3199": {
      "op": "-",
      "defined_out": [
        "game_state#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "game_state#0",
        "to_encode%0#0"
      ]
    },
    "3200": {
      "op": "itob",
      "defined_out": [
        "game_state#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "game_state#0",
        "val_as_bytes%0#0"
      ]
    },
    "3201": {
      "op": "dup",
      "defined_out": [
        "game_state#0",
        "val_as_bytes%0#0",
        "val_as_bytes%0#0 (copy)"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "game_state#0",
        "val_as_bytes%0#0",
        "val_as_bytes%0#0 (copy)"
      ]
    },
    "3202": {
      "op": "bitlen",
      "defined_out": [
        "bitlen%0#0",
        "game_state#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "game_state#0",
        "val_as_bytes%0#0",
        "bitlen%0#0"
      ]
    },
    "3203": {
      "op": "pushint 8 // 8",
      "defined_out": [
        "8",
        "bitlen%0#0",
        "game_state#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "game_state#0",
        "val_as_bytes%0#0",
        "bitlen%0#0",
        "8"
      ]
    },
    "3205": {
      "op": "<=",
      "defined_out": [
        "game_state#0",
        "no_overflow%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "game_state#0",
        "val_as_bytes%0#0",
        "no_overflow%0#0"
      ]
    },
    "3206": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "game_state#0",
        "val_as_bytes%0#0"
      ]
    },
    "3207": {
      "op": "extract 7 1",
      "defined_out": [
        "game_state#0",
        "uint8%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "game_state#0",
        "uint8%0#0"
      ]
    },
    "3210": {
      "op": "replace2 2",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "game_state#0"
      ]
    },
    "3212": {
      "op": "frame_dig -1",
      "defined_out": [
        "game_id#0 (copy)",
        "game_state#0",
        "uint8%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "game_state#0",
        "game_id#0 (copy)"
      ]
    },
    "3214": {
      "op": "swap",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "game_id#0 (copy)",
        "game_state#0"
      ]
    },
    "3215": {
      "op": "bytec_1 // \"p_\"",
      "defined_out": [
        "\"p_\"",
        "game_id#0 (copy)",
        "game_state#0",
        "uint8%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "game_id#0 (copy)",
        "game_state#0",
        "\"p_\""
      ]
    },
    "3216": {
      "callsub": "smart_contracts.pieout.subroutines.is_game_over",
      "op": "callsub is_game_over",
      "defined_out": [
        "game_state#0",
        "is_game_over%0#0",
        "uint8%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "is_game_over%0#0",
        "game_state#0"
      ]
    },
    "3219": {
      "op": "bury 1",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "game_state#0"
      ]
    },
    "3221": {
      "op": "frame_dig 0",
      "defined_out": [
        "box_prefixed_key%0#0",
        "game_state#0",
        "uint8%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "game_state#0",
        "box_prefixed_key%0#0"
      ]
    },
    "3223": {
      "op": "swap",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "box_prefixed_key%0#0",
        "game_state#0"
      ]
    },
    "3224": {
      "op": "box_put",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1"
      ]
    },
    "3225": {
      "retsub": true,
      "op": "retsub"
    },
    "3226": {
      "block": "resolve_score_else_body@33",
      "stack_in": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1"
      ],
      "op": "frame_dig 2",
      "defined_out": [
        "game_state#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "game_state#0"
      ]
    },
    "3228": {
      "error": "Index access is out of bounds",
      "op": "extract 88 32 // on error: Index access is out of bounds",
      "defined_out": [
        "game_state#0",
        "tmp%12#1"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "tmp%12#1"
      ]
    },
    "3231": {
      "op": "global ZeroAddress",
      "defined_out": [
        "game_state#0",
        "tmp%12#1",
        "tmp%13#1"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "tmp%12#1",
        "tmp%13#1"
      ]
    },
    "3233": {
      "op": "==",
      "defined_out": [
        "game_state#0",
        "tmp%14#1"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "tmp%14#1"
      ]
    },
    "3234": {
      "op": "bnz resolve_score_if_body@35",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1"
      ]
    },
    "3237": {
      "op": "frame_dig 2",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "game_state#0"
      ]
    },
    "3239": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "game_state#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "game_state#0",
        "4"
      ]
    },
    "3241": {
      "op": "getbyte",
      "defined_out": [
        "game_state#0",
        "tmp%16#1"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "tmp%16#1"
      ]
    },
    "3242": {
      "op": "frame_dig 11",
      "defined_out": [
        "game_state#0",
        "score#0",
        "tmp%16#1"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "tmp%16#1",
        "score#0"
      ]
    },
    "3244": {
      "op": "<",
      "defined_out": [
        "game_state#0",
        "score#0",
        "tmp%17#1"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "tmp%17#1"
      ]
    },
    "3245": {
      "op": "bz resolve_score_else_body@36",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1"
      ]
    },
    "3248": {
      "block": "resolve_score_if_body@35",
      "stack_in": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1"
      ],
      "op": "frame_dig 2",
      "defined_out": [
        "game_state#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "game_state#0"
      ]
    },
    "3250": {
      "op": "dup",
      "defined_out": [
        "game_state#0",
        "game_state#0 (copy)"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "game_state#0",
        "game_state#0 (copy)"
      ]
    },
    "3251": {
      "error": "Index access is out of bounds",
      "op": "extract 4 1 // on error: Index access is out of bounds",
      "defined_out": [
        "assigned_value%6#0",
        "game_state#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "game_state#0",
        "assigned_value%6#0"
      ]
    },
    "3254": {
      "op": "replace2 5",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "game_state#0"
      ]
    },
    "3256": {
      "op": "dup",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "game_state#0",
        "game_state#0 (copy)"
      ]
    },
    "3257": {
      "error": "Index access is out of bounds",
      "op": "extract 88 32 // on error: Index access is out of bounds",
      "defined_out": [
        "assigned_value%7#0",
        "game_state#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "game_state#0",
        "assigned_value%7#0"
      ]
    },
    "3260": {
      "op": "replace2 120",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "game_state#0"
      ]
    },
    "3262": {
      "op": "frame_dig 7",
      "defined_out": [
        "game_state#0",
        "uint8%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "game_state#0",
        "uint8%0#0"
      ]
    },
    "3264": {
      "op": "replace2 4",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "game_state#0"
      ]
    },
    "3266": {
      "op": "frame_dig 4",
      "defined_out": [
        "game_state#0",
        "player#0",
        "uint8%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "game_state#0",
        "player#0"
      ]
    },
    "3268": {
      "op": "replace2 88",
      "defined_out": [
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "uint8%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "game_state%out#23"
      ]
    },
    "3270": {
      "op": "frame_bury 3",
      "defined_out": [
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "uint8%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1"
      ]
    },
    "3272": {
      "block": "resolve_score_after_if_else@40",
      "stack_in": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1"
      ],
      "op": "frame_dig 3",
      "defined_out": [
        "game_state#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "game_state#0"
      ]
    },
    "3274": {
      "op": "frame_bury 2",
      "defined_out": [
        "game_state#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1"
      ]
    },
    "3276": {
      "op": "b resolve_score_after_if_else@41"
    },
    "3279": {
      "block": "resolve_score_else_body@36",
      "stack_in": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1"
      ],
      "op": "frame_dig 2",
      "defined_out": [
        "game_state#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "game_state#0"
      ]
    },
    "3281": {
      "error": "Index access is out of bounds",
      "op": "extract 120 32 // on error: Index access is out of bounds",
      "defined_out": [
        "game_state#0",
        "tmp%18#1"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "tmp%18#1"
      ]
    },
    "3284": {
      "op": "global ZeroAddress",
      "defined_out": [
        "game_state#0",
        "tmp%18#1",
        "tmp%19#1"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "tmp%18#1",
        "tmp%19#1"
      ]
    },
    "3286": {
      "op": "==",
      "defined_out": [
        "game_state#0",
        "tmp%20#1"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "tmp%20#1"
      ]
    },
    "3287": {
      "op": "bnz resolve_score_if_body@38",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1"
      ]
    },
    "3290": {
      "op": "frame_dig 2",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "game_state#0"
      ]
    },
    "3292": {
      "op": "dup",
      "defined_out": [
        "game_state#0",
        "game_state#0 (copy)"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "game_state#0",
        "game_state#0 (copy)"
      ]
    },
    "3293": {
      "op": "pushint 5 // 5",
      "defined_out": [
        "5",
        "game_state#0",
        "game_state#0 (copy)"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "game_state#0",
        "game_state#0 (copy)",
        "5"
      ]
    },
    "3295": {
      "op": "getbyte",
      "defined_out": [
        "game_state#0",
        "tmp%22#1"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "game_state#0",
        "tmp%22#1"
      ]
    },
    "3296": {
      "op": "frame_dig 11",
      "defined_out": [
        "game_state#0",
        "score#0",
        "tmp%22#1"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "game_state#0",
        "tmp%22#1",
        "score#0"
      ]
    },
    "3298": {
      "op": "<",
      "defined_out": [
        "game_state#0",
        "score#0",
        "tmp%23#1"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "game_state#0",
        "tmp%23#1"
      ]
    },
    "3299": {
      "op": "swap",
      "defined_out": [
        "game_state#0",
        "game_state%out#23",
        "score#0",
        "tmp%23#1"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "tmp%23#1",
        "game_state%out#23"
      ]
    },
    "3300": {
      "op": "frame_bury 3",
      "defined_out": [
        "game_state#0",
        "game_state%out#23",
        "score#0",
        "tmp%23#1"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "tmp%23#1"
      ]
    },
    "3302": {
      "op": "bz resolve_score_after_if_else@40",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1"
      ]
    },
    "3305": {
      "block": "resolve_score_if_body@38",
      "stack_in": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1"
      ],
      "op": "frame_dig 2",
      "defined_out": [
        "game_state#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "game_state#0"
      ]
    },
    "3307": {
      "op": "frame_dig 7",
      "defined_out": [
        "game_state#0",
        "uint8%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "game_state#0",
        "uint8%0#0"
      ]
    },
    "3309": {
      "op": "replace2 5",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "game_state#0"
      ]
    },
    "3311": {
      "op": "frame_dig 4",
      "defined_out": [
        "game_state#0",
        "player#0",
        "uint8%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "game_state#0",
        "player#0"
      ]
    },
    "3313": {
      "op": "replace2 120",
      "defined_out": [
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "uint8%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1",
        "game_state%out#23"
      ]
    },
    "3315": {
      "op": "frame_bury 3",
      "defined_out": [
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "uint8%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state%out#23",
        "player#0",
        "result#1",
        "tmp%17#0",
        "uint8%0#0",
        "balance#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%20#0",
        "tmp%3#1"
      ]
    },
    "3317": {
      "op": "b resolve_score_after_if_else@40"
    },
    "3320": {
      "subroutine": "smart_contracts.pieout.contract.Pieout.check_game_event_trigger",
      "params": {
        "game_id#0": "uint64",
        "game_event_id#0": "bytes"
      },
      "block": "check_game_event_trigger",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "3323": {
      "op": "global GroupSize",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "3325": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "1"
      ]
    },
    "3326": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "3327": {
      "error": "Invalid group size. This app call can only take standalone transactions.",
      "op": "assert // Invalid group size. This app call can only take standalone transactions.",
      "stack_out": []
    },
    "3328": {
      "op": "frame_dig -2",
      "defined_out": [
        "game_id#0 (copy)"
      ],
      "stack_out": [
        "game_id#0 (copy)"
      ]
    },
    "3330": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "3331": {
      "op": "bytec 4 // \"s_\"",
      "defined_out": [
        "\"s_\"",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "\"s_\""
      ]
    },
    "3333": {
      "op": "swap",
      "stack_out": [
        "\"s_\"",
        "encoded_value%0#0"
      ]
    },
    "3334": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "3335": {
      "op": "dup",
      "defined_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)"
      ]
    },
    "3336": {
      "op": "box_len",
      "defined_out": [
        "_%0#0",
        "box_prefixed_key%0#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "_%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3337": {
      "op": "bury 1",
      "stack_out": [
        "box_prefixed_key%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3339": {
      "error": "Box game state not found. Check if Game ID is valid.",
      "op": "assert // Box game state not found. Check if Game ID is valid.",
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "3340": {
      "op": "box_get",
      "defined_out": [
        "game_state#0",
        "maybe_exists%1#0"
      ],
      "stack_out": [
        "game_state#0",
        "maybe_exists%1#0"
      ]
    },
    "3341": {
      "op": "swap",
      "stack_out": [
        "maybe_exists%1#0",
        "game_state#0"
      ]
    },
    "3342": {
      "op": "dup",
      "stack_out": [
        "maybe_exists%1#0",
        "game_state#0",
        "game_state#0 (copy)"
      ]
    },
    "3343": {
      "op": "uncover 2",
      "defined_out": [
        "game_state#0",
        "maybe_exists%1#0"
      ],
      "stack_out": [
        "game_state#0",
        "game_state#0",
        "maybe_exists%1#0"
      ]
    },
    "3345": {
      "error": "check self.box_game_state entry exists",
      "op": "assert // check self.box_game_state entry exists",
      "stack_out": [
        "game_state#0",
        "game_state#0"
      ]
    },
    "3346": {
      "op": "txn Sender",
      "defined_out": [
        "game_state#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "game_state#0",
        "game_state#0",
        "tmp%2#0"
      ]
    },
    "3348": {
      "op": "swap",
      "stack_out": [
        "game_state#0",
        "tmp%2#0",
        "game_state#0"
      ]
    },
    "3349": {
      "op": "intc_0 // 1",
      "stack_out": [
        "game_state#0",
        "tmp%2#0",
        "game_state#0",
        "1"
      ]
    },
    "3350": {
      "op": "getbyte",
      "defined_out": [
        "game_state#0",
        "tmp%2#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "game_state#0",
        "tmp%2#0",
        "tmp%4#0"
      ]
    },
    "3351": {
      "op": "frame_dig -2",
      "stack_out": [
        "game_state#0",
        "tmp%2#0",
        "tmp%4#0",
        "game_id#0 (copy)"
      ]
    },
    "3353": {
      "op": "uncover 2",
      "stack_out": [
        "game_state#0",
        "tmp%4#0",
        "game_id#0 (copy)",
        "tmp%2#0"
      ]
    },
    "3355": {
      "op": "bytec_1 // \"p_\"",
      "defined_out": [
        "\"p_\"",
        "game_id#0 (copy)",
        "game_state#0",
        "tmp%2#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "game_state#0",
        "tmp%4#0",
        "game_id#0 (copy)",
        "tmp%2#0",
        "\"p_\""
      ]
    },
    "3356": {
      "op": "uncover 3",
      "stack_out": [
        "game_state#0",
        "game_id#0 (copy)",
        "tmp%2#0",
        "\"p_\"",
        "tmp%4#0"
      ]
    },
    "3358": {
      "op": "intc_0 // 1",
      "stack_out": [
        "game_state#0",
        "game_id#0 (copy)",
        "tmp%2#0",
        "\"p_\"",
        "tmp%4#0",
        "1"
      ]
    },
    "3359": {
      "callsub": "smart_contracts.pieout.subroutines.check_acc_in_game",
      "op": "callsub check_acc_in_game",
      "defined_out": [
        "acc_in_game#0",
        "game_state#0"
      ],
      "stack_out": [
        "game_state#0",
        "acc_in_game#0"
      ]
    },
    "3362": {
      "op": "swap",
      "defined_out": [
        "acc_in_game#0",
        "game_state#0"
      ],
      "stack_out": [
        "acc_in_game#0",
        "game_state#0"
      ]
    },
    "3363": {
      "op": "frame_dig -1",
      "defined_out": [
        "acc_in_game#0",
        "game_event_id#0 (copy)",
        "game_state#0"
      ],
      "stack_out": [
        "acc_in_game#0",
        "game_state#0",
        "game_event_id#0 (copy)"
      ]
    },
    "3365": {
      "op": "btoi",
      "defined_out": [
        "acc_in_game#0",
        "game_state#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "acc_in_game#0",
        "game_state#0",
        "tmp%5#0"
      ]
    },
    "3366": {
      "op": "dup",
      "stack_out": [
        "acc_in_game#0",
        "game_state#0",
        "tmp%5#0",
        "tmp%5#0"
      ]
    },
    "3367": {
      "op": "cover 2",
      "defined_out": [
        "acc_in_game#0",
        "game_state#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "acc_in_game#0",
        "tmp%5#0",
        "game_state#0",
        "tmp%5#0"
      ]
    },
    "3369": {
      "op": "bnz check_game_event_trigger_else_body@2",
      "stack_out": [
        "acc_in_game#0",
        "tmp%5#0",
        "game_state#0"
      ]
    },
    "3372": {
      "op": "frame_dig 0",
      "stack_out": [
        "acc_in_game#0",
        "tmp%5#0",
        "game_state#0",
        "acc_in_game#0"
      ]
    },
    "3374": {
      "error": "Sender address is not recognized as a valid player for this game.",
      "op": "assert // Sender address is not recognized as a valid player for this game.",
      "stack_out": [
        "acc_in_game#0",
        "tmp%5#0",
        "game_state#0"
      ]
    },
    "3375": {
      "callsub": "smart_contracts.pieout.subroutines.is_game_live",
      "op": "callsub is_game_live",
      "defined_out": [
        "acc_in_game#0",
        "game_state#0",
        "is_game_live#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "acc_in_game#0",
        "tmp%5#0",
        "is_game_live#0",
        "game_state#0"
      ]
    },
    "3378": {
      "op": "pop",
      "stack_out": [
        "acc_in_game#0",
        "tmp%5#0",
        "is_game_live#0"
      ]
    },
    "3379": {
      "op": "frame_bury 0"
    },
    "3381": {
      "retsub": true,
      "op": "retsub"
    },
    "3382": {
      "block": "check_game_event_trigger_else_body@2",
      "stack_in": [
        "acc_in_game#0",
        "tmp%5#0",
        "game_state#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "acc_in_game#0",
        "tmp%5#0",
        "game_state#0",
        "tmp%5#0"
      ]
    },
    "3384": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "tmp%5#0"
      ],
      "stack_out": [
        "acc_in_game#0",
        "tmp%5#0",
        "game_state#0",
        "tmp%5#0",
        "2"
      ]
    },
    "3385": {
      "op": "==",
      "defined_out": [
        "tmp%5#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "acc_in_game#0",
        "tmp%5#0",
        "game_state#0",
        "tmp%8#0"
      ]
    },
    "3386": {
      "error": "Game event not found. Check if Game Event ID is valid",
      "op": "assert // Game event not found. Check if Game Event ID is valid",
      "defined_out": [
        "game_state#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "acc_in_game#0",
        "tmp%5#0",
        "game_state#0"
      ]
    },
    "3387": {
      "op": "dup",
      "defined_out": [
        "game_state#0",
        "game_state#0 (copy)",
        "tmp%5#0"
      ],
      "stack_out": [
        "acc_in_game#0",
        "tmp%5#0",
        "game_state#0",
        "game_state#0 (copy)"
      ]
    },
    "3388": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "game_state#0",
        "game_state#0 (copy)",
        "tmp%5#0"
      ],
      "stack_out": [
        "acc_in_game#0",
        "tmp%5#0",
        "game_state#0",
        "game_state#0 (copy)",
        "0"
      ]
    },
    "3389": {
      "op": "getbit",
      "defined_out": [
        "game_state#0",
        "is_true%0#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "acc_in_game#0",
        "tmp%5#0",
        "game_state#0",
        "is_true%0#0"
      ]
    },
    "3390": {
      "op": "bytec_0 // 0x00",
      "defined_out": [
        "0x00",
        "game_state#0",
        "is_true%0#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "acc_in_game#0",
        "tmp%5#0",
        "game_state#0",
        "is_true%0#0",
        "0x00"
      ]
    },
    "3391": {
      "op": "intc_1 // 0",
      "stack_out": [
        "acc_in_game#0",
        "tmp%5#0",
        "game_state#0",
        "is_true%0#0",
        "0x00",
        "0"
      ]
    },
    "3392": {
      "op": "uncover 2",
      "stack_out": [
        "acc_in_game#0",
        "tmp%5#0",
        "game_state#0",
        "0x00",
        "0",
        "is_true%0#0"
      ]
    },
    "3394": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%0#0",
        "game_state#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "acc_in_game#0",
        "tmp%5#0",
        "game_state#0",
        "encoded_bool%0#0"
      ]
    },
    "3395": {
      "op": "intc_1 // 0",
      "stack_out": [
        "acc_in_game#0",
        "tmp%5#0",
        "game_state#0",
        "encoded_bool%0#0",
        "0"
      ]
    },
    "3396": {
      "op": "getbit",
      "defined_out": [
        "game_state#0",
        "tmp%5#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "acc_in_game#0",
        "tmp%5#0",
        "game_state#0",
        "tmp%9#0"
      ]
    },
    "3397": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "game_state#0",
        "tmp%5#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "acc_in_game#0",
        "tmp%5#0",
        "game_state#0",
        "tmp%9#0",
        "1"
      ]
    },
    "3398": {
      "op": "==",
      "defined_out": [
        "game_state#0",
        "tmp%10#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "acc_in_game#0",
        "tmp%5#0",
        "game_state#0",
        "tmp%10#0"
      ]
    },
    "3399": {
      "error": "Game state staking finalized value mismatch.",
      "op": "assert // Game state staking finalized value mismatch.",
      "stack_out": [
        "acc_in_game#0",
        "tmp%5#0",
        "game_state#0"
      ]
    },
    "3400": {
      "op": "dup",
      "stack_out": [
        "acc_in_game#0",
        "tmp%5#0",
        "game_state#0",
        "game_state#0 (copy)"
      ]
    },
    "3401": {
      "error": "Index access is out of bounds",
      "op": "extract 8 8 // on error: Index access is out of bounds",
      "defined_out": [
        "game_state#0",
        "reinterpret_biguint%0#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "acc_in_game#0",
        "tmp%5#0",
        "game_state#0",
        "reinterpret_biguint%0#0"
      ]
    },
    "3404": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "game_state#0",
        "reinterpret_biguint%0#0",
        "tmp%11#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "acc_in_game#0",
        "tmp%5#0",
        "game_state#0",
        "reinterpret_biguint%0#0",
        "tmp%11#0"
      ]
    },
    "3406": {
      "op": "itob",
      "defined_out": [
        "game_state#0",
        "reinterpret_biguint%0#0",
        "tmp%12#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "acc_in_game#0",
        "tmp%5#0",
        "game_state#0",
        "reinterpret_biguint%0#0",
        "tmp%12#0"
      ]
    },
    "3407": {
      "op": "b<",
      "defined_out": [
        "game_state#0",
        "tmp%13#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "acc_in_game#0",
        "tmp%5#0",
        "game_state#0",
        "tmp%13#0"
      ]
    },
    "3408": {
      "error": "Phase deadline expired. Latest block timestamp must not exceed expiry timestamp.",
      "op": "assert // Phase deadline expired. Latest block timestamp must not exceed expiry timestamp.",
      "stack_out": [
        "acc_in_game#0",
        "tmp%5#0",
        "game_state#0"
      ]
    },
    "3409": {
      "op": "frame_dig 0",
      "defined_out": [
        "acc_in_game#0",
        "game_state#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "acc_in_game#0",
        "tmp%5#0",
        "game_state#0",
        "acc_in_game#0"
      ]
    },
    "3411": {
      "error": "Sender address is not recognized as a valid player for this game.",
      "op": "assert // Sender address is not recognized as a valid player for this game.",
      "stack_out": [
        "acc_in_game#0",
        "tmp%5#0",
        "game_state#0"
      ]
    },
    "3412": {
      "op": "frame_dig -2",
      "defined_out": [
        "acc_in_game#0",
        "game_id#0 (copy)",
        "game_state#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "acc_in_game#0",
        "tmp%5#0",
        "game_state#0",
        "game_id#0 (copy)"
      ]
    },
    "3414": {
      "op": "swap",
      "stack_out": [
        "acc_in_game#0",
        "tmp%5#0",
        "game_id#0 (copy)",
        "game_state#0"
      ]
    },
    "3415": {
      "op": "bytec_1 // \"p_\"",
      "defined_out": [
        "\"p_\"",
        "acc_in_game#0",
        "game_id#0 (copy)",
        "game_state#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "acc_in_game#0",
        "tmp%5#0",
        "game_id#0 (copy)",
        "game_state#0",
        "\"p_\""
      ]
    },
    "3416": {
      "callsub": "smart_contracts.pieout.subroutines.is_game_over",
      "op": "callsub is_game_over",
      "defined_out": [
        "acc_in_game#0",
        "game_state#0",
        "is_game_over#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "acc_in_game#0",
        "tmp%5#0",
        "is_game_over#0",
        "game_state#0"
      ]
    },
    "3419": {
      "op": "pop",
      "stack_out": [
        "acc_in_game#0",
        "tmp%5#0",
        "is_game_over#0"
      ]
    },
    "3420": {
      "op": "frame_bury 0"
    },
    "3422": {
      "retsub": true,
      "op": "retsub"
    },
    "3423": {
      "subroutine": "smart_contracts.pieout.contract.Pieout.reset_game",
      "params": {
        "game_id#0": "uint64",
        "stake_pay#0": "uint64"
      },
      "block": "reset_game",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "3426": {
      "op": "global GroupSize",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "3428": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "2"
      ]
    },
    "3429": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "3430": {
      "error": "Invalid group size. Ensure number of transaction in group is within valid bounds.",
      "op": "assert // Invalid group size. Ensure number of transaction in group is within valid bounds.",
      "stack_out": []
    },
    "3431": {
      "op": "frame_dig -2",
      "defined_out": [
        "game_id#0 (copy)"
      ],
      "stack_out": [
        "game_id#0 (copy)"
      ]
    },
    "3433": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "3434": {
      "op": "bytec 4 // \"s_\"",
      "defined_out": [
        "\"s_\"",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "\"s_\""
      ]
    },
    "3436": {
      "op": "dig 1",
      "defined_out": [
        "\"s_\"",
        "encoded_value%0#0",
        "encoded_value%0#0 (copy)"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "\"s_\"",
        "encoded_value%0#0 (copy)"
      ]
    },
    "3438": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0"
      ]
    },
    "3439": {
      "op": "dup",
      "defined_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)"
      ]
    },
    "3440": {
      "op": "box_len",
      "defined_out": [
        "_%0#0",
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "_%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3441": {
      "op": "bury 1",
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3443": {
      "error": "Box game state not found. Check if Game ID is valid.",
      "op": "assert // Box game state not found. Check if Game ID is valid.",
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0"
      ]
    },
    "3444": {
      "op": "frame_dig -1",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "stake_pay#0 (copy)"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "stake_pay#0 (copy)"
      ]
    },
    "3446": {
      "op": "gtxns Sender",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "tmp%2#0"
      ]
    },
    "3448": {
      "op": "txn Sender",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "3450": {
      "op": "==",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "tmp%4#0"
      ]
    },
    "3451": {
      "error": "Stake payment sender address must match transaction sender address.",
      "op": "assert // Stake payment sender address must match transaction sender address.",
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0"
      ]
    },
    "3452": {
      "op": "frame_dig -1",
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "stake_pay#0 (copy)"
      ]
    },
    "3454": {
      "op": "gtxns Receiver",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "tmp%5#0"
      ]
    },
    "3456": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "tmp%5#0",
        "tmp%6#0"
      ]
    },
    "3458": {
      "op": "==",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "tmp%7#0"
      ]
    },
    "3459": {
      "error": "Stake payment receiver address must match application address.",
      "op": "assert // Stake payment receiver address must match application address.",
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0"
      ]
    },
    "3460": {
      "op": "frame_dig -1",
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "stake_pay#0 (copy)"
      ]
    },
    "3462": {
      "op": "gtxns Amount",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "tmp%8#0"
      ]
    },
    "3464": {
      "op": "intc 5 // 1000",
      "defined_out": [
        "1000",
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "tmp%8#0",
        "1000"
      ]
    },
    "3466": {
      "op": ">=",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "tmp%9#0"
      ]
    },
    "3467": {
      "error": "Insufficient funds. Stake pay amount is not enough to cover staking requirements.",
      "op": "assert // Insufficient funds. Stake pay amount is not enough to cover staking requirements.",
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0"
      ]
    },
    "3468": {
      "op": "dup",
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)"
      ]
    },
    "3469": {
      "op": "box_get",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "maybe_exists%1#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "game_state#0",
        "maybe_exists%1#0"
      ]
    },
    "3470": {
      "error": "check self.box_game_state entry exists",
      "op": "assert // check self.box_game_state entry exists",
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "game_state#0"
      ]
    },
    "3471": {
      "op": "dup",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#0 (copy)"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "game_state#0",
        "game_state#0 (copy)"
      ]
    },
    "3472": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#0 (copy)"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "game_state#0",
        "game_state#0 (copy)",
        "0"
      ]
    },
    "3473": {
      "op": "getbit",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "is_true%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "game_state#0",
        "is_true%0#0"
      ]
    },
    "3474": {
      "op": "bytec_0 // 0x00",
      "defined_out": [
        "0x00",
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "is_true%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "game_state#0",
        "is_true%0#0",
        "0x00"
      ]
    },
    "3475": {
      "op": "intc_1 // 0",
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "game_state#0",
        "is_true%0#0",
        "0x00",
        "0"
      ]
    },
    "3476": {
      "op": "uncover 2",
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "game_state#0",
        "0x00",
        "0",
        "is_true%0#0"
      ]
    },
    "3478": {
      "op": "setbit",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "game_state#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "game_state#0",
        "encoded_bool%0#0"
      ]
    },
    "3479": {
      "op": "intc_1 // 0",
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "game_state#0",
        "encoded_bool%0#0",
        "0"
      ]
    },
    "3480": {
      "op": "getbit",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "game_state#0",
        "tmp%10#0"
      ]
    },
    "3481": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "game_state#0",
        "tmp%10#0",
        "1"
      ]
    },
    "3482": {
      "op": "==",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "game_state#0",
        "tmp%11#0"
      ]
    },
    "3483": {
      "error": "Game state staking finalized value mismatch.",
      "op": "assert // Game state staking finalized value mismatch.",
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "game_state#0"
      ]
    },
    "3484": {
      "op": "dup",
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "game_state#0",
        "game_state#0 (copy)"
      ]
    },
    "3485": {
      "error": "Index access is out of bounds",
      "op": "extract 24 32 // on error: Index access is out of bounds",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "game_state#0",
        "tmp%12#0"
      ]
    },
    "3488": {
      "op": "txn Sender",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "tmp%12#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "game_state#0",
        "tmp%12#0",
        "tmp%13#0"
      ]
    },
    "3490": {
      "op": "==",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "game_state#0",
        "tmp%14#0"
      ]
    },
    "3491": {
      "error": "Sender address is not recognized as the admin address for this game.",
      "op": "assert // Sender address is not recognized as the admin address for this game.",
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "game_state#0"
      ]
    },
    "3492": {
      "op": "dup",
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "game_state#0",
        "game_state#0 (copy)"
      ]
    },
    "3493": {
      "op": "pushint 16 // 16",
      "defined_out": [
        "16",
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#0 (copy)"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "game_state#0",
        "game_state#0 (copy)",
        "16"
      ]
    },
    "3495": {
      "op": "extract_uint64",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "game_state#0",
        "tmp%16#0"
      ]
    },
    "3496": {
      "op": "!",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "game_state#0",
        "tmp%17#0"
      ]
    },
    "3497": {
      "error": "Prize pool not empty. Amount in prize pool must be zero.",
      "op": "assert // Prize pool not empty. Amount in prize pool must be zero.",
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "game_state#0"
      ]
    },
    "3498": {
      "op": "dup",
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "game_state#0",
        "game_state#0 (copy)"
      ]
    },
    "3499": {
      "op": "intc_2 // 2",
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "game_state#0",
        "game_state#0 (copy)",
        "2"
      ]
    },
    "3500": {
      "op": "getbyte",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "game_state#0",
        "tmp%19#0"
      ]
    },
    "3501": {
      "op": "!",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "game_state#0",
        "tmp%20#0"
      ]
    },
    "3502": {
      "error": "Game lobby not empty. Number of active players must be zero.",
      "op": "assert // Game lobby not empty. Number of active players must be zero.",
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "game_state#0"
      ]
    },
    "3503": {
      "op": "bytec_1 // \"p_\"",
      "defined_out": [
        "\"p_\"",
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "game_state#0",
        "\"p_\""
      ]
    },
    "3504": {
      "op": "uncover 3",
      "stack_out": [
        "box_prefixed_key%0#0",
        "game_state#0",
        "\"p_\"",
        "encoded_value%0#0"
      ]
    },
    "3506": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0",
        "game_players_bref#0",
        "game_state#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "game_state#0",
        "game_players_bref#0"
      ]
    },
    "3507": {
      "op": "intc_1 // 0"
    },
    "3508": {
      "op": "txn Sender",
      "defined_out": [
        "0",
        "box_prefixed_key%0#0",
        "game_players_bref#0",
        "game_state#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "game_state#0",
        "game_players_bref#0",
        "0",
        "tmp%22#0"
      ]
    },
    "3510": {
      "op": "box_replace",
      "stack_out": [
        "box_prefixed_key%0#0",
        "game_state#0"
      ]
    },
    "3511": {
      "op": "intc_1 // 0",
      "stack_out": [
        "box_prefixed_key%0#0",
        "game_state#0",
        "0"
      ]
    },
    "3512": {
      "op": "dup",
      "stack_out": [
        "box_prefixed_key%0#0",
        "game_state#0",
        "0",
        "0"
      ]
    },
    "3513": {
      "op": "setbit",
      "stack_out": [
        "box_prefixed_key%0#0",
        "game_state#0"
      ]
    },
    "3514": {
      "op": "pushbytes 0x01",
      "defined_out": [
        "0x01",
        "box_prefixed_key%0#0",
        "game_state#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "game_state#0",
        "0x01"
      ]
    },
    "3517": {
      "op": "replace2 2",
      "stack_out": [
        "box_prefixed_key%0#0",
        "game_state#0"
      ]
    },
    "3519": {
      "op": "bytec_0 // 0x00",
      "stack_out": [
        "box_prefixed_key%0#0",
        "game_state#0",
        "0x00"
      ]
    },
    "3520": {
      "op": "replace2 3",
      "stack_out": [
        "box_prefixed_key%0#0",
        "game_state#0"
      ]
    },
    "3522": {
      "op": "bytec_0 // 0x00",
      "stack_out": [
        "box_prefixed_key%0#0",
        "game_state#0",
        "0x00"
      ]
    },
    "3523": {
      "op": "replace2 4",
      "stack_out": [
        "box_prefixed_key%0#0",
        "game_state#0"
      ]
    },
    "3525": {
      "op": "bytec_0 // 0x00",
      "stack_out": [
        "box_prefixed_key%0#0",
        "game_state#0",
        "0x00"
      ]
    },
    "3526": {
      "op": "replace2 5",
      "stack_out": [
        "box_prefixed_key%0#0",
        "game_state#0"
      ]
    },
    "3528": {
      "op": "bytec 12 // 0x0020",
      "defined_out": [
        "0x0020",
        "box_prefixed_key%0#0",
        "game_state#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "game_state#0",
        "0x0020"
      ]
    },
    "3530": {
      "op": "replace2 6",
      "stack_out": [
        "box_prefixed_key%0#0",
        "game_state#0"
      ]
    },
    "3532": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "box_prefixed_key%0#0",
        "game_state#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "game_state#0",
        "tmp%23#0"
      ]
    },
    "3534": {
      "op": "intc 4 // 3600",
      "defined_out": [
        "3600",
        "box_prefixed_key%0#0",
        "game_state#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "game_state#0",
        "tmp%23#0",
        "3600"
      ]
    },
    "3536": {
      "op": "+",
      "defined_out": [
        "box_prefixed_key%0#0",
        "game_state#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "game_state#0",
        "to_encode%0#0"
      ]
    },
    "3537": {
      "op": "itob",
      "defined_out": [
        "box_prefixed_key%0#0",
        "game_state#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "game_state#0",
        "val_as_bytes%0#0"
      ]
    },
    "3538": {
      "op": "replace2 8",
      "stack_out": [
        "box_prefixed_key%0#0",
        "game_state#0"
      ]
    },
    "3540": {
      "op": "dup",
      "stack_out": [
        "box_prefixed_key%0#0",
        "game_state#0",
        "game_state#0 (copy)"
      ]
    },
    "3541": {
      "op": "pushint 16 // 16",
      "stack_out": [
        "box_prefixed_key%0#0",
        "game_state#0",
        "game_state#0 (copy)",
        "16"
      ]
    },
    "3543": {
      "op": "extract_uint64",
      "defined_out": [
        "box_prefixed_key%0#0",
        "game_state#0",
        "tmp%25#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "game_state#0",
        "tmp%25#0"
      ]
    },
    "3544": {
      "op": "intc 5 // 1000",
      "stack_out": [
        "box_prefixed_key%0#0",
        "game_state#0",
        "tmp%25#0",
        "1000"
      ]
    },
    "3546": {
      "op": "+",
      "defined_out": [
        "box_prefixed_key%0#0",
        "game_state#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "game_state#0",
        "to_encode%1#0"
      ]
    },
    "3547": {
      "op": "itob",
      "defined_out": [
        "box_prefixed_key%0#0",
        "game_state#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "game_state#0",
        "val_as_bytes%1#0"
      ]
    },
    "3548": {
      "op": "replace2 16",
      "stack_out": [
        "box_prefixed_key%0#0",
        "game_state#0"
      ]
    },
    "3550": {
      "op": "global ZeroAddress",
      "defined_out": [
        "assigned_value%8#0",
        "box_prefixed_key%0#0",
        "game_state#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "game_state#0",
        "assigned_value%8#0"
      ]
    },
    "3552": {
      "op": "replace2 56",
      "stack_out": [
        "box_prefixed_key%0#0",
        "game_state#0"
      ]
    },
    "3554": {
      "op": "global ZeroAddress",
      "defined_out": [
        "assigned_value%9#0",
        "box_prefixed_key%0#0",
        "game_state#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "game_state#0",
        "assigned_value%9#0"
      ]
    },
    "3556": {
      "op": "replace2 88",
      "stack_out": [
        "box_prefixed_key%0#0",
        "game_state#0"
      ]
    },
    "3558": {
      "op": "global ZeroAddress",
      "defined_out": [
        "assigned_value%10#0",
        "box_prefixed_key%0#0",
        "game_state#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "game_state#0",
        "assigned_value%10#0"
      ]
    },
    "3560": {
      "op": "replace2 120",
      "stack_out": [
        "box_prefixed_key%0#0",
        "game_state#0"
      ]
    },
    "3562": {
      "op": "box_put",
      "stack_out": []
    },
    "3563": {
      "retsub": true,
      "op": "retsub"
    },
    "3564": {
      "subroutine": "smart_contracts.pieout.contract.Pieout.delete_game",
      "params": {
        "game_id#0": "uint64"
      },
      "block": "delete_game",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "3567": {
      "op": "global GroupSize",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "3569": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "1"
      ]
    },
    "3570": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "3571": {
      "error": "Invalid group size. This app call can only take standalone transactions.",
      "op": "assert // Invalid group size. This app call can only take standalone transactions.",
      "stack_out": []
    },
    "3572": {
      "op": "frame_dig -1",
      "defined_out": [
        "game_id#0 (copy)"
      ],
      "stack_out": [
        "game_id#0 (copy)"
      ]
    },
    "3574": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "3575": {
      "op": "dup",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%0#0"
      ]
    },
    "3576": {
      "op": "bytec 4 // \"s_\"",
      "defined_out": [
        "\"s_\"",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%0#0",
        "\"s_\""
      ]
    },
    "3578": {
      "op": "swap",
      "stack_out": [
        "encoded_value%0#0",
        "\"s_\"",
        "encoded_value%0#0"
      ]
    },
    "3579": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0"
      ]
    },
    "3580": {
      "op": "dupn 2",
      "defined_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)"
      ]
    },
    "3582": {
      "op": "box_len",
      "defined_out": [
        "_%0#0",
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0",
        "_%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3583": {
      "op": "bury 1",
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3585": {
      "error": "Box game state not found. Check if Game ID is valid.",
      "op": "assert // Box game state not found. Check if Game ID is valid.",
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0"
      ]
    },
    "3586": {
      "op": "box_get",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "maybe_exists%1#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "game_state#0",
        "maybe_exists%1#0"
      ]
    },
    "3587": {
      "op": "swap",
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "maybe_exists%1#0",
        "game_state#0"
      ]
    },
    "3588": {
      "op": "dup",
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "maybe_exists%1#0",
        "game_state#0",
        "game_state#0 (copy)"
      ]
    },
    "3589": {
      "op": "uncover 2",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "maybe_exists%1#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "game_state#0",
        "game_state#0",
        "maybe_exists%1#0"
      ]
    },
    "3591": {
      "error": "check self.box_game_state entry exists",
      "op": "assert // check self.box_game_state entry exists",
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "game_state#0",
        "game_state#0"
      ]
    },
    "3592": {
      "op": "dup",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#0 (copy)"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "game_state#0",
        "game_state#0",
        "game_state#0 (copy)"
      ]
    },
    "3593": {
      "error": "Index access is out of bounds",
      "op": "extract 24 32 // on error: Index access is out of bounds",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "game_state#0",
        "game_state#0",
        "tmp%2#0"
      ]
    },
    "3596": {
      "op": "txn Sender",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "game_state#0",
        "game_state#0",
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "3598": {
      "op": "==",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "game_state#0",
        "game_state#0",
        "tmp%4#0"
      ]
    },
    "3599": {
      "error": "Sender address is not recognized as the admin address for this game.",
      "op": "assert // Sender address is not recognized as the admin address for this game.",
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "game_state#0",
        "game_state#0"
      ]
    },
    "3600": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "game_state#0",
        "game_state#0",
        "2"
      ]
    },
    "3601": {
      "op": "getbyte",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "game_state#0",
        "tmp%6#0"
      ]
    },
    "3602": {
      "op": "dup",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "game_state#0",
        "tmp%6#0",
        "tmp%6#0"
      ]
    },
    "3603": {
      "op": "intc_0 // 1",
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "game_state#0",
        "tmp%6#0",
        "tmp%6#0",
        "1"
      ]
    },
    "3604": {
      "op": "==",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "game_state#0",
        "tmp%6#0",
        "tmp%7#0"
      ]
    },
    "3605": {
      "op": "bz delete_game_else_body@2",
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "game_state#0",
        "tmp%6#0"
      ]
    },
    "3608": {
      "op": "frame_dig -1",
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "game_state#0",
        "tmp%6#0",
        "game_id#0 (copy)"
      ]
    },
    "3610": {
      "op": "txn Sender",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_id#0 (copy)",
        "game_state#0",
        "tmp%6#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "game_state#0",
        "tmp%6#0",
        "game_id#0 (copy)",
        "tmp%8#0"
      ]
    },
    "3612": {
      "op": "bytec_1 // \"p_\"",
      "defined_out": [
        "\"p_\"",
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_id#0 (copy)",
        "game_state#0",
        "tmp%6#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "game_state#0",
        "tmp%6#0",
        "game_id#0 (copy)",
        "tmp%8#0",
        "\"p_\""
      ]
    },
    "3613": {
      "op": "intc_0 // 1",
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "game_state#0",
        "tmp%6#0",
        "game_id#0 (copy)",
        "tmp%8#0",
        "\"p_\"",
        "1"
      ]
    },
    "3614": {
      "op": "intc_1 // 0",
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "game_state#0",
        "tmp%6#0",
        "game_id#0 (copy)",
        "tmp%8#0",
        "\"p_\"",
        "1",
        "0"
      ]
    },
    "3615": {
      "callsub": "smart_contracts.pieout.subroutines.check_acc_in_game",
      "op": "callsub check_acc_in_game",
      "defined_out": [
        "acc_in_game#1",
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "game_state#0",
        "tmp%6#0",
        "acc_in_game#1"
      ]
    },
    "3618": {
      "op": "intc_0 // 1",
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "game_state#0",
        "tmp%6#0",
        "acc_in_game#1",
        "1"
      ]
    },
    "3619": {
      "op": "==",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "tmp%6#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "game_state#0",
        "tmp%6#0",
        "tmp%9#0"
      ]
    },
    "3620": {
      "error": "Game admin address must be sole remaining active player in game.",
      "op": "assert // Game admin address must be sole remaining active player in game.",
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "game_state#0",
        "tmp%6#0"
      ]
    },
    "3621": {
      "op": "txn Sender",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "tmp%10#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "game_state#0",
        "tmp%6#0",
        "tmp%10#0"
      ]
    },
    "3623": {
      "op": "frame_dig 2",
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "game_state#0",
        "tmp%6#0",
        "tmp%10#0",
        "game_state#0"
      ]
    },
    "3625": {
      "op": "pushint 16 // 16",
      "defined_out": [
        "16",
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "tmp%10#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "game_state#0",
        "tmp%6#0",
        "tmp%10#0",
        "game_state#0",
        "16"
      ]
    },
    "3627": {
      "op": "extract_uint64",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "tmp%10#0",
        "tmp%12#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "game_state#0",
        "tmp%6#0",
        "tmp%10#0",
        "tmp%12#0"
      ]
    },
    "3628": {
      "op": "pushbytes \"sender:app_address,receiver:admin_address=concern:prize_pool_payout\"",
      "defined_out": [
        "\"sender:app_address,receiver:admin_address=concern:prize_pool_payout\"",
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "tmp%10#0",
        "tmp%12#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "game_state#0",
        "tmp%6#0",
        "tmp%10#0",
        "tmp%12#0",
        "\"sender:app_address,receiver:admin_address=concern:prize_pool_payout\""
      ]
    },
    "3697": {
      "callsub": "smart_contracts.pieout.subroutines.payout_itxn",
      "op": "callsub payout_itxn",
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "game_state#0",
        "tmp%6#0"
      ]
    },
    "3700": {
      "block": "delete_game_after_if_else@3",
      "stack_in": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "game_state#0",
        "tmp%6#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "game_state#0",
        "tmp%6#0",
        "box_prefixed_key%0#0"
      ]
    },
    "3702": {
      "op": "box_del",
      "defined_out": [
        "box_prefixed_key%0#0",
        "{box_del}"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "game_state#0",
        "tmp%6#0",
        "{box_del}"
      ]
    },
    "3703": {
      "op": "pop",
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "game_state#0",
        "tmp%6#0"
      ]
    },
    "3704": {
      "op": "bytec_1 // \"p_\"",
      "defined_out": [
        "\"p_\"",
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "game_state#0",
        "tmp%6#0",
        "\"p_\""
      ]
    },
    "3705": {
      "op": "frame_dig 0",
      "defined_out": [
        "\"p_\"",
        "box_prefixed_key%0#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "game_state#0",
        "tmp%6#0",
        "\"p_\"",
        "encoded_value%0#0"
      ]
    },
    "3707": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%3#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "game_state#0",
        "tmp%6#0",
        "box_prefixed_key%3#0"
      ]
    },
    "3708": {
      "op": "box_del",
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "game_state#0",
        "tmp%6#0",
        "{box_del}"
      ]
    },
    "3709": {
      "op": "pop",
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "game_state#0",
        "tmp%6#0"
      ]
    },
    "3710": {
      "op": "frame_dig 2",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "game_state#0",
        "tmp%6#0",
        "game_state#0"
      ]
    },
    "3712": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "game_state#0",
        "tmp%6#0",
        "game_state#0",
        "1"
      ]
    },
    "3713": {
      "op": "getbyte",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "game_state#0",
        "tmp%6#0",
        "tmp%20#0"
      ]
    },
    "3714": {
      "op": "intc_3 // 32",
      "defined_out": [
        "32",
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "game_state#0",
        "tmp%6#0",
        "tmp%20#0",
        "32"
      ]
    },
    "3715": {
      "op": "*",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "game_state#0",
        "tmp%6#0",
        "to_encode%0#0"
      ]
    },
    "3716": {
      "op": "itob",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "game_state#0",
        "tmp%6#0",
        "val_as_bytes%0#0"
      ]
    },
    "3717": {
      "op": "dup",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "val_as_bytes%0#0",
        "val_as_bytes%0#0 (copy)"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "game_state#0",
        "tmp%6#0",
        "val_as_bytes%0#0",
        "val_as_bytes%0#0 (copy)"
      ]
    },
    "3718": {
      "op": "bitlen",
      "defined_out": [
        "bitlen%0#0",
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "game_state#0",
        "tmp%6#0",
        "val_as_bytes%0#0",
        "bitlen%0#0"
      ]
    },
    "3719": {
      "op": "pushint 16 // 16",
      "defined_out": [
        "16",
        "bitlen%0#0",
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "game_state#0",
        "tmp%6#0",
        "val_as_bytes%0#0",
        "bitlen%0#0",
        "16"
      ]
    },
    "3721": {
      "op": "<=",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "no_overflow%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "game_state#0",
        "tmp%6#0",
        "val_as_bytes%0#0",
        "no_overflow%0#0"
      ]
    },
    "3722": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "game_state#0",
        "tmp%6#0",
        "val_as_bytes%0#0"
      ]
    },
    "3723": {
      "op": "extract 6 2",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "uint16%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "game_state#0",
        "tmp%6#0",
        "uint16%0#0"
      ]
    },
    "3726": {
      "op": "pushbytes 0x0a",
      "defined_out": [
        "0x0a",
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "uint16%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "game_state#0",
        "tmp%6#0",
        "uint16%0#0",
        "0x0a"
      ]
    },
    "3729": {
      "op": "swap",
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "game_state#0",
        "tmp%6#0",
        "0x0a",
        "uint16%0#0"
      ]
    },
    "3730": {
      "callsub": "smart_contracts.pieout.contract.Pieout.calc_single_box_fee",
      "op": "callsub calc_single_box_fee",
      "defined_out": [
        "box_p_fee#0",
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "game_state#0",
        "tmp%6#0",
        "box_p_fee#0"
      ]
    },
    "3733": {
      "op": "txn Sender",
      "defined_out": [
        "box_p_fee#0",
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "game_state#0",
        "tmp%6#0",
        "box_p_fee#0",
        "tmp%21#0"
      ]
    },
    "3735": {
      "op": "intc 11 // 67300",
      "defined_out": [
        "67300",
        "box_p_fee#0",
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "game_state#0",
        "tmp%6#0",
        "box_p_fee#0",
        "tmp%21#0",
        "67300"
      ]
    },
    "3737": {
      "op": "uncover 2",
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "game_state#0",
        "tmp%6#0",
        "tmp%21#0",
        "67300",
        "box_p_fee#0"
      ]
    },
    "3739": {
      "op": "+",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "tmp%21#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "game_state#0",
        "tmp%6#0",
        "tmp%21#0",
        "tmp%22#0"
      ]
    },
    "3740": {
      "op": "pushbytes \"sender:app_address,receiver:admin_address=concern:box_s_refund,box_p_refund\"",
      "defined_out": [
        "\"sender:app_address,receiver:admin_address=concern:box_s_refund,box_p_refund\"",
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "tmp%21#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "game_state#0",
        "tmp%6#0",
        "tmp%21#0",
        "tmp%22#0",
        "\"sender:app_address,receiver:admin_address=concern:box_s_refund,box_p_refund\""
      ]
    },
    "3817": {
      "callsub": "smart_contracts.pieout.subroutines.payout_itxn",
      "op": "callsub payout_itxn",
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "game_state#0",
        "tmp%6#0"
      ]
    },
    "3820": {
      "retsub": true,
      "op": "retsub"
    },
    "3821": {
      "block": "delete_game_else_body@2",
      "stack_in": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "game_state#0",
        "tmp%6#0"
      ],
      "op": "frame_dig 3",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "game_state#0",
        "tmp%6#0",
        "tmp%6#0"
      ]
    },
    "3823": {
      "op": "!",
      "defined_out": [
        "tmp%15#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "game_state#0",
        "tmp%6#0",
        "tmp%15#0"
      ]
    },
    "3824": {
      "error": "Game lobby not empty. Number of active players must be zero.",
      "op": "assert // Game lobby not empty. Number of active players must be zero.",
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "game_state#0",
        "tmp%6#0"
      ]
    },
    "3825": {
      "op": "frame_dig 2",
      "defined_out": [
        "game_state#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "game_state#0",
        "tmp%6#0",
        "game_state#0"
      ]
    },
    "3827": {
      "op": "pushint 16 // 16",
      "defined_out": [
        "16",
        "game_state#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "game_state#0",
        "tmp%6#0",
        "game_state#0",
        "16"
      ]
    },
    "3829": {
      "op": "extract_uint64",
      "defined_out": [
        "game_state#0",
        "tmp%17#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "game_state#0",
        "tmp%6#0",
        "tmp%17#0"
      ]
    },
    "3830": {
      "op": "!",
      "defined_out": [
        "game_state#0",
        "tmp%18#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "game_state#0",
        "tmp%6#0",
        "tmp%18#0"
      ]
    },
    "3831": {
      "error": "Prize pool not empty. Amount in prize pool must be zero.",
      "op": "assert // Prize pool not empty. Amount in prize pool must be zero.",
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "game_state#0",
        "tmp%6#0"
      ]
    },
    "3832": {
      "op": "b delete_game_after_if_else@3"
    },
    "3835": {
      "subroutine": "smart_contracts.pieout.contract.Pieout.terminate",
      "params": {},
      "block": "terminate",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "3837": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "3839": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "3840": {
      "error": "Sender address must match application creator address.",
      "op": "assert // Sender address must match application creator address.",
      "stack_out": []
    },
    "3841": {
      "op": "intc 14 // TMPL_DELETABLE",
      "defined_out": [
        "TMPL_DELETABLE"
      ],
      "stack_out": [
        "TMPL_DELETABLE"
      ]
    },
    "3843": {
      "error": "Template variable 'DELETABLE' needs to be 'True' at deploy-time.",
      "op": "assert // Template variable 'DELETABLE' needs to be 'True' at deploy-time.",
      "stack_out": []
    },
    "3844": {
      "op": "bytec_3 // 0x745f",
      "defined_out": [
        "0x745f"
      ],
      "stack_out": [
        "0x745f"
      ]
    },
    "3845": {
      "op": "box_del",
      "defined_out": [
        "{box_del}"
      ],
      "stack_out": [
        "{box_del}"
      ]
    },
    "3846": {
      "op": "pop",
      "stack_out": []
    },
    "3847": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "3849": {
      "op": "intc 10 // 19300",
      "defined_out": [
        "19300",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "19300"
      ]
    },
    "3851": {
      "op": "pushbytes \"sender:app_address,receiver:admin_address=concern:box_t_refund\"",
      "defined_out": [
        "\"sender:app_address,receiver:admin_address=concern:box_t_refund\"",
        "19300",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "19300",
        "\"sender:app_address,receiver:admin_address=concern:box_t_refund\""
      ]
    },
    "3915": {
      "callsub": "smart_contracts.pieout.subroutines.payout_itxn",
      "op": "callsub payout_itxn",
      "stack_out": []
    },
    "3918": {
      "retsub": true,
      "op": "retsub"
    }
  }
}