{
  "version": 3,
  "sources": [
    "../../../.venv/Lib/site-packages/lib_pcg/pcg32.py",
    "../../pieout/contract.py",
    "../../pieout/subroutines.py"
  ],
  "mappings": "AC2BA;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAq1BK;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AA7YA;;AAAA;AAAA;AAAA;;AAAA;AAxcL;;;AAAA;AAwcK;;;AAAA;;AAhDA;;AAAA;AAAA;AAAA;;AAAA;AAxZL;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAwZK;;;AAAA;;AA3CA;;AAAA;AAAA;AAAA;;AAAA;AA7WL;;;AAAA;AAAA;;;AA6WK;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AApEA;;AAAA;AAAA;AAAA;;AAAA;AAzSL;;;AAAA;AAySK;;;AAAA;;AAxBA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AApCA;;AAAA;AAAA;AAAA;;AAAA;AA7OL;;;AAAA;AA6OK;;;AAAA;;AA7EA;;AAAA;AAAA;AAAA;;AAAA;AAhKL;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAgKK;;;AAAA;;AAvEA;;AAAA;AAAA;AAAA;;AAAA;AAzFL;;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAyFK;;;AAAA;;AAfA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAfA;;AAAA;AAAA;AAAA;;AAAA;AA3DL;;;AAAA;AA2DK;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAxBA;;AAAA;AAAA;AAAA;;AAAA;AAnCL;;;AAAA;AAmCK;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AALA;;AAAA;AAAA;AAAA;;AAAA;AAEU;;AAFV;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAfA;;AAAA;AAAA;AAAA;;AAAA;AAfL;;;AAAA;;;AAeK;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;ACpBL;;;;;;AAQI;;AAAqC;AAAf;AAGD;AAGL;AAAP;;AAAA;;AAAA;;;;;AAAb;;;AAEwD;;AAAA;AAAjB;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAA/B;;AAA6D;AAAzC;AAGjB;;AAAA;AAAX;;;AACiC;AAArB;;AAGZ;;AAAA;;;AAEgB;;AAAA;;AAAuB;;AAAvB;;;;;;;AAMZ;;AAAA;AAjBS;;AAA+B;AAA/B;AAAA;;;;;AAmEb;;;AAIQ;;AAAA;;;AAAuB;;AAAvB;AAAA;AAAA;;;AACG;;AAAA;;;AAA6B;;AAAA;;;AAA7B;AADH;;;AAIA;;AAAA;AAAA;AAAA;AAAA;;AAII;;AAA0B;;AAA1B;AADmB;AAAvB;;AAAA;AAAA;;;AAAA;;AAOI;AAAA;AAAA;AAAA;AAAA;;AAAA;AACA;;AAAA;;;AAHJ;AAAA;;;;;;AAAA;AAAA;AAAA;AAMO;;;AAAP;;AAAA;AAEO;AAAP;;AAAA;AAIR;;;;AAIQ;;AAAA;;;AAAuB;;AAAvB;AAAA;AAAA;;;AACG;;AAAA;AAAA;AADH;;;AAKuB;;AAAA;AAAA;AAAnB;AAAA;AADwB;AAAX;;AAAA;AAAjB;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAKA;;AAA4B;AAA5B;;;AAAA;;AAKI;;;AAAA;AAAA;;AACA;;AAAA;;;AAHJ;;AAAA;AAAA;AAAA;;;;;;AAAA;AAAA;AAAA;AAUuC;;AAApC;AAAX;;;AACuB;;AAAA;;;AAAA;;AAGf;AAEW;;AAAA;;AAAA;AACF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAHT;;;AAAA;;;AAAA;AAOA;;AAAwB;;AAAxB;;AAAA;;AAEO;;;AAAP;;AAAA;;AAAA;AAEO;AAAP;;AAAA;;AAAA;ADlIR;;;AAQY;;AAAA;AAAkB;;AAAA;AAAlB;AADO;;;AAAA;AAKJ;;;AAAA;AAAP;AAQR;;;AAIY;;AAAA;AADS;AAAA;;AAAA;AAAA;AAAA;AAQL;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AACA;;AAAA;;;AACA;;AAAA;;;AACA;;AAAA;;;AACA;;AAAA;;;AACA;;AAAA;;;AACA;;AAAA;;;AACA;;AAAA;;;AACA;;AAAA;;;AAXD;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAP;AAgBR;;;;;AAG6C;;AAAA;AAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAEL;;;;AAAA;AACS;AAAH;AAAP;;AAAA;;AAAA;AAAjB;;;AACY;;AAAA;;AAAgD;AAA5B;AAApB;AAAA;;AACwB;;AAArB;;;;;AAAf;;;AAEgB;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;;;;;;AAJC;;AAA+B;AAA/B;AAAA;;;;;AAMT;;AAAA;;AAAA;AAQO;;AAAc;;AAAd;AAAP;AAGA;;AAAe;AAAf;AACA;;AAA2B;AAA3B;AAEA;;AAAiB;AAAjB;AACA;;AAAyB;;AAAzB;;AAGR;;;AAUe;;AAAqB;;AAArB;AAAP;AAEO;;AAAe;;AAAf;AAAP;AAEO;;AAAA;;AAAA;AAAoB;;AAApB;AAAP;AACO;;AAAA;;AAAoB;;AAApB;AAAP;AACO;;AAAA;;AAAoB;;AAApB;AAAP;AACO;;AAAA;;AAEoB;AAAA;;AAAA;AAAZ;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AADF;;;AADc;AAAA;;;AAApB;;AAAA;AAAP;AAKO;;AAAA;;AAAoB;;AAApB;AAAP;AACO;;AAAA;;AAAoB;;AAApB;AAAP;AACO;;AAAA;;AAAoB;;AAApB;AAAP;AACO;;AAAA;;AAAoB;;AAApB;AAAP;AAGI;;AAAA;;AAAsB;;AAAtB;AADJ;AAII;;AAAA;;AAAsB;;AAAtB;AADJ;AAII;;AAAA;;AAAsB;;AAAtB;AADJ;AAII;;AAAA;;AAAsB;;AAAtB;AADJ;AAOgB;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAIU;;AAA0B;;AAA1B;AAAZ;AACC;;AAAA;AACkB;;AACD;;AARV;AADc;;AAAA;AAGjB;;;AAHiB;AAIlB;AAJkB;AAKhB;;AALgB;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAhB;AAAA;;AAAA;AAAA;AAAA;AAApB;AAAA;AAAA;AAAA;AAAA;AAasC;AAAhB;AAAA;;AAAA;AAAA;AAAA;AAAtB;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAGA;AAAqB;;AAArB;AACiB;;AADjB;AAMmD;AAAA;;AAAA;AAAA;AAAR;AAAnC;AADR;AACQ;AAEkB;AAAG;;AAA7B;AAGA;AAAA;;AAAA;AAAA;AAAgB;AAAhB;AAAA;;AAAA;AAAA;;AAGR;;;AAQe;;AAAqB;;AAArB;AAAP;AACO;;AAAA;AAAW;AAAX;;AAAA;AAAA;AAAA;AAAA;;AAAP;AAEO;;AAAA;;AAAoB;;AAApB;AAAP;AACO;;AAAA;;AAAoB;;AAApB;AAAP;AAEI;;AAAA;;AAAsB;;AAAtB;AADJ;AAIO;;AAAA;;AAAA;AAAoB;;;;AAApB;AAAP;AACO;;AAAA;;AAAoB;;AAApB;AAAP;AAEI;;AAAA;;AAAsB;;AAAtB;AADJ;AAKa;;AAAA;AAAA;AAQQ;;AAAA;AAAA;AAAA;AAAA;AAHjB;;AAEqB;AAFrB;;AAIiB;AAJjB;;;AAAA;AADJ;AAUO;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAP;AACO;AAAA;;;AAAwB;;AAAxB;AAAA;AAAP;AACO;AAAA;;;AAA6B;;AAAA;;;AAA7B;AAAP;AAEI;AAAA;;AAAA;AACqB;;AAAA;AAAA;AAAnB;AAAA;AADF;;AAAA;AADJ;AAOQ;AADR;;AACQ;AAEqD;;AAA7D;AAAA;;AAAA;AAGA;AAAqB;;AAArB;AACiB;;AADjB;AAKuC;AAAA;AAAA;AAAmC;AAAnC;AAAX;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAA5B;;AAII;AAAA;;AAAA;AAAoC;AAApC;AADyB;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAA7B;;AAMI;AAAA;;AAAA;AAAA;;AAAA;AADoB;AAAxB;;AAKA;;;AAAA;;AAGA;;AAGR;;;AAMe;;AAAA;AAAW;AAAX;AAAA;AAAA;AAAA;AAAA;;AAAP;AACqB;AAAd;;AAAA;AAAA;AAAA;;AAAP;AAEO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAkD;AAAlD;AAAP;AAMqB;AAAA;AAAA;AAAA;AAHjB;;AAEqB;AAFrB;;AAIiB;AAJjB;;;AAMG;AANH;AADJ;AAYiC;;AAAoB;;AAAR;AAAZ;AAAV;;;AAAnB;AAA2E;;AAA3E;AACE;;AADF;AAKW;;AAAA;AAIE;AADjB;AAAqB;;AAArB;AAAA;AAAA;;AAQO;;AAAqB;AAArB;AAAP;AACqB;AAAd;;AAAA;AAAA;AAAA;;AAAP;AASI;AAAqB;;AAArB;AAAJ;;AAGA;AACa;;AAEJ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AADE;;;;;;AAFX;;;AAAA;;;AAAA;;AAQR;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAMe;;AAAqB;AAArB;AAAP;AACO;;AAAA;AAAA;AAAA;;AAAW;AAAX;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAP;AACqB;AAAd;;AAAA;AAAA;AAAA;;AAAP;AAMqB;AAAA;AAAA;AAAA;AAAA;AAHjB;;AAEqB;AAFrB;;AAIiB;AAJjB;;;AAMG;AANH;AADJ;AAWa;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAKN;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAgC;AAAhC;AAAP;AACO;;;AAAwB;;AAAxB;AAAA;AAAP;AAsBA;AAAA;;AAAA;AAAA;AAA4B;AAA5B;AAAA;;AAAA;AAAA;AAEwB;;AAAuB;;AAAA;;AC5T3B;AAAA;;;AFvCjB;AAAe;;AAAf;AAAP;;;AAEoB;AAoIC;AAkHe;;AAAf;AAAA;;AAtPc;;AAuPd;AAAA;;AAlHD;AAAA;;AAiHgB;;AAAf;AAAA;;AAtPc;;AAuPd;AAAA;;AAxEX;;;;AAAA;;AA8FqB;;;;;;;;;;;AAAQ;AAAhB;AAAA;;AAQP;;AAAT;AAjFkB;;AAET;AAAZ;;AAES;AAAL;;;;AAAK;;AE5JF;;;AF4JE;AAAjB;;;AA8CyB;;AAAA;AAAe;;AAAf;AAAA;;AAfM;;AAgBN;AAAA;;AAAA;AASE;AAAS;;AAAT;AAAD;;AAAA;AAA0B;;AAA3B;AAqBL;;AAAT;AArB8C;AAAS;;AAAT;AAO7C;AAAA;AAMuB;AAAA;AAAQ;AAAhB;AAAA;;AANiD;;AAArB;AAAV;;AAAA;AAAA;AAczB;;AAAT;AAdA;AAAA;AAAA;;AA5DQ;;AAAA;AAAnB;;;AAEiC;;AATJ;;AASI;AEnKb;AFmKY;AAAR;AADM;;;AAAV;;AAAA;AAAA;AAAA;;AAJH;;AAAA;AAAA;AAAA;;;;;;;;;;;;AExJL;AAAR;;AAGmB;;AAAA;AAAA;;AAAH;AAAZ;;AAAK;;AAAA;;AAAA;AAAb;;;AAEiC;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAzB;;AAAO;AAGI;;;AAAR;AAAX;;;AAIQ;;AAAS;AAAT;AAAA;;AATK;;AAAiC;AAAjC;AAAA;;;;;AAYK;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAAA;;AAGd;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;;;;;AAAA;AAAA;AAAA;AAQiB;;AAAA;AAAA;;;AAAd;;AAAA;;;;AAAP;;;AACQ;;AAAA;;AAAA;;AACA;;AAAA;;;;;;;;;ADwRG;;AAAA;AAAA;AAAA;;AAAkC;AAAA;;AAAA;AAAA;AAAlC;AAAX;;;AACY;;AAAA;;AAAA;AACA;;AAAyB;;AAAzB;AAGmC;;AAAA;AAAA;AAAA;AAAmC;AAAnC;AAAX;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAA5B;;AAGA;;AAAA;AAAsC;AAAtC;;;AAAA;;AAGA;;AAAA;AAAA;;AAGR;;;AAGe;;AAAqB;AAArB;AAAP;AACO;;AAAA;AAAW;AAAX;AAAA;AAAA;AAAA;AAAA;;AAAP;AAGa;AAAA;AAKV;;AAAA;AAAA;AAAX;;;AAKiC;;AAAA;AAAA;AAAA;AAHjB;;AAEqB;AAFrB;;AAIiB;AAJjB;;;AAMG;AANH;AADJ;AAWe;;;AAAA;AACf;;AAAA;AAGC;;AAAwB;AAAxB;AAAb;AACmB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAgC;AAAhC;AAAP;AACO;AAAA;;;AAAuB;;AAAvB;AAAA;AAAP;AAEI;;;AAA6B;;AAA7B;AAAA;;;AACG;;AAAA;;;AAA8B;;AAA9B;AADH;;;;AADJ;AAMe;;AAAA;;AAAsC;AAAtC;;;AAAA;AACf;;AAAA;;;;;AAKZ;;;AAOe;;AAAqB;AAArB;AAAP;AACO;;AAAA;AAAW;AAAX;AAAA;AAAA;AAAA;AAAA;;AAAP;AAEO;;AAAA;;AAAoB;;AAApB;AAAP;AAEI;;AAAA;;AAAsB;;AAAtB;AADJ;AAGO;;AAAA;;AAAoB;;AAApB;AAAP;AAGa;AAAA;AAAA;AAKN;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAgC;AAAhC;AAAP;AACO;AAAA;;;AAA8B;;AAA9B;AAAP;AACO;AAAA;;AAAA;AAAA;AAAP;AACO;AAAA;AAAA;AAAA;AAAP;AAM6B;;AAA7B;;AAA0B;AAA1B;;AAAA;AAEA;AAAA;AAAA;AAC4B;;;AAA5B;;AAC2B;AAA3B;;AAC6B;;AAA7B;;AAEI;;AAA0B;;AAA1B;AADmB;AAAvB;;AAII;AAAA;;AAAA;AAA+B;;AAA/B;AADoB;AAAxB;;AAGyC;;AAAzC;;AAGA;;AAER;;;AAMe;;AAAqB;AAArB;AAAP;AACO;;AAAA;AAAW;AAAX;;AAAA;AAAA;AAAA;AAAA;;AAAP;AAGa;AAAA;AAAA;AAKN;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAgC;AAAhC;AAAP;AACO;AAAA;;;AAA8B;;AAA9B;AAAP;AACO;AAAA;;AAAA;AAAA;AAAP;AACO;AAAA;AAAA;AAAA;AAAP;AAwBA;AAAA;;AACI;AAAA;;AAAA;AAAJ;;AAK8C;AAAA;AAAnB;AAAA;AAAZ;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AADF;;;AADb;AAAY;;;AAMZ;AACa;;AACF;;AAAA;;AAAA;AACF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAHT;;;AAAA;;;AAAA;;AA4VO;;AAAc;;AAAd;AAAP;AACO;;AAAP;",
  "op_pc_offset": 2,
  "pc_events": {
    "0": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%0#2"
      ]
    },
    "2": {
      "op": "bz main_after_if_else@19",
      "stack_out": []
    },
    "5": {
      "op": "pushbytess 0x137d1094 0xb66d2f56 0xed6ed982 0x7401ca83 0x5be219f0 0x02470a1d 0xa10cd103 0x642beee8 0x62cd6e4a 0x1a789ed0 0x0c558d9a 0x102875e7 0x1898a02e 0x5ff16da4 // method \"calc_single_box_fee(uint8,uint16)uint64\", method \"read_gen_unix()uint64\", method \"read_game_state(uint64)(uint64,bool,uint8,uint8,uint8,uint16,uint64,uint64,address,address)\", method \"read_game_players(uint64)address[]\", method \"generate()void\", method \"new_game(uint64,pay,pay,pay,pay)void\", method \"join_game(uint64,pay,pay)void\", method \"commit_rand(uint64)void\", method \"del_box_commit_rand()void\", method \"play_game(uint64)void\", method \"check_game_event(uint64,uint8)bool\", method \"reset_game(uint64,pay)void\", method \"delete_game(uint64)void\", method \"terminate()void\"",
      "defined_out": [
        "Method(calc_single_box_fee(uint8,uint16)uint64)",
        "Method(check_game_event(uint64,uint8)bool)",
        "Method(commit_rand(uint64)void)",
        "Method(del_box_commit_rand()void)",
        "Method(delete_game(uint64)void)",
        "Method(generate()void)",
        "Method(join_game(uint64,pay,pay)void)",
        "Method(new_game(uint64,pay,pay,pay,pay)void)",
        "Method(play_game(uint64)void)",
        "Method(read_game_players(uint64)address[])",
        "Method(read_game_state(uint64)(uint64,bool,uint8,uint8,uint8,uint16,uint64,uint64,address,address))",
        "Method(read_gen_unix()uint64)",
        "Method(reset_game(uint64,pay)void)",
        "Method(terminate()void)"
      ],
      "stack_out": [
        "Method(calc_single_box_fee(uint8,uint16)uint64)",
        "Method(read_gen_unix()uint64)",
        "Method(read_game_state(uint64)(uint64,bool,uint8,uint8,uint8,uint16,uint64,uint64,address,address))",
        "Method(read_game_players(uint64)address[])",
        "Method(generate()void)",
        "Method(new_game(uint64,pay,pay,pay,pay)void)",
        "Method(join_game(uint64,pay,pay)void)",
        "Method(commit_rand(uint64)void)",
        "Method(del_box_commit_rand()void)",
        "Method(play_game(uint64)void)",
        "Method(check_game_event(uint64,uint8)bool)",
        "Method(reset_game(uint64,pay)void)",
        "Method(delete_game(uint64)void)",
        "Method(terminate()void)"
      ]
    },
    "77": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(calc_single_box_fee(uint8,uint16)uint64)",
        "Method(check_game_event(uint64,uint8)bool)",
        "Method(commit_rand(uint64)void)",
        "Method(del_box_commit_rand()void)",
        "Method(delete_game(uint64)void)",
        "Method(generate()void)",
        "Method(join_game(uint64,pay,pay)void)",
        "Method(new_game(uint64,pay,pay,pay,pay)void)",
        "Method(play_game(uint64)void)",
        "Method(read_game_players(uint64)address[])",
        "Method(read_game_state(uint64)(uint64,bool,uint8,uint8,uint8,uint16,uint64,uint64,address,address))",
        "Method(read_gen_unix()uint64)",
        "Method(reset_game(uint64,pay)void)",
        "Method(terminate()void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(calc_single_box_fee(uint8,uint16)uint64)",
        "Method(read_gen_unix()uint64)",
        "Method(read_game_state(uint64)(uint64,bool,uint8,uint8,uint8,uint16,uint64,uint64,address,address))",
        "Method(read_game_players(uint64)address[])",
        "Method(generate()void)",
        "Method(new_game(uint64,pay,pay,pay,pay)void)",
        "Method(join_game(uint64,pay,pay)void)",
        "Method(commit_rand(uint64)void)",
        "Method(del_box_commit_rand()void)",
        "Method(play_game(uint64)void)",
        "Method(check_game_event(uint64,uint8)bool)",
        "Method(reset_game(uint64,pay)void)",
        "Method(delete_game(uint64)void)",
        "Method(terminate()void)",
        "tmp%2#0"
      ]
    },
    "80": {
      "op": "match main_calc_single_box_fee_route@5 main_read_gen_unix_route@6 main_read_game_state_route@7 main_read_game_players_route@8 main_generate_route@9 main_new_game_route@10 main_join_game_route@11 main_commit_rand_route@12 main_del_box_commit_rand_route@13 main_play_game_route@14 main_check_game_event_route@15 main_reset_game_route@16 main_delete_game_route@17 main_terminate_route@18",
      "stack_out": []
    },
    "110": {
      "block": "main_after_if_else@19",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "111": {
      "op": "return",
      "stack_out": []
    },
    "112": {
      "block": "main_terminate_route@18",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%79#0"
      ],
      "stack_out": [
        "tmp%79#0"
      ]
    },
    "114": {
      "op": "pushint 5 // DeleteApplication",
      "defined_out": [
        "DeleteApplication",
        "tmp%79#0"
      ],
      "stack_out": [
        "tmp%79#0",
        "DeleteApplication"
      ]
    },
    "116": {
      "op": "==",
      "defined_out": [
        "tmp%80#0"
      ],
      "stack_out": [
        "tmp%80#0"
      ]
    },
    "117": {
      "error": "OnCompletion is not DeleteApplication",
      "op": "assert // OnCompletion is not DeleteApplication",
      "stack_out": []
    },
    "118": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%81#0"
      ],
      "stack_out": [
        "tmp%81#0"
      ]
    },
    "120": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "121": {
      "callsub": "smart_contracts.pieout.contract.Pieout.terminate",
      "op": "callsub terminate"
    },
    "124": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "125": {
      "op": "return",
      "stack_out": []
    },
    "126": {
      "block": "main_delete_game_route@17",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%74#0"
      ],
      "stack_out": [
        "tmp%74#0"
      ]
    },
    "128": {
      "op": "!",
      "defined_out": [
        "tmp%75#0"
      ],
      "stack_out": [
        "tmp%75#0"
      ]
    },
    "129": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "130": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%76#0"
      ],
      "stack_out": [
        "tmp%76#0"
      ]
    },
    "132": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "133": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%8#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%8#0"
      ]
    },
    "136": {
      "op": "btoi",
      "defined_out": [
        "tmp%78#0"
      ],
      "stack_out": [
        "tmp%78#0"
      ]
    },
    "137": {
      "callsub": "smart_contracts.pieout.contract.Pieout.delete_game",
      "op": "callsub delete_game",
      "stack_out": []
    },
    "140": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "141": {
      "op": "return",
      "stack_out": []
    },
    "142": {
      "block": "main_reset_game_route@16",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%68#0"
      ],
      "stack_out": [
        "tmp%68#0"
      ]
    },
    "144": {
      "op": "!",
      "defined_out": [
        "tmp%69#0"
      ],
      "stack_out": [
        "tmp%69#0"
      ]
    },
    "145": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "146": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%70#0"
      ],
      "stack_out": [
        "tmp%70#0"
      ]
    },
    "148": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "149": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%7#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%7#0"
      ]
    },
    "152": {
      "op": "btoi",
      "defined_out": [
        "tmp%72#0"
      ],
      "stack_out": [
        "tmp%72#0"
      ]
    },
    "153": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%72#0",
        "tmp%73#0"
      ],
      "stack_out": [
        "tmp%72#0",
        "tmp%73#0"
      ]
    },
    "155": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "tmp%72#0",
        "tmp%73#0"
      ],
      "stack_out": [
        "tmp%72#0",
        "tmp%73#0",
        "1"
      ]
    },
    "156": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%6#0",
        "tmp%72#0"
      ],
      "stack_out": [
        "tmp%72#0",
        "gtxn_idx%6#0"
      ]
    },
    "157": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%6#0",
        "gtxn_idx%6#0 (copy)",
        "tmp%72#0"
      ],
      "stack_out": [
        "tmp%72#0",
        "gtxn_idx%6#0",
        "gtxn_idx%6#0 (copy)"
      ]
    },
    "158": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%6#0",
        "gtxn_type%6#0",
        "tmp%72#0"
      ],
      "stack_out": [
        "tmp%72#0",
        "gtxn_idx%6#0",
        "gtxn_type%6#0"
      ]
    },
    "160": {
      "op": "intc_0 // pay",
      "defined_out": [
        "gtxn_idx%6#0",
        "gtxn_type%6#0",
        "pay",
        "tmp%72#0"
      ],
      "stack_out": [
        "tmp%72#0",
        "gtxn_idx%6#0",
        "gtxn_type%6#0",
        "pay"
      ]
    },
    "161": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%6#0",
        "gtxn_type_matches%6#0",
        "tmp%72#0"
      ],
      "stack_out": [
        "tmp%72#0",
        "gtxn_idx%6#0",
        "gtxn_type_matches%6#0"
      ]
    },
    "162": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "tmp%72#0",
        "gtxn_idx%6#0"
      ]
    },
    "163": {
      "callsub": "smart_contracts.pieout.contract.Pieout.reset_game",
      "op": "callsub reset_game",
      "stack_out": []
    },
    "166": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "167": {
      "op": "return",
      "stack_out": []
    },
    "168": {
      "block": "main_check_game_event_route@15",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%61#0"
      ],
      "stack_out": [
        "tmp%61#0"
      ]
    },
    "170": {
      "op": "!",
      "defined_out": [
        "tmp%62#0"
      ],
      "stack_out": [
        "tmp%62#0"
      ]
    },
    "171": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "172": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%63#0"
      ],
      "stack_out": [
        "tmp%63#0"
      ]
    },
    "174": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "175": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%6#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%6#0"
      ]
    },
    "178": {
      "op": "btoi",
      "defined_out": [
        "tmp%65#0"
      ],
      "stack_out": [
        "tmp%65#0"
      ]
    },
    "179": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[1]%1#0",
        "tmp%65#0"
      ],
      "stack_out": [
        "tmp%65#0",
        "reinterpret_bytes[1]%1#0"
      ]
    },
    "182": {
      "callsub": "smart_contracts.pieout.contract.Pieout.check_game_event",
      "op": "callsub check_game_event",
      "defined_out": [
        "tmp%66#0"
      ],
      "stack_out": [
        "tmp%66#0"
      ]
    },
    "185": {
      "op": "bytec 5 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%66#0"
      ],
      "stack_out": [
        "tmp%66#0",
        "0x151f7c75"
      ]
    },
    "187": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%66#0"
      ]
    },
    "188": {
      "op": "concat",
      "defined_out": [
        "tmp%67#0"
      ],
      "stack_out": [
        "tmp%67#0"
      ]
    },
    "189": {
      "op": "log",
      "stack_out": []
    },
    "190": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "191": {
      "op": "return",
      "stack_out": []
    },
    "192": {
      "block": "main_play_game_route@14",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%56#0"
      ],
      "stack_out": [
        "tmp%56#0"
      ]
    },
    "194": {
      "op": "!",
      "defined_out": [
        "tmp%57#0"
      ],
      "stack_out": [
        "tmp%57#0"
      ]
    },
    "195": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "196": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%58#0"
      ],
      "stack_out": [
        "tmp%58#0"
      ]
    },
    "198": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "199": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%5#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%5#0"
      ]
    },
    "202": {
      "op": "btoi",
      "defined_out": [
        "tmp%60#0"
      ],
      "stack_out": [
        "tmp%60#0"
      ]
    },
    "203": {
      "callsub": "smart_contracts.pieout.contract.Pieout.play_game",
      "op": "callsub play_game",
      "stack_out": []
    },
    "206": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "207": {
      "op": "return",
      "stack_out": []
    },
    "208": {
      "block": "main_del_box_commit_rand_route@13",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%52#0"
      ],
      "stack_out": [
        "tmp%52#0"
      ]
    },
    "210": {
      "op": "!",
      "defined_out": [
        "tmp%53#0"
      ],
      "stack_out": [
        "tmp%53#0"
      ]
    },
    "211": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "212": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%54#0"
      ],
      "stack_out": [
        "tmp%54#0"
      ]
    },
    "214": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "215": {
      "callsub": "smart_contracts.pieout.contract.Pieout.del_box_commit_rand",
      "op": "callsub del_box_commit_rand"
    },
    "218": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "219": {
      "op": "return",
      "stack_out": []
    },
    "220": {
      "block": "main_commit_rand_route@12",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%47#0"
      ],
      "stack_out": [
        "tmp%47#0"
      ]
    },
    "222": {
      "op": "!",
      "defined_out": [
        "tmp%48#0"
      ],
      "stack_out": [
        "tmp%48#0"
      ]
    },
    "223": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "224": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%49#0"
      ],
      "stack_out": [
        "tmp%49#0"
      ]
    },
    "226": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "227": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%4#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%4#0"
      ]
    },
    "230": {
      "op": "btoi",
      "defined_out": [
        "tmp%51#0"
      ],
      "stack_out": [
        "tmp%51#0"
      ]
    },
    "231": {
      "callsub": "smart_contracts.pieout.contract.Pieout.commit_rand",
      "op": "callsub commit_rand",
      "stack_out": []
    },
    "234": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "235": {
      "op": "return",
      "stack_out": []
    },
    "236": {
      "block": "main_join_game_route@11",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%40#0"
      ]
    },
    "238": {
      "op": "!",
      "defined_out": [
        "tmp%41#0"
      ],
      "stack_out": [
        "tmp%41#0"
      ]
    },
    "239": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "240": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%42#0"
      ]
    },
    "242": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "243": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%3#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%3#0"
      ]
    },
    "246": {
      "op": "btoi",
      "defined_out": [
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%44#0"
      ]
    },
    "247": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%44#0",
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%44#0",
        "tmp%45#0"
      ]
    },
    "249": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "tmp%44#0",
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%44#0",
        "tmp%45#0",
        "2"
      ]
    },
    "250": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%4#0",
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%44#0",
        "gtxn_idx%4#0"
      ]
    },
    "251": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%4#0",
        "gtxn_idx%4#0 (copy)",
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%44#0",
        "gtxn_idx%4#0",
        "gtxn_idx%4#0 (copy)"
      ]
    },
    "252": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%4#0",
        "gtxn_type%4#0",
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%44#0",
        "gtxn_idx%4#0",
        "gtxn_type%4#0"
      ]
    },
    "254": {
      "op": "intc_0 // pay",
      "defined_out": [
        "gtxn_idx%4#0",
        "gtxn_type%4#0",
        "pay",
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%44#0",
        "gtxn_idx%4#0",
        "gtxn_type%4#0",
        "pay"
      ]
    },
    "255": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%4#0",
        "gtxn_type_matches%4#0",
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%44#0",
        "gtxn_idx%4#0",
        "gtxn_type_matches%4#0"
      ]
    },
    "256": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "tmp%44#0",
        "gtxn_idx%4#0"
      ]
    },
    "257": {
      "op": "txn GroupIndex",
      "defined_out": [
        "gtxn_idx%4#0",
        "tmp%44#0",
        "tmp%46#0"
      ],
      "stack_out": [
        "tmp%44#0",
        "gtxn_idx%4#0",
        "tmp%46#0"
      ]
    },
    "259": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "gtxn_idx%4#0",
        "tmp%44#0",
        "tmp%46#0"
      ],
      "stack_out": [
        "tmp%44#0",
        "gtxn_idx%4#0",
        "tmp%46#0",
        "1"
      ]
    },
    "260": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%4#0",
        "gtxn_idx%5#0",
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%44#0",
        "gtxn_idx%4#0",
        "gtxn_idx%5#0"
      ]
    },
    "261": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%4#0",
        "gtxn_idx%5#0",
        "gtxn_idx%5#0 (copy)",
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%44#0",
        "gtxn_idx%4#0",
        "gtxn_idx%5#0",
        "gtxn_idx%5#0 (copy)"
      ]
    },
    "262": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%4#0",
        "gtxn_idx%5#0",
        "gtxn_type%5#0",
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%44#0",
        "gtxn_idx%4#0",
        "gtxn_idx%5#0",
        "gtxn_type%5#0"
      ]
    },
    "264": {
      "op": "intc_0 // pay",
      "stack_out": [
        "tmp%44#0",
        "gtxn_idx%4#0",
        "gtxn_idx%5#0",
        "gtxn_type%5#0",
        "pay"
      ]
    },
    "265": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%4#0",
        "gtxn_idx%5#0",
        "gtxn_type_matches%5#0",
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%44#0",
        "gtxn_idx%4#0",
        "gtxn_idx%5#0",
        "gtxn_type_matches%5#0"
      ]
    },
    "266": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "tmp%44#0",
        "gtxn_idx%4#0",
        "gtxn_idx%5#0"
      ]
    },
    "267": {
      "callsub": "smart_contracts.pieout.contract.Pieout.join_game",
      "op": "callsub join_game",
      "stack_out": []
    },
    "270": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "271": {
      "op": "return",
      "stack_out": []
    },
    "272": {
      "block": "main_new_game_route@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0"
      ]
    },
    "274": {
      "op": "!",
      "defined_out": [
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0"
      ]
    },
    "275": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "276": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0"
      ]
    },
    "278": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "279": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%2#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%2#0"
      ]
    },
    "282": {
      "op": "btoi",
      "defined_out": [
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0"
      ]
    },
    "283": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%35#0",
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%35#0",
        "tmp%36#0"
      ]
    },
    "285": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "tmp%35#0",
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%35#0",
        "tmp%36#0",
        "4"
      ]
    },
    "287": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0",
        "gtxn_idx%0#0"
      ]
    },
    "288": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)",
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0",
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ]
    },
    "289": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0",
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ]
    },
    "291": {
      "op": "intc_0 // pay",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay",
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0",
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay"
      ]
    },
    "292": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0",
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0",
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ]
    },
    "293": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "tmp%35#0",
        "gtxn_idx%0#0"
      ]
    },
    "294": {
      "op": "txn GroupIndex",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%35#0",
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%35#0",
        "gtxn_idx%0#0",
        "tmp%37#0"
      ]
    },
    "296": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "gtxn_idx%0#0",
        "tmp%35#0",
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%35#0",
        "gtxn_idx%0#0",
        "tmp%37#0",
        "3"
      ]
    },
    "298": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0",
        "gtxn_idx%0#0",
        "gtxn_idx%1#0"
      ]
    },
    "299": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "gtxn_idx%1#0 (copy)",
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0",
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "gtxn_idx%1#0 (copy)"
      ]
    },
    "300": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "gtxn_type%1#0",
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0",
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "gtxn_type%1#0"
      ]
    },
    "302": {
      "op": "intc_0 // pay",
      "stack_out": [
        "tmp%35#0",
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "gtxn_type%1#0",
        "pay"
      ]
    },
    "303": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "gtxn_type_matches%1#0",
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0",
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "gtxn_type_matches%1#0"
      ]
    },
    "304": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "tmp%35#0",
        "gtxn_idx%0#0",
        "gtxn_idx%1#0"
      ]
    },
    "305": {
      "op": "txn GroupIndex",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "tmp%35#0",
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%35#0",
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "tmp%38#0"
      ]
    },
    "307": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "tmp%35#0",
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%35#0",
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "tmp%38#0",
        "2"
      ]
    },
    "308": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0",
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "gtxn_idx%2#0"
      ]
    },
    "309": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "gtxn_idx%2#0 (copy)",
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0",
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "gtxn_idx%2#0 (copy)"
      ]
    },
    "310": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "gtxn_type%2#0",
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0",
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "gtxn_type%2#0"
      ]
    },
    "312": {
      "op": "intc_0 // pay",
      "stack_out": [
        "tmp%35#0",
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "gtxn_type%2#0",
        "pay"
      ]
    },
    "313": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "gtxn_type_matches%2#0",
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0",
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "gtxn_type_matches%2#0"
      ]
    },
    "314": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "tmp%35#0",
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "gtxn_idx%2#0"
      ]
    },
    "315": {
      "op": "txn GroupIndex",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "tmp%35#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%35#0",
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "tmp%39#0"
      ]
    },
    "317": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "tmp%35#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%35#0",
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "tmp%39#0",
        "1"
      ]
    },
    "318": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "gtxn_idx%3#0",
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0",
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "gtxn_idx%3#0"
      ]
    },
    "319": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "gtxn_idx%3#0",
        "gtxn_idx%3#0 (copy)",
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0",
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "gtxn_idx%3#0",
        "gtxn_idx%3#0 (copy)"
      ]
    },
    "320": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "gtxn_idx%3#0",
        "gtxn_type%3#0",
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0",
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "gtxn_idx%3#0",
        "gtxn_type%3#0"
      ]
    },
    "322": {
      "op": "intc_0 // pay",
      "stack_out": [
        "tmp%35#0",
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "gtxn_idx%3#0",
        "gtxn_type%3#0",
        "pay"
      ]
    },
    "323": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "gtxn_idx%3#0",
        "gtxn_type_matches%3#0",
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0",
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "gtxn_idx%3#0",
        "gtxn_type_matches%3#0"
      ]
    },
    "324": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "tmp%35#0",
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "gtxn_idx%3#0"
      ]
    },
    "325": {
      "callsub": "smart_contracts.pieout.contract.Pieout.new_game",
      "op": "callsub new_game",
      "stack_out": []
    },
    "328": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "329": {
      "op": "return",
      "stack_out": []
    },
    "330": {
      "block": "main_generate_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0"
      ]
    },
    "332": {
      "op": "!",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "333": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "334": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0"
      ]
    },
    "336": {
      "op": "!",
      "defined_out": [
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0"
      ]
    },
    "337": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "338": {
      "callsub": "smart_contracts.pieout.contract.Pieout.generate",
      "op": "callsub generate"
    },
    "341": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "342": {
      "op": "return",
      "stack_out": []
    },
    "343": {
      "block": "main_read_game_players_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "345": {
      "op": "!",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "346": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "347": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "349": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "350": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%1#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%1#0"
      ]
    },
    "353": {
      "op": "btoi",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "354": {
      "callsub": "smart_contracts.pieout.contract.Pieout.read_game_players",
      "op": "callsub read_game_players",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "357": {
      "op": "bytec 5 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0",
        "0x151f7c75"
      ]
    },
    "359": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%25#0"
      ]
    },
    "360": {
      "op": "concat",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "361": {
      "op": "log",
      "stack_out": []
    },
    "362": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "363": {
      "op": "return",
      "stack_out": []
    },
    "364": {
      "block": "main_read_game_state_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "366": {
      "op": "!",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "367": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "368": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "370": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "371": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%0#0"
      ]
    },
    "374": {
      "op": "btoi",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "375": {
      "callsub": "smart_contracts.pieout.contract.Pieout.read_game_state",
      "op": "callsub read_game_state",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "378": {
      "op": "bytec 5 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0",
        "0x151f7c75"
      ]
    },
    "380": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%18#0"
      ]
    },
    "381": {
      "op": "concat",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "382": {
      "op": "log",
      "stack_out": []
    },
    "383": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "384": {
      "op": "return",
      "stack_out": []
    },
    "385": {
      "block": "main_read_gen_unix_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "387": {
      "op": "!",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "388": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "389": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "391": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "392": {
      "op": "intc 12 // TMPL_GEN_UNIX",
      "defined_out": [
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0"
      ]
    },
    "394": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0"
      ]
    },
    "395": {
      "op": "bytec 5 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0",
        "0x151f7c75"
      ]
    },
    "397": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%1#0"
      ]
    },
    "398": {
      "op": "concat",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "399": {
      "op": "log",
      "stack_out": []
    },
    "400": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "401": {
      "op": "return",
      "stack_out": []
    },
    "402": {
      "block": "main_calc_single_box_fee_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "404": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "405": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "406": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "408": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "409": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%0#0"
      ]
    },
    "412": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[1]%0#0",
        "reinterpret_bytes[2]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%0#0",
        "reinterpret_bytes[2]%0#0"
      ]
    },
    "415": {
      "callsub": "smart_contracts.pieout.contract.Pieout.calc_single_box_fee",
      "op": "callsub calc_single_box_fee",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "418": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "419": {
      "op": "bytec 5 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "421": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ]
    },
    "422": {
      "op": "concat",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "423": {
      "op": "log",
      "stack_out": []
    },
    "424": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "425": {
      "op": "return",
      "stack_out": []
    },
    "426": {
      "subroutine": "smart_contracts.pieout.subroutines.check_sender_in_game",
      "params": {
        "game_id#0": "uint64",
        "box_game_players#0": "bytes",
        "player_count#0": "uint64",
        "clear_player#0": "uint64"
      },
      "block": "check_sender_in_game",
      "stack_in": [],
      "op": "proto 4 1"
    },
    "429": {
      "op": "intc_1 // 0",
      "stack_out": [
        "players_ref#0"
      ]
    },
    "430": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "players_ref#0",
        "txn_sender_in_game#5"
      ]
    },
    "432": {
      "op": "frame_dig -2",
      "defined_out": [
        "player_count#0 (copy)"
      ],
      "stack_out": [
        "players_ref#0",
        "txn_sender_in_game#5",
        "player_count#0 (copy)"
      ]
    },
    "434": {
      "op": "intc_3 // 32",
      "defined_out": [
        "32",
        "player_count#0 (copy)"
      ],
      "stack_out": [
        "players_ref#0",
        "txn_sender_in_game#5",
        "player_count#0 (copy)",
        "32"
      ]
    },
    "435": {
      "op": "*",
      "defined_out": [
        "game_players_length#0"
      ],
      "stack_out": [
        "players_ref#0",
        "txn_sender_in_game#5",
        "game_players_length#0"
      ]
    },
    "436": {
      "op": "intc_1 // 0"
    },
    "437": {
      "op": "dup",
      "defined_out": [
        "game_players_length#0",
        "i#0",
        "txn_sender_in_game#0"
      ],
      "stack_out": [
        "players_ref#0",
        "txn_sender_in_game#5",
        "game_players_length#0",
        "txn_sender_in_game#0",
        "i#0"
      ]
    },
    "438": {
      "block": "check_sender_in_game_for_header@1",
      "stack_in": [
        "players_ref#0",
        "txn_sender_in_game#5",
        "game_players_length#0",
        "txn_sender_in_game#0",
        "i#0"
      ],
      "op": "frame_dig 4",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "players_ref#0",
        "txn_sender_in_game#5",
        "game_players_length#0",
        "txn_sender_in_game#0",
        "i#0",
        "i#0"
      ]
    },
    "440": {
      "op": "frame_dig 2",
      "defined_out": [
        "game_players_length#0",
        "i#0"
      ],
      "stack_out": [
        "players_ref#0",
        "txn_sender_in_game#5",
        "game_players_length#0",
        "txn_sender_in_game#0",
        "i#0",
        "i#0",
        "game_players_length#0"
      ]
    },
    "442": {
      "op": "<",
      "defined_out": [
        "continue_looping%0#0",
        "game_players_length#0",
        "i#0"
      ],
      "stack_out": [
        "players_ref#0",
        "txn_sender_in_game#5",
        "game_players_length#0",
        "txn_sender_in_game#0",
        "i#0",
        "continue_looping%0#0"
      ]
    },
    "443": {
      "op": "frame_dig 3",
      "defined_out": [
        "continue_looping%0#0",
        "game_players_length#0",
        "i#0",
        "txn_sender_in_game#5"
      ],
      "stack_out": [
        "players_ref#0",
        "txn_sender_in_game#5",
        "game_players_length#0",
        "txn_sender_in_game#0",
        "i#0",
        "continue_looping%0#0",
        "txn_sender_in_game#5"
      ]
    },
    "445": {
      "op": "frame_bury 1",
      "defined_out": [
        "continue_looping%0#0",
        "game_players_length#0",
        "i#0",
        "txn_sender_in_game#5"
      ],
      "stack_out": [
        "players_ref#0",
        "txn_sender_in_game#5",
        "game_players_length#0",
        "txn_sender_in_game#0",
        "i#0",
        "continue_looping%0#0"
      ]
    },
    "447": {
      "op": "bz check_sender_in_game_after_for@8",
      "stack_out": [
        "players_ref#0",
        "txn_sender_in_game#5",
        "game_players_length#0",
        "txn_sender_in_game#0",
        "i#0"
      ]
    },
    "450": {
      "op": "frame_dig -4",
      "defined_out": [
        "game_id#0 (copy)",
        "game_players_length#0",
        "i#0",
        "txn_sender_in_game#5"
      ],
      "stack_out": [
        "players_ref#0",
        "txn_sender_in_game#5",
        "game_players_length#0",
        "txn_sender_in_game#0",
        "i#0",
        "game_id#0 (copy)"
      ]
    },
    "452": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0",
        "game_players_length#0",
        "i#0",
        "txn_sender_in_game#5"
      ],
      "stack_out": [
        "players_ref#0",
        "txn_sender_in_game#5",
        "game_players_length#0",
        "txn_sender_in_game#0",
        "i#0",
        "encoded_value%0#0"
      ]
    },
    "453": {
      "op": "frame_dig -3",
      "defined_out": [
        "box_game_players#0 (copy)",
        "encoded_value%0#0",
        "game_players_length#0",
        "i#0",
        "txn_sender_in_game#5"
      ],
      "stack_out": [
        "players_ref#0",
        "txn_sender_in_game#5",
        "game_players_length#0",
        "txn_sender_in_game#0",
        "i#0",
        "encoded_value%0#0",
        "box_game_players#0 (copy)"
      ]
    },
    "455": {
      "op": "swap",
      "stack_out": [
        "players_ref#0",
        "txn_sender_in_game#5",
        "game_players_length#0",
        "txn_sender_in_game#0",
        "i#0",
        "box_game_players#0 (copy)",
        "encoded_value%0#0"
      ]
    },
    "456": {
      "op": "concat",
      "defined_out": [
        "game_players_length#0",
        "i#0",
        "players_ref#0",
        "txn_sender_in_game#5"
      ],
      "stack_out": [
        "players_ref#0",
        "txn_sender_in_game#5",
        "game_players_length#0",
        "txn_sender_in_game#0",
        "i#0",
        "players_ref#0"
      ]
    },
    "457": {
      "op": "dup",
      "stack_out": [
        "players_ref#0",
        "txn_sender_in_game#5",
        "game_players_length#0",
        "txn_sender_in_game#0",
        "i#0",
        "players_ref#0",
        "players_ref#0"
      ]
    },
    "458": {
      "op": "frame_bury 0",
      "defined_out": [
        "game_players_length#0",
        "i#0",
        "players_ref#0",
        "txn_sender_in_game#5"
      ],
      "stack_out": [
        "players_ref#0",
        "txn_sender_in_game#5",
        "game_players_length#0",
        "txn_sender_in_game#0",
        "i#0",
        "players_ref#0"
      ]
    },
    "460": {
      "op": "box_get",
      "defined_out": [
        "game_players_length#0",
        "i#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "players_ref#0",
        "txn_sender_in_game#5"
      ],
      "stack_out": [
        "players_ref#0",
        "txn_sender_in_game#5",
        "game_players_length#0",
        "txn_sender_in_game#0",
        "i#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "461": {
      "error": "check BoxMap entry exists",
      "op": "assert // check BoxMap entry exists",
      "stack_out": [
        "players_ref#0",
        "txn_sender_in_game#5",
        "game_players_length#0",
        "txn_sender_in_game#0",
        "i#0",
        "maybe_value%0#0"
      ]
    },
    "462": {
      "op": "frame_dig 4",
      "stack_out": [
        "players_ref#0",
        "txn_sender_in_game#5",
        "game_players_length#0",
        "txn_sender_in_game#0",
        "i#0",
        "maybe_value%0#0",
        "i#0"
      ]
    },
    "464": {
      "op": "intc_3 // 32",
      "defined_out": [
        "32",
        "game_players_length#0",
        "i#0",
        "maybe_value%0#0",
        "players_ref#0",
        "txn_sender_in_game#5"
      ],
      "stack_out": [
        "players_ref#0",
        "txn_sender_in_game#5",
        "game_players_length#0",
        "txn_sender_in_game#0",
        "i#0",
        "maybe_value%0#0",
        "i#0",
        "32"
      ]
    },
    "465": {
      "op": "extract3",
      "defined_out": [
        "game_players_length#0",
        "i#0",
        "player_addr_bytes#0",
        "players_ref#0",
        "txn_sender_in_game#5"
      ],
      "stack_out": [
        "players_ref#0",
        "txn_sender_in_game#5",
        "game_players_length#0",
        "txn_sender_in_game#0",
        "i#0",
        "player_addr_bytes#0"
      ]
    },
    "466": {
      "op": "txn Sender",
      "defined_out": [
        "game_players_length#0",
        "i#0",
        "player_addr_bytes#0",
        "players_ref#0",
        "tmp%0#0",
        "txn_sender_in_game#5"
      ],
      "stack_out": [
        "players_ref#0",
        "txn_sender_in_game#5",
        "game_players_length#0",
        "txn_sender_in_game#0",
        "i#0",
        "player_addr_bytes#0",
        "tmp%0#0"
      ]
    },
    "468": {
      "op": "==",
      "defined_out": [
        "game_players_length#0",
        "i#0",
        "players_ref#0",
        "tmp%1#0",
        "txn_sender_in_game#5"
      ],
      "stack_out": [
        "players_ref#0",
        "txn_sender_in_game#5",
        "game_players_length#0",
        "txn_sender_in_game#0",
        "i#0",
        "tmp%1#0"
      ]
    },
    "469": {
      "op": "bz check_sender_in_game_after_if_else@6",
      "stack_out": [
        "players_ref#0",
        "txn_sender_in_game#5",
        "game_players_length#0",
        "txn_sender_in_game#0",
        "i#0"
      ]
    },
    "472": {
      "op": "intc_0 // 1",
      "defined_out": [
        "game_players_length#0",
        "i#0",
        "players_ref#0",
        "txn_sender_in_game#0",
        "txn_sender_in_game#5"
      ],
      "stack_out": [
        "players_ref#0",
        "txn_sender_in_game#5",
        "game_players_length#0",
        "txn_sender_in_game#0",
        "i#0",
        "txn_sender_in_game#0"
      ]
    },
    "473": {
      "op": "frame_bury 3",
      "stack_out": [
        "players_ref#0",
        "txn_sender_in_game#5",
        "game_players_length#0",
        "txn_sender_in_game#0",
        "i#0"
      ]
    },
    "475": {
      "op": "frame_dig -1",
      "defined_out": [
        "clear_player#0 (copy)",
        "game_players_length#0",
        "i#0",
        "players_ref#0",
        "txn_sender_in_game#0",
        "txn_sender_in_game#5"
      ],
      "stack_out": [
        "players_ref#0",
        "txn_sender_in_game#5",
        "game_players_length#0",
        "txn_sender_in_game#0",
        "i#0",
        "clear_player#0 (copy)"
      ]
    },
    "477": {
      "op": "bz check_sender_in_game_after_if_else@5",
      "stack_out": [
        "players_ref#0",
        "txn_sender_in_game#5",
        "game_players_length#0",
        "txn_sender_in_game#0",
        "i#0"
      ]
    },
    "480": {
      "op": "frame_dig 0",
      "stack_out": [
        "players_ref#0",
        "txn_sender_in_game#5",
        "game_players_length#0",
        "txn_sender_in_game#0",
        "i#0",
        "players_ref#0"
      ]
    },
    "482": {
      "op": "frame_dig 4",
      "stack_out": [
        "players_ref#0",
        "txn_sender_in_game#5",
        "game_players_length#0",
        "txn_sender_in_game#0",
        "i#0",
        "players_ref#0",
        "i#0"
      ]
    },
    "484": {
      "op": "bytec 9 // 0x0000000000000000000000000000000000000000000000000000000000000000",
      "defined_out": [
        "0x0000000000000000000000000000000000000000000000000000000000000000",
        "game_players_length#0",
        "i#0",
        "players_ref#0",
        "txn_sender_in_game#0",
        "txn_sender_in_game#5"
      ],
      "stack_out": [
        "players_ref#0",
        "txn_sender_in_game#5",
        "game_players_length#0",
        "txn_sender_in_game#0",
        "i#0",
        "players_ref#0",
        "i#0",
        "0x0000000000000000000000000000000000000000000000000000000000000000"
      ]
    },
    "486": {
      "op": "box_replace",
      "stack_out": [
        "players_ref#0",
        "txn_sender_in_game#5",
        "game_players_length#0",
        "txn_sender_in_game#0",
        "i#0"
      ]
    },
    "487": {
      "block": "check_sender_in_game_after_if_else@5",
      "stack_in": [
        "players_ref#0",
        "txn_sender_in_game#5",
        "game_players_length#0",
        "txn_sender_in_game#0",
        "i#0"
      ],
      "op": "frame_dig 3",
      "defined_out": [
        "txn_sender_in_game#5"
      ],
      "stack_out": [
        "players_ref#0",
        "txn_sender_in_game#5",
        "game_players_length#0",
        "txn_sender_in_game#0",
        "i#0",
        "txn_sender_in_game#5"
      ]
    },
    "489": {
      "op": "frame_bury 1",
      "defined_out": [
        "txn_sender_in_game#5"
      ],
      "stack_out": [
        "players_ref#0",
        "txn_sender_in_game#5",
        "game_players_length#0",
        "txn_sender_in_game#0",
        "i#0"
      ]
    },
    "491": {
      "block": "check_sender_in_game_after_for@8",
      "stack_in": [
        "players_ref#0",
        "txn_sender_in_game#5",
        "game_players_length#0",
        "txn_sender_in_game#0",
        "i#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "txn_sender_in_game#0"
      ],
      "stack_out": [
        "players_ref#0",
        "txn_sender_in_game#5",
        "game_players_length#0",
        "txn_sender_in_game#0",
        "i#0",
        "txn_sender_in_game#0"
      ]
    },
    "493": {
      "op": "frame_bury 0"
    },
    "495": {
      "retsub": true,
      "op": "retsub"
    },
    "496": {
      "block": "check_sender_in_game_after_if_else@6",
      "stack_in": [
        "players_ref#0",
        "txn_sender_in_game#5",
        "game_players_length#0",
        "txn_sender_in_game#0",
        "i#0"
      ],
      "op": "frame_dig 4",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "players_ref#0",
        "txn_sender_in_game#5",
        "game_players_length#0",
        "txn_sender_in_game#0",
        "i#0",
        "i#0"
      ]
    },
    "498": {
      "op": "intc_3 // 32",
      "defined_out": [
        "32",
        "i#0"
      ],
      "stack_out": [
        "players_ref#0",
        "txn_sender_in_game#5",
        "game_players_length#0",
        "txn_sender_in_game#0",
        "i#0",
        "i#0",
        "32"
      ]
    },
    "499": {
      "op": "+",
      "stack_out": [
        "players_ref#0",
        "txn_sender_in_game#5",
        "game_players_length#0",
        "txn_sender_in_game#0",
        "i#0",
        "i#0"
      ]
    },
    "500": {
      "op": "frame_bury 4",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "players_ref#0",
        "txn_sender_in_game#5",
        "game_players_length#0",
        "txn_sender_in_game#0",
        "i#0"
      ]
    },
    "502": {
      "op": "b check_sender_in_game_for_header@1"
    },
    "505": {
      "subroutine": "smart_contracts.pieout.subroutines.is_game_live",
      "params": {
        "game_state#0": "bytes"
      },
      "block": "is_game_live",
      "stack_in": [],
      "op": "proto 1 2"
    },
    "508": {
      "op": "frame_dig -1",
      "defined_out": [
        "game_state#0 (copy)"
      ],
      "stack_out": [
        "game_state#0 (copy)"
      ]
    },
    "510": {
      "error": "Index access is out of bounds",
      "op": "extract 6 8 // on error: Index access is out of bounds",
      "defined_out": [
        "reinterpret_biguint%0#0"
      ],
      "stack_out": [
        "reinterpret_biguint%0#0"
      ]
    },
    "513": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "reinterpret_biguint%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "reinterpret_biguint%0#0",
        "tmp%0#0"
      ]
    },
    "515": {
      "op": "itob",
      "defined_out": [
        "reinterpret_biguint%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "reinterpret_biguint%0#0",
        "tmp%1#0"
      ]
    },
    "516": {
      "op": "b<",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "517": {
      "op": "bnz is_game_live_if_body@2",
      "stack_out": []
    },
    "520": {
      "op": "frame_dig -1",
      "stack_out": [
        "game_state#0 (copy)"
      ]
    },
    "522": {
      "error": "Index access is out of bounds",
      "op": "extract 2 1 // on error: Index access is out of bounds",
      "defined_out": [
        "reinterpret_biguint%1#0"
      ],
      "stack_out": [
        "reinterpret_biguint%1#0"
      ]
    },
    "525": {
      "op": "frame_dig -1",
      "stack_out": [
        "reinterpret_biguint%1#0",
        "game_state#0 (copy)"
      ]
    },
    "527": {
      "error": "Index access is out of bounds",
      "op": "extract 1 1 // on error: Index access is out of bounds",
      "defined_out": [
        "reinterpret_biguint%1#0",
        "reinterpret_biguint%2#0"
      ],
      "stack_out": [
        "reinterpret_biguint%1#0",
        "reinterpret_biguint%2#0"
      ]
    },
    "530": {
      "op": "b==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "531": {
      "op": "bz is_game_live_else_body@7",
      "stack_out": []
    },
    "534": {
      "block": "is_game_live_if_body@2",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "game_state#0 (copy)"
      ],
      "stack_out": [
        "game_state#0 (copy)"
      ]
    },
    "536": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "game_state#0 (copy)"
      ],
      "stack_out": [
        "game_state#0 (copy)",
        "0"
      ]
    },
    "537": {
      "op": "intc_0 // 1",
      "defined_out": [
        "0",
        "1",
        "game_state#0 (copy)"
      ],
      "stack_out": [
        "game_state#0 (copy)",
        "0",
        "1"
      ]
    },
    "538": {
      "op": "setbit",
      "defined_out": [
        "game_state#0"
      ],
      "stack_out": [
        "game_state#0"
      ]
    },
    "539": {
      "op": "frame_bury -1",
      "stack_out": []
    },
    "541": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "543": {
      "op": "intc 4 // 3600",
      "defined_out": [
        "3600",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "3600"
      ]
    },
    "545": {
      "op": "+",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "546": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "547": {
      "op": "frame_dig -1",
      "stack_out": [
        "val_as_bytes%0#0",
        "game_state#0 (copy)"
      ]
    },
    "549": {
      "op": "swap",
      "stack_out": [
        "game_state#0 (copy)",
        "val_as_bytes%0#0"
      ]
    },
    "550": {
      "op": "replace2 6",
      "stack_out": [
        "game_state#0"
      ]
    },
    "552": {
      "op": "dup"
    },
    "553": {
      "op": "frame_bury -1",
      "stack_out": [
        "game_state#0 (copy)"
      ]
    },
    "555": {
      "op": "intc_1 // 0",
      "stack_out": [
        "game_state#0 (copy)",
        "0"
      ]
    },
    "556": {
      "op": "getbit",
      "defined_out": [
        "is_true%1#0"
      ],
      "stack_out": [
        "is_true%1#0"
      ]
    },
    "557": {
      "op": "bytec_0 // 0x00",
      "defined_out": [
        "0x00",
        "is_true%1#0"
      ],
      "stack_out": [
        "is_true%1#0",
        "0x00"
      ]
    },
    "558": {
      "op": "intc_1 // 0",
      "stack_out": [
        "is_true%1#0",
        "0x00",
        "0"
      ]
    },
    "559": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "is_true%1#0"
      ]
    },
    "561": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%1#0"
      ],
      "stack_out": [
        "encoded_bool%1#0"
      ]
    },
    "562": {
      "op": "frame_dig -1",
      "stack_out": [
        "encoded_bool%1#0",
        "game_state#0 (copy)"
      ]
    },
    "564": {
      "error": "Index access is out of bounds",
      "op": "extract 6 8 // on error: Index access is out of bounds",
      "defined_out": [
        "encoded_bool%1#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "encoded_bool%1#0",
        "tmp%5#0"
      ]
    },
    "567": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0"
      ]
    },
    "568": {
      "op": "pushbytes 0xf1f3294a // method \"game_live(bool,uint64)\"",
      "defined_out": [
        "Method(game_live(bool,uint64))",
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "Method(game_live(bool,uint64))"
      ]
    },
    "574": {
      "op": "swap",
      "stack_out": [
        "Method(game_live(bool,uint64))",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "575": {
      "op": "concat",
      "defined_out": [
        "event%0#0"
      ],
      "stack_out": [
        "event%0#0"
      ]
    },
    "576": {
      "op": "log",
      "stack_out": []
    },
    "577": {
      "op": "pushbytes 0x80",
      "defined_out": [
        "0x80"
      ],
      "stack_out": [
        "0x80"
      ]
    },
    "580": {
      "op": "frame_dig -1",
      "stack_out": [
        "0x80",
        "game_state#0 (copy)"
      ]
    },
    "582": {
      "retsub": true,
      "op": "retsub"
    },
    "583": {
      "block": "is_game_live_else_body@7",
      "stack_in": [],
      "op": "bytec_0 // 0x00",
      "defined_out": [
        "0x00"
      ],
      "stack_out": [
        "0x00"
      ]
    },
    "584": {
      "op": "frame_dig -1",
      "defined_out": [
        "0x00",
        "game_state#0 (copy)"
      ],
      "stack_out": [
        "0x00",
        "game_state#0 (copy)"
      ]
    },
    "586": {
      "retsub": true,
      "op": "retsub"
    },
    "587": {
      "subroutine": "smart_contracts.pieout.subroutines.is_game_over",
      "params": {
        "game_id#0": "uint64",
        "game_state#0": "bytes",
        "box_game_players#0": "bytes"
      },
      "block": "is_game_over",
      "stack_in": [],
      "op": "proto 3 2"
    },
    "590": {
      "op": "intc_1 // 0",
      "stack_out": [
        "receiver#0"
      ]
    },
    "591": {
      "op": "frame_dig -2",
      "defined_out": [
        "game_state#0 (copy)"
      ],
      "stack_out": [
        "receiver#0",
        "game_state#0 (copy)"
      ]
    },
    "593": {
      "error": "Index access is out of bounds",
      "op": "extract 6 8 // on error: Index access is out of bounds",
      "defined_out": [
        "reinterpret_biguint%0#0"
      ],
      "stack_out": [
        "receiver#0",
        "reinterpret_biguint%0#0"
      ]
    },
    "596": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "reinterpret_biguint%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "receiver#0",
        "reinterpret_biguint%0#0",
        "tmp%0#0"
      ]
    },
    "598": {
      "op": "itob",
      "defined_out": [
        "reinterpret_biguint%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "receiver#0",
        "reinterpret_biguint%0#0",
        "tmp%1#0"
      ]
    },
    "599": {
      "op": "b<",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "receiver#0",
        "tmp%2#0"
      ]
    },
    "600": {
      "op": "bnz is_game_over_if_body@2",
      "stack_out": [
        "receiver#0"
      ]
    },
    "603": {
      "op": "frame_dig -2",
      "stack_out": [
        "receiver#0",
        "game_state#0 (copy)"
      ]
    },
    "605": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "game_state#0 (copy)"
      ],
      "stack_out": [
        "receiver#0",
        "game_state#0 (copy)",
        "2"
      ]
    },
    "606": {
      "op": "getbyte",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "receiver#0",
        "tmp%4#0"
      ]
    },
    "607": {
      "op": "bnz is_game_over_else_body@10",
      "stack_out": [
        "receiver#0"
      ]
    },
    "610": {
      "block": "is_game_over_if_body@2",
      "stack_in": [
        "receiver#0"
      ],
      "op": "frame_dig -2",
      "defined_out": [
        "game_state#0 (copy)"
      ],
      "stack_out": [
        "receiver#0",
        "game_state#0 (copy)"
      ]
    },
    "612": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "game_state#0 (copy)"
      ],
      "stack_out": [
        "receiver#0",
        "game_state#0 (copy)",
        "1"
      ]
    },
    "613": {
      "op": "getbyte",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "receiver#0",
        "tmp%7#0"
      ]
    },
    "614": {
      "op": "intc_3 // 32",
      "defined_out": [
        "32",
        "tmp%7#0"
      ],
      "stack_out": [
        "receiver#0",
        "tmp%7#0",
        "32"
      ]
    },
    "615": {
      "op": "*",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "receiver#0",
        "tmp%8#0"
      ]
    },
    "616": {
      "op": "bzero",
      "defined_out": [
        "materialized_values%0#0"
      ],
      "stack_out": [
        "receiver#0",
        "materialized_values%0#0"
      ]
    },
    "617": {
      "op": "frame_dig -3",
      "defined_out": [
        "game_id#0 (copy)",
        "materialized_values%0#0"
      ],
      "stack_out": [
        "receiver#0",
        "materialized_values%0#0",
        "game_id#0 (copy)"
      ]
    },
    "619": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0",
        "materialized_values%0#0"
      ],
      "stack_out": [
        "receiver#0",
        "materialized_values%0#0",
        "encoded_value%0#0"
      ]
    },
    "620": {
      "op": "frame_dig -1",
      "defined_out": [
        "box_game_players#0 (copy)",
        "encoded_value%0#0",
        "materialized_values%0#0"
      ],
      "stack_out": [
        "receiver#0",
        "materialized_values%0#0",
        "encoded_value%0#0",
        "box_game_players#0 (copy)"
      ]
    },
    "622": {
      "op": "swap",
      "stack_out": [
        "receiver#0",
        "materialized_values%0#0",
        "box_game_players#0 (copy)",
        "encoded_value%0#0"
      ]
    },
    "623": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0",
        "materialized_values%0#0"
      ],
      "stack_out": [
        "receiver#0",
        "materialized_values%0#0",
        "box_prefixed_key%0#0"
      ]
    },
    "624": {
      "op": "dup",
      "defined_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)",
        "materialized_values%0#0"
      ],
      "stack_out": [
        "receiver#0",
        "materialized_values%0#0",
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)"
      ]
    },
    "625": {
      "op": "box_del",
      "defined_out": [
        "box_prefixed_key%0#0",
        "materialized_values%0#0",
        "{box_del}"
      ],
      "stack_out": [
        "receiver#0",
        "materialized_values%0#0",
        "box_prefixed_key%0#0",
        "{box_del}"
      ]
    },
    "626": {
      "op": "pop",
      "stack_out": [
        "receiver#0",
        "materialized_values%0#0",
        "box_prefixed_key%0#0"
      ]
    },
    "627": {
      "op": "swap",
      "stack_out": [
        "receiver#0",
        "box_prefixed_key%0#0",
        "materialized_values%0#0"
      ]
    },
    "628": {
      "op": "box_put",
      "stack_out": [
        "receiver#0"
      ]
    },
    "629": {
      "op": "frame_dig -2",
      "stack_out": [
        "receiver#0",
        "game_state#0 (copy)"
      ]
    },
    "631": {
      "op": "bytec_0 // 0x00",
      "defined_out": [
        "0x00",
        "game_state#0 (copy)"
      ],
      "stack_out": [
        "receiver#0",
        "game_state#0 (copy)",
        "0x00"
      ]
    },
    "632": {
      "op": "replace2 2",
      "defined_out": [
        "game_state#0"
      ],
      "stack_out": [
        "receiver#0",
        "game_state#0"
      ]
    },
    "634": {
      "op": "dup"
    },
    "635": {
      "op": "frame_bury -2",
      "stack_out": [
        "receiver#0",
        "game_state#0 (copy)"
      ]
    },
    "637": {
      "error": "Index access is out of bounds",
      "op": "extract 54 32 // on error: Index access is out of bounds",
      "defined_out": [
        "receiver#0"
      ],
      "stack_out": [
        "receiver#0",
        "receiver#0"
      ]
    },
    "640": {
      "op": "dup",
      "stack_out": [
        "receiver#0",
        "receiver#0",
        "receiver#0"
      ]
    },
    "641": {
      "op": "frame_bury 0",
      "defined_out": [
        "receiver#0"
      ],
      "stack_out": [
        "receiver#0",
        "receiver#0"
      ]
    },
    "643": {
      "op": "frame_dig -2",
      "stack_out": [
        "receiver#0",
        "receiver#0",
        "game_state#0 (copy)"
      ]
    },
    "645": {
      "error": "Index access is out of bounds",
      "op": "extract 3 1 // on error: Index access is out of bounds",
      "defined_out": [
        "receiver#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "receiver#0",
        "receiver#0",
        "tmp%10#0"
      ]
    },
    "648": {
      "op": "dig 1",
      "defined_out": [
        "receiver#0",
        "receiver#0 (copy)",
        "tmp%10#0"
      ],
      "stack_out": [
        "receiver#0",
        "receiver#0",
        "tmp%10#0",
        "receiver#0 (copy)"
      ]
    },
    "650": {
      "op": "swap",
      "stack_out": [
        "receiver#0",
        "receiver#0",
        "receiver#0 (copy)",
        "tmp%10#0"
      ]
    },
    "651": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "receiver#0"
      ],
      "stack_out": [
        "receiver#0",
        "receiver#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "652": {
      "op": "pushbytes 0x353f58ec // method \"game_over(address,uint8)\"",
      "defined_out": [
        "Method(game_over(address,uint8))",
        "encoded_tuple_buffer%2#0",
        "receiver#0"
      ],
      "stack_out": [
        "receiver#0",
        "receiver#0",
        "encoded_tuple_buffer%2#0",
        "Method(game_over(address,uint8))"
      ]
    },
    "658": {
      "op": "swap",
      "stack_out": [
        "receiver#0",
        "receiver#0",
        "Method(game_over(address,uint8))",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "659": {
      "op": "concat",
      "defined_out": [
        "event%0#0",
        "receiver#0"
      ],
      "stack_out": [
        "receiver#0",
        "receiver#0",
        "event%0#0"
      ]
    },
    "660": {
      "op": "log",
      "stack_out": [
        "receiver#0",
        "receiver#0"
      ]
    },
    "661": {
      "op": "global ZeroAddress",
      "defined_out": [
        "receiver#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "receiver#0",
        "receiver#0",
        "tmp%11#0"
      ]
    },
    "663": {
      "op": "==",
      "defined_out": [
        "receiver#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "receiver#0",
        "tmp%12#0"
      ]
    },
    "664": {
      "op": "bz is_game_over_after_if_else@6",
      "stack_out": [
        "receiver#0"
      ]
    },
    "667": {
      "op": "frame_dig -2",
      "stack_out": [
        "receiver#0",
        "game_state#0 (copy)"
      ]
    },
    "669": {
      "error": "Index access is out of bounds",
      "op": "extract 22 32 // on error: Index access is out of bounds",
      "stack_out": [
        "receiver#0",
        "receiver#0"
      ]
    },
    "672": {
      "op": "frame_bury 0",
      "stack_out": [
        "receiver#0"
      ]
    },
    "674": {
      "block": "is_game_over_after_if_else@6",
      "stack_in": [
        "receiver#0"
      ],
      "op": "itxn_begin"
    },
    "675": {
      "op": "frame_dig -2",
      "defined_out": [
        "game_state#0 (copy)"
      ],
      "stack_out": [
        "receiver#0",
        "game_state#0 (copy)"
      ]
    },
    "677": {
      "op": "pushint 14 // 14",
      "defined_out": [
        "14",
        "game_state#0 (copy)"
      ],
      "stack_out": [
        "receiver#0",
        "game_state#0 (copy)",
        "14"
      ]
    },
    "679": {
      "op": "extract_uint64",
      "defined_out": [
        "inner_txn_params%0%%param_Amount_idx_0#0"
      ],
      "stack_out": [
        "receiver#0",
        "inner_txn_params%0%%param_Amount_idx_0#0"
      ]
    },
    "680": {
      "op": "pushbytes \"Prize pool game_over_critera payment inner transaction\"",
      "defined_out": [
        "\"Prize pool game_over_critera payment inner transaction\"",
        "inner_txn_params%0%%param_Amount_idx_0#0"
      ],
      "stack_out": [
        "receiver#0",
        "inner_txn_params%0%%param_Amount_idx_0#0",
        "\"Prize pool game_over_critera payment inner transaction\""
      ]
    },
    "736": {
      "op": "itxn_field Note",
      "stack_out": [
        "receiver#0",
        "inner_txn_params%0%%param_Amount_idx_0#0"
      ]
    },
    "738": {
      "op": "itxn_field Amount",
      "stack_out": [
        "receiver#0"
      ]
    },
    "740": {
      "op": "frame_dig 0",
      "defined_out": [
        "receiver#0"
      ],
      "stack_out": [
        "receiver#0",
        "receiver#0"
      ]
    },
    "742": {
      "op": "itxn_field Receiver",
      "stack_out": [
        "receiver#0"
      ]
    },
    "744": {
      "op": "intc_0 // pay",
      "defined_out": [
        "pay",
        "receiver#0"
      ],
      "stack_out": [
        "receiver#0",
        "pay"
      ]
    },
    "745": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "receiver#0"
      ]
    },
    "747": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "receiver#0"
      ],
      "stack_out": [
        "receiver#0",
        "0"
      ]
    },
    "748": {
      "op": "itxn_field Fee",
      "stack_out": [
        "receiver#0"
      ]
    },
    "750": {
      "op": "itxn_submit"
    },
    "751": {
      "op": "frame_dig -2",
      "stack_out": [
        "receiver#0",
        "game_state#0 (copy)"
      ]
    },
    "753": {
      "op": "bytec 6 // 0x0000000000000000",
      "defined_out": [
        "0x0000000000000000",
        "game_state#0 (copy)",
        "receiver#0"
      ],
      "stack_out": [
        "receiver#0",
        "game_state#0 (copy)",
        "0x0000000000000000"
      ]
    },
    "755": {
      "op": "replace2 14",
      "defined_out": [
        "game_state#0",
        "receiver#0"
      ],
      "stack_out": [
        "receiver#0",
        "game_state#0"
      ]
    },
    "757": {
      "op": "frame_bury -2",
      "stack_out": [
        "receiver#0"
      ]
    },
    "759": {
      "op": "pushbytes 0x80",
      "defined_out": [
        "0x80",
        "receiver#0"
      ],
      "stack_out": [
        "receiver#0",
        "0x80"
      ]
    },
    "762": {
      "op": "frame_dig -2",
      "stack_out": [
        "receiver#0",
        "0x80",
        "game_state#0 (copy)"
      ]
    },
    "764": {
      "op": "uncover 2"
    },
    "766": {
      "retsub": true,
      "op": "retsub"
    },
    "767": {
      "block": "is_game_over_else_body@10",
      "stack_in": [
        "receiver#0"
      ],
      "op": "bytec_0 // 0x00",
      "defined_out": [
        "0x00"
      ],
      "stack_out": [
        "receiver#0",
        "0x00"
      ]
    },
    "768": {
      "op": "frame_dig -2",
      "defined_out": [
        "0x00",
        "game_state#0 (copy)"
      ],
      "stack_out": [
        "receiver#0",
        "0x00",
        "game_state#0 (copy)"
      ]
    },
    "770": {
      "op": "uncover 2"
    },
    "772": {
      "retsub": true,
      "op": "retsub"
    },
    "773": {
      "subroutine": "smart_contracts.pieout.contract.Pieout.calc_single_box_fee",
      "params": {
        "key_size#0": "bytes",
        "value_size#0": "bytes"
      },
      "block": "calc_single_box_fee",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "776": {
      "op": "frame_dig -2",
      "defined_out": [
        "key_size#0 (copy)"
      ],
      "stack_out": [
        "key_size#0 (copy)"
      ]
    },
    "778": {
      "op": "btoi",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "779": {
      "op": "frame_dig -1",
      "defined_out": [
        "tmp%1#0",
        "value_size#0 (copy)"
      ],
      "stack_out": [
        "tmp%1#0",
        "value_size#0 (copy)"
      ]
    },
    "781": {
      "op": "btoi",
      "defined_out": [
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "782": {
      "op": "+",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "783": {
      "op": "pushint 400 // 400",
      "defined_out": [
        "400",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "400"
      ]
    },
    "786": {
      "op": "*",
      "defined_out": [
        "size_fee#0"
      ],
      "stack_out": [
        "size_fee#0"
      ]
    },
    "787": {
      "op": "pushint 2500 // 2500",
      "defined_out": [
        "2500",
        "size_fee#0"
      ],
      "stack_out": [
        "size_fee#0",
        "2500"
      ]
    },
    "790": {
      "op": "+",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "791": {
      "retsub": true,
      "op": "retsub"
    },
    "792": {
      "subroutine": "smart_contracts.pieout.contract.Pieout.read_game_state",
      "params": {
        "game_id#0": "uint64"
      },
      "block": "read_game_state",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "795": {
      "op": "frame_dig -1",
      "defined_out": [
        "game_id#0 (copy)"
      ],
      "stack_out": [
        "game_id#0 (copy)"
      ]
    },
    "797": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "798": {
      "op": "bytec_2 // \"s_\"",
      "defined_out": [
        "\"s_\"",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "\"s_\""
      ]
    },
    "799": {
      "op": "dig 1",
      "defined_out": [
        "\"s_\"",
        "encoded_value%0#0",
        "encoded_value%0#0 (copy)"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "\"s_\"",
        "encoded_value%0#0 (copy)"
      ]
    },
    "801": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0"
      ]
    },
    "802": {
      "op": "box_get",
      "defined_out": [
        "encoded_value%0#0",
        "game_state#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "game_state#0",
        "maybe_exists%0#0"
      ]
    },
    "803": {
      "error": "check self.box_game_state entry exists",
      "op": "assert // check self.box_game_state entry exists",
      "stack_out": [
        "encoded_value%0#0",
        "game_state#0"
      ]
    },
    "804": {
      "op": "dup",
      "defined_out": [
        "encoded_value%0#0",
        "game_state#0",
        "game_state#0 (copy)"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "game_state#0",
        "game_state#0 (copy)"
      ]
    },
    "805": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#0 (copy)"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "game_state#0",
        "game_state#0 (copy)",
        "0"
      ]
    },
    "806": {
      "op": "getbit",
      "defined_out": [
        "encoded_value%0#0",
        "game_state#0",
        "is_true%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "game_state#0",
        "is_true%0#0"
      ]
    },
    "807": {
      "op": "bytec_0 // 0x00",
      "defined_out": [
        "0x00",
        "encoded_value%0#0",
        "game_state#0",
        "is_true%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "game_state#0",
        "is_true%0#0",
        "0x00"
      ]
    },
    "808": {
      "op": "intc_1 // 0",
      "stack_out": [
        "encoded_value%0#0",
        "game_state#0",
        "is_true%0#0",
        "0x00",
        "0"
      ]
    },
    "809": {
      "op": "uncover 2",
      "stack_out": [
        "encoded_value%0#0",
        "game_state#0",
        "0x00",
        "0",
        "is_true%0#0"
      ]
    },
    "811": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "game_state#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "game_state#0",
        "encoded_bool%0#0"
      ]
    },
    "812": {
      "op": "dig 1",
      "stack_out": [
        "encoded_value%0#0",
        "game_state#0",
        "encoded_bool%0#0",
        "game_state#0 (copy)"
      ]
    },
    "814": {
      "error": "Index access is out of bounds",
      "op": "extract 1 1 // on error: Index access is out of bounds",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "game_state#0",
        "encoded_bool%0#0",
        "tmp%0#0"
      ]
    },
    "817": {
      "op": "dig 2",
      "stack_out": [
        "encoded_value%0#0",
        "game_state#0",
        "encoded_bool%0#0",
        "tmp%0#0",
        "game_state#0 (copy)"
      ]
    },
    "819": {
      "error": "Index access is out of bounds",
      "op": "extract 2 1 // on error: Index access is out of bounds",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "game_state#0",
        "encoded_bool%0#0",
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "822": {
      "op": "dig 3",
      "stack_out": [
        "encoded_value%0#0",
        "game_state#0",
        "encoded_bool%0#0",
        "tmp%0#0",
        "tmp%1#0",
        "game_state#0 (copy)"
      ]
    },
    "824": {
      "error": "Index access is out of bounds",
      "op": "extract 3 1 // on error: Index access is out of bounds",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "game_state#0",
        "encoded_bool%0#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "827": {
      "op": "dig 4",
      "stack_out": [
        "encoded_value%0#0",
        "game_state#0",
        "encoded_bool%0#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "game_state#0 (copy)"
      ]
    },
    "829": {
      "error": "Index access is out of bounds",
      "op": "extract 4 2 // on error: Index access is out of bounds",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "game_state#0",
        "encoded_bool%0#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "832": {
      "op": "dig 5",
      "stack_out": [
        "encoded_value%0#0",
        "game_state#0",
        "encoded_bool%0#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0",
        "game_state#0 (copy)"
      ]
    },
    "834": {
      "error": "Index access is out of bounds",
      "op": "extract 6 8 // on error: Index access is out of bounds",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "game_state#0",
        "encoded_bool%0#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0"
      ]
    },
    "837": {
      "op": "dig 6",
      "stack_out": [
        "encoded_value%0#0",
        "game_state#0",
        "encoded_bool%0#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0",
        "game_state#0 (copy)"
      ]
    },
    "839": {
      "error": "Index access is out of bounds",
      "op": "extract 14 8 // on error: Index access is out of bounds",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "game_state#0",
        "encoded_bool%0#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "842": {
      "op": "dig 7",
      "stack_out": [
        "encoded_value%0#0",
        "game_state#0",
        "encoded_bool%0#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "game_state#0 (copy)"
      ]
    },
    "844": {
      "error": "Index access is out of bounds",
      "op": "extract 22 32 // on error: Index access is out of bounds",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "game_state#0",
        "encoded_bool%0#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0"
      ]
    },
    "847": {
      "op": "uncover 8",
      "stack_out": [
        "encoded_value%0#0",
        "encoded_bool%0#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "game_state#0"
      ]
    },
    "849": {
      "error": "Index access is out of bounds",
      "op": "extract 54 32 // on error: Index access is out of bounds",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_bool%0#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0"
      ]
    },
    "852": {
      "op": "uncover 9",
      "stack_out": [
        "encoded_bool%0#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0",
        "encoded_value%0#0"
      ]
    },
    "854": {
      "op": "uncover 9",
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0",
        "encoded_value%0#0",
        "encoded_bool%0#0"
      ]
    },
    "856": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "857": {
      "op": "uncover 8",
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0",
        "encoded_tuple_buffer%2#0",
        "tmp%0#0"
      ]
    },
    "859": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "860": {
      "op": "uncover 7",
      "stack_out": [
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0",
        "encoded_tuple_buffer%3#0",
        "tmp%1#0"
      ]
    },
    "862": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%4#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "863": {
      "op": "uncover 6",
      "stack_out": [
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0",
        "encoded_tuple_buffer%4#0",
        "tmp%2#0"
      ]
    },
    "865": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%5#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "866": {
      "op": "uncover 5",
      "stack_out": [
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0",
        "encoded_tuple_buffer%5#0",
        "tmp%3#0"
      ]
    },
    "868": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%6#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "869": {
      "op": "uncover 4",
      "stack_out": [
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0",
        "encoded_tuple_buffer%6#0",
        "tmp%4#0"
      ]
    },
    "871": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%7#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "872": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%6#0",
        "tmp%7#0",
        "encoded_tuple_buffer%7#0",
        "tmp%5#0"
      ]
    },
    "874": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%8#0",
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "tmp%7#0",
        "encoded_tuple_buffer%8#0"
      ]
    },
    "875": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%7#0",
        "encoded_tuple_buffer%8#0",
        "tmp%6#0"
      ]
    },
    "877": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%9#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "encoded_tuple_buffer%9#0"
      ]
    },
    "878": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%9#0",
        "tmp%7#0"
      ]
    },
    "879": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%10#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%10#0"
      ]
    },
    "880": {
      "retsub": true,
      "op": "retsub"
    },
    "881": {
      "subroutine": "smart_contracts.pieout.contract.Pieout.read_game_players",
      "params": {
        "game_id#0": "uint64"
      },
      "block": "read_game_players",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "884": {
      "op": "intc_1 // 0",
      "stack_out": [
        "player_addr_bytes#0"
      ]
    },
    "885": {
      "op": "dup",
      "stack_out": [
        "player_addr_bytes#0",
        "players#9"
      ]
    },
    "886": {
      "op": "frame_dig -1",
      "defined_out": [
        "game_id#0 (copy)"
      ],
      "stack_out": [
        "player_addr_bytes#0",
        "players#9",
        "game_id#0 (copy)"
      ]
    },
    "888": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "player_addr_bytes#0",
        "players#9",
        "encoded_value%0#0"
      ]
    },
    "889": {
      "op": "bytec_1 // \"p_\"",
      "defined_out": [
        "\"p_\"",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "player_addr_bytes#0",
        "players#9",
        "encoded_value%0#0",
        "\"p_\""
      ]
    },
    "890": {
      "op": "swap",
      "stack_out": [
        "player_addr_bytes#0",
        "players#9",
        "\"p_\"",
        "encoded_value%0#0"
      ]
    },
    "891": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "player_addr_bytes#0",
        "players#9",
        "box_prefixed_key%0#0"
      ]
    },
    "892": {
      "op": "box_get",
      "defined_out": [
        "game_players#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "player_addr_bytes#0",
        "players#9",
        "game_players#0",
        "maybe_exists%0#0"
      ]
    },
    "893": {
      "op": "swap",
      "stack_out": [
        "player_addr_bytes#0",
        "players#9",
        "maybe_exists%0#0",
        "game_players#0"
      ]
    },
    "894": {
      "op": "dup",
      "stack_out": [
        "player_addr_bytes#0",
        "players#9",
        "maybe_exists%0#0",
        "game_players#0",
        "game_players#0 (copy)"
      ]
    },
    "895": {
      "op": "uncover 2",
      "defined_out": [
        "game_players#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "player_addr_bytes#0",
        "players#9",
        "game_players#0",
        "game_players#0",
        "maybe_exists%0#0"
      ]
    },
    "897": {
      "error": "check self.box_game_players entry exists",
      "op": "assert // check self.box_game_players entry exists",
      "stack_out": [
        "player_addr_bytes#0",
        "players#9",
        "game_players#0",
        "game_players#0"
      ]
    },
    "898": {
      "op": "pushbytes 0x0000",
      "defined_out": [
        "game_players#0",
        "players#0"
      ],
      "stack_out": [
        "player_addr_bytes#0",
        "players#9",
        "game_players#0",
        "game_players#0",
        "players#0"
      ]
    },
    "902": {
      "op": "swap",
      "stack_out": [
        "player_addr_bytes#0",
        "players#9",
        "game_players#0",
        "players#0",
        "game_players#0"
      ]
    },
    "903": {
      "op": "len",
      "defined_out": [
        "game_players#0",
        "players#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "player_addr_bytes#0",
        "players#9",
        "game_players#0",
        "players#0",
        "tmp%0#0"
      ]
    },
    "904": {
      "op": "intc_1 // 0",
      "defined_out": [
        "game_players#0",
        "i#0",
        "players#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "player_addr_bytes#0",
        "players#9",
        "game_players#0",
        "players#0",
        "tmp%0#0",
        "i#0"
      ]
    },
    "905": {
      "block": "read_game_players_for_header@1",
      "stack_in": [
        "player_addr_bytes#0",
        "players#9",
        "game_players#0",
        "players#0",
        "tmp%0#0",
        "i#0"
      ],
      "op": "frame_dig 5",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "player_addr_bytes#0",
        "players#9",
        "game_players#0",
        "players#0",
        "tmp%0#0",
        "i#0",
        "i#0"
      ]
    },
    "907": {
      "op": "frame_dig 4",
      "defined_out": [
        "i#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "player_addr_bytes#0",
        "players#9",
        "game_players#0",
        "players#0",
        "tmp%0#0",
        "i#0",
        "i#0",
        "tmp%0#0"
      ]
    },
    "909": {
      "op": "<",
      "defined_out": [
        "continue_looping%0#0",
        "i#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "player_addr_bytes#0",
        "players#9",
        "game_players#0",
        "players#0",
        "tmp%0#0",
        "i#0",
        "continue_looping%0#0"
      ]
    },
    "910": {
      "op": "bz read_game_players_after_for@6",
      "stack_out": [
        "player_addr_bytes#0",
        "players#9",
        "game_players#0",
        "players#0",
        "tmp%0#0",
        "i#0"
      ]
    },
    "913": {
      "op": "frame_dig 2",
      "defined_out": [
        "game_players#0",
        "i#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "player_addr_bytes#0",
        "players#9",
        "game_players#0",
        "players#0",
        "tmp%0#0",
        "i#0",
        "game_players#0"
      ]
    },
    "915": {
      "op": "frame_dig 5",
      "stack_out": [
        "player_addr_bytes#0",
        "players#9",
        "game_players#0",
        "players#0",
        "tmp%0#0",
        "i#0",
        "game_players#0",
        "i#0"
      ]
    },
    "917": {
      "op": "intc_3 // 32",
      "defined_out": [
        "32",
        "game_players#0",
        "i#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "player_addr_bytes#0",
        "players#9",
        "game_players#0",
        "players#0",
        "tmp%0#0",
        "i#0",
        "game_players#0",
        "i#0",
        "32"
      ]
    },
    "918": {
      "op": "extract3",
      "defined_out": [
        "game_players#0",
        "i#0",
        "player_addr_bytes#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "player_addr_bytes#0",
        "players#9",
        "game_players#0",
        "players#0",
        "tmp%0#0",
        "i#0",
        "player_addr_bytes#0"
      ]
    },
    "919": {
      "op": "dup",
      "stack_out": [
        "player_addr_bytes#0",
        "players#9",
        "game_players#0",
        "players#0",
        "tmp%0#0",
        "i#0",
        "player_addr_bytes#0",
        "player_addr_bytes#0"
      ]
    },
    "920": {
      "op": "frame_bury 0",
      "defined_out": [
        "game_players#0",
        "i#0",
        "player_addr_bytes#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "player_addr_bytes#0",
        "players#9",
        "game_players#0",
        "players#0",
        "tmp%0#0",
        "i#0",
        "player_addr_bytes#0"
      ]
    },
    "922": {
      "op": "bytec 9 // 0x0000000000000000000000000000000000000000000000000000000000000000",
      "defined_out": [
        "0x0000000000000000000000000000000000000000000000000000000000000000",
        "game_players#0",
        "i#0",
        "player_addr_bytes#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "player_addr_bytes#0",
        "players#9",
        "game_players#0",
        "players#0",
        "tmp%0#0",
        "i#0",
        "player_addr_bytes#0",
        "0x0000000000000000000000000000000000000000000000000000000000000000"
      ]
    },
    "924": {
      "op": "!=",
      "defined_out": [
        "game_players#0",
        "i#0",
        "player_addr_bytes#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "player_addr_bytes#0",
        "players#9",
        "game_players#0",
        "players#0",
        "tmp%0#0",
        "i#0",
        "tmp%1#0"
      ]
    },
    "925": {
      "op": "frame_dig 3",
      "defined_out": [
        "game_players#0",
        "i#0",
        "player_addr_bytes#0",
        "players#9",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "player_addr_bytes#0",
        "players#9",
        "game_players#0",
        "players#0",
        "tmp%0#0",
        "i#0",
        "tmp%1#0",
        "players#9"
      ]
    },
    "927": {
      "op": "frame_bury 1",
      "defined_out": [
        "game_players#0",
        "i#0",
        "player_addr_bytes#0",
        "players#9",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "player_addr_bytes#0",
        "players#9",
        "game_players#0",
        "players#0",
        "tmp%0#0",
        "i#0",
        "tmp%1#0"
      ]
    },
    "929": {
      "op": "bz read_game_players_after_if_else@4",
      "stack_out": [
        "player_addr_bytes#0",
        "players#9",
        "game_players#0",
        "players#0",
        "tmp%0#0",
        "i#0"
      ]
    },
    "932": {
      "op": "frame_dig 3",
      "defined_out": [
        "game_players#0",
        "i#0",
        "player_addr_bytes#0",
        "players#0",
        "players#9",
        "tmp%0#0"
      ],
      "stack_out": [
        "player_addr_bytes#0",
        "players#9",
        "game_players#0",
        "players#0",
        "tmp%0#0",
        "i#0",
        "players#0"
      ]
    },
    "934": {
      "op": "extract 2 0",
      "defined_out": [
        "expr_value_trimmed%0#0",
        "game_players#0",
        "i#0",
        "player_addr_bytes#0",
        "players#0",
        "players#9",
        "tmp%0#0"
      ],
      "stack_out": [
        "player_addr_bytes#0",
        "players#9",
        "game_players#0",
        "players#0",
        "tmp%0#0",
        "i#0",
        "expr_value_trimmed%0#0"
      ]
    },
    "937": {
      "op": "frame_dig 0",
      "stack_out": [
        "player_addr_bytes#0",
        "players#9",
        "game_players#0",
        "players#0",
        "tmp%0#0",
        "i#0",
        "expr_value_trimmed%0#0",
        "player_addr_bytes#0"
      ]
    },
    "939": {
      "op": "concat",
      "defined_out": [
        "concatenated%0#0",
        "game_players#0",
        "i#0",
        "player_addr_bytes#0",
        "players#0",
        "players#9",
        "tmp%0#0"
      ],
      "stack_out": [
        "player_addr_bytes#0",
        "players#9",
        "game_players#0",
        "players#0",
        "tmp%0#0",
        "i#0",
        "concatenated%0#0"
      ]
    },
    "940": {
      "op": "dup",
      "defined_out": [
        "concatenated%0#0",
        "concatenated%0#0 (copy)",
        "game_players#0",
        "i#0",
        "player_addr_bytes#0",
        "players#0",
        "players#9",
        "tmp%0#0"
      ],
      "stack_out": [
        "player_addr_bytes#0",
        "players#9",
        "game_players#0",
        "players#0",
        "tmp%0#0",
        "i#0",
        "concatenated%0#0",
        "concatenated%0#0 (copy)"
      ]
    },
    "941": {
      "op": "len",
      "defined_out": [
        "byte_len%0#0",
        "concatenated%0#0",
        "game_players#0",
        "i#0",
        "player_addr_bytes#0",
        "players#0",
        "players#9",
        "tmp%0#0"
      ],
      "stack_out": [
        "player_addr_bytes#0",
        "players#9",
        "game_players#0",
        "players#0",
        "tmp%0#0",
        "i#0",
        "concatenated%0#0",
        "byte_len%0#0"
      ]
    },
    "942": {
      "op": "intc_3 // 32",
      "stack_out": [
        "player_addr_bytes#0",
        "players#9",
        "game_players#0",
        "players#0",
        "tmp%0#0",
        "i#0",
        "concatenated%0#0",
        "byte_len%0#0",
        "32"
      ]
    },
    "943": {
      "op": "/",
      "defined_out": [
        "concatenated%0#0",
        "game_players#0",
        "i#0",
        "len_%0#0",
        "player_addr_bytes#0",
        "players#0",
        "players#9",
        "tmp%0#0"
      ],
      "stack_out": [
        "player_addr_bytes#0",
        "players#9",
        "game_players#0",
        "players#0",
        "tmp%0#0",
        "i#0",
        "concatenated%0#0",
        "len_%0#0"
      ]
    },
    "944": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "concatenated%0#0",
        "game_players#0",
        "i#0",
        "player_addr_bytes#0",
        "players#0",
        "players#9",
        "tmp%0#0"
      ],
      "stack_out": [
        "player_addr_bytes#0",
        "players#9",
        "game_players#0",
        "players#0",
        "tmp%0#0",
        "i#0",
        "concatenated%0#0",
        "as_bytes%0#0"
      ]
    },
    "945": {
      "op": "extract 6 2",
      "defined_out": [
        "concatenated%0#0",
        "game_players#0",
        "i#0",
        "len_16_bit%0#0",
        "player_addr_bytes#0",
        "players#0",
        "players#9",
        "tmp%0#0"
      ],
      "stack_out": [
        "player_addr_bytes#0",
        "players#9",
        "game_players#0",
        "players#0",
        "tmp%0#0",
        "i#0",
        "concatenated%0#0",
        "len_16_bit%0#0"
      ]
    },
    "948": {
      "op": "swap",
      "stack_out": [
        "player_addr_bytes#0",
        "players#9",
        "game_players#0",
        "players#0",
        "tmp%0#0",
        "i#0",
        "len_16_bit%0#0",
        "concatenated%0#0"
      ]
    },
    "949": {
      "op": "concat",
      "stack_out": [
        "player_addr_bytes#0",
        "players#9",
        "game_players#0",
        "players#0",
        "tmp%0#0",
        "i#0",
        "players#9"
      ]
    },
    "950": {
      "op": "frame_bury 1",
      "stack_out": [
        "player_addr_bytes#0",
        "players#9",
        "game_players#0",
        "players#0",
        "tmp%0#0",
        "i#0"
      ]
    },
    "952": {
      "block": "read_game_players_after_if_else@4",
      "stack_in": [
        "player_addr_bytes#0",
        "players#9",
        "game_players#0",
        "players#0",
        "tmp%0#0",
        "i#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "players#0"
      ],
      "stack_out": [
        "player_addr_bytes#0",
        "players#9",
        "game_players#0",
        "players#0",
        "tmp%0#0",
        "i#0",
        "players#0"
      ]
    },
    "954": {
      "op": "frame_bury 3",
      "defined_out": [
        "players#0"
      ],
      "stack_out": [
        "player_addr_bytes#0",
        "players#9",
        "game_players#0",
        "players#0",
        "tmp%0#0",
        "i#0"
      ]
    },
    "956": {
      "op": "frame_dig 5",
      "defined_out": [
        "i#0",
        "players#0"
      ],
      "stack_out": [
        "player_addr_bytes#0",
        "players#9",
        "game_players#0",
        "players#0",
        "tmp%0#0",
        "i#0",
        "i#0"
      ]
    },
    "958": {
      "op": "intc_3 // 32",
      "defined_out": [
        "32",
        "i#0",
        "players#0"
      ],
      "stack_out": [
        "player_addr_bytes#0",
        "players#9",
        "game_players#0",
        "players#0",
        "tmp%0#0",
        "i#0",
        "i#0",
        "32"
      ]
    },
    "959": {
      "op": "+",
      "stack_out": [
        "player_addr_bytes#0",
        "players#9",
        "game_players#0",
        "players#0",
        "tmp%0#0",
        "i#0",
        "i#0"
      ]
    },
    "960": {
      "op": "frame_bury 5",
      "defined_out": [
        "i#0",
        "players#0"
      ],
      "stack_out": [
        "player_addr_bytes#0",
        "players#9",
        "game_players#0",
        "players#0",
        "tmp%0#0",
        "i#0"
      ]
    },
    "962": {
      "op": "b read_game_players_for_header@1"
    },
    "965": {
      "block": "read_game_players_after_for@6",
      "stack_in": [
        "player_addr_bytes#0",
        "players#9",
        "game_players#0",
        "players#0",
        "tmp%0#0",
        "i#0"
      ],
      "op": "frame_dig 3",
      "defined_out": [
        "players#0"
      ],
      "stack_out": [
        "player_addr_bytes#0",
        "players#9",
        "game_players#0",
        "players#0",
        "tmp%0#0",
        "i#0",
        "players#0"
      ]
    },
    "967": {
      "op": "frame_bury 0"
    },
    "969": {
      "retsub": true,
      "op": "retsub"
    },
    "970": {
      "subroutine": "smart_contracts.pieout.contract.Pieout.generate",
      "params": {},
      "block": "generate",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "972": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "974": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "975": {
      "error": "Transaction sender address must match application creator address.",
      "op": "assert // Transaction sender address must match application creator address.",
      "stack_out": []
    },
    "976": {
      "op": "bytec 4 // \"game_id\"",
      "defined_out": [
        "\"game_id\""
      ],
      "stack_out": [
        "\"game_id\""
      ]
    },
    "978": {
      "op": "intc_1 // 0",
      "defined_out": [
        "\"game_id\"",
        "0"
      ],
      "stack_out": [
        "\"game_id\"",
        "0"
      ]
    },
    "979": {
      "op": "app_global_put",
      "stack_out": []
    },
    "980": {
      "op": "bytec 7 // \"commit_rand_salt_id\"",
      "defined_out": [
        "\"commit_rand_salt_id\""
      ],
      "stack_out": [
        "\"commit_rand_salt_id\""
      ]
    },
    "982": {
      "op": "intc_1 // 0",
      "stack_out": [
        "\"commit_rand_salt_id\"",
        "0"
      ]
    },
    "983": {
      "op": "app_global_put",
      "stack_out": []
    },
    "984": {
      "op": "bytec 8 // \"top_score\"",
      "defined_out": [
        "\"top_score\""
      ],
      "stack_out": [
        "\"top_score\""
      ]
    },
    "986": {
      "op": "intc_1 // 0",
      "stack_out": [
        "\"top_score\"",
        "0"
      ]
    },
    "987": {
      "op": "app_global_put",
      "stack_out": []
    },
    "988": {
      "op": "bytec 10 // \"top_score_address\"",
      "defined_out": [
        "\"top_score_address\""
      ],
      "stack_out": [
        "\"top_score_address\""
      ]
    },
    "990": {
      "op": "global ZeroAddress",
      "defined_out": [
        "\"top_score_address\"",
        "materialized_values%0#0"
      ],
      "stack_out": [
        "\"top_score_address\"",
        "materialized_values%0#0"
      ]
    },
    "992": {
      "op": "app_global_put",
      "stack_out": []
    },
    "993": {
      "retsub": true,
      "op": "retsub"
    },
    "994": {
      "subroutine": "smart_contracts.pieout.contract.Pieout.new_game",
      "params": {
        "max_players#0": "uint64",
        "box_s_pay#0": "uint64",
        "box_c_pay#0": "uint64",
        "box_p_pay#0": "uint64",
        "stake_pay#0": "uint64"
      },
      "block": "new_game",
      "stack_in": [],
      "op": "proto 5 0"
    },
    "997": {
      "op": "global GroupSize",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "999": {
      "op": "pushint 5 // 5",
      "defined_out": [
        "5",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "5"
      ]
    },
    "1001": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1002": {
      "error": "Invalid group size. Ensure number of transaction in group is within bounds.",
      "op": "assert // Invalid group size. Ensure number of transaction in group is within bounds.",
      "stack_out": []
    },
    "1003": {
      "op": "frame_dig -5",
      "defined_out": [
        "max_players#0 (copy)"
      ],
      "stack_out": [
        "max_players#0 (copy)"
      ]
    },
    "1005": {
      "op": "pushint 10 // 10",
      "defined_out": [
        "10",
        "max_players#0 (copy)"
      ],
      "stack_out": [
        "max_players#0 (copy)",
        "10"
      ]
    },
    "1007": {
      "op": "<=",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1008": {
      "error": "Player cap overflow. Max players limit must not be exceeded.",
      "op": "assert // Player cap overflow. Max players limit must not be exceeded.",
      "stack_out": []
    },
    "1009": {
      "op": "frame_dig -1",
      "defined_out": [
        "stake_pay#0 (copy)"
      ],
      "stack_out": [
        "stake_pay#0 (copy)"
      ]
    },
    "1011": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1013": {
      "op": "dup",
      "defined_out": [
        "tmp%3#0",
        "tmp%3#0 (copy)"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%3#0 (copy)"
      ]
    },
    "1014": {
      "op": "intc 5 // 1000",
      "defined_out": [
        "1000",
        "tmp%3#0",
        "tmp%3#0 (copy)"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%3#0 (copy)",
        "1000"
      ]
    },
    "1016": {
      "op": ">=",
      "defined_out": [
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%4#0"
      ]
    },
    "1017": {
      "error": "Insufficient funds. Stake pay amount is not enough to cover application MBR.",
      "op": "assert // Insufficient funds. Stake pay amount is not enough to cover application MBR.",
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1018": {
      "op": "frame_dig -4",
      "defined_out": [
        "box_s_pay#0 (copy)",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "box_s_pay#0 (copy)"
      ]
    },
    "1020": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%5#0"
      ]
    },
    "1022": {
      "op": "intc 10 // 40900",
      "defined_out": [
        "40900",
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%5#0",
        "40900"
      ]
    },
    "1024": {
      "op": ">=",
      "defined_out": [
        "tmp%3#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%6#0"
      ]
    },
    "1025": {
      "error": "Insufficient funds. Box pay amount is not enough to cover application MBR.",
      "op": "assert // Insufficient funds. Box pay amount is not enough to cover application MBR.",
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1026": {
      "op": "frame_dig -3",
      "defined_out": [
        "box_c_pay#0 (copy)",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "box_c_pay#0 (copy)"
      ]
    },
    "1028": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%3#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%7#0"
      ]
    },
    "1030": {
      "op": "intc 6 // 19300",
      "defined_out": [
        "19300",
        "tmp%3#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%7#0",
        "19300"
      ]
    },
    "1032": {
      "op": ">=",
      "defined_out": [
        "tmp%3#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%8#0"
      ]
    },
    "1033": {
      "error": "Insufficient funds. Box pay amount is not enough to cover application MBR.",
      "op": "assert // Insufficient funds. Box pay amount is not enough to cover application MBR.",
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1034": {
      "op": "frame_dig -2",
      "defined_out": [
        "box_p_pay#0 (copy)",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "box_p_pay#0 (copy)"
      ]
    },
    "1036": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%3#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%9#0"
      ]
    },
    "1038": {
      "op": "intc_3 // 32",
      "defined_out": [
        "32",
        "tmp%3#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%9#0",
        "32"
      ]
    },
    "1039": {
      "op": "frame_dig -5",
      "stack_out": [
        "tmp%3#0",
        "tmp%9#0",
        "32",
        "max_players#0 (copy)"
      ]
    },
    "1041": {
      "op": "*",
      "defined_out": [
        "tmp%3#0",
        "tmp%9#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%9#0",
        "to_encode%0#0"
      ]
    },
    "1042": {
      "op": "dup",
      "defined_out": [
        "tmp%3#0",
        "tmp%9#0",
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%9#0",
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ]
    },
    "1043": {
      "op": "itob",
      "defined_out": [
        "tmp%3#0",
        "tmp%9#0",
        "to_encode%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%9#0",
        "to_encode%0#0",
        "val_as_bytes%0#0"
      ]
    },
    "1044": {
      "op": "dup",
      "defined_out": [
        "tmp%3#0",
        "tmp%9#0",
        "to_encode%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%9#0",
        "to_encode%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%0#0 (copy)"
      ]
    },
    "1045": {
      "op": "bitlen",
      "defined_out": [
        "bitlen%0#0",
        "tmp%3#0",
        "tmp%9#0",
        "to_encode%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%9#0",
        "to_encode%0#0",
        "val_as_bytes%0#0",
        "bitlen%0#0"
      ]
    },
    "1046": {
      "op": "pushint 16 // 16",
      "defined_out": [
        "16",
        "bitlen%0#0",
        "tmp%3#0",
        "tmp%9#0",
        "to_encode%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%9#0",
        "to_encode%0#0",
        "val_as_bytes%0#0",
        "bitlen%0#0",
        "16"
      ]
    },
    "1048": {
      "op": "<=",
      "defined_out": [
        "no_overflow%0#0",
        "tmp%3#0",
        "tmp%9#0",
        "to_encode%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%9#0",
        "to_encode%0#0",
        "val_as_bytes%0#0",
        "no_overflow%0#0"
      ]
    },
    "1049": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "tmp%3#0",
        "tmp%9#0",
        "to_encode%0#0",
        "val_as_bytes%0#0"
      ]
    },
    "1050": {
      "op": "extract 6 2",
      "defined_out": [
        "tmp%3#0",
        "tmp%9#0",
        "to_encode%0#0",
        "uint16%0#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%9#0",
        "to_encode%0#0",
        "uint16%0#0"
      ]
    },
    "1053": {
      "op": "pushbytes 0x0a",
      "defined_out": [
        "0x0a",
        "tmp%3#0",
        "tmp%9#0",
        "to_encode%0#0",
        "uint16%0#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%9#0",
        "to_encode%0#0",
        "uint16%0#0",
        "0x0a"
      ]
    },
    "1056": {
      "op": "swap",
      "stack_out": [
        "tmp%3#0",
        "tmp%9#0",
        "to_encode%0#0",
        "0x0a",
        "uint16%0#0"
      ]
    },
    "1057": {
      "callsub": "smart_contracts.pieout.contract.Pieout.calc_single_box_fee",
      "op": "callsub calc_single_box_fee",
      "defined_out": [
        "tmp%10#0",
        "tmp%3#0",
        "tmp%9#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%9#0",
        "to_encode%0#0",
        "tmp%10#0"
      ]
    },
    "1060": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%3#0",
        "to_encode%0#0",
        "tmp%10#0",
        "tmp%9#0"
      ]
    },
    "1062": {
      "op": "<=",
      "defined_out": [
        "tmp%11#0",
        "tmp%3#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "to_encode%0#0",
        "tmp%11#0"
      ]
    },
    "1063": {
      "error": "Insufficient funds. Box pay amount is not enough to cover application MBR.",
      "op": "assert // Insufficient funds. Box pay amount is not enough to cover application MBR.",
      "stack_out": [
        "tmp%3#0",
        "to_encode%0#0"
      ]
    },
    "1064": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%3#0",
        "to_encode%0#0",
        "stake_pay#0 (copy)"
      ]
    },
    "1066": {
      "op": "gtxns Sender",
      "defined_out": [
        "tmp%12#0",
        "tmp%3#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "to_encode%0#0",
        "tmp%12#0"
      ]
    },
    "1068": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%12#0",
        "tmp%13#0",
        "tmp%3#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "to_encode%0#0",
        "tmp%12#0",
        "tmp%13#0"
      ]
    },
    "1070": {
      "op": "==",
      "defined_out": [
        "tmp%14#0",
        "tmp%3#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "to_encode%0#0",
        "tmp%14#0"
      ]
    },
    "1071": {
      "error": "Stake payment sender address must match transaction sender address.",
      "op": "assert // Stake payment sender address must match transaction sender address.",
      "stack_out": [
        "tmp%3#0",
        "to_encode%0#0"
      ]
    },
    "1072": {
      "op": "frame_dig -4",
      "stack_out": [
        "tmp%3#0",
        "to_encode%0#0",
        "box_s_pay#0 (copy)"
      ]
    },
    "1074": {
      "op": "gtxns Sender",
      "defined_out": [
        "tmp%15#0",
        "tmp%3#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "to_encode%0#0",
        "tmp%15#0"
      ]
    },
    "1076": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%15#0",
        "tmp%16#0",
        "tmp%3#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "to_encode%0#0",
        "tmp%15#0",
        "tmp%16#0"
      ]
    },
    "1078": {
      "op": "==",
      "defined_out": [
        "tmp%17#0",
        "tmp%3#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "to_encode%0#0",
        "tmp%17#0"
      ]
    },
    "1079": {
      "error": "Box payment sender address must match transaction sender address.",
      "op": "assert // Box payment sender address must match transaction sender address.",
      "stack_out": [
        "tmp%3#0",
        "to_encode%0#0"
      ]
    },
    "1080": {
      "op": "frame_dig -3",
      "stack_out": [
        "tmp%3#0",
        "to_encode%0#0",
        "box_c_pay#0 (copy)"
      ]
    },
    "1082": {
      "op": "gtxns Sender",
      "defined_out": [
        "tmp%18#0",
        "tmp%3#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "to_encode%0#0",
        "tmp%18#0"
      ]
    },
    "1084": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%18#0",
        "tmp%19#0",
        "tmp%3#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "to_encode%0#0",
        "tmp%18#0",
        "tmp%19#0"
      ]
    },
    "1086": {
      "op": "==",
      "defined_out": [
        "tmp%20#0",
        "tmp%3#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "to_encode%0#0",
        "tmp%20#0"
      ]
    },
    "1087": {
      "error": "Box payment sender address must match transaction sender address.",
      "op": "assert // Box payment sender address must match transaction sender address.",
      "stack_out": [
        "tmp%3#0",
        "to_encode%0#0"
      ]
    },
    "1088": {
      "op": "frame_dig -2",
      "stack_out": [
        "tmp%3#0",
        "to_encode%0#0",
        "box_p_pay#0 (copy)"
      ]
    },
    "1090": {
      "op": "gtxns Sender",
      "defined_out": [
        "tmp%21#0",
        "tmp%3#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "to_encode%0#0",
        "tmp%21#0"
      ]
    },
    "1092": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%21#0",
        "tmp%22#0",
        "tmp%3#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "to_encode%0#0",
        "tmp%21#0",
        "tmp%22#0"
      ]
    },
    "1094": {
      "op": "==",
      "defined_out": [
        "tmp%23#0",
        "tmp%3#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "to_encode%0#0",
        "tmp%23#0"
      ]
    },
    "1095": {
      "error": "Box payment sender address must match transaction sender address.",
      "op": "assert // Box payment sender address must match transaction sender address.",
      "stack_out": [
        "tmp%3#0",
        "to_encode%0#0"
      ]
    },
    "1096": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%3#0",
        "to_encode%0#0",
        "stake_pay#0 (copy)"
      ]
    },
    "1098": {
      "op": "gtxns Receiver",
      "defined_out": [
        "tmp%24#0",
        "tmp%3#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "to_encode%0#0",
        "tmp%24#0"
      ]
    },
    "1100": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%24#0",
        "tmp%25#0",
        "tmp%3#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "to_encode%0#0",
        "tmp%24#0",
        "tmp%25#0"
      ]
    },
    "1102": {
      "op": "==",
      "defined_out": [
        "tmp%26#0",
        "tmp%3#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "to_encode%0#0",
        "tmp%26#0"
      ]
    },
    "1103": {
      "error": "Stake payment reciever address must match application address.",
      "op": "assert // Stake payment reciever address must match application address.",
      "stack_out": [
        "tmp%3#0",
        "to_encode%0#0"
      ]
    },
    "1104": {
      "op": "frame_dig -4",
      "stack_out": [
        "tmp%3#0",
        "to_encode%0#0",
        "box_s_pay#0 (copy)"
      ]
    },
    "1106": {
      "op": "gtxns Receiver",
      "defined_out": [
        "tmp%27#0",
        "tmp%3#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "to_encode%0#0",
        "tmp%27#0"
      ]
    },
    "1108": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%27#0",
        "tmp%28#0",
        "tmp%3#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "to_encode%0#0",
        "tmp%27#0",
        "tmp%28#0"
      ]
    },
    "1110": {
      "op": "==",
      "defined_out": [
        "tmp%29#0",
        "tmp%3#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "to_encode%0#0",
        "tmp%29#0"
      ]
    },
    "1111": {
      "error": "Box payment reciever address must match application address.",
      "op": "assert // Box payment reciever address must match application address.",
      "stack_out": [
        "tmp%3#0",
        "to_encode%0#0"
      ]
    },
    "1112": {
      "op": "frame_dig -3",
      "stack_out": [
        "tmp%3#0",
        "to_encode%0#0",
        "box_c_pay#0 (copy)"
      ]
    },
    "1114": {
      "op": "gtxns Receiver",
      "defined_out": [
        "tmp%3#0",
        "tmp%30#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "to_encode%0#0",
        "tmp%30#0"
      ]
    },
    "1116": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%3#0",
        "tmp%30#0",
        "tmp%31#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "to_encode%0#0",
        "tmp%30#0",
        "tmp%31#0"
      ]
    },
    "1118": {
      "op": "==",
      "defined_out": [
        "tmp%3#0",
        "tmp%32#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "to_encode%0#0",
        "tmp%32#0"
      ]
    },
    "1119": {
      "error": "Box payment reciever address must match application address.",
      "op": "assert // Box payment reciever address must match application address.",
      "stack_out": [
        "tmp%3#0",
        "to_encode%0#0"
      ]
    },
    "1120": {
      "op": "frame_dig -2",
      "stack_out": [
        "tmp%3#0",
        "to_encode%0#0",
        "box_p_pay#0 (copy)"
      ]
    },
    "1122": {
      "op": "gtxns Receiver",
      "defined_out": [
        "tmp%3#0",
        "tmp%33#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "to_encode%0#0",
        "tmp%33#0"
      ]
    },
    "1124": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%3#0",
        "tmp%33#0",
        "tmp%34#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "to_encode%0#0",
        "tmp%33#0",
        "tmp%34#0"
      ]
    },
    "1126": {
      "op": "==",
      "defined_out": [
        "tmp%3#0",
        "tmp%35#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "to_encode%0#0",
        "tmp%35#0"
      ]
    },
    "1127": {
      "error": "Box payment reciever address must match application address.",
      "op": "assert // Box payment reciever address must match application address.",
      "stack_out": [
        "tmp%3#0",
        "to_encode%0#0"
      ]
    },
    "1128": {
      "op": "frame_dig -5",
      "stack_out": [
        "tmp%3#0",
        "to_encode%0#0",
        "max_players#0 (copy)"
      ]
    },
    "1130": {
      "op": "itob",
      "defined_out": [
        "tmp%3#0",
        "to_encode%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "to_encode%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "1131": {
      "op": "dup",
      "defined_out": [
        "tmp%3#0",
        "to_encode%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%1#0 (copy)"
      ],
      "stack_out": [
        "tmp%3#0",
        "to_encode%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%1#0 (copy)"
      ]
    },
    "1132": {
      "op": "bitlen",
      "defined_out": [
        "bitlen%1#0",
        "tmp%3#0",
        "to_encode%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "to_encode%0#0",
        "val_as_bytes%1#0",
        "bitlen%1#0"
      ]
    },
    "1133": {
      "op": "pushint 8 // 8",
      "defined_out": [
        "8",
        "bitlen%1#0",
        "tmp%3#0",
        "to_encode%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "to_encode%0#0",
        "val_as_bytes%1#0",
        "bitlen%1#0",
        "8"
      ]
    },
    "1135": {
      "op": "<=",
      "defined_out": [
        "no_overflow%1#0",
        "tmp%3#0",
        "to_encode%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "to_encode%0#0",
        "val_as_bytes%1#0",
        "no_overflow%1#0"
      ]
    },
    "1136": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "tmp%3#0",
        "to_encode%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "1137": {
      "op": "extract 7 1",
      "defined_out": [
        "tmp%3#0",
        "to_encode%0#0",
        "uint8%0#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "to_encode%0#0",
        "uint8%0#0"
      ]
    },
    "1140": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "tmp%3#0",
        "tmp%36#0",
        "to_encode%0#0",
        "uint8%0#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "to_encode%0#0",
        "uint8%0#0",
        "tmp%36#0"
      ]
    },
    "1142": {
      "op": "intc 4 // 3600",
      "defined_out": [
        "3600",
        "tmp%3#0",
        "tmp%36#0",
        "to_encode%0#0",
        "uint8%0#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "to_encode%0#0",
        "uint8%0#0",
        "tmp%36#0",
        "3600"
      ]
    },
    "1144": {
      "op": "+",
      "defined_out": [
        "tmp%3#0",
        "to_encode%0#0",
        "to_encode%1#0",
        "uint8%0#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "to_encode%0#0",
        "uint8%0#0",
        "to_encode%1#0"
      ]
    },
    "1145": {
      "op": "itob",
      "defined_out": [
        "tmp%3#0",
        "to_encode%0#0",
        "uint8%0#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "to_encode%0#0",
        "uint8%0#0",
        "val_as_bytes%2#0"
      ]
    },
    "1146": {
      "op": "uncover 3",
      "stack_out": [
        "to_encode%0#0",
        "uint8%0#0",
        "val_as_bytes%2#0",
        "tmp%3#0"
      ]
    },
    "1148": {
      "op": "itob",
      "defined_out": [
        "to_encode%0#0",
        "uint8%0#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "uint8%0#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ]
    },
    "1149": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%37#0",
        "to_encode%0#0",
        "uint8%0#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "uint8%0#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%37#0"
      ]
    },
    "1151": {
      "op": "global ZeroAddress",
      "defined_out": [
        "tmp%37#0",
        "tmp%38#0",
        "to_encode%0#0",
        "uint8%0#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "uint8%0#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%37#0",
        "tmp%38#0"
      ]
    },
    "1153": {
      "op": "bytec_0 // 0x00",
      "defined_out": [
        "0x00",
        "tmp%37#0",
        "tmp%38#0",
        "to_encode%0#0",
        "uint8%0#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "uint8%0#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%37#0",
        "tmp%38#0",
        "0x00"
      ]
    },
    "1154": {
      "op": "uncover 5",
      "stack_out": [
        "to_encode%0#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%37#0",
        "tmp%38#0",
        "0x00",
        "uint8%0#0"
      ]
    },
    "1156": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%37#0",
        "tmp%38#0",
        "to_encode%0#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%37#0",
        "tmp%38#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "1157": {
      "op": "pushbytes 0x01",
      "defined_out": [
        "0x01",
        "encoded_tuple_buffer%2#0",
        "tmp%37#0",
        "tmp%38#0",
        "to_encode%0#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%37#0",
        "tmp%38#0",
        "encoded_tuple_buffer%2#0",
        "0x01"
      ]
    },
    "1160": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "tmp%37#0",
        "tmp%38#0",
        "to_encode%0#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%37#0",
        "tmp%38#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "1161": {
      "op": "bytec_0 // 0x00",
      "stack_out": [
        "to_encode%0#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%37#0",
        "tmp%38#0",
        "encoded_tuple_buffer%3#0",
        "0x00"
      ]
    },
    "1162": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%4#0",
        "tmp%37#0",
        "tmp%38#0",
        "to_encode%0#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%37#0",
        "tmp%38#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "1163": {
      "op": "bytec 11 // 0x0020",
      "defined_out": [
        "0x0020",
        "encoded_tuple_buffer%4#0",
        "tmp%37#0",
        "tmp%38#0",
        "to_encode%0#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%37#0",
        "tmp%38#0",
        "encoded_tuple_buffer%4#0",
        "0x0020"
      ]
    },
    "1165": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%5#0",
        "tmp%37#0",
        "tmp%38#0",
        "to_encode%0#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%37#0",
        "tmp%38#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "1166": {
      "op": "uncover 4",
      "stack_out": [
        "to_encode%0#0",
        "val_as_bytes%3#0",
        "tmp%37#0",
        "tmp%38#0",
        "encoded_tuple_buffer%5#0",
        "val_as_bytes%2#0"
      ]
    },
    "1168": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%6#0",
        "tmp%37#0",
        "tmp%38#0",
        "to_encode%0#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "val_as_bytes%3#0",
        "tmp%37#0",
        "tmp%38#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "1169": {
      "op": "uncover 3",
      "stack_out": [
        "to_encode%0#0",
        "tmp%37#0",
        "tmp%38#0",
        "encoded_tuple_buffer%6#0",
        "val_as_bytes%3#0"
      ]
    },
    "1171": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%7#0",
        "tmp%37#0",
        "tmp%38#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "tmp%37#0",
        "tmp%38#0",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "1172": {
      "op": "uncover 2",
      "stack_out": [
        "to_encode%0#0",
        "tmp%38#0",
        "encoded_tuple_buffer%7#0",
        "tmp%37#0"
      ]
    },
    "1174": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%8#0",
        "tmp%38#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "tmp%38#0",
        "encoded_tuple_buffer%8#0"
      ]
    },
    "1175": {
      "op": "swap",
      "stack_out": [
        "to_encode%0#0",
        "encoded_tuple_buffer%8#0",
        "tmp%38#0"
      ]
    },
    "1176": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%9#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "encoded_tuple_buffer%9#0"
      ]
    },
    "1177": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "encoded_tuple_buffer%9#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "encoded_tuple_buffer%9#0",
        "0"
      ]
    },
    "1178": {
      "op": "bytec 4 // \"game_id\"",
      "defined_out": [
        "\"game_id\"",
        "0",
        "encoded_tuple_buffer%9#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "encoded_tuple_buffer%9#0",
        "0",
        "\"game_id\""
      ]
    },
    "1180": {
      "op": "app_global_get_ex",
      "defined_out": [
        "encoded_tuple_buffer%9#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "encoded_tuple_buffer%9#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1181": {
      "error": "check self.game_id exists",
      "op": "assert // check self.game_id exists",
      "stack_out": [
        "to_encode%0#0",
        "encoded_tuple_buffer%9#0",
        "maybe_value%0#0"
      ]
    },
    "1182": {
      "op": "itob",
      "defined_out": [
        "encoded_tuple_buffer%9#0",
        "encoded_value%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "encoded_tuple_buffer%9#0",
        "encoded_value%0#0"
      ]
    },
    "1183": {
      "op": "bytec_2 // \"s_\"",
      "defined_out": [
        "\"s_\"",
        "encoded_tuple_buffer%9#0",
        "encoded_value%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "encoded_tuple_buffer%9#0",
        "encoded_value%0#0",
        "\"s_\""
      ]
    },
    "1184": {
      "op": "swap",
      "stack_out": [
        "to_encode%0#0",
        "encoded_tuple_buffer%9#0",
        "\"s_\"",
        "encoded_value%0#0"
      ]
    },
    "1185": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_tuple_buffer%9#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "encoded_tuple_buffer%9#0",
        "box_prefixed_key%0#0"
      ]
    },
    "1186": {
      "op": "swap",
      "stack_out": [
        "to_encode%0#0",
        "box_prefixed_key%0#0",
        "encoded_tuple_buffer%9#0"
      ]
    },
    "1187": {
      "op": "box_put",
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "1188": {
      "op": "bzero",
      "defined_out": [
        "materialized_values%0#0"
      ],
      "stack_out": [
        "materialized_values%0#0"
      ]
    },
    "1189": {
      "op": "intc_1 // 0",
      "stack_out": [
        "materialized_values%0#0",
        "0"
      ]
    },
    "1190": {
      "op": "bytec 4 // \"game_id\"",
      "stack_out": [
        "materialized_values%0#0",
        "0",
        "\"game_id\""
      ]
    },
    "1192": {
      "op": "app_global_get_ex",
      "defined_out": [
        "materialized_values%0#0",
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "materialized_values%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1193": {
      "error": "check self.game_id exists",
      "op": "assert // check self.game_id exists",
      "stack_out": [
        "materialized_values%0#0",
        "maybe_value%1#0"
      ]
    },
    "1194": {
      "op": "itob",
      "defined_out": [
        "encoded_value%1#0",
        "materialized_values%0#0"
      ],
      "stack_out": [
        "materialized_values%0#0",
        "encoded_value%1#0"
      ]
    },
    "1195": {
      "op": "bytec_1 // \"p_\"",
      "defined_out": [
        "\"p_\"",
        "encoded_value%1#0",
        "materialized_values%0#0"
      ],
      "stack_out": [
        "materialized_values%0#0",
        "encoded_value%1#0",
        "\"p_\""
      ]
    },
    "1196": {
      "op": "swap",
      "stack_out": [
        "materialized_values%0#0",
        "\"p_\"",
        "encoded_value%1#0"
      ]
    },
    "1197": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%1#0",
        "materialized_values%0#0"
      ],
      "stack_out": [
        "materialized_values%0#0",
        "box_prefixed_key%1#0"
      ]
    },
    "1198": {
      "op": "dup",
      "defined_out": [
        "box_prefixed_key%1#0",
        "box_prefixed_key%1#0 (copy)",
        "materialized_values%0#0"
      ],
      "stack_out": [
        "materialized_values%0#0",
        "box_prefixed_key%1#0",
        "box_prefixed_key%1#0 (copy)"
      ]
    },
    "1199": {
      "op": "box_del",
      "defined_out": [
        "box_prefixed_key%1#0",
        "materialized_values%0#0",
        "{box_del}"
      ],
      "stack_out": [
        "materialized_values%0#0",
        "box_prefixed_key%1#0",
        "{box_del}"
      ]
    },
    "1200": {
      "op": "pop",
      "stack_out": [
        "materialized_values%0#0",
        "box_prefixed_key%1#0"
      ]
    },
    "1201": {
      "op": "swap",
      "stack_out": [
        "box_prefixed_key%1#0",
        "materialized_values%0#0"
      ]
    },
    "1202": {
      "op": "box_put",
      "stack_out": []
    },
    "1203": {
      "op": "bytec_3 // \"c_\"",
      "defined_out": [
        "\"c_\""
      ],
      "stack_out": [
        "\"c_\""
      ]
    },
    "1204": {
      "op": "txn Sender",
      "defined_out": [
        "\"c_\"",
        "materialized_values%1#0"
      ],
      "stack_out": [
        "\"c_\"",
        "materialized_values%1#0"
      ]
    },
    "1206": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%2#0"
      ],
      "stack_out": [
        "box_prefixed_key%2#0"
      ]
    },
    "1207": {
      "op": "bytec 6 // 0x0000000000000000",
      "defined_out": [
        "0x0000000000000000",
        "box_prefixed_key%2#0"
      ],
      "stack_out": [
        "box_prefixed_key%2#0",
        "0x0000000000000000"
      ]
    },
    "1209": {
      "op": "box_put",
      "stack_out": []
    },
    "1210": {
      "op": "intc_1 // 0",
      "stack_out": [
        "0"
      ]
    },
    "1211": {
      "op": "bytec 4 // \"game_id\"",
      "stack_out": [
        "0",
        "\"game_id\""
      ]
    },
    "1213": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1214": {
      "error": "check self.game_id exists",
      "op": "assert // check self.game_id exists",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "1215": {
      "op": "itob",
      "defined_out": [
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%40#0"
      ]
    },
    "1216": {
      "op": "bytec_1 // \"p_\"",
      "stack_out": [
        "tmp%40#0",
        "\"p_\""
      ]
    },
    "1217": {
      "op": "swap",
      "stack_out": [
        "\"p_\"",
        "tmp%40#0"
      ]
    },
    "1218": {
      "op": "concat",
      "defined_out": [
        "game_players_bref#0"
      ],
      "stack_out": [
        "game_players_bref#0"
      ]
    },
    "1219": {
      "op": "intc_1 // 0"
    },
    "1220": {
      "op": "txn Sender",
      "defined_out": [
        "0",
        "game_players_bref#0",
        "tmp%41#0"
      ],
      "stack_out": [
        "game_players_bref#0",
        "0",
        "tmp%41#0"
      ]
    },
    "1222": {
      "op": "box_replace",
      "stack_out": []
    },
    "1223": {
      "op": "intc_1 // 0",
      "stack_out": [
        "0"
      ]
    },
    "1224": {
      "op": "bytec 4 // \"game_id\"",
      "stack_out": [
        "0",
        "\"game_id\""
      ]
    },
    "1226": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "1227": {
      "error": "check self.game_id exists",
      "op": "assert // check self.game_id exists",
      "stack_out": [
        "maybe_value%3#0"
      ]
    },
    "1228": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "1"
      ]
    },
    "1229": {
      "op": "+",
      "defined_out": [
        "materialized_values%2#0"
      ],
      "stack_out": [
        "materialized_values%2#0"
      ]
    },
    "1230": {
      "op": "bytec 4 // \"game_id\"",
      "stack_out": [
        "materialized_values%2#0",
        "\"game_id\""
      ]
    },
    "1232": {
      "op": "swap",
      "stack_out": [
        "\"game_id\"",
        "materialized_values%2#0"
      ]
    },
    "1233": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1234": {
      "retsub": true,
      "op": "retsub"
    },
    "1235": {
      "subroutine": "smart_contracts.pieout.contract.Pieout.join_game",
      "params": {
        "game_id#0": "uint64",
        "box_c_pay#0": "uint64",
        "stake_pay#0": "uint64"
      },
      "block": "join_game",
      "stack_in": [],
      "op": "proto 3 0"
    },
    "1238": {
      "op": "global GroupSize",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1240": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "3"
      ]
    },
    "1242": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1243": {
      "error": "Invalid group size. Ensure number of transaction in group is within bounds.",
      "op": "assert // Invalid group size. Ensure number of transaction in group is within bounds.",
      "stack_out": []
    },
    "1244": {
      "op": "frame_dig -3",
      "defined_out": [
        "game_id#0 (copy)"
      ],
      "stack_out": [
        "game_id#0 (copy)"
      ]
    },
    "1246": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "1247": {
      "op": "bytec_2 // \"s_\"",
      "defined_out": [
        "\"s_\"",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "\"s_\""
      ]
    },
    "1248": {
      "op": "dig 1",
      "defined_out": [
        "\"s_\"",
        "encoded_value%0#0",
        "encoded_value%0#0 (copy)"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "\"s_\"",
        "encoded_value%0#0 (copy)"
      ]
    },
    "1250": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0"
      ]
    },
    "1251": {
      "op": "dup",
      "defined_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)"
      ]
    },
    "1252": {
      "op": "box_len",
      "defined_out": [
        "_%0#0",
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "_%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1253": {
      "op": "bury 1",
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1255": {
      "error": "Box game state not found. Check if Game ID is valid.",
      "op": "assert // Box game state not found. Check if Game ID is valid.",
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0"
      ]
    },
    "1256": {
      "op": "frame_dig -2",
      "defined_out": [
        "box_c_pay#0 (copy)",
        "box_prefixed_key%0#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "box_c_pay#0 (copy)"
      ]
    },
    "1258": {
      "op": "gtxns Amount",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "tmp%2#0"
      ]
    },
    "1260": {
      "op": "intc 6 // 19300",
      "defined_out": [
        "19300",
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "tmp%2#0",
        "19300"
      ]
    },
    "1262": {
      "op": ">=",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "tmp%3#0"
      ]
    },
    "1263": {
      "error": "Insufficient funds. Box pay amount is not enough to cover application MBR.",
      "op": "assert // Insufficient funds. Box pay amount is not enough to cover application MBR.",
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0"
      ]
    },
    "1264": {
      "op": "frame_dig -2",
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "box_c_pay#0 (copy)"
      ]
    },
    "1266": {
      "op": "gtxns Sender",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "tmp%4#0"
      ]
    },
    "1268": {
      "op": "txn Sender",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "1270": {
      "op": "==",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "tmp%6#0"
      ]
    },
    "1271": {
      "error": "Box payment sender address must match transaction sender address.",
      "op": "assert // Box payment sender address must match transaction sender address.",
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0"
      ]
    },
    "1272": {
      "op": "frame_dig -2",
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "box_c_pay#0 (copy)"
      ]
    },
    "1274": {
      "op": "gtxns Receiver",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "tmp%7#0"
      ]
    },
    "1276": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "tmp%7#0",
        "tmp%8#0"
      ]
    },
    "1278": {
      "op": "==",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "tmp%9#0"
      ]
    },
    "1279": {
      "error": "Box payment reciever address must match application address.",
      "op": "assert // Box payment reciever address must match application address.",
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0"
      ]
    },
    "1280": {
      "op": "frame_dig -1",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "stake_pay#0 (copy)"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "stake_pay#0 (copy)"
      ]
    },
    "1282": {
      "op": "gtxns Amount",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "tmp%10#0"
      ]
    },
    "1284": {
      "op": "dup",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "tmp%10#0",
        "tmp%10#0 (copy)"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "tmp%10#0",
        "tmp%10#0 (copy)"
      ]
    },
    "1285": {
      "op": "pushint 258400 // 258400",
      "defined_out": [
        "258400",
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "tmp%10#0",
        "tmp%10#0 (copy)"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "tmp%10#0",
        "tmp%10#0 (copy)",
        "258400"
      ]
    },
    "1289": {
      "op": ">=",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "tmp%10#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "tmp%10#0",
        "tmp%11#0"
      ]
    },
    "1290": {
      "error": "Insufficient funds. Stake pay amount is not enough to cover application MBR.",
      "op": "assert // Insufficient funds. Stake pay amount is not enough to cover application MBR.",
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "tmp%10#0"
      ]
    },
    "1291": {
      "op": "frame_dig -1",
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "tmp%10#0",
        "stake_pay#0 (copy)"
      ]
    },
    "1293": {
      "op": "gtxns Sender",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "tmp%10#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "tmp%10#0",
        "tmp%12#0"
      ]
    },
    "1295": {
      "op": "txn Sender",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "tmp%10#0",
        "tmp%12#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "tmp%10#0",
        "tmp%12#0",
        "tmp%13#0"
      ]
    },
    "1297": {
      "op": "==",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "tmp%10#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "tmp%10#0",
        "tmp%14#0"
      ]
    },
    "1298": {
      "error": "Stake payment sender address must match transaction sender address.",
      "op": "assert // Stake payment sender address must match transaction sender address.",
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "tmp%10#0"
      ]
    },
    "1299": {
      "op": "frame_dig -1",
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "tmp%10#0",
        "stake_pay#0 (copy)"
      ]
    },
    "1301": {
      "op": "gtxns Receiver",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "tmp%10#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "tmp%10#0",
        "tmp%15#0"
      ]
    },
    "1303": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "tmp%10#0",
        "tmp%15#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "tmp%10#0",
        "tmp%15#0",
        "tmp%16#0"
      ]
    },
    "1305": {
      "op": "==",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "tmp%10#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "tmp%10#0",
        "tmp%17#0"
      ]
    },
    "1306": {
      "error": "Stake payment reciever address must match application address.",
      "op": "assert // Stake payment reciever address must match application address.",
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "tmp%10#0"
      ]
    },
    "1307": {
      "op": "dig 1",
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "tmp%10#0",
        "box_prefixed_key%0#0 (copy)"
      ]
    },
    "1309": {
      "op": "box_get",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "maybe_exists%1#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "tmp%10#0",
        "game_state#0",
        "maybe_exists%1#0"
      ]
    },
    "1310": {
      "error": "check self.box_game_state entry exists",
      "op": "assert // check self.box_game_state entry exists",
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "tmp%10#0",
        "game_state#0"
      ]
    },
    "1311": {
      "op": "dig 2",
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "tmp%10#0",
        "game_state#0",
        "box_prefixed_key%0#0 (copy)"
      ]
    },
    "1313": {
      "op": "box_get",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "maybe_exists%2#0",
        "maybe_value%1#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "tmp%10#0",
        "game_state#0",
        "maybe_value%1#0",
        "maybe_exists%2#0"
      ]
    },
    "1314": {
      "error": "check self.box_game_state entry exists",
      "op": "assert // check self.box_game_state entry exists",
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "tmp%10#0",
        "game_state#0",
        "maybe_value%1#0"
      ]
    },
    "1315": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "maybe_value%1#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "tmp%10#0",
        "game_state#0",
        "maybe_value%1#0",
        "2"
      ]
    },
    "1316": {
      "op": "getbyte",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "tmp%10#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "tmp%10#0",
        "game_state#0",
        "tmp%19#0"
      ]
    },
    "1317": {
      "op": "frame_dig -3",
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "tmp%10#0",
        "game_state#0",
        "tmp%19#0",
        "game_id#0 (copy)"
      ]
    },
    "1319": {
      "op": "bytec_1 // \"p_\"",
      "defined_out": [
        "\"p_\"",
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_id#0 (copy)",
        "game_state#0",
        "tmp%10#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "tmp%10#0",
        "game_state#0",
        "tmp%19#0",
        "game_id#0 (copy)",
        "\"p_\""
      ]
    },
    "1320": {
      "op": "uncover 2",
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "tmp%10#0",
        "game_state#0",
        "game_id#0 (copy)",
        "\"p_\"",
        "tmp%19#0"
      ]
    },
    "1322": {
      "op": "intc_1 // 0",
      "defined_out": [
        "\"p_\"",
        "0",
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_id#0 (copy)",
        "game_state#0",
        "tmp%10#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "tmp%10#0",
        "game_state#0",
        "game_id#0 (copy)",
        "\"p_\"",
        "tmp%19#0",
        "0"
      ]
    },
    "1323": {
      "callsub": "smart_contracts.pieout.subroutines.check_sender_in_game",
      "op": "callsub check_sender_in_game",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "tmp%10#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "tmp%10#0",
        "game_state#0",
        "tmp%20#0"
      ]
    },
    "1326": {
      "op": "!",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "tmp%10#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "tmp%10#0",
        "game_state#0",
        "tmp%21#0"
      ]
    },
    "1327": {
      "error": "Transaction sender is already recognized as a valid player for this game.",
      "op": "assert // Transaction sender is already recognized as a valid player for this game.",
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "tmp%10#0",
        "game_state#0"
      ]
    },
    "1328": {
      "op": "dup",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#0 (copy)",
        "tmp%10#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "tmp%10#0",
        "game_state#0",
        "game_state#0 (copy)"
      ]
    },
    "1329": {
      "op": "intc_1 // 0",
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "tmp%10#0",
        "game_state#0",
        "game_state#0 (copy)",
        "0"
      ]
    },
    "1330": {
      "op": "getbit",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "is_true%0#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "tmp%10#0",
        "game_state#0",
        "is_true%0#0"
      ]
    },
    "1331": {
      "op": "bytec_0 // 0x00",
      "defined_out": [
        "0x00",
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "is_true%0#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "tmp%10#0",
        "game_state#0",
        "is_true%0#0",
        "0x00"
      ]
    },
    "1332": {
      "op": "intc_1 // 0",
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "tmp%10#0",
        "game_state#0",
        "is_true%0#0",
        "0x00",
        "0"
      ]
    },
    "1333": {
      "op": "uncover 2",
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "tmp%10#0",
        "game_state#0",
        "0x00",
        "0",
        "is_true%0#0"
      ]
    },
    "1335": {
      "op": "setbit",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "tmp%10#0",
        "game_state#0",
        "encoded_bool%0#0"
      ]
    },
    "1336": {
      "op": "intc_1 // 0",
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "tmp%10#0",
        "game_state#0",
        "encoded_bool%0#0",
        "0"
      ]
    },
    "1337": {
      "op": "getbit",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "tmp%10#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "tmp%10#0",
        "game_state#0",
        "tmp%22#0"
      ]
    },
    "1338": {
      "op": "!",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "tmp%10#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "tmp%10#0",
        "game_state#0",
        "tmp%23#0"
      ]
    },
    "1339": {
      "error": "Game state staking finalized value mismatch.",
      "op": "assert // Game state staking finalized value mismatch.",
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "tmp%10#0",
        "game_state#0"
      ]
    },
    "1340": {
      "op": "dup",
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "tmp%10#0",
        "game_state#0",
        "game_state#0 (copy)"
      ]
    },
    "1341": {
      "error": "Index access is out of bounds",
      "op": "extract 6 8 // on error: Index access is out of bounds",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "reinterpret_biguint%0#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "tmp%10#0",
        "game_state#0",
        "reinterpret_biguint%0#0"
      ]
    },
    "1344": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "reinterpret_biguint%0#0",
        "tmp%10#0",
        "tmp%24#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "tmp%10#0",
        "game_state#0",
        "reinterpret_biguint%0#0",
        "tmp%24#0"
      ]
    },
    "1346": {
      "op": "itob",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "reinterpret_biguint%0#0",
        "tmp%10#0",
        "tmp%25#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "tmp%10#0",
        "game_state#0",
        "reinterpret_biguint%0#0",
        "tmp%25#0"
      ]
    },
    "1347": {
      "op": "b>=",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "tmp%10#0",
        "tmp%26#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "tmp%10#0",
        "game_state#0",
        "tmp%26#0"
      ]
    },
    "1348": {
      "error": "Phase deadline expired. Latest block timestamp must not exceed expiry timestamp.",
      "op": "assert // Phase deadline expired. Latest block timestamp must not exceed expiry timestamp.",
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "tmp%10#0",
        "game_state#0"
      ]
    },
    "1349": {
      "op": "dup",
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "tmp%10#0",
        "game_state#0",
        "game_state#0 (copy)"
      ]
    },
    "1350": {
      "error": "Index access is out of bounds",
      "op": "extract 2 1 // on error: Index access is out of bounds",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "reinterpret_biguint%1#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "tmp%10#0",
        "game_state#0",
        "reinterpret_biguint%1#0"
      ]
    },
    "1353": {
      "op": "dig 1",
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "tmp%10#0",
        "game_state#0",
        "reinterpret_biguint%1#0",
        "game_state#0 (copy)"
      ]
    },
    "1355": {
      "error": "Index access is out of bounds",
      "op": "extract 1 1 // on error: Index access is out of bounds",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "reinterpret_biguint%1#0",
        "reinterpret_biguint%2#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "tmp%10#0",
        "game_state#0",
        "reinterpret_biguint%1#0",
        "reinterpret_biguint%2#0"
      ]
    },
    "1358": {
      "op": "b<=",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "tmp%10#0",
        "tmp%27#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "tmp%10#0",
        "game_state#0",
        "tmp%27#0"
      ]
    },
    "1359": {
      "error": "Number of active players must not exceed number of max players.",
      "op": "assert // Number of active players must not exceed number of max players.",
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "tmp%10#0",
        "game_state#0"
      ]
    },
    "1360": {
      "op": "dup",
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "tmp%10#0",
        "game_state#0",
        "game_state#0 (copy)"
      ]
    },
    "1361": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#0 (copy)",
        "tmp%10#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "tmp%10#0",
        "game_state#0",
        "game_state#0 (copy)",
        "4"
      ]
    },
    "1363": {
      "op": "extract_uint16",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "tmp%10#0",
        "tmp%29#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "tmp%10#0",
        "game_state#0",
        "tmp%29#0"
      ]
    },
    "1364": {
      "op": "dig 1",
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "tmp%10#0",
        "game_state#0",
        "tmp%29#0",
        "game_state#0 (copy)"
      ]
    },
    "1366": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#0 (copy)",
        "tmp%10#0",
        "tmp%29#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "tmp%10#0",
        "game_state#0",
        "tmp%29#0",
        "game_state#0 (copy)",
        "1"
      ]
    },
    "1367": {
      "op": "getbyte",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "tmp%10#0",
        "tmp%29#0",
        "tmp%31#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "tmp%10#0",
        "game_state#0",
        "tmp%29#0",
        "tmp%31#0"
      ]
    },
    "1368": {
      "op": "intc_3 // 32",
      "defined_out": [
        "32",
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "tmp%10#0",
        "tmp%29#0",
        "tmp%31#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "tmp%10#0",
        "game_state#0",
        "tmp%29#0",
        "tmp%31#0",
        "32"
      ]
    },
    "1369": {
      "op": "*",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "tmp%10#0",
        "tmp%29#0",
        "tmp%32#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "tmp%10#0",
        "game_state#0",
        "tmp%29#0",
        "tmp%32#0"
      ]
    },
    "1370": {
      "op": "dig 1",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "tmp%10#0",
        "tmp%29#0",
        "tmp%29#0 (copy)",
        "tmp%32#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "tmp%10#0",
        "game_state#0",
        "tmp%29#0",
        "tmp%32#0",
        "tmp%29#0 (copy)"
      ]
    },
    "1372": {
      "op": ">",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "tmp%10#0",
        "tmp%29#0",
        "tmp%33#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "tmp%10#0",
        "game_state#0",
        "tmp%29#0",
        "tmp%33#0"
      ]
    },
    "1373": {
      "error": "Players box start position index overflow. Can not store more addresses.",
      "op": "assert // Players box start position index overflow. Can not store more addresses.",
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "tmp%10#0",
        "game_state#0",
        "tmp%29#0"
      ]
    },
    "1374": {
      "op": "bytec_1 // \"p_\"",
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "tmp%10#0",
        "game_state#0",
        "tmp%29#0",
        "\"p_\""
      ]
    },
    "1375": {
      "op": "uncover 5",
      "stack_out": [
        "box_prefixed_key%0#0",
        "tmp%10#0",
        "game_state#0",
        "tmp%29#0",
        "\"p_\"",
        "encoded_value%0#0"
      ]
    },
    "1377": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0",
        "game_players_bref#0",
        "game_state#0",
        "tmp%10#0",
        "tmp%29#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "tmp%10#0",
        "game_state#0",
        "tmp%29#0",
        "game_players_bref#0"
      ]
    },
    "1378": {
      "op": "txn Sender",
      "defined_out": [
        "box_prefixed_key%0#0",
        "game_players_bref#0",
        "game_state#0",
        "tmp%10#0",
        "tmp%29#0",
        "tmp%37#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "tmp%10#0",
        "game_state#0",
        "tmp%29#0",
        "game_players_bref#0",
        "tmp%37#0"
      ]
    },
    "1380": {
      "op": "swap",
      "stack_out": [
        "box_prefixed_key%0#0",
        "tmp%10#0",
        "game_state#0",
        "tmp%29#0",
        "tmp%37#0",
        "game_players_bref#0"
      ]
    },
    "1381": {
      "op": "cover 2",
      "stack_out": [
        "box_prefixed_key%0#0",
        "tmp%10#0",
        "game_state#0",
        "game_players_bref#0",
        "tmp%29#0",
        "tmp%37#0"
      ]
    },
    "1383": {
      "op": "box_replace",
      "stack_out": [
        "box_prefixed_key%0#0",
        "tmp%10#0",
        "game_state#0"
      ]
    },
    "1384": {
      "op": "bytec_3 // \"c_\"",
      "defined_out": [
        "\"c_\"",
        "box_prefixed_key%0#0",
        "game_state#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "tmp%10#0",
        "game_state#0",
        "\"c_\""
      ]
    },
    "1385": {
      "op": "txn Sender",
      "defined_out": [
        "\"c_\"",
        "box_prefixed_key%0#0",
        "game_state#0",
        "materialized_values%0#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "tmp%10#0",
        "game_state#0",
        "\"c_\"",
        "materialized_values%0#0"
      ]
    },
    "1387": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%3#0",
        "game_state#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "tmp%10#0",
        "game_state#0",
        "box_prefixed_key%3#0"
      ]
    },
    "1388": {
      "op": "bytec 6 // 0x0000000000000000",
      "defined_out": [
        "0x0000000000000000",
        "box_prefixed_key%0#0",
        "box_prefixed_key%3#0",
        "game_state#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "tmp%10#0",
        "game_state#0",
        "box_prefixed_key%3#0",
        "0x0000000000000000"
      ]
    },
    "1390": {
      "op": "box_put",
      "stack_out": [
        "box_prefixed_key%0#0",
        "tmp%10#0",
        "game_state#0"
      ]
    },
    "1391": {
      "op": "dup",
      "stack_out": [
        "box_prefixed_key%0#0",
        "tmp%10#0",
        "game_state#0",
        "game_state#0 (copy)"
      ]
    },
    "1392": {
      "op": "intc_2 // 2",
      "stack_out": [
        "box_prefixed_key%0#0",
        "tmp%10#0",
        "game_state#0",
        "game_state#0 (copy)",
        "2"
      ]
    },
    "1393": {
      "op": "getbyte",
      "defined_out": [
        "box_prefixed_key%0#0",
        "game_state#0",
        "tmp%10#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "tmp%10#0",
        "game_state#0",
        "tmp%39#0"
      ]
    },
    "1394": {
      "op": "intc_0 // 1",
      "stack_out": [
        "box_prefixed_key%0#0",
        "tmp%10#0",
        "game_state#0",
        "tmp%39#0",
        "1"
      ]
    },
    "1395": {
      "op": "+",
      "defined_out": [
        "box_prefixed_key%0#0",
        "game_state#0",
        "tmp%10#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "tmp%10#0",
        "game_state#0",
        "to_encode%0#0"
      ]
    },
    "1396": {
      "op": "itob",
      "defined_out": [
        "box_prefixed_key%0#0",
        "game_state#0",
        "tmp%10#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "tmp%10#0",
        "game_state#0",
        "val_as_bytes%0#0"
      ]
    },
    "1397": {
      "op": "dup",
      "defined_out": [
        "box_prefixed_key%0#0",
        "game_state#0",
        "tmp%10#0",
        "val_as_bytes%0#0",
        "val_as_bytes%0#0 (copy)"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "tmp%10#0",
        "game_state#0",
        "val_as_bytes%0#0",
        "val_as_bytes%0#0 (copy)"
      ]
    },
    "1398": {
      "op": "bitlen",
      "defined_out": [
        "bitlen%0#0",
        "box_prefixed_key%0#0",
        "game_state#0",
        "tmp%10#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "tmp%10#0",
        "game_state#0",
        "val_as_bytes%0#0",
        "bitlen%0#0"
      ]
    },
    "1399": {
      "op": "pushint 8 // 8",
      "defined_out": [
        "8",
        "bitlen%0#0",
        "box_prefixed_key%0#0",
        "game_state#0",
        "tmp%10#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "tmp%10#0",
        "game_state#0",
        "val_as_bytes%0#0",
        "bitlen%0#0",
        "8"
      ]
    },
    "1401": {
      "op": "<=",
      "defined_out": [
        "box_prefixed_key%0#0",
        "game_state#0",
        "no_overflow%0#0",
        "tmp%10#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "tmp%10#0",
        "game_state#0",
        "val_as_bytes%0#0",
        "no_overflow%0#0"
      ]
    },
    "1402": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "box_prefixed_key%0#0",
        "tmp%10#0",
        "game_state#0",
        "val_as_bytes%0#0"
      ]
    },
    "1403": {
      "op": "extract 7 1",
      "defined_out": [
        "box_prefixed_key%0#0",
        "game_state#0",
        "tmp%10#0",
        "uint8%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "tmp%10#0",
        "game_state#0",
        "uint8%0#0"
      ]
    },
    "1406": {
      "op": "replace2 2",
      "stack_out": [
        "box_prefixed_key%0#0",
        "tmp%10#0",
        "game_state#0"
      ]
    },
    "1408": {
      "op": "dup",
      "stack_out": [
        "box_prefixed_key%0#0",
        "tmp%10#0",
        "game_state#0",
        "game_state#0 (copy)"
      ]
    },
    "1409": {
      "op": "pushint 4 // 4",
      "stack_out": [
        "box_prefixed_key%0#0",
        "tmp%10#0",
        "game_state#0",
        "game_state#0 (copy)",
        "4"
      ]
    },
    "1411": {
      "op": "extract_uint16",
      "defined_out": [
        "box_prefixed_key%0#0",
        "game_state#0",
        "tmp%10#0",
        "tmp%41#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "tmp%10#0",
        "game_state#0",
        "tmp%41#0"
      ]
    },
    "1412": {
      "op": "intc_3 // 32",
      "stack_out": [
        "box_prefixed_key%0#0",
        "tmp%10#0",
        "game_state#0",
        "tmp%41#0",
        "32"
      ]
    },
    "1413": {
      "op": "+",
      "defined_out": [
        "box_prefixed_key%0#0",
        "game_state#0",
        "tmp%10#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "tmp%10#0",
        "game_state#0",
        "to_encode%1#0"
      ]
    },
    "1414": {
      "op": "itob",
      "defined_out": [
        "box_prefixed_key%0#0",
        "game_state#0",
        "tmp%10#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "tmp%10#0",
        "game_state#0",
        "val_as_bytes%1#0"
      ]
    },
    "1415": {
      "op": "dup",
      "defined_out": [
        "box_prefixed_key%0#0",
        "game_state#0",
        "tmp%10#0",
        "val_as_bytes%1#0",
        "val_as_bytes%1#0 (copy)"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "tmp%10#0",
        "game_state#0",
        "val_as_bytes%1#0",
        "val_as_bytes%1#0 (copy)"
      ]
    },
    "1416": {
      "op": "bitlen",
      "defined_out": [
        "bitlen%1#0",
        "box_prefixed_key%0#0",
        "game_state#0",
        "tmp%10#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "tmp%10#0",
        "game_state#0",
        "val_as_bytes%1#0",
        "bitlen%1#0"
      ]
    },
    "1417": {
      "op": "pushint 16 // 16",
      "defined_out": [
        "16",
        "bitlen%1#0",
        "box_prefixed_key%0#0",
        "game_state#0",
        "tmp%10#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "tmp%10#0",
        "game_state#0",
        "val_as_bytes%1#0",
        "bitlen%1#0",
        "16"
      ]
    },
    "1419": {
      "op": "<=",
      "defined_out": [
        "box_prefixed_key%0#0",
        "game_state#0",
        "no_overflow%1#0",
        "tmp%10#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "tmp%10#0",
        "game_state#0",
        "val_as_bytes%1#0",
        "no_overflow%1#0"
      ]
    },
    "1420": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "box_prefixed_key%0#0",
        "tmp%10#0",
        "game_state#0",
        "val_as_bytes%1#0"
      ]
    },
    "1421": {
      "op": "extract 6 2",
      "defined_out": [
        "box_prefixed_key%0#0",
        "game_state#0",
        "tmp%10#0",
        "uint16%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "tmp%10#0",
        "game_state#0",
        "uint16%0#0"
      ]
    },
    "1424": {
      "op": "replace2 4",
      "stack_out": [
        "box_prefixed_key%0#0",
        "tmp%10#0",
        "game_state#0"
      ]
    },
    "1426": {
      "op": "dup",
      "stack_out": [
        "box_prefixed_key%0#0",
        "tmp%10#0",
        "game_state#0",
        "game_state#0 (copy)"
      ]
    },
    "1427": {
      "op": "pushint 14 // 14",
      "defined_out": [
        "14",
        "box_prefixed_key%0#0",
        "game_state#0",
        "game_state#0 (copy)",
        "tmp%10#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "tmp%10#0",
        "game_state#0",
        "game_state#0 (copy)",
        "14"
      ]
    },
    "1429": {
      "op": "extract_uint64",
      "defined_out": [
        "box_prefixed_key%0#0",
        "game_state#0",
        "tmp%10#0",
        "tmp%43#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "tmp%10#0",
        "game_state#0",
        "tmp%43#0"
      ]
    },
    "1430": {
      "op": "uncover 2",
      "stack_out": [
        "box_prefixed_key%0#0",
        "game_state#0",
        "tmp%43#0",
        "tmp%10#0"
      ]
    },
    "1432": {
      "op": "+",
      "defined_out": [
        "box_prefixed_key%0#0",
        "game_state#0",
        "to_encode%2#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "game_state#0",
        "to_encode%2#0"
      ]
    },
    "1433": {
      "op": "itob",
      "defined_out": [
        "box_prefixed_key%0#0",
        "game_state#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "game_state#0",
        "val_as_bytes%2#0"
      ]
    },
    "1434": {
      "op": "replace2 14",
      "stack_out": [
        "box_prefixed_key%0#0",
        "game_state#0"
      ]
    },
    "1436": {
      "callsub": "smart_contracts.pieout.subroutines.is_game_live",
      "op": "callsub is_game_live",
      "defined_out": [
        "box_prefixed_key%0#0",
        "game_state#0",
        "is_game_live%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "is_game_live%0#0",
        "game_state#0"
      ]
    },
    "1439": {
      "op": "bury 1",
      "stack_out": [
        "box_prefixed_key%0#0",
        "game_state#0"
      ]
    },
    "1441": {
      "op": "box_put",
      "stack_out": []
    },
    "1442": {
      "retsub": true,
      "op": "retsub"
    },
    "1443": {
      "subroutine": "smart_contracts.pieout.contract.Pieout.commit_rand",
      "params": {
        "game_id#0": "uint64"
      },
      "block": "commit_rand",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "1446": {
      "op": "frame_dig -1",
      "defined_out": [
        "game_id#0 (copy)"
      ],
      "stack_out": [
        "game_id#0 (copy)"
      ]
    },
    "1448": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "1449": {
      "op": "bytec_2 // \"s_\"",
      "defined_out": [
        "\"s_\"",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "\"s_\""
      ]
    },
    "1450": {
      "op": "swap",
      "stack_out": [
        "\"s_\"",
        "encoded_value%0#0"
      ]
    },
    "1451": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "1452": {
      "op": "dup",
      "defined_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)"
      ]
    },
    "1453": {
      "op": "box_len",
      "defined_out": [
        "_%0#0",
        "box_prefixed_key%0#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "_%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1454": {
      "op": "bury 1",
      "stack_out": [
        "box_prefixed_key%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1456": {
      "error": "Box game state not found. Check if Game ID is valid.",
      "op": "assert // Box game state not found. Check if Game ID is valid.",
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "1457": {
      "op": "bytec_3 // \"c_\"",
      "defined_out": [
        "\"c_\"",
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "\"c_\""
      ]
    },
    "1458": {
      "op": "txn Sender",
      "defined_out": [
        "\"c_\"",
        "box_prefixed_key%0#0",
        "materialized_values%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "\"c_\"",
        "materialized_values%0#0"
      ]
    },
    "1460": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%1#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%1#0"
      ]
    },
    "1461": {
      "op": "box_len",
      "defined_out": [
        "_%1#0",
        "box_prefixed_key%0#0",
        "maybe_exists%1#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "_%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1462": {
      "op": "bury 1",
      "stack_out": [
        "box_prefixed_key%0#0",
        "maybe_exists%1#0"
      ]
    },
    "1464": {
      "error": "Box commit rand not found for sender address. Ensure commit rand was called.",
      "op": "assert // Box commit rand not found for sender address. Ensure commit rand was called.",
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "1465": {
      "op": "dup",
      "stack_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)"
      ]
    },
    "1466": {
      "op": "box_get",
      "defined_out": [
        "box_prefixed_key%0#0",
        "maybe_exists%2#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "maybe_value%0#0",
        "maybe_exists%2#0"
      ]
    },
    "1467": {
      "error": "check self.box_game_state entry exists",
      "op": "assert // check self.box_game_state entry exists",
      "stack_out": [
        "box_prefixed_key%0#0",
        "maybe_value%0#0"
      ]
    },
    "1468": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "box_prefixed_key%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "maybe_value%0#0",
        "0"
      ]
    },
    "1469": {
      "op": "getbit",
      "defined_out": [
        "box_prefixed_key%0#0",
        "is_true%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "is_true%0#0"
      ]
    },
    "1470": {
      "op": "bytec_0 // 0x00",
      "defined_out": [
        "0x00",
        "box_prefixed_key%0#0",
        "is_true%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "is_true%0#0",
        "0x00"
      ]
    },
    "1471": {
      "op": "intc_1 // 0",
      "stack_out": [
        "box_prefixed_key%0#0",
        "is_true%0#0",
        "0x00",
        "0"
      ]
    },
    "1472": {
      "op": "uncover 2",
      "stack_out": [
        "box_prefixed_key%0#0",
        "0x00",
        "0",
        "is_true%0#0"
      ]
    },
    "1474": {
      "op": "setbit",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_bool%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_bool%0#0"
      ]
    },
    "1475": {
      "op": "intc_1 // 0",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_bool%0#0",
        "0"
      ]
    },
    "1476": {
      "op": "getbit",
      "defined_out": [
        "box_prefixed_key%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "tmp%0#0"
      ]
    },
    "1477": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "box_prefixed_key%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "tmp%0#0",
        "1"
      ]
    },
    "1478": {
      "op": "==",
      "defined_out": [
        "box_prefixed_key%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "tmp%1#0"
      ]
    },
    "1479": {
      "error": "Game state staking finalized value mismatch.",
      "op": "assert // Game state staking finalized value mismatch.",
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "1480": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%3#0"
      ]
    },
    "1481": {
      "error": "check self.box_game_state entry exists",
      "op": "assert // check self.box_game_state entry exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "1482": {
      "op": "intc_0 // 1",
      "stack_out": [
        "maybe_value%1#0",
        "1"
      ]
    },
    "1483": {
      "op": "getbyte",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1484": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%3#0",
        "game_id#0 (copy)"
      ]
    },
    "1486": {
      "op": "bytec_1 // \"p_\"",
      "defined_out": [
        "\"p_\"",
        "game_id#0 (copy)",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "game_id#0 (copy)",
        "\"p_\""
      ]
    },
    "1487": {
      "op": "uncover 2",
      "stack_out": [
        "game_id#0 (copy)",
        "\"p_\"",
        "tmp%3#0"
      ]
    },
    "1489": {
      "op": "intc_1 // 0",
      "stack_out": [
        "game_id#0 (copy)",
        "\"p_\"",
        "tmp%3#0",
        "0"
      ]
    },
    "1490": {
      "callsub": "smart_contracts.pieout.subroutines.check_sender_in_game",
      "op": "callsub check_sender_in_game",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "1493": {
      "op": "intc_0 // 1",
      "stack_out": [
        "tmp%4#0",
        "1"
      ]
    },
    "1494": {
      "op": "==",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "1495": {
      "error": "Transaction sender is not recognized as a valid player for this game.",
      "op": "assert // Transaction sender is not recognized as a valid player for this game.",
      "stack_out": []
    },
    "1496": {
      "op": "txn TxID",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "1498": {
      "op": "global Round",
      "defined_out": [
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "tmp%7#0"
      ]
    },
    "1500": {
      "op": "itob",
      "defined_out": [
        "tmp%6#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "tmp%8#0"
      ]
    },
    "1501": {
      "op": "concat",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "1502": {
      "op": "sha256",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "1503": {
      "op": "pushint 16 // 16",
      "defined_out": [
        "16",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "16"
      ]
    },
    "1505": {
      "op": "extract_uint16",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "1506": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "3"
      ]
    },
    "1508": {
      "op": "%",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "1509": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "4"
      ]
    },
    "1511": {
      "op": "+",
      "defined_out": [
        "round_offset#0"
      ],
      "stack_out": [
        "round_offset#0"
      ]
    },
    "1512": {
      "op": "global Round",
      "defined_out": [
        "round_offset#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "round_offset#0",
        "tmp%14#0"
      ]
    },
    "1514": {
      "op": "+",
      "defined_out": [
        "commit_round#0"
      ],
      "stack_out": [
        "commit_round#0"
      ]
    },
    "1515": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "1516": {
      "op": "bytec_3 // \"c_\"",
      "stack_out": [
        "val_as_bytes%0#0",
        "\"c_\""
      ]
    },
    "1517": {
      "op": "txn Sender",
      "defined_out": [
        "\"c_\"",
        "materialized_values%1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "\"c_\"",
        "materialized_values%1#0"
      ]
    },
    "1519": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%4#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "box_prefixed_key%4#0"
      ]
    },
    "1520": {
      "op": "swap",
      "stack_out": [
        "box_prefixed_key%4#0",
        "val_as_bytes%0#0"
      ]
    },
    "1521": {
      "op": "box_put",
      "stack_out": []
    },
    "1522": {
      "retsub": true,
      "op": "retsub"
    },
    "1523": {
      "subroutine": "smart_contracts.pieout.contract.Pieout.del_box_commit_rand",
      "params": {},
      "block": "del_box_commit_rand",
      "stack_in": [],
      "op": "global GroupSize",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1525": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "1"
      ]
    },
    "1526": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1527": {
      "error": "Invalid group size. This app call only appproves standalone transactions.",
      "op": "assert // Invalid group size. This app call only appproves standalone transactions.",
      "stack_out": []
    },
    "1528": {
      "op": "bytec_3 // \"c_\"",
      "defined_out": [
        "\"c_\""
      ],
      "stack_out": [
        "\"c_\""
      ]
    },
    "1529": {
      "op": "txn Sender",
      "defined_out": [
        "\"c_\"",
        "materialized_values%0#0"
      ],
      "stack_out": [
        "\"c_\"",
        "materialized_values%0#0"
      ]
    },
    "1531": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "1532": {
      "op": "box_len",
      "defined_out": [
        "_%0#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "_%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1533": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "1535": {
      "error": "Box commit rand not found for sender address. Ensure commit rand was called.",
      "op": "assert // Box commit rand not found for sender address. Ensure commit rand was called.",
      "stack_out": []
    },
    "1536": {
      "op": "bytec_3 // \"c_\"",
      "stack_out": [
        "\"c_\""
      ]
    },
    "1537": {
      "op": "txn Sender",
      "defined_out": [
        "\"c_\"",
        "materialized_values%1#0"
      ],
      "stack_out": [
        "\"c_\"",
        "materialized_values%1#0"
      ]
    },
    "1539": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%1#0"
      ],
      "stack_out": [
        "box_prefixed_key%1#0"
      ]
    },
    "1540": {
      "op": "box_del",
      "defined_out": [
        "{box_del}"
      ],
      "stack_out": [
        "{box_del}"
      ]
    },
    "1541": {
      "op": "pop",
      "stack_out": []
    },
    "1542": {
      "op": "itxn_begin"
    },
    "1543": {
      "op": "txn Sender",
      "defined_out": [
        "inner_txn_params%0%%param_Receiver_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_Receiver_idx_0#0"
      ]
    },
    "1545": {
      "op": "pushbytes \"MBR refund payment transaction for box commit rand deletion\"",
      "defined_out": [
        "\"MBR refund payment transaction for box commit rand deletion\"",
        "inner_txn_params%0%%param_Receiver_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_Receiver_idx_0#0",
        "\"MBR refund payment transaction for box commit rand deletion\""
      ]
    },
    "1606": {
      "op": "itxn_field Note",
      "stack_out": [
        "inner_txn_params%0%%param_Receiver_idx_0#0"
      ]
    },
    "1608": {
      "op": "intc 6 // 19300",
      "defined_out": [
        "19300",
        "inner_txn_params%0%%param_Receiver_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_Receiver_idx_0#0",
        "19300"
      ]
    },
    "1610": {
      "op": "itxn_field Amount",
      "stack_out": [
        "inner_txn_params%0%%param_Receiver_idx_0#0"
      ]
    },
    "1612": {
      "op": "itxn_field Receiver",
      "stack_out": []
    },
    "1614": {
      "op": "intc_0 // pay",
      "defined_out": [
        "pay"
      ],
      "stack_out": [
        "pay"
      ]
    },
    "1615": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "1617": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1618": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "1620": {
      "op": "itxn_submit"
    },
    "1621": {
      "retsub": true,
      "op": "retsub"
    },
    "1622": {
      "subroutine": "smart_contracts.pieout.contract.Pieout.play_game",
      "params": {
        "game_id#0": "uint64"
      },
      "block": "play_game",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "1625": {
      "op": "intc_1 // 0",
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "1626": {
      "op": "dupn 6",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0"
      ]
    },
    "1628": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0"
      ]
    },
    "1630": {
      "op": "dupn 6",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0"
      ]
    },
    "1632": {
      "block": "play_game_while_top@4",
      "stack_in": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0"
      ],
      "op": "pushint 17510 // 17510",
      "defined_out": [
        "17510"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "17510"
      ]
    },
    "1636": {
      "op": "global OpcodeBudget",
      "defined_out": [
        "17510",
        "tmp%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "17510",
        "tmp%0#0"
      ]
    },
    "1638": {
      "op": ">",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "tmp%1#0"
      ]
    },
    "1639": {
      "op": "bz play_game_after_while@9",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0"
      ]
    },
    "1642": {
      "op": "itxn_begin"
    },
    "1643": {
      "op": "pushint 6 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "appl"
      ]
    },
    "1645": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0"
      ]
    },
    "1647": {
      "op": "pushint 5 // DeleteApplication",
      "defined_out": [
        "DeleteApplication"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "DeleteApplication"
      ]
    },
    "1649": {
      "op": "itxn_field OnCompletion",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0"
      ]
    },
    "1651": {
      "op": "bytec 12 // 0x068101",
      "defined_out": [
        "0x068101"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "0x068101"
      ]
    },
    "1653": {
      "op": "itxn_field ApprovalProgram",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0"
      ]
    },
    "1655": {
      "op": "bytec 12 // 0x068101",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "0x068101"
      ]
    },
    "1657": {
      "op": "itxn_field ClearStateProgram",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0"
      ]
    },
    "1659": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "0"
      ]
    },
    "1660": {
      "op": "itxn_field Fee",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0"
      ]
    },
    "1662": {
      "op": "itxn_submit"
    },
    "1663": {
      "op": "b play_game_while_top@4"
    },
    "1666": {
      "block": "play_game_after_while@9",
      "stack_in": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0"
      ],
      "op": "global GroupSize",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "tmp%0#0"
      ]
    },
    "1668": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "tmp%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "tmp%0#0",
        "1"
      ]
    },
    "1669": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "tmp%1#0"
      ]
    },
    "1670": {
      "error": "Invalid group size. This app call only appproves standalone transactions.",
      "op": "assert // Invalid group size. This app call only appproves standalone transactions.",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0"
      ]
    },
    "1671": {
      "op": "frame_dig -1",
      "defined_out": [
        "game_id#0 (copy)"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "game_id#0 (copy)"
      ]
    },
    "1673": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "encoded_value%0#0"
      ]
    },
    "1674": {
      "op": "dup",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "encoded_value%0#0",
        "encoded_value%0#0"
      ]
    },
    "1675": {
      "op": "frame_bury 1",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "encoded_value%0#0"
      ]
    },
    "1677": {
      "op": "bytec_2 // \"s_\"",
      "defined_out": [
        "\"s_\"",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "encoded_value%0#0",
        "\"s_\""
      ]
    },
    "1678": {
      "op": "swap",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "\"s_\"",
        "encoded_value%0#0"
      ]
    },
    "1679": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "box_prefixed_key%0#0"
      ]
    },
    "1680": {
      "op": "dup",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0"
      ]
    },
    "1681": {
      "op": "frame_bury 0",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "box_prefixed_key%0#0"
      ]
    },
    "1683": {
      "op": "dup",
      "defined_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)"
      ]
    },
    "1684": {
      "op": "box_len",
      "defined_out": [
        "_%0#0",
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "box_prefixed_key%0#0",
        "_%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1685": {
      "op": "bury 1",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "box_prefixed_key%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1687": {
      "error": "Box game state not found. Check if Game ID is valid.",
      "op": "assert // Box game state not found. Check if Game ID is valid.",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "box_prefixed_key%0#0"
      ]
    },
    "1688": {
      "op": "bytec_3 // \"c_\"",
      "defined_out": [
        "\"c_\"",
        "box_prefixed_key%0#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "box_prefixed_key%0#0",
        "\"c_\""
      ]
    },
    "1689": {
      "op": "txn Sender",
      "defined_out": [
        "\"c_\"",
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "materialized_values%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "box_prefixed_key%0#0",
        "\"c_\"",
        "materialized_values%0#0"
      ]
    },
    "1691": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%1#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "box_prefixed_key%0#0",
        "box_prefixed_key%1#0"
      ]
    },
    "1692": {
      "op": "box_len",
      "defined_out": [
        "_%1#0",
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "maybe_exists%1#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "box_prefixed_key%0#0",
        "_%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1693": {
      "op": "bury 1",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "box_prefixed_key%0#0",
        "maybe_exists%1#0"
      ]
    },
    "1695": {
      "error": "Box commit rand not found for sender address. Ensure commit rand was called.",
      "op": "assert // Box commit rand not found for sender address. Ensure commit rand was called.",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "box_prefixed_key%0#0"
      ]
    },
    "1696": {
      "op": "dup",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)"
      ]
    },
    "1697": {
      "op": "box_get",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "maybe_exists%2#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "box_prefixed_key%0#0",
        "maybe_value%0#0",
        "maybe_exists%2#0"
      ]
    },
    "1698": {
      "error": "check self.box_game_state entry exists",
      "op": "assert // check self.box_game_state entry exists",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "box_prefixed_key%0#0",
        "maybe_value%0#0"
      ]
    },
    "1699": {
      "op": "intc_0 // 1",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "box_prefixed_key%0#0",
        "maybe_value%0#0",
        "1"
      ]
    },
    "1700": {
      "op": "getbyte",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "box_prefixed_key%0#0",
        "tmp%3#0"
      ]
    },
    "1701": {
      "op": "frame_dig -1",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "box_prefixed_key%0#0",
        "tmp%3#0",
        "game_id#0 (copy)"
      ]
    },
    "1703": {
      "op": "bytec_1 // \"p_\"",
      "defined_out": [
        "\"p_\"",
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_id#0 (copy)",
        "tmp%3#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "box_prefixed_key%0#0",
        "tmp%3#0",
        "game_id#0 (copy)",
        "\"p_\""
      ]
    },
    "1704": {
      "op": "uncover 2",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "box_prefixed_key%0#0",
        "game_id#0 (copy)",
        "\"p_\"",
        "tmp%3#0"
      ]
    },
    "1706": {
      "op": "intc_0 // 1",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "box_prefixed_key%0#0",
        "game_id#0 (copy)",
        "\"p_\"",
        "tmp%3#0",
        "1"
      ]
    },
    "1707": {
      "callsub": "smart_contracts.pieout.subroutines.check_sender_in_game",
      "op": "callsub check_sender_in_game",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "box_prefixed_key%0#0",
        "tmp%4#0"
      ]
    },
    "1710": {
      "op": "intc_0 // 1",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "box_prefixed_key%0#0",
        "tmp%4#0",
        "1"
      ]
    },
    "1711": {
      "op": "==",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "box_prefixed_key%0#0",
        "tmp%5#0"
      ]
    },
    "1712": {
      "error": "Transaction sender is not recognized as a valid player for this game.",
      "op": "assert // Transaction sender is not recognized as a valid player for this game.",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "box_prefixed_key%0#0"
      ]
    },
    "1713": {
      "op": "box_get",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "maybe_exists%3#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "game_state#0",
        "maybe_exists%3#0"
      ]
    },
    "1714": {
      "op": "swap",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "maybe_exists%3#0",
        "game_state#0"
      ]
    },
    "1715": {
      "op": "dup",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "maybe_exists%3#0",
        "game_state#0",
        "game_state#0 (copy)"
      ]
    },
    "1716": {
      "op": "cover 2",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "game_state#0",
        "maybe_exists%3#0",
        "game_state#0"
      ]
    },
    "1718": {
      "op": "frame_bury 2",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "maybe_exists%3#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "game_state#0",
        "maybe_exists%3#0"
      ]
    },
    "1720": {
      "error": "check self.box_game_state entry exists",
      "op": "assert // check self.box_game_state entry exists",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "game_state#0"
      ]
    },
    "1721": {
      "op": "dup",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#0 (copy)",
        "tmp%3#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "game_state#0",
        "game_state#0 (copy)"
      ]
    },
    "1722": {
      "op": "intc_1 // 0",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "game_state#0",
        "game_state#0 (copy)",
        "0"
      ]
    },
    "1723": {
      "op": "getbit",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "is_true%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "game_state#0",
        "is_true%0#0"
      ]
    },
    "1724": {
      "op": "bytec_0 // 0x00",
      "defined_out": [
        "0x00",
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "is_true%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "game_state#0",
        "is_true%0#0",
        "0x00"
      ]
    },
    "1725": {
      "op": "intc_1 // 0",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "game_state#0",
        "is_true%0#0",
        "0x00",
        "0"
      ]
    },
    "1726": {
      "op": "uncover 2",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "game_state#0",
        "0x00",
        "0",
        "is_true%0#0"
      ]
    },
    "1728": {
      "op": "setbit",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "game_state#0",
        "encoded_bool%0#0"
      ]
    },
    "1729": {
      "op": "intc_1 // 0",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "game_state#0",
        "encoded_bool%0#0",
        "0"
      ]
    },
    "1730": {
      "op": "getbit",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "tmp%3#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "game_state#0",
        "tmp%6#0"
      ]
    },
    "1731": {
      "op": "intc_0 // 1",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "game_state#0",
        "tmp%6#0",
        "1"
      ]
    },
    "1732": {
      "op": "==",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "tmp%3#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "game_state#0",
        "tmp%7#0"
      ]
    },
    "1733": {
      "error": "Game state staking finalized value mismatch.",
      "op": "assert // Game state staking finalized value mismatch.",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "game_state#0"
      ]
    },
    "1734": {
      "error": "Index access is out of bounds",
      "op": "extract 6 8 // on error: Index access is out of bounds",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "reinterpret_biguint%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "reinterpret_biguint%0#0"
      ]
    },
    "1737": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "reinterpret_biguint%0#0",
        "tmp%3#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "reinterpret_biguint%0#0",
        "tmp%8#0"
      ]
    },
    "1739": {
      "op": "itob",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "reinterpret_biguint%0#0",
        "tmp%3#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "reinterpret_biguint%0#0",
        "tmp%9#0"
      ]
    },
    "1740": {
      "op": "b>=",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "tmp%10#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "tmp%10#0"
      ]
    },
    "1741": {
      "error": "Phase deadline expired. Latest block timestamp must not exceed expiry timestamp.",
      "op": "assert // Phase deadline expired. Latest block timestamp must not exceed expiry timestamp.",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0"
      ]
    },
    "1742": {
      "op": "intc_1 // 0",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "0"
      ]
    },
    "1743": {
      "op": "bytec 7 // \"commit_rand_salt_id\"",
      "defined_out": [
        "\"commit_rand_salt_id\"",
        "0",
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "0",
        "\"commit_rand_salt_id\""
      ]
    },
    "1745": {
      "op": "app_global_get_ex",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "maybe_exists%4#0",
        "maybe_value%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "maybe_value%2#0",
        "maybe_exists%4#0"
      ]
    },
    "1746": {
      "error": "check self.commit_rand_salt_id exists",
      "op": "assert // check self.commit_rand_salt_id exists",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "maybe_value%2#0"
      ]
    },
    "1747": {
      "op": "intc_0 // 1",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "maybe_value%2#0",
        "1"
      ]
    },
    "1748": {
      "op": "+",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "materialized_values%1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "materialized_values%1#0"
      ]
    },
    "1749": {
      "op": "bytec 7 // \"commit_rand_salt_id\"",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "materialized_values%1#0",
        "\"commit_rand_salt_id\""
      ]
    },
    "1751": {
      "op": "swap",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "\"commit_rand_salt_id\"",
        "materialized_values%1#0"
      ]
    },
    "1752": {
      "op": "app_global_put",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0"
      ]
    },
    "1753": {
      "op": "txn TxID",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "seed#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "seed#0"
      ]
    },
    "1755": {
      "op": "txn Sender",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "player#0",
        "seed#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "seed#0",
        "player#0"
      ]
    },
    "1757": {
      "op": "frame_bury 4",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "seed#0"
      ]
    },
    "1759": {
      "op": "dup",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "player#0",
        "seed#0",
        "seed#0 (copy)",
        "tmp%3#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "seed#0",
        "seed#0 (copy)"
      ]
    },
    "1760": {
      "op": "extract 16 8",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "player#0",
        "seed#0",
        "seed#1",
        "tmp%3#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "seed#0",
        "seed#1"
      ]
    },
    "1763": {
      "op": "len",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "seed#0",
        "tmp%0#0"
      ]
    },
    "1764": {
      "op": "pushint 8 // 8",
      "defined_out": [
        "8",
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "player#0",
        "seed#0",
        "tmp%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "seed#0",
        "tmp%0#0",
        "8"
      ]
    },
    "1766": {
      "op": "==",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "seed#0",
        "tmp%1#0"
      ]
    },
    "1767": {
      "op": "assert",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "seed#0"
      ]
    },
    "1768": {
      "op": "pushint 16 // 16",
      "defined_out": [
        "16",
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "player#0",
        "seed#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "seed#0",
        "16"
      ]
    },
    "1770": {
      "op": "extract_uint64",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "initial_state#0",
        "player#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "initial_state#0"
      ]
    },
    "1771": {
      "op": "intc_1 // 0",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "initial_state#0",
        "0"
      ]
    },
    "1772": {
      "op": "intc 7 // 6364136223846793005",
      "defined_out": [
        "0",
        "6364136223846793005",
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "initial_state#0",
        "player#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "initial_state#0",
        "0",
        "6364136223846793005"
      ]
    },
    "1774": {
      "op": "mulw",
      "defined_out": [
        "_high_mul#0",
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "initial_state#0",
        "low_mul#0",
        "player#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "initial_state#0",
        "_high_mul#0",
        "low_mul#0"
      ]
    },
    "1775": {
      "op": "bury 1",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "initial_state#0",
        "low_mul#0"
      ]
    },
    "1777": {
      "op": "intc 8 // 1442695040888963407",
      "defined_out": [
        "1442695040888963407",
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "initial_state#0",
        "low_mul#0",
        "player#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "initial_state#0",
        "low_mul#0",
        "1442695040888963407"
      ]
    },
    "1779": {
      "op": "addw",
      "defined_out": [
        "_high_add#0",
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "initial_state#0",
        "low_add#0",
        "player#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "initial_state#0",
        "_high_add#0",
        "low_add#0"
      ]
    },
    "1780": {
      "op": "bury 1",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "initial_state#0",
        "low_add#0"
      ]
    },
    "1782": {
      "op": "addw",
      "defined_out": [
        "_high_addw#0",
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "player#0",
        "state#2",
        "tmp%3#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "_high_addw#0",
        "state#2"
      ]
    },
    "1783": {
      "op": "bury 1",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "state#2"
      ]
    },
    "1785": {
      "op": "intc 7 // 6364136223846793005",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "state#2",
        "6364136223846793005"
      ]
    },
    "1787": {
      "op": "mulw",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "_high_mul#0",
        "low_mul#0"
      ]
    },
    "1788": {
      "op": "bury 1",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "low_mul#0"
      ]
    },
    "1790": {
      "op": "intc 8 // 1442695040888963407",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "low_mul#0",
        "1442695040888963407"
      ]
    },
    "1792": {
      "op": "addw",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "_high_add#0",
        "low_add#0"
      ]
    },
    "1793": {
      "op": "bury 1",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "low_add#0"
      ]
    },
    "1795": {
      "op": "pushbytes 0x00ff",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "low_add#0",
        "player#0",
        "result#1",
        "state#2",
        "tmp%3#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "low_add#0",
        "result#1"
      ]
    },
    "1799": {
      "op": "frame_bury 5",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "low_add#0"
      ]
    },
    "1801": {
      "op": "pushint 18446744073709486080 // 18446744073709486080",
      "defined_out": [
        "18446744073709486080",
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "low_add#0",
        "player#0",
        "result#1",
        "state#2",
        "tmp%3#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "low_add#0",
        "18446744073709486080"
      ]
    },
    "1812": {
      "op": "intc_0 // 1",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "low_add#0",
        "18446744073709486080",
        "1"
      ]
    },
    "1813": {
      "op": "addw",
      "defined_out": [
        "_addw_high#0",
        "addw_low#0",
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "low_add#0",
        "player#0",
        "result#1",
        "state#2",
        "tmp%3#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "low_add#0",
        "_addw_high#0",
        "addw_low#0"
      ]
    },
    "1814": {
      "op": "bury 1",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "low_add#0",
        "addw_low#0"
      ]
    },
    "1816": {
      "op": "intc 9 // 4294967295",
      "defined_out": [
        "4294967295",
        "addw_low#0",
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "low_add#0",
        "player#0",
        "result#1",
        "state#2",
        "tmp%3#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "low_add#0",
        "addw_low#0",
        "4294967295"
      ]
    },
    "1818": {
      "op": "&",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "low_add#0",
        "tmp%0#0"
      ]
    },
    "1819": {
      "op": "intc 11 // 65535",
      "defined_out": [
        "65535",
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "low_add#0",
        "player#0",
        "result#1",
        "state#2",
        "tmp%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "low_add#0",
        "tmp%0#0",
        "65535"
      ]
    },
    "1821": {
      "op": "%",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "low_add#0",
        "player#0",
        "result#1",
        "state#2",
        "threshold#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "low_add#0",
        "threshold#0"
      ]
    },
    "1822": {
      "op": "frame_bury 11",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "low_add#0",
        "player#0",
        "result#1",
        "state#2",
        "threshold#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "low_add#0"
      ]
    },
    "1824": {
      "op": "intc_1 // 0",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "i#0",
        "low_add#0",
        "player#0",
        "result#1",
        "state#2",
        "threshold#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "low_add#0",
        "i#0"
      ]
    },
    "1825": {
      "op": "frame_bury 8",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "state#2"
      ]
    },
    "1827": {
      "op": "frame_bury 10",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "i#0",
        "player#0",
        "result#1",
        "state#2",
        "threshold#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0"
      ]
    },
    "1829": {
      "block": "play_game_for_header@13",
      "stack_in": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0"
      ],
      "op": "frame_dig 8",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "i#0"
      ]
    },
    "1831": {
      "op": "pushint 255 // 255",
      "defined_out": [
        "255",
        "i#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "i#0",
        "255"
      ]
    },
    "1834": {
      "op": "<",
      "defined_out": [
        "continue_looping%1#0",
        "i#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "continue_looping%1#0"
      ]
    },
    "1835": {
      "op": "bz play_game_after_for@18",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0"
      ]
    },
    "1838": {
      "block": "play_game_while_top@15",
      "stack_in": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0"
      ],
      "op": "frame_dig 10",
      "defined_out": [
        "state#2"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "state#2"
      ]
    },
    "1840": {
      "op": "dup",
      "defined_out": [
        "state#2",
        "state#2 (copy)"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "state#2",
        "state#2 (copy)"
      ]
    },
    "1841": {
      "op": "intc 7 // 6364136223846793005",
      "defined_out": [
        "6364136223846793005",
        "state#2",
        "state#2 (copy)"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "state#2",
        "state#2 (copy)",
        "6364136223846793005"
      ]
    },
    "1843": {
      "op": "mulw",
      "defined_out": [
        "_high_mul#0",
        "low_mul#0",
        "state#2"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "state#2",
        "_high_mul#0",
        "low_mul#0"
      ]
    },
    "1844": {
      "op": "bury 1",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "state#2",
        "low_mul#0"
      ]
    },
    "1846": {
      "op": "intc 8 // 1442695040888963407",
      "defined_out": [
        "1442695040888963407",
        "low_mul#0",
        "state#2"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "state#2",
        "low_mul#0",
        "1442695040888963407"
      ]
    },
    "1848": {
      "op": "addw",
      "defined_out": [
        "_high_add#0",
        "low_add#0",
        "state#2"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "state#2",
        "_high_add#0",
        "low_add#0"
      ]
    },
    "1849": {
      "op": "cover 2",
      "defined_out": [
        "_high_add#0",
        "low_add#0",
        "state#2"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "low_add#0",
        "state#2",
        "_high_add#0"
      ]
    },
    "1851": {
      "op": "pop",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "low_add#0",
        "state#2"
      ]
    },
    "1852": {
      "op": "dup",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "low_add#0",
        "state#2",
        "state#2 (copy)"
      ]
    },
    "1853": {
      "op": "pushint 18 // 18",
      "defined_out": [
        "18",
        "low_add#0",
        "state#2",
        "state#2 (copy)"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "low_add#0",
        "state#2",
        "state#2 (copy)",
        "18"
      ]
    },
    "1855": {
      "op": "shr",
      "defined_out": [
        "low_add#0",
        "state#2",
        "tmp%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "low_add#0",
        "state#2",
        "tmp%0#0"
      ]
    },
    "1856": {
      "op": "dig 1",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "low_add#0",
        "state#2",
        "tmp%0#0",
        "state#2 (copy)"
      ]
    },
    "1858": {
      "op": "^",
      "defined_out": [
        "low_add#0",
        "state#2",
        "tmp%1#5"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "low_add#0",
        "state#2",
        "tmp%1#5"
      ]
    },
    "1859": {
      "op": "pushint 27 // 27",
      "defined_out": [
        "27",
        "low_add#0",
        "state#2",
        "tmp%1#5"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "low_add#0",
        "state#2",
        "tmp%1#5",
        "27"
      ]
    },
    "1861": {
      "op": "shr",
      "defined_out": [
        "low_add#0",
        "state#2",
        "value#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "low_add#0",
        "state#2",
        "value#0"
      ]
    },
    "1862": {
      "op": "intc 9 // 4294967295",
      "defined_out": [
        "4294967295",
        "low_add#0",
        "state#2",
        "value#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "low_add#0",
        "state#2",
        "value#0",
        "4294967295"
      ]
    },
    "1864": {
      "op": "&",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "low_add#0",
        "state#2",
        "value#0"
      ]
    },
    "1865": {
      "op": "swap",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "low_add#0",
        "value#0",
        "state#2"
      ]
    },
    "1866": {
      "op": "pushint 59 // 59",
      "defined_out": [
        "59",
        "low_add#0",
        "state#2",
        "value#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "low_add#0",
        "value#0",
        "state#2",
        "59"
      ]
    },
    "1868": {
      "op": "shr",
      "defined_out": [
        "low_add#0",
        "rot#0",
        "state#2",
        "value#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "low_add#0",
        "value#0",
        "rot#0"
      ]
    },
    "1869": {
      "op": "dup2",
      "defined_out": [
        "low_add#0",
        "rot#0",
        "rot#0 (copy)",
        "state#2",
        "value#0",
        "value#0 (copy)"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "low_add#0",
        "value#0",
        "rot#0",
        "value#0 (copy)",
        "rot#0 (copy)"
      ]
    },
    "1870": {
      "op": "shr",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "low_add#0",
        "value#0",
        "rot#0",
        "tmp%0#0"
      ]
    },
    "1871": {
      "op": "swap",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "low_add#0",
        "value#0",
        "tmp%0#0",
        "rot#0"
      ]
    },
    "1872": {
      "op": "~",
      "defined_out": [
        "low_add#0",
        "state#2",
        "tmp%0#0",
        "tmp%0#9",
        "value#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "low_add#0",
        "value#0",
        "tmp%0#0",
        "tmp%0#9"
      ]
    },
    "1873": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "low_add#0",
        "state#2",
        "tmp%0#0",
        "tmp%0#9",
        "value#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "low_add#0",
        "value#0",
        "tmp%0#0",
        "tmp%0#9",
        "1"
      ]
    },
    "1874": {
      "op": "addw",
      "defined_out": [
        "_addw_high#0",
        "addw_low#0",
        "low_add#0",
        "state#2",
        "tmp%0#0",
        "value#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "low_add#0",
        "value#0",
        "tmp%0#0",
        "_addw_high#0",
        "addw_low#0"
      ]
    },
    "1875": {
      "op": "bury 1",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "low_add#0",
        "value#0",
        "tmp%0#0",
        "addw_low#0"
      ]
    },
    "1877": {
      "op": "pushint 31 // 31",
      "defined_out": [
        "31",
        "addw_low#0",
        "low_add#0",
        "state#2",
        "tmp%0#0",
        "value#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "low_add#0",
        "value#0",
        "tmp%0#0",
        "addw_low#0",
        "31"
      ]
    },
    "1879": {
      "op": "&",
      "defined_out": [
        "low_add#0",
        "state#2",
        "tmp%0#0",
        "tmp%2#2",
        "value#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "low_add#0",
        "value#0",
        "tmp%0#0",
        "tmp%2#2"
      ]
    },
    "1880": {
      "op": "uncover 2",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "low_add#0",
        "tmp%0#0",
        "tmp%2#2",
        "value#0"
      ]
    },
    "1882": {
      "op": "swap",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "low_add#0",
        "tmp%0#0",
        "value#0",
        "tmp%2#2"
      ]
    },
    "1883": {
      "op": "shl",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "low_add#0",
        "tmp%0#0",
        "value#0"
      ]
    },
    "1884": {
      "op": "intc 9 // 4294967295",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "low_add#0",
        "tmp%0#0",
        "value#0",
        "4294967295"
      ]
    },
    "1886": {
      "op": "&",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "low_add#0",
        "tmp%0#0",
        "tmp%0#9"
      ]
    },
    "1887": {
      "op": "|",
      "defined_out": [
        "candidate#0",
        "low_add#0",
        "state#2"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "low_add#0",
        "candidate#0"
      ]
    },
    "1888": {
      "op": "dup",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "low_add#0",
        "candidate#0",
        "candidate#0"
      ]
    },
    "1889": {
      "op": "frame_bury 7",
      "defined_out": [
        "candidate#0",
        "low_add#0",
        "state#2"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "low_add#0",
        "candidate#0"
      ]
    },
    "1891": {
      "op": "frame_dig 11",
      "defined_out": [
        "candidate#0",
        "low_add#0",
        "state#2",
        "threshold#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "low_add#0",
        "candidate#0",
        "threshold#0"
      ]
    },
    "1893": {
      "op": ">=",
      "defined_out": [
        "candidate#0",
        "low_add#0",
        "state#2",
        "threshold#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "low_add#0",
        "tmp%20#0"
      ]
    },
    "1894": {
      "op": "bz play_game_after_if_else@17",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "low_add#0"
      ]
    },
    "1897": {
      "op": "frame_dig 7",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "low_add#0",
        "candidate#0"
      ]
    },
    "1899": {
      "op": "intc 11 // 65535",
      "defined_out": [
        "65535",
        "candidate#0",
        "low_add#0",
        "state#2",
        "threshold#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "low_add#0",
        "candidate#0",
        "65535"
      ]
    },
    "1901": {
      "op": "%",
      "defined_out": [
        "candidate#0",
        "low_add#0",
        "state#2",
        "threshold#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "low_add#0",
        "tmp%21#0"
      ]
    },
    "1902": {
      "op": "intc_0 // 1",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "low_add#0",
        "tmp%21#0",
        "1"
      ]
    },
    "1903": {
      "op": "+",
      "defined_out": [
        "candidate#0",
        "low_add#0",
        "state#2",
        "threshold#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "low_add#0",
        "tmp%22#0"
      ]
    },
    "1904": {
      "op": "itob",
      "defined_out": [
        "candidate#0",
        "low_add#0",
        "state#2",
        "threshold#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "low_add#0",
        "tmp%23#0"
      ]
    },
    "1905": {
      "op": "extract 6 2",
      "defined_out": [
        "candidate#0",
        "low_add#0",
        "state#2",
        "threshold#0",
        "tmp%24#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "low_add#0",
        "tmp%24#0"
      ]
    },
    "1908": {
      "op": "frame_dig 5",
      "defined_out": [
        "candidate#0",
        "low_add#0",
        "result#1",
        "state#2",
        "threshold#0",
        "tmp%24#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "low_add#0",
        "tmp%24#0",
        "result#1"
      ]
    },
    "1910": {
      "op": "swap",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "low_add#0",
        "result#1",
        "tmp%24#0"
      ]
    },
    "1911": {
      "op": "concat",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "low_add#0",
        "result#1"
      ]
    },
    "1912": {
      "op": "frame_bury 5",
      "defined_out": [
        "candidate#0",
        "low_add#0",
        "result#1",
        "state#2",
        "threshold#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "low_add#0"
      ]
    },
    "1914": {
      "op": "frame_dig 8",
      "defined_out": [
        "candidate#0",
        "i#0",
        "low_add#0",
        "result#1",
        "state#2",
        "threshold#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "low_add#0",
        "i#0"
      ]
    },
    "1916": {
      "op": "intc_0 // 1",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "low_add#0",
        "i#0",
        "1"
      ]
    },
    "1917": {
      "op": "+",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "low_add#0",
        "i#0"
      ]
    },
    "1918": {
      "op": "frame_bury 8",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "state#2"
      ]
    },
    "1920": {
      "op": "frame_bury 10",
      "defined_out": [
        "candidate#0",
        "i#0",
        "result#1",
        "state#2",
        "threshold#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0"
      ]
    },
    "1922": {
      "op": "b play_game_for_header@13"
    },
    "1925": {
      "block": "play_game_after_if_else@17",
      "stack_in": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "low_add#0"
      ],
      "op": "frame_bury 10",
      "defined_out": [
        "state#2"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0"
      ]
    },
    "1927": {
      "op": "b play_game_while_top@15"
    },
    "1930": {
      "block": "play_game_after_for@18",
      "stack_in": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0"
      ],
      "op": "intc_1 // 0",
      "defined_out": [
        "score#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "score#0"
      ]
    },
    "1931": {
      "op": "frame_bury 9",
      "defined_out": [
        "score#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0"
      ]
    },
    "1933": {
      "op": "frame_dig 5",
      "defined_out": [
        "result#1",
        "score#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "result#1"
      ]
    },
    "1935": {
      "op": "len",
      "defined_out": [
        "result#1",
        "score#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "tmp%3#0"
      ]
    },
    "1936": {
      "op": "frame_bury 13",
      "defined_out": [
        "result#1",
        "score#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0"
      ]
    },
    "1938": {
      "op": "intc_2 // 2",
      "defined_out": [
        "i#0",
        "result#1",
        "score#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "i#0"
      ]
    },
    "1939": {
      "op": "frame_bury 8",
      "defined_out": [
        "i#0",
        "result#1",
        "score#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0"
      ]
    },
    "1941": {
      "block": "play_game_for_header@20",
      "stack_in": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0"
      ],
      "op": "frame_dig 8",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "i#0"
      ]
    },
    "1943": {
      "op": "frame_dig 13",
      "defined_out": [
        "i#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "i#0",
        "tmp%3#0"
      ]
    },
    "1945": {
      "op": "<",
      "defined_out": [
        "continue_looping%0#0",
        "i#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "continue_looping%0#0"
      ]
    },
    "1946": {
      "op": "bz play_game_after_for@23",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0"
      ]
    },
    "1949": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "i#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "2"
      ]
    },
    "1950": {
      "op": "frame_dig 13",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "2",
        "tmp%3#0"
      ]
    },
    "1952": {
      "op": "dup",
      "defined_out": [
        "2",
        "i#0",
        "tmp%3#0",
        "tmp%3#0 (copy)"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "2",
        "tmp%3#0 (copy)",
        "tmp%3#0 (copy)"
      ]
    },
    "1953": {
      "op": "cover 2",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "tmp%3#0",
        "2",
        "tmp%3#0 (copy)"
      ]
    },
    "1955": {
      "op": ">=",
      "defined_out": [
        "i#0",
        "is_out_of_bounds%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "tmp%3#0",
        "is_out_of_bounds%0#0"
      ]
    },
    "1956": {
      "op": "intc_2 // 2",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "tmp%3#0",
        "is_out_of_bounds%0#0",
        "2"
      ]
    },
    "1957": {
      "op": "dig 2",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "tmp%3#0",
        "is_out_of_bounds%0#0",
        "2",
        "tmp%3#0 (copy)"
      ]
    },
    "1959": {
      "op": "uncover 2",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "tmp%3#0",
        "2",
        "tmp%3#0 (copy)",
        "is_out_of_bounds%0#0"
      ]
    },
    "1961": {
      "op": "select",
      "defined_out": [
        "bounded_index%0#0",
        "i#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "tmp%3#0",
        "bounded_index%0#0"
      ]
    },
    "1962": {
      "op": "frame_dig 5",
      "defined_out": [
        "bounded_index%0#0",
        "i#0",
        "result#1",
        "tmp%3#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "tmp%3#0",
        "bounded_index%0#0",
        "result#1"
      ]
    },
    "1964": {
      "op": "swap",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "tmp%3#0",
        "result#1",
        "bounded_index%0#0"
      ]
    },
    "1965": {
      "op": "uncover 2",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "result#1",
        "bounded_index%0#0",
        "tmp%3#0"
      ]
    },
    "1967": {
      "op": "substring3",
      "defined_out": [
        "i#0",
        "result#1",
        "tmp%3#0",
        "tmp%4#1"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "tmp%4#1"
      ]
    },
    "1968": {
      "op": "frame_dig 8",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "tmp%4#1",
        "i#0"
      ]
    },
    "1970": {
      "op": "extract_uint16",
      "defined_out": [
        "i#0",
        "result#1",
        "roll#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "roll#0"
      ]
    },
    "1971": {
      "op": "pushint 10992 // 10992",
      "defined_out": [
        "10992",
        "i#0",
        "result#1",
        "roll#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "roll#0",
        "10992"
      ]
    },
    "1974": {
      "op": "<=",
      "defined_out": [
        "i#0",
        "result#1",
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "tmp%5#0"
      ]
    },
    "1975": {
      "op": "bnz play_game_after_for@23",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0"
      ]
    },
    "1978": {
      "op": "frame_dig 9",
      "defined_out": [
        "i#0",
        "result#1",
        "score#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "score#0"
      ]
    },
    "1980": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "i#0",
        "result#1",
        "score#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "score#0",
        "1"
      ]
    },
    "1981": {
      "op": "+",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "score#0"
      ]
    },
    "1982": {
      "op": "frame_bury 9",
      "defined_out": [
        "i#0",
        "result#1",
        "score#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0"
      ]
    },
    "1984": {
      "op": "frame_dig 8",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "i#0"
      ]
    },
    "1986": {
      "op": "intc_2 // 2",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "i#0",
        "2"
      ]
    },
    "1987": {
      "op": "+",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "i#0"
      ]
    },
    "1988": {
      "op": "frame_bury 8",
      "defined_out": [
        "i#0",
        "result#1",
        "score#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0"
      ]
    },
    "1990": {
      "op": "b play_game_for_header@20"
    },
    "1993": {
      "block": "play_game_after_for@23",
      "stack_in": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0"
      ],
      "op": "frame_dig 9",
      "defined_out": [
        "score#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "score#0"
      ]
    },
    "1995": {
      "op": "itob",
      "defined_out": [
        "score#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "val_as_bytes%0#0"
      ]
    },
    "1996": {
      "op": "dup",
      "defined_out": [
        "score#0",
        "val_as_bytes%0#0",
        "val_as_bytes%0#0 (copy)"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "val_as_bytes%0#0",
        "val_as_bytes%0#0 (copy)"
      ]
    },
    "1997": {
      "op": "bitlen",
      "defined_out": [
        "bitlen%0#0",
        "score#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "val_as_bytes%0#0",
        "bitlen%0#0"
      ]
    },
    "1998": {
      "op": "pushint 8 // 8",
      "defined_out": [
        "8",
        "bitlen%0#0",
        "score#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "val_as_bytes%0#0",
        "bitlen%0#0",
        "8"
      ]
    },
    "2000": {
      "op": "<=",
      "defined_out": [
        "no_overflow%0#0",
        "score#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "val_as_bytes%0#0",
        "no_overflow%0#0"
      ]
    },
    "2001": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "val_as_bytes%0#0"
      ]
    },
    "2002": {
      "op": "extract 7 1",
      "defined_out": [
        "score#0",
        "uint8_score#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "uint8_score#0"
      ]
    },
    "2005": {
      "op": "dup",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "uint8_score#0",
        "uint8_score#0"
      ]
    },
    "2006": {
      "op": "frame_bury 6",
      "defined_out": [
        "score#0",
        "uint8_score#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "uint8_score#0"
      ]
    },
    "2008": {
      "op": "frame_dig 1",
      "defined_out": [
        "encoded_value%0#0",
        "score#0",
        "uint8_score#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "uint8_score#0",
        "encoded_value%0#0"
      ]
    },
    "2010": {
      "op": "frame_dig 4",
      "defined_out": [
        "encoded_value%0#0",
        "player#0",
        "score#0",
        "uint8_score#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "uint8_score#0",
        "encoded_value%0#0",
        "player#0"
      ]
    },
    "2012": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "encoded_value%0#0",
        "player#0",
        "score#0",
        "uint8_score#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "uint8_score#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "2013": {
      "op": "dig 1",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "encoded_value%0#0",
        "player#0",
        "score#0",
        "uint8_score#0",
        "uint8_score#0 (copy)"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "uint8_score#0",
        "encoded_tuple_buffer%2#0",
        "uint8_score#0 (copy)"
      ]
    },
    "2015": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "encoded_value%0#0",
        "player#0",
        "score#0",
        "uint8_score#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "uint8_score#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "2016": {
      "op": "pushbytes 0xde2244d6 // method \"player_score(uint64,address,uint8)\"",
      "defined_out": [
        "Method(player_score(uint64,address,uint8))",
        "encoded_tuple_buffer%3#0",
        "encoded_value%0#0",
        "player#0",
        "score#0",
        "uint8_score#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "uint8_score#0",
        "encoded_tuple_buffer%3#0",
        "Method(player_score(uint64,address,uint8))"
      ]
    },
    "2022": {
      "op": "swap",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "uint8_score#0",
        "Method(player_score(uint64,address,uint8))",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "2023": {
      "op": "concat",
      "defined_out": [
        "encoded_value%0#0",
        "event%0#0",
        "player#0",
        "score#0",
        "uint8_score#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "uint8_score#0",
        "event%0#0"
      ]
    },
    "2024": {
      "op": "log",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "uint8_score#0"
      ]
    },
    "2025": {
      "op": "frame_dig 2",
      "defined_out": [
        "encoded_value%0#0",
        "game_state#0",
        "player#0",
        "score#0",
        "uint8_score#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "uint8_score#0",
        "game_state#0"
      ]
    },
    "2027": {
      "op": "dup",
      "defined_out": [
        "encoded_value%0#0",
        "game_state#0",
        "game_state#0 (copy)",
        "player#0",
        "score#0",
        "uint8_score#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "uint8_score#0",
        "game_state#0",
        "game_state#0 (copy)"
      ]
    },
    "2028": {
      "error": "Index access is out of bounds",
      "op": "extract 3 1 // on error: Index access is out of bounds",
      "defined_out": [
        "encoded_value%0#0",
        "game_state#0",
        "player#0",
        "reinterpret_biguint%1#0",
        "score#0",
        "uint8_score#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "uint8_score#0",
        "game_state#0",
        "reinterpret_biguint%1#0"
      ]
    },
    "2031": {
      "op": "uncover 2",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "game_state#0",
        "reinterpret_biguint%1#0",
        "uint8_score#0"
      ]
    },
    "2033": {
      "op": "b<",
      "defined_out": [
        "encoded_value%0#0",
        "game_state#0",
        "player#0",
        "score#0",
        "tmp%6#0",
        "uint8_score#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "game_state#0",
        "tmp%6#0"
      ]
    },
    "2034": {
      "op": "swap",
      "defined_out": [
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "score#0",
        "tmp%6#0",
        "uint8_score#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "tmp%6#0",
        "game_state#13"
      ]
    },
    "2035": {
      "op": "frame_bury 3",
      "defined_out": [
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "score#0",
        "tmp%6#0",
        "uint8_score#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "tmp%6#0"
      ]
    },
    "2037": {
      "op": "bz play_game_after_if_else@25",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0"
      ]
    },
    "2040": {
      "op": "frame_dig 2",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "game_state#0"
      ]
    },
    "2042": {
      "op": "frame_dig 6",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "game_state#0",
        "uint8_score#0"
      ]
    },
    "2044": {
      "op": "replace2 3",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "game_state#0"
      ]
    },
    "2046": {
      "op": "frame_dig 4",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "game_state#0",
        "player#0"
      ]
    },
    "2048": {
      "op": "replace2 54",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "game_state#13"
      ]
    },
    "2050": {
      "op": "frame_bury 3",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0"
      ]
    },
    "2052": {
      "block": "play_game_after_if_else@25",
      "stack_in": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0"
      ],
      "op": "frame_dig 3",
      "defined_out": [
        "game_state#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "game_state#0"
      ]
    },
    "2054": {
      "op": "dup",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "game_state#0",
        "game_state#0"
      ]
    },
    "2055": {
      "op": "frame_bury 2",
      "defined_out": [
        "game_state#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "game_state#0"
      ]
    },
    "2057": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "game_state#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "game_state#0",
        "3"
      ]
    },
    "2059": {
      "op": "getbyte",
      "defined_out": [
        "game_state#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "tmp%14#0"
      ]
    },
    "2060": {
      "op": "dup",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "tmp%14#0",
        "tmp%14#0"
      ]
    },
    "2061": {
      "op": "frame_bury 12",
      "defined_out": [
        "game_state#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "tmp%14#0"
      ]
    },
    "2063": {
      "op": "intc_1 // 0",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "tmp%14#0",
        "0"
      ]
    },
    "2064": {
      "op": "bytec 8 // \"top_score\"",
      "defined_out": [
        "\"top_score\"",
        "0",
        "game_state#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "tmp%14#0",
        "0",
        "\"top_score\""
      ]
    },
    "2066": {
      "op": "app_global_get_ex",
      "defined_out": [
        "game_state#0",
        "maybe_exists%5#0",
        "maybe_value%3#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "tmp%14#0",
        "maybe_value%3#0",
        "maybe_exists%5#0"
      ]
    },
    "2067": {
      "error": "check self.top_score exists",
      "op": "assert // check self.top_score exists",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "tmp%14#0",
        "maybe_value%3#0"
      ]
    },
    "2068": {
      "op": ">",
      "defined_out": [
        "game_state#0",
        "tmp%14#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "tmp%15#0"
      ]
    },
    "2069": {
      "op": "bz play_game_after_if_else@2",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0"
      ]
    },
    "2072": {
      "op": "bytec 8 // \"top_score\"",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "\"top_score\""
      ]
    },
    "2074": {
      "op": "frame_dig 12",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "\"top_score\"",
        "tmp%14#0"
      ]
    },
    "2076": {
      "op": "app_global_put",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0"
      ]
    },
    "2077": {
      "op": "bytec 10 // \"top_score_address\"",
      "defined_out": [
        "\"top_score_address\"",
        "game_state#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "\"top_score_address\""
      ]
    },
    "2079": {
      "op": "txn Sender",
      "defined_out": [
        "\"top_score_address\"",
        "game_state#0",
        "materialized_values%3#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "\"top_score_address\"",
        "materialized_values%3#0"
      ]
    },
    "2081": {
      "op": "app_global_put",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0"
      ]
    },
    "2082": {
      "block": "play_game_after_if_else@2",
      "stack_in": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0"
      ],
      "op": "frame_dig 2",
      "defined_out": [
        "game_state#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "game_state#0"
      ]
    },
    "2084": {
      "op": "dup",
      "defined_out": [
        "game_state#0",
        "game_state#0 (copy)"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "game_state#0",
        "game_state#0 (copy)"
      ]
    },
    "2085": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "game_state#0",
        "game_state#0 (copy)"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "game_state#0",
        "game_state#0 (copy)",
        "2"
      ]
    },
    "2086": {
      "op": "getbyte",
      "defined_out": [
        "game_state#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "game_state#0",
        "tmp%18#0"
      ]
    },
    "2087": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "game_state#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "game_state#0",
        "tmp%18#0",
        "1"
      ]
    },
    "2088": {
      "op": "-",
      "defined_out": [
        "game_state#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "game_state#0",
        "to_encode%0#0"
      ]
    },
    "2089": {
      "op": "itob",
      "defined_out": [
        "game_state#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "game_state#0",
        "val_as_bytes%0#0"
      ]
    },
    "2090": {
      "op": "dup",
      "defined_out": [
        "game_state#0",
        "val_as_bytes%0#0",
        "val_as_bytes%0#0 (copy)"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "game_state#0",
        "val_as_bytes%0#0",
        "val_as_bytes%0#0 (copy)"
      ]
    },
    "2091": {
      "op": "bitlen",
      "defined_out": [
        "bitlen%0#0",
        "game_state#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "game_state#0",
        "val_as_bytes%0#0",
        "bitlen%0#0"
      ]
    },
    "2092": {
      "op": "pushint 8 // 8",
      "defined_out": [
        "8",
        "bitlen%0#0",
        "game_state#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "game_state#0",
        "val_as_bytes%0#0",
        "bitlen%0#0",
        "8"
      ]
    },
    "2094": {
      "op": "<=",
      "defined_out": [
        "game_state#0",
        "no_overflow%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "game_state#0",
        "val_as_bytes%0#0",
        "no_overflow%0#0"
      ]
    },
    "2095": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "game_state#0",
        "val_as_bytes%0#0"
      ]
    },
    "2096": {
      "op": "extract 7 1",
      "defined_out": [
        "game_state#0",
        "uint8%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "game_state#0",
        "uint8%0#0"
      ]
    },
    "2099": {
      "op": "replace2 2",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "game_state#0"
      ]
    },
    "2101": {
      "op": "frame_dig -1",
      "defined_out": [
        "game_id#0 (copy)",
        "game_state#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "game_state#0",
        "game_id#0 (copy)"
      ]
    },
    "2103": {
      "op": "swap",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "game_id#0 (copy)",
        "game_state#0"
      ]
    },
    "2104": {
      "op": "bytec_1 // \"p_\"",
      "defined_out": [
        "\"p_\"",
        "game_id#0 (copy)",
        "game_state#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "game_id#0 (copy)",
        "game_state#0",
        "\"p_\""
      ]
    },
    "2105": {
      "callsub": "smart_contracts.pieout.subroutines.is_game_over",
      "op": "callsub is_game_over",
      "defined_out": [
        "game_state#0",
        "is_game_over%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "is_game_over%0#0",
        "game_state#0"
      ]
    },
    "2108": {
      "op": "bury 1",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "game_state#0"
      ]
    },
    "2110": {
      "op": "frame_dig 0",
      "defined_out": [
        "box_prefixed_key%0#0",
        "game_state#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "game_state#0",
        "box_prefixed_key%0#0"
      ]
    },
    "2112": {
      "op": "swap",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0",
        "box_prefixed_key%0#0",
        "game_state#0"
      ]
    },
    "2113": {
      "op": "box_put",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#13",
        "player#0",
        "result#1",
        "uint8_score#0",
        "candidate#0",
        "i#0",
        "score#0",
        "state#2",
        "threshold#0",
        "tmp%14#0",
        "tmp%3#0"
      ]
    },
    "2114": {
      "retsub": true,
      "op": "retsub"
    },
    "2115": {
      "subroutine": "smart_contracts.pieout.contract.Pieout.check_game_event",
      "params": {
        "game_id#0": "uint64",
        "game_event_id#0": "bytes"
      },
      "block": "check_game_event",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "2118": {
      "op": "global GroupSize",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2120": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "1"
      ]
    },
    "2121": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "2122": {
      "error": "Invalid group size. This app call only appproves standalone transactions.",
      "op": "assert // Invalid group size. This app call only appproves standalone transactions.",
      "stack_out": []
    },
    "2123": {
      "op": "frame_dig -2",
      "defined_out": [
        "game_id#0 (copy)"
      ],
      "stack_out": [
        "game_id#0 (copy)"
      ]
    },
    "2125": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "2126": {
      "op": "bytec_2 // \"s_\"",
      "defined_out": [
        "\"s_\"",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "\"s_\""
      ]
    },
    "2127": {
      "op": "swap",
      "stack_out": [
        "\"s_\"",
        "encoded_value%0#0"
      ]
    },
    "2128": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "2129": {
      "op": "dup",
      "defined_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)"
      ]
    },
    "2130": {
      "op": "box_len",
      "defined_out": [
        "_%0#0",
        "box_prefixed_key%0#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "_%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2131": {
      "op": "bury 1",
      "stack_out": [
        "box_prefixed_key%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2133": {
      "error": "Box game state not found. Check if Game ID is valid.",
      "op": "assert // Box game state not found. Check if Game ID is valid.",
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "2134": {
      "op": "box_get",
      "defined_out": [
        "game_state#0",
        "maybe_exists%1#0"
      ],
      "stack_out": [
        "game_state#0",
        "maybe_exists%1#0"
      ]
    },
    "2135": {
      "error": "check self.box_game_state entry exists",
      "op": "assert // check self.box_game_state entry exists",
      "stack_out": [
        "game_state#0"
      ]
    },
    "2136": {
      "op": "frame_dig -1",
      "defined_out": [
        "game_event_id#0 (copy)",
        "game_state#0"
      ],
      "stack_out": [
        "game_state#0",
        "game_event_id#0 (copy)"
      ]
    },
    "2138": {
      "op": "btoi",
      "defined_out": [
        "game_state#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "game_state#0",
        "tmp%2#0"
      ]
    },
    "2139": {
      "op": "dup",
      "defined_out": [
        "game_state#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "game_state#0",
        "tmp%2#0",
        "tmp%2#0"
      ]
    },
    "2140": {
      "op": "bnz check_game_event_else_body@2",
      "stack_out": [
        "game_state#0",
        "tmp%2#0"
      ]
    },
    "2143": {
      "op": "frame_dig 0",
      "stack_out": [
        "game_state#0",
        "tmp%2#0",
        "game_state#0"
      ]
    },
    "2145": {
      "op": "dup",
      "defined_out": [
        "game_state#0",
        "game_state#0 (copy)",
        "tmp%2#0"
      ],
      "stack_out": [
        "game_state#0",
        "tmp%2#0",
        "game_state#0",
        "game_state#0 (copy)"
      ]
    },
    "2146": {
      "op": "intc_0 // 1",
      "stack_out": [
        "game_state#0",
        "tmp%2#0",
        "game_state#0",
        "game_state#0 (copy)",
        "1"
      ]
    },
    "2147": {
      "op": "getbyte",
      "defined_out": [
        "game_state#0",
        "tmp%2#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "game_state#0",
        "tmp%2#0",
        "game_state#0",
        "tmp%5#0"
      ]
    },
    "2148": {
      "op": "frame_dig -2",
      "stack_out": [
        "game_state#0",
        "tmp%2#0",
        "game_state#0",
        "tmp%5#0",
        "game_id#0 (copy)"
      ]
    },
    "2150": {
      "op": "bytec_1 // \"p_\"",
      "defined_out": [
        "\"p_\"",
        "game_id#0 (copy)",
        "game_state#0",
        "tmp%2#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "game_state#0",
        "tmp%2#0",
        "game_state#0",
        "tmp%5#0",
        "game_id#0 (copy)",
        "\"p_\""
      ]
    },
    "2151": {
      "op": "uncover 2",
      "stack_out": [
        "game_state#0",
        "tmp%2#0",
        "game_state#0",
        "game_id#0 (copy)",
        "\"p_\"",
        "tmp%5#0"
      ]
    },
    "2153": {
      "op": "intc_0 // 1",
      "stack_out": [
        "game_state#0",
        "tmp%2#0",
        "game_state#0",
        "game_id#0 (copy)",
        "\"p_\"",
        "tmp%5#0",
        "1"
      ]
    },
    "2154": {
      "callsub": "smart_contracts.pieout.subroutines.check_sender_in_game",
      "op": "callsub check_sender_in_game",
      "defined_out": [
        "game_state#0",
        "tmp%2#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "game_state#0",
        "tmp%2#0",
        "game_state#0",
        "tmp%6#0"
      ]
    },
    "2157": {
      "op": "intc_0 // 1",
      "stack_out": [
        "game_state#0",
        "tmp%2#0",
        "game_state#0",
        "tmp%6#0",
        "1"
      ]
    },
    "2158": {
      "op": "==",
      "defined_out": [
        "game_state#0",
        "tmp%2#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "game_state#0",
        "tmp%2#0",
        "game_state#0",
        "tmp%7#0"
      ]
    },
    "2159": {
      "error": "Transaction sender is not recognized as a valid player for this game.",
      "op": "assert // Transaction sender is not recognized as a valid player for this game.",
      "stack_out": [
        "game_state#0",
        "tmp%2#0",
        "game_state#0"
      ]
    },
    "2160": {
      "callsub": "smart_contracts.pieout.subroutines.is_game_live",
      "op": "callsub is_game_live",
      "defined_out": [
        "game_state#0",
        "is_game_live#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "game_state#0",
        "tmp%2#0",
        "is_game_live#0",
        "game_state#0"
      ]
    },
    "2163": {
      "op": "pop",
      "stack_out": [
        "game_state#0",
        "tmp%2#0",
        "is_game_live#0"
      ]
    },
    "2164": {
      "op": "frame_bury 0"
    },
    "2166": {
      "retsub": true,
      "op": "retsub"
    },
    "2167": {
      "block": "check_game_event_else_body@2",
      "stack_in": [
        "game_state#0",
        "tmp%2#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "game_state#0",
        "tmp%2#0",
        "tmp%2#0"
      ]
    },
    "2169": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "tmp%2#0"
      ],
      "stack_out": [
        "game_state#0",
        "tmp%2#0",
        "tmp%2#0",
        "2"
      ]
    },
    "2170": {
      "op": "==",
      "defined_out": [
        "tmp%2#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "game_state#0",
        "tmp%2#0",
        "tmp%9#0"
      ]
    },
    "2171": {
      "error": "Game event not found. Check if Game Event ID is valid",
      "op": "assert // Game event not found. Check if Game Event ID is valid",
      "stack_out": [
        "game_state#0",
        "tmp%2#0"
      ]
    },
    "2172": {
      "op": "frame_dig 0",
      "defined_out": [
        "game_state#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "game_state#0",
        "tmp%2#0",
        "game_state#0"
      ]
    },
    "2174": {
      "op": "dup",
      "defined_out": [
        "game_state#0",
        "game_state#0 (copy)",
        "tmp%2#0"
      ],
      "stack_out": [
        "game_state#0",
        "tmp%2#0",
        "game_state#0",
        "game_state#0 (copy)"
      ]
    },
    "2175": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "game_state#0",
        "game_state#0 (copy)",
        "tmp%2#0"
      ],
      "stack_out": [
        "game_state#0",
        "tmp%2#0",
        "game_state#0",
        "game_state#0 (copy)",
        "0"
      ]
    },
    "2176": {
      "op": "getbit",
      "defined_out": [
        "game_state#0",
        "is_true%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "game_state#0",
        "tmp%2#0",
        "game_state#0",
        "is_true%0#0"
      ]
    },
    "2177": {
      "op": "bytec_0 // 0x00",
      "defined_out": [
        "0x00",
        "game_state#0",
        "is_true%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "game_state#0",
        "tmp%2#0",
        "game_state#0",
        "is_true%0#0",
        "0x00"
      ]
    },
    "2178": {
      "op": "intc_1 // 0",
      "stack_out": [
        "game_state#0",
        "tmp%2#0",
        "game_state#0",
        "is_true%0#0",
        "0x00",
        "0"
      ]
    },
    "2179": {
      "op": "uncover 2",
      "stack_out": [
        "game_state#0",
        "tmp%2#0",
        "game_state#0",
        "0x00",
        "0",
        "is_true%0#0"
      ]
    },
    "2181": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%0#0",
        "game_state#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "game_state#0",
        "tmp%2#0",
        "game_state#0",
        "encoded_bool%0#0"
      ]
    },
    "2182": {
      "op": "intc_1 // 0",
      "stack_out": [
        "game_state#0",
        "tmp%2#0",
        "game_state#0",
        "encoded_bool%0#0",
        "0"
      ]
    },
    "2183": {
      "op": "getbit",
      "defined_out": [
        "game_state#0",
        "tmp%10#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "game_state#0",
        "tmp%2#0",
        "game_state#0",
        "tmp%10#0"
      ]
    },
    "2184": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "game_state#0",
        "tmp%10#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "game_state#0",
        "tmp%2#0",
        "game_state#0",
        "tmp%10#0",
        "1"
      ]
    },
    "2185": {
      "op": "==",
      "defined_out": [
        "game_state#0",
        "tmp%11#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "game_state#0",
        "tmp%2#0",
        "game_state#0",
        "tmp%11#0"
      ]
    },
    "2186": {
      "error": "Game state staking finalized value mismatch.",
      "op": "assert // Game state staking finalized value mismatch.",
      "stack_out": [
        "game_state#0",
        "tmp%2#0",
        "game_state#0"
      ]
    },
    "2187": {
      "op": "dup",
      "stack_out": [
        "game_state#0",
        "tmp%2#0",
        "game_state#0",
        "game_state#0 (copy)"
      ]
    },
    "2188": {
      "error": "Index access is out of bounds",
      "op": "extract 6 8 // on error: Index access is out of bounds",
      "defined_out": [
        "game_state#0",
        "reinterpret_biguint%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "game_state#0",
        "tmp%2#0",
        "game_state#0",
        "reinterpret_biguint%0#0"
      ]
    },
    "2191": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "game_state#0",
        "reinterpret_biguint%0#0",
        "tmp%12#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "game_state#0",
        "tmp%2#0",
        "game_state#0",
        "reinterpret_biguint%0#0",
        "tmp%12#0"
      ]
    },
    "2193": {
      "op": "itob",
      "defined_out": [
        "game_state#0",
        "reinterpret_biguint%0#0",
        "tmp%13#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "game_state#0",
        "tmp%2#0",
        "game_state#0",
        "reinterpret_biguint%0#0",
        "tmp%13#0"
      ]
    },
    "2194": {
      "op": "b<",
      "defined_out": [
        "game_state#0",
        "tmp%14#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "game_state#0",
        "tmp%2#0",
        "game_state#0",
        "tmp%14#0"
      ]
    },
    "2195": {
      "error": "Phase deadline expired. Latest block timestamp must not exceed expiry timestamp.",
      "op": "assert // Phase deadline expired. Latest block timestamp must not exceed expiry timestamp.",
      "stack_out": [
        "game_state#0",
        "tmp%2#0",
        "game_state#0"
      ]
    },
    "2196": {
      "error": "Index access is out of bounds",
      "op": "extract 54 32 // on error: Index access is out of bounds",
      "defined_out": [
        "game_state#0",
        "tmp%15#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "game_state#0",
        "tmp%2#0",
        "tmp%15#0"
      ]
    },
    "2199": {
      "op": "txn Sender",
      "defined_out": [
        "game_state#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "game_state#0",
        "tmp%2#0",
        "tmp%15#0",
        "tmp%16#0"
      ]
    },
    "2201": {
      "op": "==",
      "defined_out": [
        "game_state#0",
        "tmp%17#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "game_state#0",
        "tmp%2#0",
        "tmp%17#0"
      ]
    },
    "2202": {
      "op": "bnz check_game_event_bool_true@5",
      "stack_out": [
        "game_state#0",
        "tmp%2#0"
      ]
    },
    "2205": {
      "op": "frame_dig 0",
      "stack_out": [
        "game_state#0",
        "tmp%2#0",
        "game_state#0"
      ]
    },
    "2207": {
      "error": "Index access is out of bounds",
      "op": "extract 22 32 // on error: Index access is out of bounds",
      "defined_out": [
        "game_state#0",
        "tmp%18#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "game_state#0",
        "tmp%2#0",
        "tmp%18#0"
      ]
    },
    "2210": {
      "op": "txn Sender",
      "defined_out": [
        "game_state#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "game_state#0",
        "tmp%2#0",
        "tmp%18#0",
        "tmp%19#0"
      ]
    },
    "2212": {
      "op": "==",
      "defined_out": [
        "game_state#0",
        "tmp%2#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "game_state#0",
        "tmp%2#0",
        "tmp%20#0"
      ]
    },
    "2213": {
      "op": "bz check_game_event_bool_false@6",
      "stack_out": [
        "game_state#0",
        "tmp%2#0"
      ]
    },
    "2216": {
      "block": "check_game_event_bool_true@5",
      "stack_in": [
        "game_state#0",
        "tmp%2#0"
      ],
      "op": "intc_0 // 1",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "game_state#0",
        "tmp%2#0",
        "or_result%0#0"
      ]
    },
    "2217": {
      "block": "check_game_event_bool_merge@7",
      "stack_in": [
        "game_state#0",
        "tmp%2#0",
        "or_result%0#0"
      ],
      "error": "Transaction sender is not an authorized caller.",
      "op": "assert // Transaction sender is not an authorized caller.",
      "defined_out": [],
      "stack_out": [
        "game_state#0",
        "tmp%2#0"
      ]
    },
    "2218": {
      "op": "frame_dig -2",
      "defined_out": [
        "game_id#0 (copy)"
      ],
      "stack_out": [
        "game_state#0",
        "tmp%2#0",
        "game_id#0 (copy)"
      ]
    },
    "2220": {
      "op": "frame_dig 0",
      "defined_out": [
        "game_id#0 (copy)",
        "game_state#0"
      ],
      "stack_out": [
        "game_state#0",
        "tmp%2#0",
        "game_id#0 (copy)",
        "game_state#0"
      ]
    },
    "2222": {
      "op": "bytec_1 // \"p_\"",
      "defined_out": [
        "\"p_\"",
        "game_id#0 (copy)",
        "game_state#0"
      ],
      "stack_out": [
        "game_state#0",
        "tmp%2#0",
        "game_id#0 (copy)",
        "game_state#0",
        "\"p_\""
      ]
    },
    "2223": {
      "callsub": "smart_contracts.pieout.subroutines.is_game_over",
      "op": "callsub is_game_over",
      "defined_out": [
        "game_state#0",
        "is_game_over#0"
      ],
      "stack_out": [
        "game_state#0",
        "tmp%2#0",
        "is_game_over#0",
        "game_state#0"
      ]
    },
    "2226": {
      "op": "pop",
      "stack_out": [
        "game_state#0",
        "tmp%2#0",
        "is_game_over#0"
      ]
    },
    "2227": {
      "op": "frame_bury 0"
    },
    "2229": {
      "retsub": true,
      "op": "retsub"
    },
    "2230": {
      "block": "check_game_event_bool_false@6",
      "stack_in": [
        "game_state#0",
        "tmp%2#0"
      ],
      "op": "intc_1 // 0",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "game_state#0",
        "tmp%2#0",
        "or_result%0#0"
      ]
    },
    "2231": {
      "op": "b check_game_event_bool_merge@7"
    },
    "2234": {
      "subroutine": "smart_contracts.pieout.contract.Pieout.reset_game",
      "params": {
        "game_id#0": "uint64",
        "stake_pay#0": "uint64"
      },
      "block": "reset_game",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "2237": {
      "op": "global GroupSize",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2239": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "2"
      ]
    },
    "2240": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "2241": {
      "error": "Invalid group size. Ensure number of transaction in group is within bounds.",
      "op": "assert // Invalid group size. Ensure number of transaction in group is within bounds.",
      "stack_out": []
    },
    "2242": {
      "op": "frame_dig -2",
      "defined_out": [
        "game_id#0 (copy)"
      ],
      "stack_out": [
        "game_id#0 (copy)"
      ]
    },
    "2244": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "2245": {
      "op": "bytec_2 // \"s_\"",
      "defined_out": [
        "\"s_\"",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "\"s_\""
      ]
    },
    "2246": {
      "op": "swap",
      "stack_out": [
        "\"s_\"",
        "encoded_value%0#0"
      ]
    },
    "2247": {
      "op": "concat",
      "defined_out": [
        "game_players_bref#0"
      ],
      "stack_out": [
        "game_players_bref#0"
      ]
    },
    "2248": {
      "op": "dup",
      "defined_out": [
        "game_players_bref#0",
        "game_players_bref#0 (copy)"
      ],
      "stack_out": [
        "game_players_bref#0",
        "game_players_bref#0 (copy)"
      ]
    },
    "2249": {
      "op": "box_len",
      "defined_out": [
        "_%0#0",
        "game_players_bref#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "game_players_bref#0",
        "_%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2250": {
      "op": "bury 1",
      "stack_out": [
        "game_players_bref#0",
        "maybe_exists%0#0"
      ]
    },
    "2252": {
      "error": "Box game state not found. Check if Game ID is valid.",
      "op": "assert // Box game state not found. Check if Game ID is valid.",
      "stack_out": [
        "game_players_bref#0"
      ]
    },
    "2253": {
      "op": "frame_dig -1",
      "defined_out": [
        "game_players_bref#0",
        "stake_pay#0 (copy)"
      ],
      "stack_out": [
        "game_players_bref#0",
        "stake_pay#0 (copy)"
      ]
    },
    "2255": {
      "op": "gtxns Sender",
      "defined_out": [
        "game_players_bref#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "game_players_bref#0",
        "tmp%2#0"
      ]
    },
    "2257": {
      "op": "txn Sender",
      "defined_out": [
        "game_players_bref#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "game_players_bref#0",
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "2259": {
      "op": "==",
      "defined_out": [
        "game_players_bref#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "game_players_bref#0",
        "tmp%4#0"
      ]
    },
    "2260": {
      "error": "Stake payment sender address must match transaction sender address.",
      "op": "assert // Stake payment sender address must match transaction sender address.",
      "stack_out": [
        "game_players_bref#0"
      ]
    },
    "2261": {
      "op": "frame_dig -1",
      "stack_out": [
        "game_players_bref#0",
        "stake_pay#0 (copy)"
      ]
    },
    "2263": {
      "op": "gtxns Receiver",
      "defined_out": [
        "game_players_bref#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "game_players_bref#0",
        "tmp%5#0"
      ]
    },
    "2265": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "game_players_bref#0",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "game_players_bref#0",
        "tmp%5#0",
        "tmp%6#0"
      ]
    },
    "2267": {
      "op": "==",
      "defined_out": [
        "game_players_bref#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "game_players_bref#0",
        "tmp%7#0"
      ]
    },
    "2268": {
      "error": "Stake payment reciever address must match application address.",
      "op": "assert // Stake payment reciever address must match application address.",
      "stack_out": [
        "game_players_bref#0"
      ]
    },
    "2269": {
      "op": "frame_dig -1",
      "stack_out": [
        "game_players_bref#0",
        "stake_pay#0 (copy)"
      ]
    },
    "2271": {
      "op": "gtxns Amount",
      "defined_out": [
        "game_players_bref#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "game_players_bref#0",
        "tmp%8#0"
      ]
    },
    "2273": {
      "op": "intc 5 // 1000",
      "defined_out": [
        "1000",
        "game_players_bref#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "game_players_bref#0",
        "tmp%8#0",
        "1000"
      ]
    },
    "2275": {
      "op": ">=",
      "defined_out": [
        "game_players_bref#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "game_players_bref#0",
        "tmp%9#0"
      ]
    },
    "2276": {
      "error": "Insufficient funds. Stake pay amount is not enough to cover application MBR.",
      "op": "assert // Insufficient funds. Stake pay amount is not enough to cover application MBR.",
      "stack_out": [
        "game_players_bref#0"
      ]
    },
    "2277": {
      "op": "dup",
      "stack_out": [
        "game_players_bref#0",
        "game_players_bref#0 (copy)"
      ]
    },
    "2278": {
      "op": "box_get",
      "defined_out": [
        "game_players_bref#0",
        "game_state#0",
        "maybe_exists%1#0"
      ],
      "stack_out": [
        "game_players_bref#0",
        "game_state#0",
        "maybe_exists%1#0"
      ]
    },
    "2279": {
      "error": "check self.box_game_state entry exists",
      "op": "assert // check self.box_game_state entry exists",
      "stack_out": [
        "game_players_bref#0",
        "game_state#0"
      ]
    },
    "2280": {
      "op": "dup",
      "defined_out": [
        "game_players_bref#0",
        "game_state#0",
        "game_state#0 (copy)"
      ],
      "stack_out": [
        "game_players_bref#0",
        "game_state#0",
        "game_state#0 (copy)"
      ]
    },
    "2281": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "game_players_bref#0",
        "game_state#0",
        "game_state#0 (copy)"
      ],
      "stack_out": [
        "game_players_bref#0",
        "game_state#0",
        "game_state#0 (copy)",
        "0"
      ]
    },
    "2282": {
      "op": "getbit",
      "defined_out": [
        "game_players_bref#0",
        "game_state#0",
        "is_true%0#0"
      ],
      "stack_out": [
        "game_players_bref#0",
        "game_state#0",
        "is_true%0#0"
      ]
    },
    "2283": {
      "op": "bytec_0 // 0x00",
      "defined_out": [
        "0x00",
        "game_players_bref#0",
        "game_state#0",
        "is_true%0#0"
      ],
      "stack_out": [
        "game_players_bref#0",
        "game_state#0",
        "is_true%0#0",
        "0x00"
      ]
    },
    "2284": {
      "op": "intc_1 // 0",
      "stack_out": [
        "game_players_bref#0",
        "game_state#0",
        "is_true%0#0",
        "0x00",
        "0"
      ]
    },
    "2285": {
      "op": "uncover 2",
      "stack_out": [
        "game_players_bref#0",
        "game_state#0",
        "0x00",
        "0",
        "is_true%0#0"
      ]
    },
    "2287": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%0#0",
        "game_players_bref#0",
        "game_state#0"
      ],
      "stack_out": [
        "game_players_bref#0",
        "game_state#0",
        "encoded_bool%0#0"
      ]
    },
    "2288": {
      "op": "intc_1 // 0",
      "stack_out": [
        "game_players_bref#0",
        "game_state#0",
        "encoded_bool%0#0",
        "0"
      ]
    },
    "2289": {
      "op": "getbit",
      "defined_out": [
        "game_players_bref#0",
        "game_state#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "game_players_bref#0",
        "game_state#0",
        "tmp%10#0"
      ]
    },
    "2290": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "game_players_bref#0",
        "game_state#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "game_players_bref#0",
        "game_state#0",
        "tmp%10#0",
        "1"
      ]
    },
    "2291": {
      "op": "==",
      "defined_out": [
        "game_players_bref#0",
        "game_state#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "game_players_bref#0",
        "game_state#0",
        "tmp%11#0"
      ]
    },
    "2292": {
      "error": "Game state staking finalized value mismatch.",
      "op": "assert // Game state staking finalized value mismatch.",
      "stack_out": [
        "game_players_bref#0",
        "game_state#0"
      ]
    },
    "2293": {
      "op": "dup",
      "stack_out": [
        "game_players_bref#0",
        "game_state#0",
        "game_state#0 (copy)"
      ]
    },
    "2294": {
      "error": "Index access is out of bounds",
      "op": "extract 22 32 // on error: Index access is out of bounds",
      "defined_out": [
        "game_players_bref#0",
        "game_state#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "game_players_bref#0",
        "game_state#0",
        "tmp%12#0"
      ]
    },
    "2297": {
      "op": "txn Sender",
      "defined_out": [
        "game_players_bref#0",
        "game_state#0",
        "tmp%12#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "game_players_bref#0",
        "game_state#0",
        "tmp%12#0",
        "tmp%13#0"
      ]
    },
    "2299": {
      "op": "==",
      "defined_out": [
        "game_players_bref#0",
        "game_state#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "game_players_bref#0",
        "game_state#0",
        "tmp%14#0"
      ]
    },
    "2300": {
      "error": "Transaction sender is not recognized as valid manager address for this game.",
      "op": "assert // Transaction sender is not recognized as valid manager address for this game.",
      "stack_out": [
        "game_players_bref#0",
        "game_state#0"
      ]
    },
    "2301": {
      "op": "dup",
      "stack_out": [
        "game_players_bref#0",
        "game_state#0",
        "game_state#0 (copy)"
      ]
    },
    "2302": {
      "op": "pushint 14 // 14",
      "defined_out": [
        "14",
        "game_players_bref#0",
        "game_state#0",
        "game_state#0 (copy)"
      ],
      "stack_out": [
        "game_players_bref#0",
        "game_state#0",
        "game_state#0 (copy)",
        "14"
      ]
    },
    "2304": {
      "op": "extract_uint64",
      "defined_out": [
        "game_players_bref#0",
        "game_state#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "game_players_bref#0",
        "game_state#0",
        "tmp%16#0"
      ]
    },
    "2305": {
      "op": "!",
      "defined_out": [
        "game_players_bref#0",
        "game_state#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "game_players_bref#0",
        "game_state#0",
        "tmp%17#0"
      ]
    },
    "2306": {
      "error": "Prize pool not empty. Amount in prize pool must be zero.",
      "op": "assert // Prize pool not empty. Amount in prize pool must be zero.",
      "stack_out": [
        "game_players_bref#0",
        "game_state#0"
      ]
    },
    "2307": {
      "op": "dup",
      "stack_out": [
        "game_players_bref#0",
        "game_state#0",
        "game_state#0 (copy)"
      ]
    },
    "2308": {
      "op": "intc_2 // 2",
      "stack_out": [
        "game_players_bref#0",
        "game_state#0",
        "game_state#0 (copy)",
        "2"
      ]
    },
    "2309": {
      "op": "getbyte",
      "defined_out": [
        "game_players_bref#0",
        "game_state#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "game_players_bref#0",
        "game_state#0",
        "tmp%19#0"
      ]
    },
    "2310": {
      "op": "!",
      "defined_out": [
        "game_players_bref#0",
        "game_state#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "game_players_bref#0",
        "game_state#0",
        "tmp%20#0"
      ]
    },
    "2311": {
      "error": "Game lobby not empty. Number of active players must be zero.",
      "op": "assert // Game lobby not empty. Number of active players must be zero.",
      "stack_out": [
        "game_players_bref#0",
        "game_state#0"
      ]
    },
    "2312": {
      "op": "txn Sender",
      "defined_out": [
        "game_players_bref#0",
        "game_state#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "game_players_bref#0",
        "game_state#0",
        "tmp%22#0"
      ]
    },
    "2314": {
      "op": "dig 2",
      "stack_out": [
        "game_players_bref#0",
        "game_state#0",
        "tmp%22#0",
        "game_players_bref#0 (copy)"
      ]
    },
    "2316": {
      "op": "intc_1 // 0",
      "stack_out": [
        "game_players_bref#0",
        "game_state#0",
        "tmp%22#0",
        "game_players_bref#0 (copy)",
        "0"
      ]
    },
    "2317": {
      "op": "uncover 2",
      "stack_out": [
        "game_players_bref#0",
        "game_state#0",
        "game_players_bref#0 (copy)",
        "0",
        "tmp%22#0"
      ]
    },
    "2319": {
      "op": "box_replace",
      "stack_out": [
        "game_players_bref#0",
        "game_state#0"
      ]
    },
    "2320": {
      "op": "intc_1 // 0",
      "stack_out": [
        "game_players_bref#0",
        "game_state#0",
        "0"
      ]
    },
    "2321": {
      "op": "dup",
      "stack_out": [
        "game_players_bref#0",
        "game_state#0",
        "0",
        "0"
      ]
    },
    "2322": {
      "op": "setbit",
      "stack_out": [
        "game_players_bref#0",
        "game_state#0"
      ]
    },
    "2323": {
      "op": "pushbytes 0x01",
      "defined_out": [
        "0x01",
        "game_players_bref#0",
        "game_state#0"
      ],
      "stack_out": [
        "game_players_bref#0",
        "game_state#0",
        "0x01"
      ]
    },
    "2326": {
      "op": "replace2 2",
      "stack_out": [
        "game_players_bref#0",
        "game_state#0"
      ]
    },
    "2328": {
      "op": "bytec_0 // 0x00",
      "stack_out": [
        "game_players_bref#0",
        "game_state#0",
        "0x00"
      ]
    },
    "2329": {
      "op": "replace2 3",
      "stack_out": [
        "game_players_bref#0",
        "game_state#0"
      ]
    },
    "2331": {
      "op": "bytec 11 // 0x0020",
      "defined_out": [
        "0x0020",
        "game_players_bref#0",
        "game_state#0"
      ],
      "stack_out": [
        "game_players_bref#0",
        "game_state#0",
        "0x0020"
      ]
    },
    "2333": {
      "op": "replace2 4",
      "stack_out": [
        "game_players_bref#0",
        "game_state#0"
      ]
    },
    "2335": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "game_players_bref#0",
        "game_state#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "game_players_bref#0",
        "game_state#0",
        "tmp%23#0"
      ]
    },
    "2337": {
      "op": "intc 4 // 3600",
      "defined_out": [
        "3600",
        "game_players_bref#0",
        "game_state#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "game_players_bref#0",
        "game_state#0",
        "tmp%23#0",
        "3600"
      ]
    },
    "2339": {
      "op": "+",
      "defined_out": [
        "game_players_bref#0",
        "game_state#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "game_players_bref#0",
        "game_state#0",
        "to_encode%0#0"
      ]
    },
    "2340": {
      "op": "itob",
      "defined_out": [
        "game_players_bref#0",
        "game_state#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "game_players_bref#0",
        "game_state#0",
        "val_as_bytes%0#0"
      ]
    },
    "2341": {
      "op": "replace2 6",
      "stack_out": [
        "game_players_bref#0",
        "game_state#0"
      ]
    },
    "2343": {
      "op": "dup",
      "stack_out": [
        "game_players_bref#0",
        "game_state#0",
        "game_state#0 (copy)"
      ]
    },
    "2344": {
      "op": "pushint 14 // 14",
      "stack_out": [
        "game_players_bref#0",
        "game_state#0",
        "game_state#0 (copy)",
        "14"
      ]
    },
    "2346": {
      "op": "extract_uint64",
      "defined_out": [
        "game_players_bref#0",
        "game_state#0",
        "tmp%25#0"
      ],
      "stack_out": [
        "game_players_bref#0",
        "game_state#0",
        "tmp%25#0"
      ]
    },
    "2347": {
      "op": "intc 5 // 1000",
      "stack_out": [
        "game_players_bref#0",
        "game_state#0",
        "tmp%25#0",
        "1000"
      ]
    },
    "2349": {
      "op": "+",
      "defined_out": [
        "game_players_bref#0",
        "game_state#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "game_players_bref#0",
        "game_state#0",
        "to_encode%1#0"
      ]
    },
    "2350": {
      "op": "itob",
      "defined_out": [
        "game_players_bref#0",
        "game_state#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "game_players_bref#0",
        "game_state#0",
        "val_as_bytes%1#0"
      ]
    },
    "2351": {
      "op": "replace2 14",
      "stack_out": [
        "game_players_bref#0",
        "game_state#0"
      ]
    },
    "2353": {
      "op": "global ZeroAddress",
      "defined_out": [
        "assigned_value%6#0",
        "game_players_bref#0",
        "game_state#0"
      ],
      "stack_out": [
        "game_players_bref#0",
        "game_state#0",
        "assigned_value%6#0"
      ]
    },
    "2355": {
      "op": "replace2 54",
      "stack_out": [
        "game_players_bref#0",
        "game_state#0"
      ]
    },
    "2357": {
      "op": "box_put",
      "stack_out": []
    },
    "2358": {
      "retsub": true,
      "op": "retsub"
    },
    "2359": {
      "subroutine": "smart_contracts.pieout.contract.Pieout.delete_game",
      "params": {
        "game_id#0": "uint64"
      },
      "block": "delete_game",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "2362": {
      "op": "global GroupSize",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2364": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "1"
      ]
    },
    "2365": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "2366": {
      "error": "Invalid group size. This app call only appproves standalone transactions.",
      "op": "assert // Invalid group size. This app call only appproves standalone transactions.",
      "stack_out": []
    },
    "2367": {
      "op": "frame_dig -1",
      "defined_out": [
        "game_id#0 (copy)"
      ],
      "stack_out": [
        "game_id#0 (copy)"
      ]
    },
    "2369": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "2370": {
      "op": "bytec_2 // \"s_\"",
      "defined_out": [
        "\"s_\"",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "\"s_\""
      ]
    },
    "2371": {
      "op": "dig 1",
      "defined_out": [
        "\"s_\"",
        "encoded_value%0#0",
        "encoded_value%0#0 (copy)"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "\"s_\"",
        "encoded_value%0#0 (copy)"
      ]
    },
    "2373": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0"
      ]
    },
    "2374": {
      "op": "dup",
      "defined_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)"
      ]
    },
    "2375": {
      "op": "box_len",
      "defined_out": [
        "_%0#0",
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "_%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2376": {
      "op": "bury 1",
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2378": {
      "error": "Box game state not found. Check if Game ID is valid.",
      "op": "assert // Box game state not found. Check if Game ID is valid.",
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0"
      ]
    },
    "2379": {
      "op": "dup",
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)"
      ]
    },
    "2380": {
      "op": "box_get",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "maybe_exists%1#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "game_state#0",
        "maybe_exists%1#0"
      ]
    },
    "2381": {
      "error": "check self.box_game_state entry exists",
      "op": "assert // check self.box_game_state entry exists",
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "game_state#0"
      ]
    },
    "2382": {
      "op": "dup",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#0 (copy)"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "game_state#0",
        "game_state#0 (copy)"
      ]
    },
    "2383": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#0 (copy)"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "game_state#0",
        "game_state#0 (copy)",
        "0"
      ]
    },
    "2384": {
      "op": "getbit",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "is_true%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "game_state#0",
        "is_true%0#0"
      ]
    },
    "2385": {
      "op": "bytec_0 // 0x00",
      "defined_out": [
        "0x00",
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "is_true%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "game_state#0",
        "is_true%0#0",
        "0x00"
      ]
    },
    "2386": {
      "op": "intc_1 // 0",
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "game_state#0",
        "is_true%0#0",
        "0x00",
        "0"
      ]
    },
    "2387": {
      "op": "uncover 2",
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "game_state#0",
        "0x00",
        "0",
        "is_true%0#0"
      ]
    },
    "2389": {
      "op": "setbit",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "game_state#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "game_state#0",
        "encoded_bool%0#0"
      ]
    },
    "2390": {
      "op": "intc_1 // 0",
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "game_state#0",
        "encoded_bool%0#0",
        "0"
      ]
    },
    "2391": {
      "op": "getbit",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "game_state#0",
        "tmp%2#0"
      ]
    },
    "2392": {
      "op": "intc_0 // 1",
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "game_state#0",
        "tmp%2#0",
        "1"
      ]
    },
    "2393": {
      "op": "==",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "game_state#0",
        "tmp%3#0"
      ]
    },
    "2394": {
      "error": "Game state staking finalized value mismatch.",
      "op": "assert // Game state staking finalized value mismatch.",
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "game_state#0"
      ]
    },
    "2395": {
      "op": "dup",
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "game_state#0",
        "game_state#0 (copy)"
      ]
    },
    "2396": {
      "error": "Index access is out of bounds",
      "op": "extract 22 32 // on error: Index access is out of bounds",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "game_state#0",
        "tmp%4#0"
      ]
    },
    "2399": {
      "op": "txn Sender",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "game_state#0",
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "2401": {
      "op": "==",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "game_state#0",
        "tmp%6#0"
      ]
    },
    "2402": {
      "error": "Transaction sender is not recognized as valid manager address for this game.",
      "op": "assert // Transaction sender is not recognized as valid manager address for this game.",
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "game_state#0"
      ]
    },
    "2403": {
      "op": "dup",
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "game_state#0",
        "game_state#0 (copy)"
      ]
    },
    "2404": {
      "op": "pushint 14 // 14",
      "defined_out": [
        "14",
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#0 (copy)"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "game_state#0",
        "game_state#0 (copy)",
        "14"
      ]
    },
    "2406": {
      "op": "extract_uint64",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "game_state#0",
        "tmp%8#0"
      ]
    },
    "2407": {
      "op": "!",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "game_state#0",
        "tmp%9#0"
      ]
    },
    "2408": {
      "error": "Prize pool not empty. Amount in prize pool must be zero.",
      "op": "assert // Prize pool not empty. Amount in prize pool must be zero.",
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "game_state#0"
      ]
    },
    "2409": {
      "op": "dup",
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "game_state#0",
        "game_state#0 (copy)"
      ]
    },
    "2410": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "game_state#0 (copy)"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "game_state#0",
        "game_state#0 (copy)",
        "2"
      ]
    },
    "2411": {
      "op": "getbyte",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "game_state#0",
        "tmp%11#0"
      ]
    },
    "2412": {
      "op": "!",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "game_state#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "game_state#0",
        "tmp%12#0"
      ]
    },
    "2413": {
      "error": "Game lobby not empty. Number of active players must be zero.",
      "op": "assert // Game lobby not empty. Number of active players must be zero.",
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "game_state#0"
      ]
    },
    "2414": {
      "op": "swap",
      "stack_out": [
        "encoded_value%0#0",
        "game_state#0",
        "box_prefixed_key%0#0"
      ]
    },
    "2415": {
      "op": "box_del",
      "defined_out": [
        "encoded_value%0#0",
        "game_state#0",
        "{box_del}"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "game_state#0",
        "{box_del}"
      ]
    },
    "2416": {
      "op": "pop",
      "stack_out": [
        "encoded_value%0#0",
        "game_state#0"
      ]
    },
    "2417": {
      "op": "bytec_1 // \"p_\"",
      "defined_out": [
        "\"p_\"",
        "encoded_value%0#0",
        "game_state#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "game_state#0",
        "\"p_\""
      ]
    },
    "2418": {
      "op": "uncover 2",
      "stack_out": [
        "game_state#0",
        "\"p_\"",
        "encoded_value%0#0"
      ]
    },
    "2420": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%3#0",
        "game_state#0"
      ],
      "stack_out": [
        "game_state#0",
        "box_prefixed_key%3#0"
      ]
    },
    "2421": {
      "op": "box_del",
      "stack_out": [
        "game_state#0",
        "{box_del}"
      ]
    },
    "2422": {
      "op": "pop",
      "stack_out": [
        "game_state#0"
      ]
    },
    "2423": {
      "op": "intc_0 // 1",
      "stack_out": [
        "game_state#0",
        "1"
      ]
    },
    "2424": {
      "op": "getbyte",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "2425": {
      "op": "intc_3 // 32",
      "defined_out": [
        "32",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "32"
      ]
    },
    "2426": {
      "op": "*",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "2427": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "2428": {
      "op": "dup",
      "defined_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%0#0 (copy)"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%0#0 (copy)"
      ]
    },
    "2429": {
      "op": "bitlen",
      "defined_out": [
        "bitlen%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "bitlen%0#0"
      ]
    },
    "2430": {
      "op": "pushint 16 // 16",
      "defined_out": [
        "16",
        "bitlen%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "bitlen%0#0",
        "16"
      ]
    },
    "2432": {
      "op": "<=",
      "defined_out": [
        "no_overflow%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "no_overflow%0#0"
      ]
    },
    "2433": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "2434": {
      "op": "extract 6 2",
      "defined_out": [
        "uint16%0#0"
      ],
      "stack_out": [
        "uint16%0#0"
      ]
    },
    "2437": {
      "op": "pushbytes 0x0a",
      "defined_out": [
        "0x0a",
        "uint16%0#0"
      ],
      "stack_out": [
        "uint16%0#0",
        "0x0a"
      ]
    },
    "2440": {
      "op": "swap",
      "stack_out": [
        "0x0a",
        "uint16%0#0"
      ]
    },
    "2441": {
      "callsub": "smart_contracts.pieout.contract.Pieout.calc_single_box_fee",
      "op": "callsub calc_single_box_fee",
      "defined_out": [
        "box_p_fee#0"
      ],
      "stack_out": [
        "box_p_fee#0"
      ]
    },
    "2444": {
      "op": "itxn_begin"
    },
    "2445": {
      "op": "txn Sender",
      "defined_out": [
        "box_p_fee#0",
        "inner_txn_params%0%%param_Receiver_idx_0#0"
      ],
      "stack_out": [
        "box_p_fee#0",
        "inner_txn_params%0%%param_Receiver_idx_0#0"
      ]
    },
    "2447": {
      "op": "intc 10 // 40900",
      "defined_out": [
        "40900",
        "box_p_fee#0",
        "inner_txn_params%0%%param_Receiver_idx_0#0"
      ],
      "stack_out": [
        "box_p_fee#0",
        "inner_txn_params%0%%param_Receiver_idx_0#0",
        "40900"
      ]
    },
    "2449": {
      "op": "uncover 2",
      "stack_out": [
        "inner_txn_params%0%%param_Receiver_idx_0#0",
        "40900",
        "box_p_fee#0"
      ]
    },
    "2451": {
      "op": "+",
      "defined_out": [
        "inner_txn_params%0%%param_Amount_idx_0#0",
        "inner_txn_params%0%%param_Receiver_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_Receiver_idx_0#0",
        "inner_txn_params%0%%param_Amount_idx_0#0"
      ]
    },
    "2452": {
      "op": "pushbytes \"MBR refund payment transaction for game deletion\"",
      "defined_out": [
        "\"MBR refund payment transaction for game deletion\"",
        "inner_txn_params%0%%param_Amount_idx_0#0",
        "inner_txn_params%0%%param_Receiver_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_Receiver_idx_0#0",
        "inner_txn_params%0%%param_Amount_idx_0#0",
        "\"MBR refund payment transaction for game deletion\""
      ]
    },
    "2502": {
      "op": "itxn_field Note",
      "stack_out": [
        "inner_txn_params%0%%param_Receiver_idx_0#0",
        "inner_txn_params%0%%param_Amount_idx_0#0"
      ]
    },
    "2504": {
      "op": "itxn_field Amount",
      "stack_out": [
        "inner_txn_params%0%%param_Receiver_idx_0#0"
      ]
    },
    "2506": {
      "op": "itxn_field Receiver",
      "stack_out": []
    },
    "2508": {
      "op": "intc_0 // pay",
      "defined_out": [
        "pay"
      ],
      "stack_out": [
        "pay"
      ]
    },
    "2509": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "2511": {
      "op": "intc_1 // 0",
      "stack_out": [
        "0"
      ]
    },
    "2512": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "2514": {
      "op": "itxn_submit"
    },
    "2515": {
      "retsub": true,
      "op": "retsub"
    },
    "2516": {
      "subroutine": "smart_contracts.pieout.contract.Pieout.terminate",
      "params": {},
      "block": "terminate",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2518": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "2520": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "2521": {
      "error": "Transaction sender address must match application creator address.",
      "op": "assert // Transaction sender address must match application creator address.",
      "stack_out": []
    },
    "2522": {
      "op": "intc 13 // TMPL_DELETABLE",
      "defined_out": [
        "TMPL_DELETABLE"
      ],
      "stack_out": [
        "TMPL_DELETABLE"
      ]
    },
    "2524": {
      "error": "Template variable 'DELETABLE' needs to be 'True' at deploy-time.",
      "op": "assert // Template variable 'DELETABLE' needs to be 'True' at deploy-time.",
      "stack_out": []
    },
    "2525": {
      "retsub": true,
      "op": "retsub"
    }
  }
}