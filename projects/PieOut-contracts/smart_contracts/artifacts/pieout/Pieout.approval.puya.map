{
  "version": 3,
  "sources": [
    "../../pieout/contract.py"
  ],
  "mappings": ";;;;;AAqDQ;AAAe;AAAf;AAfR;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;AAAA;;AA0ZK;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAlTA;;AAAA;AAAA;AAAA;;AAAA;AAxGL;;;AAAA;AAwGK;;;AAAA;;AAzDA;;AAAA;AAAA;AAAA;;AAAA;AA/CL;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AA+CK;;;AAAA;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AAEU;;AAFV;AAAA;AAAA;AAAA;AAAA;AAAA;;AAVA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAfA;;AAAA;AAAA;AAAA;;AAAA;AAlBL;;;AAAA;;;AAkBK;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAL;;;AAQY;;AAAA;AAAkB;;AAAA;AAAlB;AADO;;;AAAA;AAKJ;;;AAAA;AAAP;AASI;;AAAc;;AAAd;AADJ;;AASR;;;AAQqB;;AACC;;AADd;;AAIa;AAA2B;;;;AAD5B;;;AAIwC;AAAA;;AAAA;AAAA;AAAA;;AAAZ;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAA3B;AADb;AAAY;;;AAMR;;AAAe;;AAAf;AADJ;AAKI;;AAAA;;AAAA;;AAAA;AADJ;AAKI;;AAAA;;AAAA;AADJ;AAKkB;;AAAA;;AAAd;AAAA;;;AAAiD;;AAAA;;AAAd;;AAAA;AAAnC;;;;AADJ;AAKmB;;AAAA;;AAAf;;AAAA;AAAA;;;AAAqD;;AAAA;;AAAf;;AAAA;AAAtC;;;;AADJ;AAUgB;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAKgB;;AATF;AAAA;;AAAA;AAKZ;AALY;AAMf;AANe;AAOZ;;;;AAPY;AAQf;;;;;;;;;;AARe;AAAA;AAAA;AAAhB;AAAA;AAAA;AAAA;AAAd;AAAA;;AAAA;AAAA;AAAA;AAAA;AAYiB;AAAA;AAAA;AAAA;AAAjB;AAAA;;AAAA;AAAA;AAAiC;;AAAA;AAAjC;;AAAA;;AAAA;AAEA;AAAA;AAAA;AAAA;AAAgB;AAAhB;AAAA;AAAA;AAAA;;;;;;;;;;AAER;;;AAEqB;;AAEN;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAES;AAAA;AAAA;AAAL;AAAA;AAEJ;;AAAA;AAAA;;AAAP;AAEO;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAP;AAEa;;AAAb;;AAAa;AACb;;AAAA;;AAAA;AAM6D;AAA5B;AAAZ;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAArB;;AAEgC;AAAA;AAAA;AAA4B;AAA5B;AAAX;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAArB;;AAEA;;AA+RI;;AAAc;;AAAd;AADJ;AAIO;;AAAP;",
  "op_pc_offset": 2,
  "pc_events": {
    "0": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2": {
      "op": "bnz main_after_if_else@2",
      "stack_out": []
    },
    "5": {
      "op": "bytec_0 // \"game_id\"",
      "defined_out": [
        "\"game_id\""
      ],
      "stack_out": [
        "\"game_id\""
      ]
    },
    "6": {
      "op": "intc_1 // 0",
      "defined_out": [
        "\"game_id\"",
        "0"
      ],
      "stack_out": [
        "\"game_id\"",
        "0"
      ]
    },
    "7": {
      "op": "app_global_put",
      "stack_out": []
    },
    "8": {
      "block": "main_after_if_else@2",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%0#2"
      ]
    },
    "10": {
      "op": "bz main_after_if_else@11",
      "stack_out": []
    },
    "13": {
      "op": "pushbytess 0x137d1094 0x5be219f0 0x4ece0cfd 0x34d1c23d 0x26c71091 0x5ff16da4 // method \"calc_single_box_fee(uint8,uint16)uint64\", method \"generate()void\", method \"get_gen_unix()uint64\", method \"new_game(uint64,pay,pay)void\", method \"join_game(uint64)void\", method \"terminate()void\"",
      "defined_out": [
        "Method(calc_single_box_fee(uint8,uint16)uint64)",
        "Method(generate()void)",
        "Method(get_gen_unix()uint64)",
        "Method(join_game(uint64)void)",
        "Method(new_game(uint64,pay,pay)void)",
        "Method(terminate()void)"
      ],
      "stack_out": [
        "Method(calc_single_box_fee(uint8,uint16)uint64)",
        "Method(generate()void)",
        "Method(get_gen_unix()uint64)",
        "Method(new_game(uint64,pay,pay)void)",
        "Method(join_game(uint64)void)",
        "Method(terminate()void)"
      ]
    },
    "45": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(calc_single_box_fee(uint8,uint16)uint64)",
        "Method(generate()void)",
        "Method(get_gen_unix()uint64)",
        "Method(join_game(uint64)void)",
        "Method(new_game(uint64,pay,pay)void)",
        "Method(terminate()void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(calc_single_box_fee(uint8,uint16)uint64)",
        "Method(generate()void)",
        "Method(get_gen_unix()uint64)",
        "Method(new_game(uint64,pay,pay)void)",
        "Method(join_game(uint64)void)",
        "Method(terminate()void)",
        "tmp%2#0"
      ]
    },
    "48": {
      "op": "match main_calc_single_box_fee_route@5 main_generate_route@6 main_get_gen_unix_route@7 main_new_game_route@8 main_join_game_route@9 main_terminate_route@10",
      "stack_out": []
    },
    "62": {
      "block": "main_after_if_else@11",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "63": {
      "op": "return",
      "stack_out": []
    },
    "64": {
      "block": "main_terminate_route@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0"
      ]
    },
    "66": {
      "op": "pushint 5 // DeleteApplication",
      "defined_out": [
        "DeleteApplication",
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0",
        "DeleteApplication"
      ]
    },
    "68": {
      "op": "==",
      "defined_out": [
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0"
      ]
    },
    "69": {
      "error": "OnCompletion is not DeleteApplication",
      "op": "assert // OnCompletion is not DeleteApplication",
      "stack_out": []
    },
    "70": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0"
      ]
    },
    "72": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "73": {
      "callsub": "smart_contracts.pieout.contract.Pieout.terminate",
      "op": "callsub terminate"
    },
    "76": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "77": {
      "op": "return",
      "stack_out": []
    },
    "78": {
      "block": "main_join_game_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "80": {
      "op": "!",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "81": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "82": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "84": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "85": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%1#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%1#0"
      ]
    },
    "88": {
      "op": "btoi",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "89": {
      "callsub": "smart_contracts.pieout.contract.Pieout.join_game",
      "op": "callsub join_game",
      "stack_out": []
    },
    "92": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "93": {
      "op": "return",
      "stack_out": []
    },
    "94": {
      "block": "main_new_game_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "96": {
      "op": "!",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "97": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "98": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "100": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "101": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%0#0"
      ]
    },
    "104": {
      "op": "btoi",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "105": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%21#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%21#0",
        "tmp%22#0"
      ]
    },
    "107": {
      "op": "intc_3 // 2",
      "defined_out": [
        "2",
        "tmp%21#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%21#0",
        "tmp%22#0",
        "2"
      ]
    },
    "108": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0",
        "gtxn_idx%0#0"
      ]
    },
    "109": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)",
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0",
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ]
    },
    "110": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0",
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ]
    },
    "112": {
      "op": "intc_0 // pay",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay",
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0",
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay"
      ]
    },
    "113": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0",
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ]
    },
    "114": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "tmp%21#0",
        "gtxn_idx%0#0"
      ]
    },
    "115": {
      "op": "txn GroupIndex",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%21#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%21#0",
        "gtxn_idx%0#0",
        "tmp%23#0"
      ]
    },
    "117": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "gtxn_idx%0#0",
        "tmp%21#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%21#0",
        "gtxn_idx%0#0",
        "tmp%23#0",
        "1"
      ]
    },
    "118": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0",
        "gtxn_idx%0#0",
        "gtxn_idx%1#0"
      ]
    },
    "119": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "gtxn_idx%1#0 (copy)",
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0",
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "gtxn_idx%1#0 (copy)"
      ]
    },
    "120": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "gtxn_type%1#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0",
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "gtxn_type%1#0"
      ]
    },
    "122": {
      "op": "intc_0 // pay",
      "stack_out": [
        "tmp%21#0",
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "gtxn_type%1#0",
        "pay"
      ]
    },
    "123": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "gtxn_type_matches%1#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0",
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "gtxn_type_matches%1#0"
      ]
    },
    "124": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "tmp%21#0",
        "gtxn_idx%0#0",
        "gtxn_idx%1#0"
      ]
    },
    "125": {
      "callsub": "smart_contracts.pieout.contract.Pieout.new_game",
      "op": "callsub new_game",
      "stack_out": []
    },
    "128": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "129": {
      "op": "return",
      "stack_out": []
    },
    "130": {
      "block": "main_get_gen_unix_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "132": {
      "op": "!",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "133": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "134": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "136": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "137": {
      "op": "intc 4 // TMPL_GEN_UNIX",
      "defined_out": [
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0"
      ]
    },
    "139": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0"
      ]
    },
    "140": {
      "op": "bytec_2 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0",
        "0x151f7c75"
      ]
    },
    "141": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%1#0"
      ]
    },
    "142": {
      "op": "concat",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "143": {
      "op": "log",
      "stack_out": []
    },
    "144": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "145": {
      "op": "return",
      "stack_out": []
    },
    "146": {
      "block": "main_generate_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "148": {
      "op": "!",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "149": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "150": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "152": {
      "op": "!",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "153": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "154": {
      "callsub": "smart_contracts.pieout.contract.Pieout.generate",
      "op": "callsub generate"
    },
    "157": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "158": {
      "op": "return",
      "stack_out": []
    },
    "159": {
      "block": "main_calc_single_box_fee_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "161": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "162": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "163": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "165": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "166": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%0#0"
      ]
    },
    "169": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[1]%0#0",
        "reinterpret_bytes[2]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%0#0",
        "reinterpret_bytes[2]%0#0"
      ]
    },
    "172": {
      "callsub": "smart_contracts.pieout.contract.Pieout.calc_single_box_fee",
      "op": "callsub calc_single_box_fee",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "175": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "176": {
      "op": "bytec_2 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "177": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ]
    },
    "178": {
      "op": "concat",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "179": {
      "op": "log",
      "stack_out": []
    },
    "180": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "181": {
      "op": "return",
      "stack_out": []
    },
    "182": {
      "subroutine": "smart_contracts.pieout.contract.Pieout.calc_single_box_fee",
      "params": {
        "key_size#0": "bytes",
        "value_size#0": "bytes"
      },
      "block": "calc_single_box_fee",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "185": {
      "op": "frame_dig -2",
      "defined_out": [
        "key_size#0 (copy)"
      ],
      "stack_out": [
        "key_size#0 (copy)"
      ]
    },
    "187": {
      "op": "btoi",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "188": {
      "op": "frame_dig -1",
      "defined_out": [
        "tmp%1#0",
        "value_size#0 (copy)"
      ],
      "stack_out": [
        "tmp%1#0",
        "value_size#0 (copy)"
      ]
    },
    "190": {
      "op": "btoi",
      "defined_out": [
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "191": {
      "op": "+",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "192": {
      "op": "pushint 400 // 400",
      "defined_out": [
        "400",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "400"
      ]
    },
    "195": {
      "op": "*",
      "defined_out": [
        "size_fee#0"
      ],
      "stack_out": [
        "size_fee#0"
      ]
    },
    "196": {
      "op": "pushint 2500 // 2500",
      "defined_out": [
        "2500",
        "size_fee#0"
      ],
      "stack_out": [
        "size_fee#0",
        "2500"
      ]
    },
    "199": {
      "op": "+",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "200": {
      "retsub": true,
      "op": "retsub"
    },
    "201": {
      "subroutine": "smart_contracts.pieout.contract.Pieout.generate",
      "params": {},
      "block": "generate",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "203": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "205": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "206": {
      "error": "Transaction sender address must match application creator address.",
      "op": "assert // Transaction sender address must match application creator address.",
      "stack_out": []
    },
    "207": {
      "retsub": true,
      "op": "retsub"
    },
    "208": {
      "subroutine": "smart_contracts.pieout.contract.Pieout.new_game",
      "params": {
        "max_players#0": "uint64",
        "box_g_pay#0": "uint64",
        "box_p_pay#0": "uint64"
      },
      "block": "new_game",
      "stack_in": [],
      "op": "proto 3 0"
    },
    "211": {
      "op": "txn Sender"
    },
    "213": {
      "op": "global CurrentApplicationAddress"
    },
    "215": {
      "op": "txn Sender"
    },
    "217": {
      "op": "bytec_3 // 0x0a"
    },
    "218": {
      "op": "pushbytes 0x002e",
      "defined_out": [
        "0x002e",
        "0x0a",
        "app_address#0",
        "txn_sender#0"
      ],
      "stack_out": [
        "txn_sender#0",
        "app_address#0",
        "txn_sender#0",
        "0x0a",
        "0x002e"
      ]
    },
    "222": {
      "callsub": "smart_contracts.pieout.contract.Pieout.calc_single_box_fee",
      "op": "callsub calc_single_box_fee",
      "defined_out": [
        "app_address#0",
        "box_g_fee#0",
        "txn_sender#0"
      ],
      "stack_out": [
        "txn_sender#0",
        "app_address#0",
        "txn_sender#0",
        "box_g_fee#0"
      ]
    },
    "225": {
      "op": "intc_2 // 32",
      "defined_out": [
        "32",
        "app_address#0",
        "box_g_fee#0",
        "txn_sender#0"
      ],
      "stack_out": [
        "txn_sender#0",
        "app_address#0",
        "txn_sender#0",
        "box_g_fee#0",
        "32"
      ]
    },
    "226": {
      "op": "frame_dig -3",
      "defined_out": [
        "32",
        "app_address#0",
        "box_g_fee#0",
        "max_players#0 (copy)",
        "txn_sender#0"
      ],
      "stack_out": [
        "txn_sender#0",
        "app_address#0",
        "txn_sender#0",
        "box_g_fee#0",
        "32",
        "max_players#0 (copy)"
      ]
    },
    "228": {
      "op": "*",
      "defined_out": [
        "app_address#0",
        "box_g_fee#0",
        "to_encode%0#0",
        "txn_sender#0"
      ],
      "stack_out": [
        "txn_sender#0",
        "app_address#0",
        "txn_sender#0",
        "box_g_fee#0",
        "to_encode%0#0"
      ]
    },
    "229": {
      "op": "dup",
      "stack_out": [
        "txn_sender#0",
        "app_address#0",
        "txn_sender#0",
        "box_g_fee#0",
        "to_encode%0#0",
        "to_encode%0#0"
      ]
    },
    "230": {
      "op": "cover 3",
      "defined_out": [
        "app_address#0",
        "box_g_fee#0",
        "to_encode%0#0",
        "txn_sender#0"
      ],
      "stack_out": [
        "txn_sender#0",
        "app_address#0",
        "to_encode%0#0",
        "txn_sender#0",
        "box_g_fee#0",
        "to_encode%0#0"
      ]
    },
    "232": {
      "op": "itob",
      "defined_out": [
        "app_address#0",
        "box_g_fee#0",
        "to_encode%0#0",
        "txn_sender#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "txn_sender#0",
        "app_address#0",
        "to_encode%0#0",
        "txn_sender#0",
        "box_g_fee#0",
        "val_as_bytes%0#0"
      ]
    },
    "233": {
      "op": "dup",
      "defined_out": [
        "app_address#0",
        "box_g_fee#0",
        "to_encode%0#0",
        "txn_sender#0",
        "val_as_bytes%0#0",
        "val_as_bytes%0#0 (copy)"
      ],
      "stack_out": [
        "txn_sender#0",
        "app_address#0",
        "to_encode%0#0",
        "txn_sender#0",
        "box_g_fee#0",
        "val_as_bytes%0#0",
        "val_as_bytes%0#0 (copy)"
      ]
    },
    "234": {
      "op": "bitlen",
      "defined_out": [
        "app_address#0",
        "bitlen%0#0",
        "box_g_fee#0",
        "to_encode%0#0",
        "txn_sender#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "txn_sender#0",
        "app_address#0",
        "to_encode%0#0",
        "txn_sender#0",
        "box_g_fee#0",
        "val_as_bytes%0#0",
        "bitlen%0#0"
      ]
    },
    "235": {
      "op": "pushint 16 // 16",
      "defined_out": [
        "16",
        "app_address#0",
        "bitlen%0#0",
        "box_g_fee#0",
        "to_encode%0#0",
        "txn_sender#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "txn_sender#0",
        "app_address#0",
        "to_encode%0#0",
        "txn_sender#0",
        "box_g_fee#0",
        "val_as_bytes%0#0",
        "bitlen%0#0",
        "16"
      ]
    },
    "237": {
      "op": "<=",
      "defined_out": [
        "app_address#0",
        "box_g_fee#0",
        "no_overflow%0#0",
        "to_encode%0#0",
        "txn_sender#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "txn_sender#0",
        "app_address#0",
        "to_encode%0#0",
        "txn_sender#0",
        "box_g_fee#0",
        "val_as_bytes%0#0",
        "no_overflow%0#0"
      ]
    },
    "238": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "txn_sender#0",
        "app_address#0",
        "to_encode%0#0",
        "txn_sender#0",
        "box_g_fee#0",
        "val_as_bytes%0#0"
      ]
    },
    "239": {
      "op": "extract 6 2",
      "defined_out": [
        "app_address#0",
        "box_g_fee#0",
        "to_encode%0#0",
        "txn_sender#0",
        "uint16%0#0"
      ],
      "stack_out": [
        "txn_sender#0",
        "app_address#0",
        "to_encode%0#0",
        "txn_sender#0",
        "box_g_fee#0",
        "uint16%0#0"
      ]
    },
    "242": {
      "op": "bytec_3 // 0x0a",
      "stack_out": [
        "txn_sender#0",
        "app_address#0",
        "to_encode%0#0",
        "txn_sender#0",
        "box_g_fee#0",
        "uint16%0#0",
        "0x0a"
      ]
    },
    "243": {
      "op": "swap",
      "stack_out": [
        "txn_sender#0",
        "app_address#0",
        "to_encode%0#0",
        "txn_sender#0",
        "box_g_fee#0",
        "0x0a",
        "uint16%0#0"
      ]
    },
    "244": {
      "callsub": "smart_contracts.pieout.contract.Pieout.calc_single_box_fee",
      "op": "callsub calc_single_box_fee",
      "defined_out": [
        "app_address#0",
        "box_g_fee#0",
        "box_p_fee#0",
        "to_encode%0#0",
        "txn_sender#0"
      ],
      "stack_out": [
        "txn_sender#0",
        "app_address#0",
        "to_encode%0#0",
        "txn_sender#0",
        "box_g_fee#0",
        "box_p_fee#0"
      ]
    },
    "247": {
      "op": "frame_dig -3",
      "stack_out": [
        "txn_sender#0",
        "app_address#0",
        "to_encode%0#0",
        "txn_sender#0",
        "box_g_fee#0",
        "box_p_fee#0",
        "max_players#0 (copy)"
      ]
    },
    "249": {
      "op": "pushint 10 // 10",
      "defined_out": [
        "10",
        "app_address#0",
        "box_g_fee#0",
        "box_p_fee#0",
        "max_players#0 (copy)",
        "to_encode%0#0",
        "txn_sender#0"
      ],
      "stack_out": [
        "txn_sender#0",
        "app_address#0",
        "to_encode%0#0",
        "txn_sender#0",
        "box_g_fee#0",
        "box_p_fee#0",
        "max_players#0 (copy)",
        "10"
      ]
    },
    "251": {
      "op": "<=",
      "defined_out": [
        "app_address#0",
        "box_g_fee#0",
        "box_p_fee#0",
        "tmp%0#0",
        "to_encode%0#0",
        "txn_sender#0"
      ],
      "stack_out": [
        "txn_sender#0",
        "app_address#0",
        "to_encode%0#0",
        "txn_sender#0",
        "box_g_fee#0",
        "box_p_fee#0",
        "tmp%0#0"
      ]
    },
    "252": {
      "error": "new_game(): Max players limit (currently at 10) exceeded.",
      "op": "assert // new_game(): Max players limit (currently at 10) exceeded.",
      "stack_out": [
        "txn_sender#0",
        "app_address#0",
        "to_encode%0#0",
        "txn_sender#0",
        "box_g_fee#0",
        "box_p_fee#0"
      ]
    },
    "253": {
      "op": "frame_dig -2",
      "defined_out": [
        "app_address#0",
        "box_g_fee#0",
        "box_g_pay#0 (copy)",
        "box_p_fee#0",
        "to_encode%0#0",
        "txn_sender#0"
      ],
      "stack_out": [
        "txn_sender#0",
        "app_address#0",
        "to_encode%0#0",
        "txn_sender#0",
        "box_g_fee#0",
        "box_p_fee#0",
        "box_g_pay#0 (copy)"
      ]
    },
    "255": {
      "op": "gtxns Amount",
      "defined_out": [
        "app_address#0",
        "box_g_fee#0",
        "box_p_fee#0",
        "tmp%1#0",
        "to_encode%0#0",
        "txn_sender#0"
      ],
      "stack_out": [
        "txn_sender#0",
        "app_address#0",
        "to_encode%0#0",
        "txn_sender#0",
        "box_g_fee#0",
        "box_p_fee#0",
        "tmp%1#0"
      ]
    },
    "257": {
      "op": "uncover 2",
      "stack_out": [
        "txn_sender#0",
        "app_address#0",
        "to_encode%0#0",
        "txn_sender#0",
        "box_p_fee#0",
        "tmp%1#0",
        "box_g_fee#0"
      ]
    },
    "259": {
      "op": ">=",
      "defined_out": [
        "app_address#0",
        "box_p_fee#0",
        "tmp%2#0",
        "to_encode%0#0",
        "txn_sender#0"
      ],
      "stack_out": [
        "txn_sender#0",
        "app_address#0",
        "to_encode%0#0",
        "txn_sender#0",
        "box_p_fee#0",
        "tmp%2#0"
      ]
    },
    "260": {
      "error": "new_game(): Insufficient amount. Box g_ pay amount is not enough to cover application MBR.",
      "op": "assert // new_game(): Insufficient amount. Box g_ pay amount is not enough to cover application MBR.",
      "stack_out": [
        "txn_sender#0",
        "app_address#0",
        "to_encode%0#0",
        "txn_sender#0",
        "box_p_fee#0"
      ]
    },
    "261": {
      "op": "frame_dig -1",
      "defined_out": [
        "app_address#0",
        "box_p_fee#0",
        "box_p_pay#0 (copy)",
        "to_encode%0#0",
        "txn_sender#0"
      ],
      "stack_out": [
        "txn_sender#0",
        "app_address#0",
        "to_encode%0#0",
        "txn_sender#0",
        "box_p_fee#0",
        "box_p_pay#0 (copy)"
      ]
    },
    "263": {
      "op": "gtxns Amount",
      "defined_out": [
        "app_address#0",
        "box_p_fee#0",
        "tmp%3#0",
        "to_encode%0#0",
        "txn_sender#0"
      ],
      "stack_out": [
        "txn_sender#0",
        "app_address#0",
        "to_encode%0#0",
        "txn_sender#0",
        "box_p_fee#0",
        "tmp%3#0"
      ]
    },
    "265": {
      "op": "<=",
      "defined_out": [
        "app_address#0",
        "tmp%4#0",
        "to_encode%0#0",
        "txn_sender#0"
      ],
      "stack_out": [
        "txn_sender#0",
        "app_address#0",
        "to_encode%0#0",
        "txn_sender#0",
        "tmp%4#0"
      ]
    },
    "266": {
      "error": "new_game(): Insufficient amount. Box p_ pay amount is not enough to cover application MBR.",
      "op": "assert // new_game(): Insufficient amount. Box p_ pay amount is not enough to cover application MBR.",
      "stack_out": [
        "txn_sender#0",
        "app_address#0",
        "to_encode%0#0",
        "txn_sender#0"
      ]
    },
    "267": {
      "op": "frame_dig -2",
      "stack_out": [
        "txn_sender#0",
        "app_address#0",
        "to_encode%0#0",
        "txn_sender#0",
        "box_g_pay#0 (copy)"
      ]
    },
    "269": {
      "op": "gtxns Sender",
      "defined_out": [
        "app_address#0",
        "tmp%5#0",
        "to_encode%0#0",
        "txn_sender#0"
      ],
      "stack_out": [
        "txn_sender#0",
        "app_address#0",
        "to_encode%0#0",
        "txn_sender#0",
        "tmp%5#0"
      ]
    },
    "271": {
      "op": "==",
      "defined_out": [
        "app_address#0",
        "tmp%6#0",
        "to_encode%0#0",
        "txn_sender#0"
      ],
      "stack_out": [
        "txn_sender#0",
        "app_address#0",
        "to_encode%0#0",
        "tmp%6#0"
      ]
    },
    "272": {
      "op": "bz new_game_bool_false@3",
      "stack_out": [
        "txn_sender#0",
        "app_address#0",
        "to_encode%0#0"
      ]
    },
    "275": {
      "op": "frame_dig -1",
      "stack_out": [
        "txn_sender#0",
        "app_address#0",
        "to_encode%0#0",
        "box_p_pay#0 (copy)"
      ]
    },
    "277": {
      "op": "gtxns Sender",
      "defined_out": [
        "app_address#0",
        "tmp%7#0",
        "to_encode%0#0",
        "txn_sender#0"
      ],
      "stack_out": [
        "txn_sender#0",
        "app_address#0",
        "to_encode%0#0",
        "tmp%7#0"
      ]
    },
    "279": {
      "op": "frame_dig 0",
      "stack_out": [
        "txn_sender#0",
        "app_address#0",
        "to_encode%0#0",
        "tmp%7#0",
        "txn_sender#0"
      ]
    },
    "281": {
      "op": "==",
      "defined_out": [
        "app_address#0",
        "tmp%8#0",
        "to_encode%0#0",
        "txn_sender#0"
      ],
      "stack_out": [
        "txn_sender#0",
        "app_address#0",
        "to_encode%0#0",
        "tmp%8#0"
      ]
    },
    "282": {
      "op": "bz new_game_bool_false@3",
      "stack_out": [
        "txn_sender#0",
        "app_address#0",
        "to_encode%0#0"
      ]
    },
    "285": {
      "op": "intc_0 // 1",
      "defined_out": [
        "and_result%0#0",
        "app_address#0",
        "to_encode%0#0",
        "txn_sender#0"
      ],
      "stack_out": [
        "txn_sender#0",
        "app_address#0",
        "to_encode%0#0",
        "and_result%0#0"
      ]
    },
    "286": {
      "block": "new_game_bool_merge@4",
      "stack_in": [
        "txn_sender#0",
        "app_address#0",
        "to_encode%0#0",
        "and_result%0#0"
      ],
      "error": "new_game(): Box g_ and p_ payment sender address must match transaction sender address.",
      "op": "assert // new_game(): Box g_ and p_ payment sender address must match transaction sender address.",
      "defined_out": [],
      "stack_out": [
        "txn_sender#0",
        "app_address#0",
        "to_encode%0#0"
      ]
    },
    "287": {
      "op": "frame_dig -2",
      "defined_out": [
        "box_g_pay#0 (copy)"
      ],
      "stack_out": [
        "txn_sender#0",
        "app_address#0",
        "to_encode%0#0",
        "box_g_pay#0 (copy)"
      ]
    },
    "289": {
      "op": "gtxns Receiver",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "txn_sender#0",
        "app_address#0",
        "to_encode%0#0",
        "tmp%9#0"
      ]
    },
    "291": {
      "op": "frame_dig 1",
      "defined_out": [
        "app_address#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "txn_sender#0",
        "app_address#0",
        "to_encode%0#0",
        "tmp%9#0",
        "app_address#0"
      ]
    },
    "293": {
      "op": "==",
      "defined_out": [
        "app_address#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "txn_sender#0",
        "app_address#0",
        "to_encode%0#0",
        "tmp%10#0"
      ]
    },
    "294": {
      "op": "bz new_game_bool_false@7",
      "stack_out": [
        "txn_sender#0",
        "app_address#0",
        "to_encode%0#0"
      ]
    },
    "297": {
      "op": "frame_dig -1",
      "defined_out": [
        "app_address#0",
        "box_p_pay#0 (copy)"
      ],
      "stack_out": [
        "txn_sender#0",
        "app_address#0",
        "to_encode%0#0",
        "box_p_pay#0 (copy)"
      ]
    },
    "299": {
      "op": "gtxns Receiver",
      "defined_out": [
        "app_address#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "txn_sender#0",
        "app_address#0",
        "to_encode%0#0",
        "tmp%11#0"
      ]
    },
    "301": {
      "op": "frame_dig 1",
      "stack_out": [
        "txn_sender#0",
        "app_address#0",
        "to_encode%0#0",
        "tmp%11#0",
        "app_address#0"
      ]
    },
    "303": {
      "op": "==",
      "defined_out": [
        "app_address#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "txn_sender#0",
        "app_address#0",
        "to_encode%0#0",
        "tmp%12#0"
      ]
    },
    "304": {
      "op": "bz new_game_bool_false@7",
      "stack_out": [
        "txn_sender#0",
        "app_address#0",
        "to_encode%0#0"
      ]
    },
    "307": {
      "op": "intc_0 // 1",
      "defined_out": [
        "and_result%1#0",
        "app_address#0"
      ],
      "stack_out": [
        "txn_sender#0",
        "app_address#0",
        "to_encode%0#0",
        "and_result%1#0"
      ]
    },
    "308": {
      "block": "new_game_bool_merge@8",
      "stack_in": [
        "txn_sender#0",
        "app_address#0",
        "to_encode%0#0",
        "and_result%1#0"
      ],
      "error": "new_game(): Box g_ and p_ payment reciever address must match application address.",
      "op": "assert // new_game(): Box g_ and p_ payment reciever address must match application address.",
      "defined_out": [],
      "stack_out": [
        "txn_sender#0",
        "app_address#0",
        "to_encode%0#0"
      ]
    },
    "309": {
      "op": "frame_dig -3",
      "defined_out": [
        "max_players#0 (copy)"
      ],
      "stack_out": [
        "txn_sender#0",
        "app_address#0",
        "to_encode%0#0",
        "max_players#0 (copy)"
      ]
    },
    "311": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "txn_sender#0",
        "app_address#0",
        "to_encode%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "312": {
      "op": "dup",
      "defined_out": [
        "val_as_bytes%1#0",
        "val_as_bytes%1#0 (copy)"
      ],
      "stack_out": [
        "txn_sender#0",
        "app_address#0",
        "to_encode%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%1#0 (copy)"
      ]
    },
    "313": {
      "op": "bitlen",
      "defined_out": [
        "bitlen%1#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "txn_sender#0",
        "app_address#0",
        "to_encode%0#0",
        "val_as_bytes%1#0",
        "bitlen%1#0"
      ]
    },
    "314": {
      "op": "pushint 8 // 8",
      "defined_out": [
        "8",
        "bitlen%1#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "txn_sender#0",
        "app_address#0",
        "to_encode%0#0",
        "val_as_bytes%1#0",
        "bitlen%1#0",
        "8"
      ]
    },
    "316": {
      "op": "<=",
      "defined_out": [
        "no_overflow%1#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "txn_sender#0",
        "app_address#0",
        "to_encode%0#0",
        "val_as_bytes%1#0",
        "no_overflow%1#0"
      ]
    },
    "317": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "txn_sender#0",
        "app_address#0",
        "to_encode%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "318": {
      "op": "extract 7 1",
      "defined_out": [
        "uint8%0#0"
      ],
      "stack_out": [
        "txn_sender#0",
        "app_address#0",
        "to_encode%0#0",
        "uint8%0#0"
      ]
    },
    "321": {
      "op": "global ZeroAddress",
      "defined_out": [
        "tmp%13#0",
        "uint8%0#0"
      ],
      "stack_out": [
        "txn_sender#0",
        "app_address#0",
        "to_encode%0#0",
        "uint8%0#0",
        "tmp%13#0"
      ]
    },
    "323": {
      "op": "bytec_1 // 0x00",
      "defined_out": [
        "0x00",
        "tmp%13#0",
        "uint8%0#0"
      ],
      "stack_out": [
        "txn_sender#0",
        "app_address#0",
        "to_encode%0#0",
        "uint8%0#0",
        "tmp%13#0",
        "0x00"
      ]
    },
    "324": {
      "op": "uncover 2",
      "stack_out": [
        "txn_sender#0",
        "app_address#0",
        "to_encode%0#0",
        "tmp%13#0",
        "0x00",
        "uint8%0#0"
      ]
    },
    "326": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%4#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "txn_sender#0",
        "app_address#0",
        "to_encode%0#0",
        "tmp%13#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "327": {
      "op": "bytec_1 // 0x00",
      "stack_out": [
        "txn_sender#0",
        "app_address#0",
        "to_encode%0#0",
        "tmp%13#0",
        "encoded_tuple_buffer%4#0",
        "0x00"
      ]
    },
    "328": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%5#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "txn_sender#0",
        "app_address#0",
        "to_encode%0#0",
        "tmp%13#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "329": {
      "op": "bytec_1 // 0x00",
      "stack_out": [
        "txn_sender#0",
        "app_address#0",
        "to_encode%0#0",
        "tmp%13#0",
        "encoded_tuple_buffer%5#0",
        "0x00"
      ]
    },
    "330": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%6#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "txn_sender#0",
        "app_address#0",
        "to_encode%0#0",
        "tmp%13#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "331": {
      "op": "pushbytes 0x0000",
      "defined_out": [
        "0x0000",
        "encoded_tuple_buffer%6#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "txn_sender#0",
        "app_address#0",
        "to_encode%0#0",
        "tmp%13#0",
        "encoded_tuple_buffer%6#0",
        "0x0000"
      ]
    },
    "335": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%7#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "txn_sender#0",
        "app_address#0",
        "to_encode%0#0",
        "tmp%13#0",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "336": {
      "op": "pushbytes 0x0000000000000000",
      "defined_out": [
        "0x0000000000000000",
        "encoded_tuple_buffer%7#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "txn_sender#0",
        "app_address#0",
        "to_encode%0#0",
        "tmp%13#0",
        "encoded_tuple_buffer%7#0",
        "0x0000000000000000"
      ]
    },
    "346": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%8#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "txn_sender#0",
        "app_address#0",
        "to_encode%0#0",
        "tmp%13#0",
        "encoded_tuple_buffer%8#0"
      ]
    },
    "347": {
      "op": "swap",
      "stack_out": [
        "txn_sender#0",
        "app_address#0",
        "to_encode%0#0",
        "encoded_tuple_buffer%8#0",
        "tmp%13#0"
      ]
    },
    "348": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%9#0"
      ],
      "stack_out": [
        "txn_sender#0",
        "app_address#0",
        "to_encode%0#0",
        "encoded_tuple_buffer%9#0"
      ]
    },
    "349": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "encoded_tuple_buffer%9#0"
      ],
      "stack_out": [
        "txn_sender#0",
        "app_address#0",
        "to_encode%0#0",
        "encoded_tuple_buffer%9#0",
        "0"
      ]
    },
    "350": {
      "op": "bytec_0 // \"game_id\"",
      "defined_out": [
        "\"game_id\"",
        "0",
        "encoded_tuple_buffer%9#0"
      ],
      "stack_out": [
        "txn_sender#0",
        "app_address#0",
        "to_encode%0#0",
        "encoded_tuple_buffer%9#0",
        "0",
        "\"game_id\""
      ]
    },
    "351": {
      "op": "app_global_get_ex",
      "defined_out": [
        "encoded_tuple_buffer%9#0",
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "txn_sender#0",
        "app_address#0",
        "to_encode%0#0",
        "encoded_tuple_buffer%9#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "352": {
      "error": "check self.game_id exists",
      "op": "assert // check self.game_id exists",
      "stack_out": [
        "txn_sender#0",
        "app_address#0",
        "to_encode%0#0",
        "encoded_tuple_buffer%9#0",
        "maybe_value%0#0"
      ]
    },
    "353": {
      "op": "itob",
      "defined_out": [
        "encoded_tuple_buffer%9#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "txn_sender#0",
        "app_address#0",
        "to_encode%0#0",
        "encoded_tuple_buffer%9#0",
        "tmp%14#0"
      ]
    },
    "354": {
      "op": "bytec 4 // 0x675f",
      "defined_out": [
        "0x675f",
        "encoded_tuple_buffer%9#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "txn_sender#0",
        "app_address#0",
        "to_encode%0#0",
        "encoded_tuple_buffer%9#0",
        "tmp%14#0",
        "0x675f"
      ]
    },
    "356": {
      "op": "swap",
      "stack_out": [
        "txn_sender#0",
        "app_address#0",
        "to_encode%0#0",
        "encoded_tuple_buffer%9#0",
        "0x675f",
        "tmp%14#0"
      ]
    },
    "357": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%9#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "txn_sender#0",
        "app_address#0",
        "to_encode%0#0",
        "encoded_tuple_buffer%9#0",
        "tmp%15#0"
      ]
    },
    "358": {
      "op": "swap",
      "stack_out": [
        "txn_sender#0",
        "app_address#0",
        "to_encode%0#0",
        "tmp%15#0",
        "encoded_tuple_buffer%9#0"
      ]
    },
    "359": {
      "op": "box_put",
      "stack_out": [
        "txn_sender#0",
        "app_address#0",
        "to_encode%0#0"
      ]
    },
    "360": {
      "op": "intc_1 // 0",
      "stack_out": [
        "txn_sender#0",
        "app_address#0",
        "to_encode%0#0",
        "0"
      ]
    },
    "361": {
      "op": "bytec_0 // \"game_id\"",
      "stack_out": [
        "txn_sender#0",
        "app_address#0",
        "to_encode%0#0",
        "0",
        "\"game_id\""
      ]
    },
    "362": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "txn_sender#0",
        "app_address#0",
        "to_encode%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "363": {
      "error": "check self.game_id exists",
      "op": "assert // check self.game_id exists",
      "stack_out": [
        "txn_sender#0",
        "app_address#0",
        "to_encode%0#0",
        "maybe_value%1#0"
      ]
    },
    "364": {
      "op": "itob",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "txn_sender#0",
        "app_address#0",
        "to_encode%0#0",
        "tmp%17#0"
      ]
    },
    "365": {
      "op": "bytec 5 // \"p_\"",
      "defined_out": [
        "\"p_\"",
        "tmp%17#0"
      ],
      "stack_out": [
        "txn_sender#0",
        "app_address#0",
        "to_encode%0#0",
        "tmp%17#0",
        "\"p_\""
      ]
    },
    "367": {
      "op": "swap",
      "stack_out": [
        "txn_sender#0",
        "app_address#0",
        "to_encode%0#0",
        "\"p_\"",
        "tmp%17#0"
      ]
    },
    "368": {
      "op": "concat",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "txn_sender#0",
        "app_address#0",
        "to_encode%0#0",
        "tmp%18#0"
      ]
    },
    "369": {
      "op": "frame_dig 2",
      "defined_out": [
        "tmp%18#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "txn_sender#0",
        "app_address#0",
        "to_encode%0#0",
        "tmp%18#0",
        "to_encode%0#0"
      ]
    },
    "371": {
      "op": "bzero",
      "defined_out": [
        "new_box_value%0#0",
        "tmp%18#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "txn_sender#0",
        "app_address#0",
        "to_encode%0#0",
        "tmp%18#0",
        "new_box_value%0#0"
      ]
    },
    "372": {
      "op": "dig 1",
      "defined_out": [
        "new_box_value%0#0",
        "tmp%18#0",
        "tmp%18#0 (copy)",
        "to_encode%0#0"
      ],
      "stack_out": [
        "txn_sender#0",
        "app_address#0",
        "to_encode%0#0",
        "tmp%18#0",
        "new_box_value%0#0",
        "tmp%18#0 (copy)"
      ]
    },
    "374": {
      "op": "box_del",
      "defined_out": [
        "new_box_value%0#0",
        "tmp%18#0",
        "to_encode%0#0",
        "{box_del}"
      ],
      "stack_out": [
        "txn_sender#0",
        "app_address#0",
        "to_encode%0#0",
        "tmp%18#0",
        "new_box_value%0#0",
        "{box_del}"
      ]
    },
    "375": {
      "op": "pop",
      "stack_out": [
        "txn_sender#0",
        "app_address#0",
        "to_encode%0#0",
        "tmp%18#0",
        "new_box_value%0#0"
      ]
    },
    "376": {
      "op": "box_put",
      "stack_out": [
        "txn_sender#0",
        "app_address#0",
        "to_encode%0#0"
      ]
    },
    "377": {
      "op": "intc_1 // 0",
      "stack_out": [
        "txn_sender#0",
        "app_address#0",
        "to_encode%0#0",
        "0"
      ]
    },
    "378": {
      "op": "bytec_0 // \"game_id\"",
      "stack_out": [
        "txn_sender#0",
        "app_address#0",
        "to_encode%0#0",
        "0",
        "\"game_id\""
      ]
    },
    "379": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "txn_sender#0",
        "app_address#0",
        "to_encode%0#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "380": {
      "error": "check self.game_id exists",
      "op": "assert // check self.game_id exists",
      "stack_out": [
        "txn_sender#0",
        "app_address#0",
        "to_encode%0#0",
        "maybe_value%2#0"
      ]
    },
    "381": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "maybe_value%2#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "txn_sender#0",
        "app_address#0",
        "to_encode%0#0",
        "maybe_value%2#0",
        "1"
      ]
    },
    "382": {
      "op": "+",
      "defined_out": [
        "new_state_value%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "txn_sender#0",
        "app_address#0",
        "to_encode%0#0",
        "new_state_value%0#0"
      ]
    },
    "383": {
      "op": "bytec_0 // \"game_id\"",
      "stack_out": [
        "txn_sender#0",
        "app_address#0",
        "to_encode%0#0",
        "new_state_value%0#0",
        "\"game_id\""
      ]
    },
    "384": {
      "op": "swap",
      "stack_out": [
        "txn_sender#0",
        "app_address#0",
        "to_encode%0#0",
        "\"game_id\"",
        "new_state_value%0#0"
      ]
    },
    "385": {
      "op": "app_global_put",
      "stack_out": [
        "txn_sender#0",
        "app_address#0",
        "to_encode%0#0"
      ]
    },
    "386": {
      "retsub": true,
      "op": "retsub"
    },
    "387": {
      "block": "new_game_bool_false@7",
      "stack_in": [
        "txn_sender#0",
        "app_address#0",
        "to_encode%0#0"
      ],
      "op": "intc_1 // 0",
      "defined_out": [
        "and_result%1#0"
      ],
      "stack_out": [
        "txn_sender#0",
        "app_address#0",
        "to_encode%0#0",
        "and_result%1#0"
      ]
    },
    "388": {
      "op": "b new_game_bool_merge@8"
    },
    "391": {
      "block": "new_game_bool_false@3",
      "stack_in": [
        "txn_sender#0",
        "app_address#0",
        "to_encode%0#0"
      ],
      "op": "intc_1 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "txn_sender#0",
        "app_address#0",
        "to_encode%0#0",
        "and_result%0#0"
      ]
    },
    "392": {
      "op": "b new_game_bool_merge@4"
    },
    "395": {
      "subroutine": "smart_contracts.pieout.contract.Pieout.join_game",
      "params": {
        "game_id#0": "uint64"
      },
      "block": "join_game",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "398": {
      "op": "txn Sender",
      "defined_out": [
        "txn_sender#0"
      ],
      "stack_out": [
        "txn_sender#0"
      ]
    },
    "400": {
      "op": "frame_dig -1",
      "defined_out": [
        "game_id#0 (copy)",
        "txn_sender#0"
      ],
      "stack_out": [
        "txn_sender#0",
        "game_id#0 (copy)"
      ]
    },
    "402": {
      "op": "itob",
      "defined_out": [
        "tmp%0#0",
        "txn_sender#0"
      ],
      "stack_out": [
        "txn_sender#0",
        "tmp%0#0"
      ]
    },
    "403": {
      "op": "bytec 4 // 0x675f",
      "defined_out": [
        "0x675f",
        "tmp%0#0",
        "txn_sender#0"
      ],
      "stack_out": [
        "txn_sender#0",
        "tmp%0#0",
        "0x675f"
      ]
    },
    "405": {
      "op": "dig 1",
      "defined_out": [
        "0x675f",
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "txn_sender#0"
      ],
      "stack_out": [
        "txn_sender#0",
        "tmp%0#0",
        "0x675f",
        "tmp%0#0 (copy)"
      ]
    },
    "407": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0",
        "txn_sender#0"
      ],
      "stack_out": [
        "txn_sender#0",
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "408": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%1#0 (copy)",
        "txn_sender#0"
      ],
      "stack_out": [
        "txn_sender#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ]
    },
    "409": {
      "op": "box_get",
      "defined_out": [
        "game#0",
        "maybe_exists%0#0",
        "tmp%0#0",
        "tmp%1#0",
        "txn_sender#0"
      ],
      "stack_out": [
        "txn_sender#0",
        "tmp%0#0",
        "tmp%1#0",
        "game#0",
        "maybe_exists%0#0"
      ]
    },
    "410": {
      "error": "check self.box_game entry exists",
      "op": "assert // check self.box_game entry exists",
      "stack_out": [
        "txn_sender#0",
        "tmp%0#0",
        "tmp%1#0",
        "game#0"
      ]
    },
    "411": {
      "op": "dup",
      "defined_out": [
        "game#0",
        "game#0 (copy)",
        "tmp%0#0",
        "tmp%1#0",
        "txn_sender#0"
      ],
      "stack_out": [
        "txn_sender#0",
        "tmp%0#0",
        "tmp%1#0",
        "game#0",
        "game#0 (copy)"
      ]
    },
    "412": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "game#0",
        "game#0 (copy)",
        "tmp%0#0",
        "tmp%1#0",
        "txn_sender#0"
      ],
      "stack_out": [
        "txn_sender#0",
        "tmp%0#0",
        "tmp%1#0",
        "game#0",
        "game#0 (copy)",
        "1"
      ]
    },
    "413": {
      "op": "getbyte",
      "defined_out": [
        "game#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%3#0",
        "txn_sender#0"
      ],
      "stack_out": [
        "txn_sender#0",
        "tmp%0#0",
        "tmp%1#0",
        "game#0",
        "tmp%3#0"
      ]
    },
    "414": {
      "op": "intc_2 // 32",
      "defined_out": [
        "32",
        "game#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%3#0",
        "txn_sender#0"
      ],
      "stack_out": [
        "txn_sender#0",
        "tmp%0#0",
        "tmp%1#0",
        "game#0",
        "tmp%3#0",
        "32"
      ]
    },
    "415": {
      "op": "*",
      "defined_out": [
        "game#0",
        "max_size#0",
        "tmp%0#0",
        "tmp%1#0",
        "txn_sender#0"
      ],
      "stack_out": [
        "txn_sender#0",
        "tmp%0#0",
        "tmp%1#0",
        "game#0",
        "max_size#0"
      ]
    },
    "416": {
      "op": "dig 2",
      "stack_out": [
        "txn_sender#0",
        "tmp%0#0",
        "tmp%1#0",
        "game#0",
        "max_size#0",
        "tmp%1#0 (copy)"
      ]
    },
    "418": {
      "op": "box_len",
      "defined_out": [
        "game#0",
        "max_size#0",
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%0#0",
        "tmp%1#0",
        "txn_sender#0"
      ],
      "stack_out": [
        "txn_sender#0",
        "tmp%0#0",
        "tmp%1#0",
        "game#0",
        "max_size#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "419": {
      "op": "bury 1",
      "stack_out": [
        "txn_sender#0",
        "tmp%0#0",
        "tmp%1#0",
        "game#0",
        "max_size#0",
        "maybe_exists%1#0"
      ]
    },
    "421": {
      "error": "No Game with such ID.",
      "op": "assert // No Game with such ID.",
      "stack_out": [
        "txn_sender#0",
        "tmp%0#0",
        "tmp%1#0",
        "game#0",
        "max_size#0"
      ]
    },
    "422": {
      "op": "dig 1",
      "stack_out": [
        "txn_sender#0",
        "tmp%0#0",
        "tmp%1#0",
        "game#0",
        "max_size#0",
        "game#0 (copy)"
      ]
    },
    "424": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "game#0",
        "game#0 (copy)",
        "max_size#0",
        "tmp%0#0",
        "tmp%1#0",
        "txn_sender#0"
      ],
      "stack_out": [
        "txn_sender#0",
        "tmp%0#0",
        "tmp%1#0",
        "game#0",
        "max_size#0",
        "game#0 (copy)",
        "4"
      ]
    },
    "426": {
      "op": "extract_uint16",
      "defined_out": [
        "game#0",
        "max_size#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%7#0",
        "txn_sender#0"
      ],
      "stack_out": [
        "txn_sender#0",
        "tmp%0#0",
        "tmp%1#0",
        "game#0",
        "max_size#0",
        "tmp%7#0"
      ]
    },
    "427": {
      "op": "dup",
      "defined_out": [
        "game#0",
        "max_size#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%7#0",
        "tmp%7#0 (copy)",
        "txn_sender#0"
      ],
      "stack_out": [
        "txn_sender#0",
        "tmp%0#0",
        "tmp%1#0",
        "game#0",
        "max_size#0",
        "tmp%7#0",
        "tmp%7#0 (copy)"
      ]
    },
    "428": {
      "op": "uncover 2",
      "stack_out": [
        "txn_sender#0",
        "tmp%0#0",
        "tmp%1#0",
        "game#0",
        "tmp%7#0",
        "tmp%7#0 (copy)",
        "max_size#0"
      ]
    },
    "430": {
      "op": "<",
      "defined_out": [
        "game#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%7#0",
        "tmp%8#0",
        "txn_sender#0"
      ],
      "stack_out": [
        "txn_sender#0",
        "tmp%0#0",
        "tmp%1#0",
        "game#0",
        "tmp%7#0",
        "tmp%8#0"
      ]
    },
    "431": {
      "error": "Game lobby is full.",
      "op": "assert // Game lobby is full.",
      "stack_out": [
        "txn_sender#0",
        "tmp%0#0",
        "tmp%1#0",
        "game#0",
        "tmp%7#0"
      ]
    },
    "432": {
      "op": "bytec 5 // 0x705f",
      "defined_out": [
        "0x705f",
        "game#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%7#0",
        "txn_sender#0"
      ],
      "stack_out": [
        "txn_sender#0",
        "tmp%0#0",
        "tmp%1#0",
        "game#0",
        "tmp%7#0",
        "0x705f"
      ]
    },
    "434": {
      "op": "uncover 4",
      "stack_out": [
        "txn_sender#0",
        "tmp%1#0",
        "game#0",
        "tmp%7#0",
        "0x705f",
        "tmp%0#0"
      ]
    },
    "436": {
      "op": "concat",
      "defined_out": [
        "box_p_name#0",
        "game#0",
        "tmp%1#0",
        "tmp%7#0",
        "txn_sender#0"
      ],
      "stack_out": [
        "txn_sender#0",
        "tmp%1#0",
        "game#0",
        "tmp%7#0",
        "box_p_name#0"
      ]
    },
    "437": {
      "op": "dig 1",
      "stack_out": [
        "txn_sender#0",
        "tmp%1#0",
        "game#0",
        "tmp%7#0",
        "box_p_name#0",
        "tmp%7#0 (copy)"
      ]
    },
    "439": {
      "op": "uncover 5",
      "stack_out": [
        "tmp%1#0",
        "game#0",
        "tmp%7#0",
        "box_p_name#0",
        "tmp%7#0 (copy)",
        "txn_sender#0"
      ]
    },
    "441": {
      "op": "box_replace",
      "stack_out": [
        "tmp%1#0",
        "game#0",
        "tmp%7#0"
      ]
    },
    "442": {
      "op": "intc_2 // 32",
      "stack_out": [
        "tmp%1#0",
        "game#0",
        "tmp%7#0",
        "32"
      ]
    },
    "443": {
      "op": "+",
      "defined_out": [
        "game#0",
        "tmp%1#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "game#0",
        "to_encode%0#0"
      ]
    },
    "444": {
      "op": "itob",
      "defined_out": [
        "game#0",
        "tmp%1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "game#0",
        "val_as_bytes%0#0"
      ]
    },
    "445": {
      "op": "dup",
      "defined_out": [
        "game#0",
        "tmp%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%1#0",
        "game#0",
        "val_as_bytes%0#0",
        "val_as_bytes%0#0 (copy)"
      ]
    },
    "446": {
      "op": "bitlen",
      "defined_out": [
        "bitlen%0#0",
        "game#0",
        "tmp%1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "game#0",
        "val_as_bytes%0#0",
        "bitlen%0#0"
      ]
    },
    "447": {
      "op": "pushint 16 // 16",
      "defined_out": [
        "16",
        "bitlen%0#0",
        "game#0",
        "tmp%1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "game#0",
        "val_as_bytes%0#0",
        "bitlen%0#0",
        "16"
      ]
    },
    "449": {
      "op": "<=",
      "defined_out": [
        "game#0",
        "no_overflow%0#0",
        "tmp%1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "game#0",
        "val_as_bytes%0#0",
        "no_overflow%0#0"
      ]
    },
    "450": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "tmp%1#0",
        "game#0",
        "val_as_bytes%0#0"
      ]
    },
    "451": {
      "op": "extract 6 2",
      "defined_out": [
        "game#0",
        "tmp%1#0",
        "uint16%0#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "game#0",
        "uint16%0#0"
      ]
    },
    "454": {
      "op": "replace2 4",
      "stack_out": [
        "tmp%1#0",
        "game#0"
      ]
    },
    "456": {
      "op": "dup",
      "stack_out": [
        "tmp%1#0",
        "game#0",
        "game#0 (copy)"
      ]
    },
    "457": {
      "op": "intc_3 // 2",
      "defined_out": [
        "2",
        "game#0",
        "game#0 (copy)",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "game#0",
        "game#0 (copy)",
        "2"
      ]
    },
    "458": {
      "op": "getbyte",
      "defined_out": [
        "game#0",
        "tmp%1#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "game#0",
        "tmp%15#0"
      ]
    },
    "459": {
      "op": "intc_0 // 1",
      "stack_out": [
        "tmp%1#0",
        "game#0",
        "tmp%15#0",
        "1"
      ]
    },
    "460": {
      "op": "+",
      "defined_out": [
        "game#0",
        "tmp%1#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "game#0",
        "to_encode%1#0"
      ]
    },
    "461": {
      "op": "itob",
      "defined_out": [
        "game#0",
        "tmp%1#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "game#0",
        "val_as_bytes%1#0"
      ]
    },
    "462": {
      "op": "dup",
      "defined_out": [
        "game#0",
        "tmp%1#0",
        "val_as_bytes%1#0",
        "val_as_bytes%1#0 (copy)"
      ],
      "stack_out": [
        "tmp%1#0",
        "game#0",
        "val_as_bytes%1#0",
        "val_as_bytes%1#0 (copy)"
      ]
    },
    "463": {
      "op": "bitlen",
      "defined_out": [
        "bitlen%1#0",
        "game#0",
        "tmp%1#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "game#0",
        "val_as_bytes%1#0",
        "bitlen%1#0"
      ]
    },
    "464": {
      "op": "pushint 8 // 8",
      "defined_out": [
        "8",
        "bitlen%1#0",
        "game#0",
        "tmp%1#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "game#0",
        "val_as_bytes%1#0",
        "bitlen%1#0",
        "8"
      ]
    },
    "466": {
      "op": "<=",
      "defined_out": [
        "game#0",
        "no_overflow%1#0",
        "tmp%1#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "game#0",
        "val_as_bytes%1#0",
        "no_overflow%1#0"
      ]
    },
    "467": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "tmp%1#0",
        "game#0",
        "val_as_bytes%1#0"
      ]
    },
    "468": {
      "op": "extract 7 1",
      "defined_out": [
        "game#0",
        "tmp%1#0",
        "uint8%0#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "game#0",
        "uint8%0#0"
      ]
    },
    "471": {
      "op": "replace2 2",
      "stack_out": [
        "tmp%1#0",
        "game#0"
      ]
    },
    "473": {
      "op": "box_put",
      "stack_out": []
    },
    "474": {
      "retsub": true,
      "op": "retsub"
    },
    "475": {
      "subroutine": "smart_contracts.pieout.contract.Pieout.terminate",
      "params": {},
      "block": "terminate",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "477": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "479": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "480": {
      "error": "Transaction sender address must match application creator address.",
      "op": "assert // Transaction sender address must match application creator address.",
      "stack_out": []
    },
    "481": {
      "op": "intc 5 // TMPL_DELETABLE",
      "defined_out": [
        "TMPL_DELETABLE"
      ],
      "stack_out": [
        "TMPL_DELETABLE"
      ]
    },
    "483": {
      "error": "Template variable 'DELETABLE' needs to be 'True' at deploy-time.",
      "op": "assert // Template variable 'DELETABLE' needs to be 'True' at deploy-time.",
      "stack_out": []
    },
    "484": {
      "retsub": true,
      "op": "retsub"
    }
  }
}