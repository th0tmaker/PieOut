# flake8: noqa
# fmt: off
# mypy: ignore-errors
# This file was automatically generated by algokit-client-generator.
# DO NOT MODIFY IT BY HAND.
# requires: algokit-utils@^3.0.0

# common
import dataclasses
import typing
# core algosdk
import algosdk
from algosdk.transaction import OnComplete
from algosdk.atomic_transaction_composer import TransactionSigner
from algosdk.source_map import SourceMap
from algosdk.transaction import Transaction
from algosdk.v2client.models import SimulateTraceConfig
# utils
import algokit_utils
from algokit_utils import AlgorandClient as _AlgoKitAlgorandClient

<<<<<<< HEAD
_APP_SPEC_JSON = r"""{"arcs": [22, 28], "bareActions": {"call": [], "create": []}, "methods": [{"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint8", "name": "key_size"}, {"type": "uint16", "name": "value_size"}], "name": "calc_single_box_cost", "returns": {"type": "uint64"}, "events": [], "readonly": true, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [], "name": "read_gen_unix", "returns": {"type": "uint64"}, "events": [], "readonly": true, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "name": "game_id"}], "name": "does_box_game_state_exist", "returns": {"type": "bool"}, "events": [], "readonly": true, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "name": "game_id"}], "name": "read_box_game_players", "returns": {"type": "address[]"}, "events": [], "readonly": true, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [], "name": "does_box_game_trophy_exist", "returns": {"type": "bool"}, "events": [], "readonly": true, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "account", "name": "player"}], "name": "does_box_game_register_exist", "returns": {"type": "bool"}, "events": [], "readonly": true, "recommendations": {}}, {"actions": {"call": [], "create": ["NoOp"]}, "args": [], "name": "generate", "returns": {"type": "void"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "pay", "name": "box_t_pay"}, {"type": "pay", "name": "mint_pay"}], "name": "mint_trophy", "returns": {"type": "void"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [], "name": "claim_trophy", "returns": {"type": "void"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "pay", "name": "box_r_pay"}], "name": "get_box_game_register", "returns": {"type": "void"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "name": "game_id"}], "name": "set_game_commit", "returns": {"type": "void"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "name": "max_players"}, {"type": "pay", "name": "box_s_pay"}, {"type": "pay", "name": "box_p_pay"}, {"type": "pay", "name": "stake_pay"}], "name": "new_game", "returns": {"type": "void"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "name": "game_id"}, {"type": "pay", "name": "stake_pay"}], "name": "join_game", "returns": {"type": "void"}, "events": [{"args": [{"type": "uint64", "name": "field1"}, {"type": "bool", "name": "field2"}, {"type": "uint64", "name": "field3"}], "name": "game_live"}], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "name": "game_id"}], "name": "del_box_game_register_for_self", "returns": {"type": "void"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "account", "name": "player"}], "name": "del_box_game_register_for_other", "returns": {"type": "void"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "name": "game_id"}], "name": "up_ref_budget_for_play_game", "returns": {"type": "void"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "name": "game_id"}], "name": "play_game", "returns": {"type": "void"}, "events": [{"args": [{"type": "uint64", "name": "field1"}, {"type": "address", "name": "field2"}, {"type": "uint8", "name": "field3"}], "name": "player_score"}, {"args": [{"type": "uint64", "name": "field1"}, {"type": "uint8", "name": "field2"}, {"type": "uint8", "name": "field3"}, {"type": "uint8", "name": "field4"}, {"type": "address", "name": "field5"}, {"type": "address", "name": "field6"}, {"type": "address", "name": "field7"}], "name": "game_over"}], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "name": "game_id"}, {"type": "uint8", "name": "trigger_id"}], "name": "trigger_game_event", "returns": {"type": "void"}, "events": [{"args": [{"type": "uint64", "name": "field1"}, {"type": "bool", "name": "field2"}, {"type": "uint64", "name": "field3"}], "name": "game_live"}, {"args": [{"type": "uint64", "name": "field1"}, {"type": "uint8", "name": "field2"}, {"type": "uint8", "name": "field3"}, {"type": "uint8", "name": "field4"}, {"type": "address", "name": "field5"}, {"type": "address", "name": "field6"}, {"type": "address", "name": "field7"}], "name": "game_over"}], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "name": "game_id"}, {"type": "pay", "name": "stake_pay"}], "name": "reset_game", "returns": {"type": "void"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "name": "game_id"}], "name": "delete_game", "returns": {"type": "void"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["DeleteApplication"], "create": []}, "args": [], "name": "terminate", "returns": {"type": "void"}, "events": [], "readonly": false, "recommendations": {}}], "name": "Pieout", "state": {"keys": {"box": {"box_game_trophy": {"key": "dF8=", "keyType": "AVMString", "valueType": "GameTrophy"}}, "global": {"game_id": {"key": "Z2FtZV9pZA==", "keyType": "AVMString", "valueType": "AVMUint64"}}, "local": {}}, "maps": {"box": {"box_game_state": {"keyType": "uint64", "valueType": "GameState", "prefix": "c18="}, "box_game_players": {"keyType": "uint64", "valueType": "AVMBytes", "prefix": "cF8="}, "box_game_register": {"keyType": "address", "valueType": "GameRegister", "prefix": "cl8="}}, "global": {}, "local": {}}, "schema": {"global": {"bytes": 0, "ints": 1}, "local": {"bytes": 0, "ints": 0}}}, "structs": {"GameRegister": [{"name": "hosting_game", "type": "bool"}, {"name": "best_score", "type": "uint8"}, {"name": "game_id", "type": "uint64"}, {"name": "expiry_round", "type": "uint64"}, {"name": "commit_rand_round", "type": "uint64"}], "GameState": [{"name": "staking_finalized", "type": "bool"}, {"name": "max_players", "type": "uint8"}, {"name": "active_players", "type": "uint8"}, {"name": "best_score", "type": "uint8"}, {"name": "first_place_score", "type": "uint8"}, {"name": "second_place_score", "type": "uint8"}, {"name": "third_place_score", "type": "uint8"}, {"name": "box_p_start_pos", "type": "uint16"}, {"name": "expiry_ts", "type": "uint64"}, {"name": "prize_pool", "type": "uint64"}, {"name": "admin_address", "type": "address"}, {"name": "first_place_address", "type": "address"}, {"name": "second_place_address", "type": "address"}, {"name": "third_place_address", "type": "address"}], "GameTrophy": [{"name": "high_score", "type": "uint8"}, {"name": "asset_id", "type": "uint64"}, {"name": "highscorer_address", "type": "address"}]}, "byteCode": {"approval": "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", "clear": "CoEBQw=="}, "compilerInfo": {"compiler": "puya", "compilerVersion": {"major": 4, "minor": 9, "patch": 0}}, "events": [{"args": [{"type": "uint64", "name": "field1"}, {"type": "bool", "name": "field2"}, {"type": "uint64", "name": "field3"}], "name": "game_live"}, {"args": [{"type": "uint64", "name": "field1"}, {"type": "address", "name": "field2"}, {"type": "uint8", "name": "field3"}], "name": "player_score"}, {"args": [{"type": "uint64", "name": "field1"}, {"type": "uint8", "name": "field2"}, {"type": "uint8", "name": "field3"}, {"type": "uint8", "name": "field4"}, {"type": "address", "name": "field5"}, {"type": "address", "name": "field6"}, {"type": "address", "name": "field7"}], "name": "game_over"}], "networks": {}, "source": {"approval": "", "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"}, "sourceInfo": {"approval": {"pcOffsetMethod": "cblocks", "sourceInfo": [{"pc": [2941, 4431], "errorMessage": "Account is not authorized to make this call."}, {"pc": [2225, 3309], "errorMessage": "Account is not recognized as an active player for this game."}, {"pc": [4288], "errorMessage": "Account is not recognized as the admin address for this game."}, {"pc": [1997], "errorMessage": "Account must be opted in to asset in order to perform this action."}, {"pc": [1735, 4718], "errorMessage": "Account must match application creator address."}, {"pc": [3104, 3251], "errorMessage": "Application ID mismatch. App ID must be same across all transactions in group."}, {"pc": [1984], "errorMessage": "Asset trophy receiver must match application ATH address."}, {"pc": [1755, 2124], "errorMessage": "Box found. Ensure the box you are trying to access does not exist already."}, {"pc": [1632, 2183, 2548, 2741, 3093, 3231, 4138, 4240, 4384], "errorMessage": "Box game state not found. Check if game ID exists."}, {"pc": [2129, 2191, 2271, 2279, 2556, 2564, 2749, 2935, 3239, 3244], "errorMessage": "Box not found. Ensure the box you are trying to access was created and still exists."}, {"pc": [1781, 2153, 2401, 2409], "errorMessage": "Box payment receiver address must match application address."}, {"pc": [1773, 2145, 2377, 2385], "errorMessage": "Box payment sender address must match transaction sender address."}, {"pc": [2239, 2950], "errorMessage": "Commit Rand Round not empty. Value must be zero to obtain a valid one."}, {"pc": [4456], "errorMessage": "Game admin address must be sole remaining active player in the game."}, {"pc": [4186], "errorMessage": "Game event not found. Check if game event Trigger ID exists"}, {"pc": [4299, 4690], "errorMessage": "Game lobby not empty. Number of active players must be zero."}, {"pc": [2296, 4415], "errorMessage": "Game register hosting game boolean value mismatch."}, {"pc": [2206, 2621, 3339, 4161, 4199, 4280], "errorMessage": "Game state staking finalized boolean value mismatch."}, {"pc": [833, 845, 850, 895, 932, 1037, 1042, 1047, 1052, 1062, 1072, 1129, 1978, 2233, 2624, 2634, 2639, 3340, 3706, 3729, 3735, 3741, 3747, 3764, 3773, 3791, 3804, 3832, 4030, 4053, 4059, 4083, 4163, 4201, 4282, 4391], "errorMessage": "Index access is out of bounds"}, {"pc": [1765, 2137, 2331, 2361], "errorMessage": "Insufficient funds. Box pay amount is not enough to cover application MBR."}, {"pc": [1789], "errorMessage": "Insufficient funds. Mint pay amount is not enough to cover asset creation cost."}, {"pc": [2323, 2573, 4264], "errorMessage": "Insufficient funds. Stake pay amount is not enough to cover staking requirements."}, {"pc": [2776, 3128, 3276, 3359], "errorMessage": "Invalid Game ID. Box Game Register Game ID must be a certain value or match Game ID arg."}, {"pc": [3097, 3213], "errorMessage": "Invalid group index. Ensure transaction group index matches the expected value. "}, {"pc": [1749, 2115, 2266, 2535, 3081, 3208, 4227], "errorMessage": "Invalid group size. Ensure number of transaction in group is within valid bounds."}, {"pc": [1971, 2170, 2729, 2926, 4125, 4370], "errorMessage": "Invalid group size. This app call can only take standalone transactions."}, {"pc": [2631, 2957, 3347, 4170, 4208], "errorMessage": "Invalid time frame. Call made outside the permitted block or timestamp range."}, {"pc": [1805], "errorMessage": "Mint payment receiver address must match application address."}, {"pc": [1797], "errorMessage": "Mint payment sender address must match transaction sender address."}, {"pc": [2643], "errorMessage": "Number of active players must not exceed number of max players."}, {"pc": [162], "errorMessage": "OnCompletion is not DeleteApplication"}, {"pc": [174, 190, 216, 235, 251, 267, 285, 301, 327, 374, 390, 412, 424, 456, 469, 497, 519, 540, 566, 583], "errorMessage": "OnCompletion is not NoOp"}, {"pc": [2608, 2808], "errorMessage": "Player with this address must not be an active game participant in the game."}, {"pc": [2658], "errorMessage": "Players box start position index overflow. Can not store more addresses."}, {"pc": [4294, 4697], "errorMessage": "Prize pool not empty. Amount in prize pool must be zero."}, {"pc": [3372], "errorMessage": "Randomness commit round not reached yet."}, {"pc": [3111, 3258], "errorMessage": "Sender mismatch. Sender must be same address across all transactions in group."}, {"pc": [2393, 2589, 4256], "errorMessage": "Stake payment receiver address must match application address."}, {"pc": [2369, 2581, 4248], "errorMessage": "Stake payment sender address must match transaction sender address."}, {"pc": [4712], "errorMessage": "Template variable 'DELETABLE' needs to be 'True' at deploy-time."}, {"pc": [2314], "errorMessage": "The number of max players must be within bounds."}, {"pc": [3119, 3266], "errorMessage": "Transaction at this group index must have exact required method selector."}, {"pc": [460], "errorMessage": "can only call when creating"}, {"pc": [165, 177, 193, 219, 238, 254, 270, 288, 304, 330, 377, 393, 415, 427, 472, 500, 522, 543, 569, 586], "errorMessage": "can only call when not creating"}, {"pc": [783], "errorMessage": "check BoxMap entry exists"}, {"pc": [970], "errorMessage": "check BoxRef exists"}, {"pc": [1641], "errorMessage": "check self.box_game_players entry exists"}, {"pc": [2231, 2285, 2494, 2755, 2766, 2782, 2944, 3134, 3145, 3282, 3326, 3353, 3367, 4403, 4559], "errorMessage": "check self.box_game_register entry exists"}, {"pc": [2193, 2551, 2793, 3293, 3317, 4140, 4267, 4390], "errorMessage": "check self.box_game_state entry exists"}, {"pc": [1976, 3772, 3782, 3802, 3827, 3973, 4730, 4750], "errorMessage": "check self.box_game_trophy exists"}, {"pc": [2477], "errorMessage": "check self.game_id exists"}, {"pc": [2347, 2418, 2677, 2698, 3622, 3994, 4576], "errorMessage": "overflow"}, {"pc": [3076, 3203], "errorMessage": "transaction type is appl"}, {"pc": [207, 318, 345, 355, 365, 403, 437, 447], "errorMessage": "transaction type is pay"}]}, "clear": {"pcOffsetMethod": "none", "sourceInfo": []}}, "templateVariables": {"GEN_UNIX": {"type": "AVMUint64"}, "DELETABLE": {"type": "AVMUint64"}}}"""
=======
<<<<<<< HEAD
_APP_SPEC_JSON = r"""{"arcs": [22, 28], "bareActions": {"call": [], "create": []}, "methods": [{"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint8", "name": "key_size"}, {"type": "uint16", "name": "value_size"}], "name": "calc_single_box_cost", "returns": {"type": "uint64"}, "events": [], "readonly": true, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [], "name": "read_gen_unix", "returns": {"type": "uint64"}, "events": [], "readonly": true, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "name": "game_id"}], "name": "read_box_game_state", "returns": {"type": "(bool,uint8,uint8,uint8,uint8,uint8,uint8,uint16,uint64,uint64,address,address,address,address)", "struct": "GameState"}, "events": [], "readonly": true, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "name": "game_id"}], "name": "read_box_game_players", "returns": {"type": "address[]"}, "events": [], "readonly": true, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "account", "name": "player"}], "name": "read_box_game_register", "returns": {"type": "(bool,uint8,uint64,uint64,uint64)", "struct": "GameRegister"}, "events": [], "readonly": true, "recommendations": {}}, {"actions": {"call": [], "create": ["NoOp"]}, "args": [], "name": "generate", "returns": {"type": "void"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "pay", "name": "box_t_pay"}, {"type": "pay", "name": "mint_pay"}], "name": "mint_trophy", "returns": {"type": "void"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [], "name": "claim_trophy", "returns": {"type": "void"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "pay", "name": "box_r_pay"}], "name": "get_box_game_regiser", "returns": {"type": "void"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "name": "game_id"}], "name": "set_game_commit", "returns": {"type": "void"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "name": "max_players"}, {"type": "pay", "name": "box_s_pay"}, {"type": "pay", "name": "box_p_pay"}, {"type": "pay", "name": "stake_pay"}], "name": "new_game", "returns": {"type": "void"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "name": "game_id"}, {"type": "pay", "name": "stake_pay"}], "name": "join_game", "returns": {"type": "void"}, "events": [{"args": [{"type": "uint64", "name": "field1"}, {"type": "bool", "name": "field2"}, {"type": "uint64", "name": "field3"}], "name": "game_live"}], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "name": "game_id"}], "name": "del_box_game_register_for_self", "returns": {"type": "void"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "account", "name": "player"}], "name": "del_box_game_register_for_other", "returns": {"type": "void"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "name": "game_id"}], "name": "up_ref_budget_for_play_game", "returns": {"type": "void"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "name": "game_id"}], "name": "play_game", "returns": {"type": "void"}, "events": [{"args": [{"type": "uint64", "name": "field1"}, {"type": "address", "name": "field2"}, {"type": "uint8", "name": "field3"}], "name": "player_score"}, {"args": [{"type": "uint64", "name": "field1"}, {"type": "uint8", "name": "field2"}, {"type": "uint8", "name": "field3"}, {"type": "uint8", "name": "field4"}, {"type": "address", "name": "field5"}, {"type": "address", "name": "field6"}, {"type": "address", "name": "field7"}], "name": "game_over"}], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "name": "game_id"}, {"type": "uint8", "name": "trigger_id"}], "name": "trigger_game_event", "returns": {"type": "void"}, "events": [{"args": [{"type": "uint64", "name": "field1"}, {"type": "bool", "name": "field2"}, {"type": "uint64", "name": "field3"}], "name": "game_live"}, {"args": [{"type": "uint64", "name": "field1"}, {"type": "uint8", "name": "field2"}, {"type": "uint8", "name": "field3"}, {"type": "uint8", "name": "field4"}, {"type": "address", "name": "field5"}, {"type": "address", "name": "field6"}, {"type": "address", "name": "field7"}], "name": "game_over"}], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "name": "game_id"}, {"type": "pay", "name": "stake_pay"}], "name": "reset_game", "returns": {"type": "void"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "name": "game_id"}], "name": "delete_game", "returns": {"type": "void"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["DeleteApplication"], "create": []}, "args": [], "name": "terminate", "returns": {"type": "void"}, "events": [], "readonly": false, "recommendations": {}}], "name": "Pieout", "state": {"keys": {"box": {"box_game_trophy": {"key": "dF8=", "keyType": "AVMString", "valueType": "GameTrophy"}}, "global": {"game_id": {"key": "Z2FtZV9pZA==", "keyType": "AVMString", "valueType": "AVMUint64"}}, "local": {}}, "maps": {"box": {"box_game_state": {"keyType": "uint64", "valueType": "GameState", "prefix": "c18="}, "box_game_players": {"keyType": "uint64", "valueType": "AVMBytes", "prefix": "cF8="}, "box_game_register": {"keyType": "address", "valueType": "GameRegister", "prefix": "cl8="}}, "global": {}, "local": {}}, "schema": {"global": {"bytes": 0, "ints": 1}, "local": {"bytes": 0, "ints": 0}}}, "structs": {"GameRegister": [{"name": "hosting_game", "type": "bool"}, {"name": "best_score", "type": "uint8"}, {"name": "game_id", "type": "uint64"}, {"name": "expiry_round", "type": "uint64"}, {"name": "commit_rand_round", "type": "uint64"}], "GameState": [{"name": "staking_finalized", "type": "bool"}, {"name": "max_players", "type": "uint8"}, {"name": "active_players", "type": "uint8"}, {"name": "best_score", "type": "uint8"}, {"name": "first_place_score", "type": "uint8"}, {"name": "second_place_score", "type": "uint8"}, {"name": "third_place_score", "type": "uint8"}, {"name": "box_p_start_pos", "type": "uint16"}, {"name": "expiry_ts", "type": "uint64"}, {"name": "prize_pool", "type": "uint64"}, {"name": "admin_address", "type": "address"}, {"name": "first_place_address", "type": "address"}, {"name": "second_place_address", "type": "address"}, {"name": "third_place_address", "type": "address"}], "GameTrophy": [{"name": "asset_id", "type": "uint64"}, {"name": "high_score", "type": "uint8"}, {"name": "highscorer_address", "type": "address"}]}, "byteCode": {"approval": "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", "clear": "CoEBQw=="}, "compilerInfo": {"compiler": "puya", "compilerVersion": {"major": 4, "minor": 9, "patch": 0}}, "events": [{"args": [{"type": "uint64", "name": "field1"}, {"type": "bool", "name": "field2"}, {"type": "uint64", "name": "field3"}], "name": "game_live"}, {"args": [{"type": "uint64", "name": "field1"}, {"type": "address", "name": "field2"}, {"type": "uint8", "name": "field3"}], "name": "player_score"}, {"args": [{"type": "uint64", "name": "field1"}, {"type": "uint8", "name": "field2"}, {"type": "uint8", "name": "field3"}, {"type": "uint8", "name": "field4"}, {"type": "address", "name": "field5"}, {"type": "address", "name": "field6"}, {"type": "address", "name": "field7"}], "name": "game_over"}], "networks": {}, "source": {"approval": "", "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"}, "sourceInfo": {"approval": {"pcOffsetMethod": "cblocks", "sourceInfo": [{"pc": [2902, 4390], "errorMessage": "Account is not authorized to make this call."}, {"pc": [2188, 3268], "errorMessage": "Account is not recognized as an active player for this game."}, {"pc": [4247], "errorMessage": "Account is not recognized as the admin address for this game."}, {"pc": [1960], "errorMessage": "Account must be opted in to asset in order to perform this action."}, {"pc": [1699, 4677], "errorMessage": "Account must match application creator address."}, {"pc": [3063, 3210], "errorMessage": "Application ID mismatch. App ID must be same across all transactions in group."}, {"pc": [1947], "errorMessage": "Asset trophy receiver must match application ATH address."}, {"pc": [1719, 2087], "errorMessage": "Box found. Ensure the box you are trying to access does not exist already."}, {"pc": [1577, 1597, 2146, 2511, 2704, 3056, 3190, 4097, 4199, 4343], "errorMessage": "Box game state not found. Check if game ID exists."}, {"pc": [1690, 2092, 2154, 2234, 2242, 2519, 2527, 2712, 2896, 3198, 3203], "errorMessage": "Box not found. Ensure the box you are trying to access was created and still exists."}, {"pc": [1745, 2116, 2364, 2372], "errorMessage": "Box payment receiver address must match application address."}, {"pc": [1737, 2108, 2340, 2348], "errorMessage": "Box payment sender address must match transaction sender address."}, {"pc": [2202, 2911], "errorMessage": "Commit Rand Round not empty. Value must be zero to obtain a valid one."}, {"pc": [4415], "errorMessage": "Game admin address must be sole remaining active player in the game."}, {"pc": [4145], "errorMessage": "Game event not found. Check if game event Trigger ID exists"}, {"pc": [4258, 4649], "errorMessage": "Game lobby not empty. Number of active players must be zero."}, {"pc": [2259, 4374], "errorMessage": "Game register hosting game boolean value mismatch."}, {"pc": [2169, 2584, 3298, 4120, 4158, 4239], "errorMessage": "Game state staking finalized boolean value mismatch."}, {"pc": [794, 806, 811, 856, 893, 998, 1003, 1008, 1013, 1023, 1033, 1090, 1941, 2196, 2587, 2597, 2602, 3299, 3665, 3688, 3694, 3700, 3706, 3723, 3732, 3750, 3763, 3791, 3989, 4012, 4018, 4042, 4122, 4160, 4241, 4350], "errorMessage": "Index access is out of bounds"}, {"pc": [1729, 2100, 2294, 2324], "errorMessage": "Insufficient funds. Box pay amount is not enough to cover application MBR."}, {"pc": [1753], "errorMessage": "Insufficient funds. Mint pay amount is not enough to cover asset creation cost."}, {"pc": [2286, 2536, 4223], "errorMessage": "Insufficient funds. Stake pay amount is not enough to cover staking requirements."}, {"pc": [2739, 3087, 3235, 3318], "errorMessage": "Invalid Game ID. Box Commit Rand Game ID must be a certain value or match Game ID arg."}, {"pc": [3044, 3172], "errorMessage": "Invalid group index. Ensure transaction group index matches the expected value. "}, {"pc": [1713, 2078, 2229, 2498, 3040, 3167, 4186], "errorMessage": "Invalid group size. Ensure number of transaction in group is within valid bounds."}, {"pc": [1934, 2133, 2692, 2887, 4084, 4329], "errorMessage": "Invalid group size. This app call can only take standalone transactions."}, {"pc": [2594, 2918, 3306, 4129, 4167], "errorMessage": "Invalid time frame. Call made outside the permitted block or timestamp range."}, {"pc": [1769], "errorMessage": "Mint payment receiver address must match application address."}, {"pc": [1761], "errorMessage": "Mint payment sender address must match transaction sender address."}, {"pc": [2606], "errorMessage": "Number of active players must not exceed number of max players."}, {"pc": [155], "errorMessage": "OnCompletion is not DeleteApplication"}, {"pc": [167, 183, 209, 228, 244, 260, 278, 294, 320, 367, 383, 405, 417, 449, 462, 485, 506, 527, 544], "errorMessage": "OnCompletion is not NoOp"}, {"pc": [2571, 2771], "errorMessage": "Player with this address must not be an active game participant in the game."}, {"pc": [2621], "errorMessage": "Players box start position index overflow. Can not store more addresses."}, {"pc": [4253, 4656], "errorMessage": "Prize pool not empty. Amount in prize pool must be zero."}, {"pc": [3331], "errorMessage": "Randomness commit round not reached yet."}, {"pc": [3070, 3217], "errorMessage": "Sender mismatch. Sender must be same address across all transactions in group."}, {"pc": [2356, 2552, 4215], "errorMessage": "Stake payment receiver address must match application address."}, {"pc": [2332, 2544, 4207], "errorMessage": "Stake payment sender address must match transaction sender address."}, {"pc": [4671], "errorMessage": "Template variable 'DELETABLE' needs to be 'True' at deploy-time."}, {"pc": [2277], "errorMessage": "The number of max players must be within bounds."}, {"pc": [3078, 3225], "errorMessage": "Transaction at this group index must have exact required method selector."}, {"pc": [453], "errorMessage": "can only call when creating"}, {"pc": [158, 170, 186, 212, 231, 247, 263, 281, 297, 323, 370, 386, 408, 420, 465, 488, 509, 530, 547], "errorMessage": "can only call when not creating"}, {"pc": [744], "errorMessage": "check BoxMap entry exists"}, {"pc": [931], "errorMessage": "check BoxRef exists"}, {"pc": [1606], "errorMessage": "check self.box_game_players entry exists"}, {"pc": [1692, 2194, 2248, 2457, 2718, 2729, 2745, 2905, 3093, 3104, 3241, 3285, 3312, 3326, 4362, 4518], "errorMessage": "check self.box_game_register entry exists"}, {"pc": [1579, 2156, 2514, 2756, 3252, 3276, 4099, 4226, 4349], "errorMessage": "check self.box_game_state entry exists"}, {"pc": [1939, 3731, 3741, 3761, 3786, 3932, 4689, 4709], "errorMessage": "check self.box_game_trophy exists"}, {"pc": [2440], "errorMessage": "check self.game_id exists"}, {"pc": [2310, 2381, 2640, 2661, 3581, 3953, 4535], "errorMessage": "overflow"}, {"pc": [3035, 3162], "errorMessage": "transaction type is appl"}, {"pc": [200, 311, 338, 348, 358, 396, 430, 440], "errorMessage": "transaction type is pay"}]}, "clear": {"pcOffsetMethod": "none", "sourceInfo": []}}, "templateVariables": {"GEN_UNIX": {"type": "AVMUint64"}, "DELETABLE": {"type": "AVMUint64"}}}"""
=======
_APP_SPEC_JSON = r"""{"arcs": [22, 28], "bareActions": {"call": [], "create": []}, "methods": [{"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint8", "name": "key_size"}, {"type": "uint16", "name": "value_size"}], "name": "calc_single_box_cost", "returns": {"type": "uint64"}, "events": [], "readonly": true, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [], "name": "read_gen_unix", "returns": {"type": "uint64"}, "events": [], "readonly": true, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "name": "game_id"}], "name": "read_box_game_state", "returns": {"type": "(bool,uint8,uint8,uint8,uint8,uint8,uint8,uint16,uint64,uint64,address,address,address,address)", "struct": "GameState"}, "events": [], "readonly": true, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "name": "game_id"}], "name": "read_box_game_players", "returns": {"type": "address[]"}, "events": [], "readonly": true, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "account", "name": "player"}], "name": "read_box_game_register", "returns": {"type": "(bool,uint8,uint64,uint64,uint64)", "struct": "GameRegister"}, "events": [], "readonly": true, "recommendations": {}}, {"actions": {"call": [], "create": ["NoOp"]}, "args": [], "name": "generate", "returns": {"type": "void"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "pay", "name": "box_t_pay"}, {"type": "pay", "name": "mint_pay"}], "name": "mint_trophy", "returns": {"type": "void"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [], "name": "claim_trophy", "returns": {"type": "void"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "pay", "name": "box_r_pay"}], "name": "get_box_game_register", "returns": {"type": "void"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "name": "game_id"}], "name": "set_game_commit", "returns": {"type": "void"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "name": "max_players"}, {"type": "pay", "name": "box_s_pay"}, {"type": "pay", "name": "box_p_pay"}, {"type": "pay", "name": "stake_pay"}], "name": "new_game", "returns": {"type": "void"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "name": "game_id"}, {"type": "pay", "name": "stake_pay"}], "name": "join_game", "returns": {"type": "void"}, "events": [{"args": [{"type": "uint64", "name": "field1"}, {"type": "bool", "name": "field2"}, {"type": "uint64", "name": "field3"}], "name": "game_live"}], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "name": "game_id"}], "name": "del_box_game_register_for_self", "returns": {"type": "void"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "account", "name": "player"}], "name": "del_box_game_register_for_other", "returns": {"type": "void"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "name": "game_id"}], "name": "up_ref_budget_for_play_game", "returns": {"type": "void"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "name": "game_id"}], "name": "play_game", "returns": {"type": "void"}, "events": [{"args": [{"type": "uint64", "name": "field1"}, {"type": "address", "name": "field2"}, {"type": "uint8", "name": "field3"}], "name": "player_score"}, {"args": [{"type": "uint64", "name": "field1"}, {"type": "uint8", "name": "field2"}, {"type": "uint8", "name": "field3"}, {"type": "uint8", "name": "field4"}, {"type": "address", "name": "field5"}, {"type": "address", "name": "field6"}, {"type": "address", "name": "field7"}], "name": "game_over"}], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "name": "game_id"}, {"type": "uint8", "name": "trigger_id"}], "name": "trigger_game_event", "returns": {"type": "void"}, "events": [{"args": [{"type": "uint64", "name": "field1"}, {"type": "bool", "name": "field2"}, {"type": "uint64", "name": "field3"}], "name": "game_live"}, {"args": [{"type": "uint64", "name": "field1"}, {"type": "uint8", "name": "field2"}, {"type": "uint8", "name": "field3"}, {"type": "uint8", "name": "field4"}, {"type": "address", "name": "field5"}, {"type": "address", "name": "field6"}, {"type": "address", "name": "field7"}], "name": "game_over"}], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "name": "game_id"}, {"type": "pay", "name": "stake_pay"}], "name": "reset_game", "returns": {"type": "void"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "name": "game_id"}], "name": "delete_game", "returns": {"type": "void"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["DeleteApplication"], "create": []}, "args": [], "name": "terminate", "returns": {"type": "void"}, "events": [], "readonly": false, "recommendations": {}}], "name": "Pieout", "state": {"keys": {"box": {"box_game_trophy": {"key": "dF8=", "keyType": "AVMString", "valueType": "GameTrophy"}}, "global": {"game_id": {"key": "Z2FtZV9pZA==", "keyType": "AVMString", "valueType": "AVMUint64"}}, "local": {}}, "maps": {"box": {"box_game_state": {"keyType": "uint64", "valueType": "GameState", "prefix": "c18="}, "box_game_players": {"keyType": "uint64", "valueType": "AVMBytes", "prefix": "cF8="}, "box_game_register": {"keyType": "address", "valueType": "GameRegister", "prefix": "cl8="}}, "global": {}, "local": {}}, "schema": {"global": {"bytes": 0, "ints": 1}, "local": {"bytes": 0, "ints": 0}}}, "structs": {"GameRegister": [{"name": "hosting_game", "type": "bool"}, {"name": "best_score", "type": "uint8"}, {"name": "game_id", "type": "uint64"}, {"name": "expiry_round", "type": "uint64"}, {"name": "commit_rand_round", "type": "uint64"}], "GameState": [{"name": "staking_finalized", "type": "bool"}, {"name": "max_players", "type": "uint8"}, {"name": "active_players", "type": "uint8"}, {"name": "best_score", "type": "uint8"}, {"name": "first_place_score", "type": "uint8"}, {"name": "second_place_score", "type": "uint8"}, {"name": "third_place_score", "type": "uint8"}, {"name": "box_p_start_pos", "type": "uint16"}, {"name": "expiry_ts", "type": "uint64"}, {"name": "prize_pool", "type": "uint64"}, {"name": "admin_address", "type": "address"}, {"name": "first_place_address", "type": "address"}, {"name": "second_place_address", "type": "address"}, {"name": "third_place_address", "type": "address"}], "GameTrophy": [{"name": "high_score", "type": "uint8"}, {"name": "asset_id", "type": "uint64"}, {"name": "highscorer_address", "type": "address"}]}, "byteCode": {"approval": "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", "clear": "CoEBQw=="}, "compilerInfo": {"compiler": "puya", "compilerVersion": {"major": 4, "minor": 9, "patch": 0}}, "events": [{"args": [{"type": "uint64", "name": "field1"}, {"type": "bool", "name": "field2"}, {"type": "uint64", "name": "field3"}], "name": "game_live"}, {"args": [{"type": "uint64", "name": "field1"}, {"type": "address", "name": "field2"}, {"type": "uint8", "name": "field3"}], "name": "player_score"}, {"args": [{"type": "uint64", "name": "field1"}, {"type": "uint8", "name": "field2"}, {"type": "uint8", "name": "field3"}, {"type": "uint8", "name": "field4"}, {"type": "address", "name": "field5"}, {"type": "address", "name": "field6"}, {"type": "address", "name": "field7"}], "name": "game_over"}], "networks": {}, "source": {"approval": "", "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"}, "sourceInfo": {"approval": {"pcOffsetMethod": "cblocks", "sourceInfo": [{"pc": [2905, 4395], "errorMessage": "Account is not authorized to make this call."}, {"pc": [2189, 3273], "errorMessage": "Account is not recognized as an active player for this game."}, {"pc": [4252], "errorMessage": "Account is not recognized as the admin address for this game."}, {"pc": [1961], "errorMessage": "Account must be opted in to asset in order to perform this action."}, {"pc": [1699, 4682], "errorMessage": "Account must match application creator address."}, {"pc": [3068, 3215], "errorMessage": "Application ID mismatch. App ID must be same across all transactions in group."}, {"pc": [1948], "errorMessage": "Asset trophy receiver must match application ATH address."}, {"pc": [1719, 2088], "errorMessage": "Box found. Ensure the box you are trying to access does not exist already."}, {"pc": [1577, 1597, 2147, 2512, 2705, 3057, 3195, 4102, 4204, 4348], "errorMessage": "Box game state not found. Check if game ID exists."}, {"pc": [1690, 2093, 2155, 2235, 2243, 2520, 2528, 2713, 2899, 3203, 3208], "errorMessage": "Box not found. Ensure the box you are trying to access was created and still exists."}, {"pc": [1745, 2117, 2365, 2373], "errorMessage": "Box payment receiver address must match application address."}, {"pc": [1737, 2109, 2341, 2349], "errorMessage": "Box payment sender address must match transaction sender address."}, {"pc": [2203, 2914], "errorMessage": "Commit Rand Round not empty. Value must be zero to obtain a valid one."}, {"pc": [4420], "errorMessage": "Game admin address must be sole remaining active player in the game."}, {"pc": [4150], "errorMessage": "Game event not found. Check if game event Trigger ID exists"}, {"pc": [4263, 4654], "errorMessage": "Game lobby not empty. Number of active players must be zero."}, {"pc": [2260, 4379], "errorMessage": "Game register hosting game boolean value mismatch."}, {"pc": [2170, 2585, 3303, 4125, 4163, 4244], "errorMessage": "Game state staking finalized boolean value mismatch."}, {"pc": [794, 806, 811, 856, 893, 998, 1003, 1008, 1013, 1023, 1033, 1090, 1942, 2197, 2588, 2598, 2603, 3304, 3670, 3693, 3699, 3705, 3711, 3728, 3737, 3755, 3768, 3796, 3994, 4017, 4023, 4047, 4127, 4165, 4246, 4355], "errorMessage": "Index access is out of bounds"}, {"pc": [1729, 2101, 2295, 2325], "errorMessage": "Insufficient funds. Box pay amount is not enough to cover application MBR."}, {"pc": [1753], "errorMessage": "Insufficient funds. Mint pay amount is not enough to cover asset creation cost."}, {"pc": [2287, 2537, 4228], "errorMessage": "Insufficient funds. Stake pay amount is not enough to cover staking requirements."}, {"pc": [2740, 3092, 3240, 3323], "errorMessage": "Invalid Game ID. Box Game Register Game ID must be a certain value or match Game ID arg."}, {"pc": [3061, 3177], "errorMessage": "Invalid group index. Ensure transaction group index matches the expected value. "}, {"pc": [1713, 2079, 2230, 2499, 3045, 3172, 4191], "errorMessage": "Invalid group size. Ensure number of transaction in group is within valid bounds."}, {"pc": [1935, 2134, 2693, 2890, 4089, 4334], "errorMessage": "Invalid group size. This app call can only take standalone transactions."}, {"pc": [2595, 2921, 3311, 4134, 4172], "errorMessage": "Invalid time frame. Call made outside the permitted block or timestamp range."}, {"pc": [1769], "errorMessage": "Mint payment receiver address must match application address."}, {"pc": [1761], "errorMessage": "Mint payment sender address must match transaction sender address."}, {"pc": [2607], "errorMessage": "Number of active players must not exceed number of max players."}, {"pc": [155], "errorMessage": "OnCompletion is not DeleteApplication"}, {"pc": [167, 183, 209, 228, 244, 260, 278, 294, 320, 367, 383, 405, 417, 449, 462, 485, 506, 527, 544], "errorMessage": "OnCompletion is not NoOp"}, {"pc": [2572, 2772], "errorMessage": "Player with this address must not be an active game participant in the game."}, {"pc": [2622], "errorMessage": "Players box start position index overflow. Can not store more addresses."}, {"pc": [4258, 4661], "errorMessage": "Prize pool not empty. Amount in prize pool must be zero."}, {"pc": [3336], "errorMessage": "Randomness commit round not reached yet."}, {"pc": [3075, 3222], "errorMessage": "Sender mismatch. Sender must be same address across all transactions in group."}, {"pc": [2357, 2553, 4220], "errorMessage": "Stake payment receiver address must match application address."}, {"pc": [2333, 2545, 4212], "errorMessage": "Stake payment sender address must match transaction sender address."}, {"pc": [4676], "errorMessage": "Template variable 'DELETABLE' needs to be 'True' at deploy-time."}, {"pc": [2278], "errorMessage": "The number of max players must be within bounds."}, {"pc": [3083, 3230], "errorMessage": "Transaction at this group index must have exact required method selector."}, {"pc": [453], "errorMessage": "can only call when creating"}, {"pc": [158, 170, 186, 212, 231, 247, 263, 281, 297, 323, 370, 386, 408, 420, 465, 488, 509, 530, 547], "errorMessage": "can only call when not creating"}, {"pc": [744], "errorMessage": "check BoxMap entry exists"}, {"pc": [931], "errorMessage": "check BoxRef exists"}, {"pc": [1606], "errorMessage": "check self.box_game_players entry exists"}, {"pc": [1692, 2195, 2249, 2458, 2719, 2730, 2746, 2908, 3098, 3109, 3246, 3290, 3317, 3331, 4367, 4523], "errorMessage": "check self.box_game_register entry exists"}, {"pc": [1579, 2157, 2515, 2757, 3257, 3281, 4104, 4231, 4354], "errorMessage": "check self.box_game_state entry exists"}, {"pc": [1940, 3736, 3746, 3766, 3791, 3937, 4694, 4714], "errorMessage": "check self.box_game_trophy exists"}, {"pc": [2441], "errorMessage": "check self.game_id exists"}, {"pc": [2311, 2382, 2641, 2662, 3586, 3958, 4540], "errorMessage": "overflow"}, {"pc": [3040, 3167], "errorMessage": "transaction type is appl"}, {"pc": [200, 311, 338, 348, 358, 396, 430, 440], "errorMessage": "transaction type is pay"}]}, "clear": {"pcOffsetMethod": "none", "sourceInfo": []}}, "templateVariables": {"GEN_UNIX": {"type": "AVMUint64"}, "DELETABLE": {"type": "AVMUint64"}}}"""
>>>>>>> ea7a904b9472adbbef599e66fcf6aabce371db34
>>>>>>> 7d5ce2cdb7276d8fa076813c26691081467b2040
APP_SPEC = algokit_utils.Arc56Contract.from_json(_APP_SPEC_JSON)

def _parse_abi_args(args: object | None = None) -> list[object] | None:
    """Helper to parse ABI args into the format expected by underlying client"""
    if args is None:
        return None

    def convert_dataclass(value: object) -> object:
        if dataclasses.is_dataclass(value):
            return tuple(convert_dataclass(getattr(value, field.name)) for field in dataclasses.fields(value))
        elif isinstance(value, (list, tuple)):
            return type(value)(convert_dataclass(item) for item in value)
        return value

    match args:
        case tuple():
            method_args = list(args)
        case _ if dataclasses.is_dataclass(args):
            method_args = [getattr(args, field.name) for field in dataclasses.fields(args)]
        case _:
            raise ValueError("Invalid 'args' type. Expected 'tuple' or 'TypedDict' for respective typed arguments.")

    return [
        convert_dataclass(arg) if not isinstance(arg, algokit_utils.AppMethodCallTransactionArgument) else arg
        for arg in method_args
    ] if method_args else None

def _init_dataclass(cls: type, data: dict) -> object:
    """
    Recursively instantiate a dataclass of type `cls` from `data`.

    For each field on the dataclass, if the field type is also a dataclass
    and the corresponding data is a dict, instantiate that field recursively.
    """
    field_values = {}
    for field in dataclasses.fields(cls):
        field_value = data.get(field.name)
        # Check if the field expects another dataclass and the value is a dict.
        if dataclasses.is_dataclass(field.type) and isinstance(field_value, dict):
            field_values[field.name] = _init_dataclass(typing.cast(type, field.type), field_value)
        else:
            field_values[field.name] = field_value
    return cls(**field_values)

@dataclasses.dataclass(frozen=True)
class GameRegister:
    """Struct for GameRegister"""
    hosting_game: bool
    best_score: int
    game_id: int
    expiry_round: int
    commit_rand_round: int

@dataclasses.dataclass(frozen=True)
class GameState:
    """Struct for GameState"""
    staking_finalized: bool
    max_players: int
    active_players: int
    best_score: int
    first_place_score: int
    second_place_score: int
    third_place_score: int
    box_p_start_pos: int
    expiry_ts: int
    prize_pool: int
    admin_address: str
    first_place_address: str
    second_place_address: str
    third_place_address: str

@dataclasses.dataclass(frozen=True)
class GameTrophy:
    """Struct for GameTrophy"""
    high_score: int
    asset_id: int
    highscorer_address: str


@dataclasses.dataclass(frozen=True, kw_only=True)
class CalcSingleBoxCostArgs:
    """Dataclass for calc_single_box_cost arguments"""
    key_size: int
    value_size: int

    @property
    def abi_method_signature(self) -> str:
        return "calc_single_box_cost(uint8,uint16)uint64"

@dataclasses.dataclass(frozen=True, kw_only=True)
class DoesBoxGameStateExistArgs:
    """Dataclass for does_box_game_state_exist arguments"""
    game_id: int

    @property
    def abi_method_signature(self) -> str:
        return "does_box_game_state_exist(uint64)bool"

@dataclasses.dataclass(frozen=True, kw_only=True)
class ReadBoxGamePlayersArgs:
    """Dataclass for read_box_game_players arguments"""
    game_id: int

    @property
    def abi_method_signature(self) -> str:
        return "read_box_game_players(uint64)address[]"

@dataclasses.dataclass(frozen=True, kw_only=True)
class DoesBoxGameRegisterExistArgs:
    """Dataclass for does_box_game_register_exist arguments"""
    player: str | bytes

    @property
    def abi_method_signature(self) -> str:
        return "does_box_game_register_exist(account)bool"

@dataclasses.dataclass(frozen=True, kw_only=True)
class MintTrophyArgs:
    """Dataclass for mint_trophy arguments"""
    box_t_pay: algokit_utils.AppMethodCallTransactionArgument
    mint_pay: algokit_utils.AppMethodCallTransactionArgument

    @property
    def abi_method_signature(self) -> str:
        return "mint_trophy(pay,pay)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class GetBoxGameRegisterArgs:
    """Dataclass for get_box_game_register arguments"""
    box_r_pay: algokit_utils.AppMethodCallTransactionArgument

    @property
    def abi_method_signature(self) -> str:
        return "get_box_game_register(pay)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class SetGameCommitArgs:
    """Dataclass for set_game_commit arguments"""
    game_id: int

    @property
    def abi_method_signature(self) -> str:
        return "set_game_commit(uint64)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class NewGameArgs:
    """Dataclass for new_game arguments"""
    max_players: int
    box_s_pay: algokit_utils.AppMethodCallTransactionArgument
    box_p_pay: algokit_utils.AppMethodCallTransactionArgument
    stake_pay: algokit_utils.AppMethodCallTransactionArgument

    @property
    def abi_method_signature(self) -> str:
        return "new_game(uint64,pay,pay,pay)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class JoinGameArgs:
    """Dataclass for join_game arguments"""
    game_id: int
    stake_pay: algokit_utils.AppMethodCallTransactionArgument

    @property
    def abi_method_signature(self) -> str:
        return "join_game(uint64,pay)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class DelBoxGameRegisterForSelfArgs:
    """Dataclass for del_box_game_register_for_self arguments"""
    game_id: int

    @property
    def abi_method_signature(self) -> str:
        return "del_box_game_register_for_self(uint64)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class DelBoxGameRegisterForOtherArgs:
    """Dataclass for del_box_game_register_for_other arguments"""
    player: str | bytes

    @property
    def abi_method_signature(self) -> str:
        return "del_box_game_register_for_other(account)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class UpRefBudgetForPlayGameArgs:
    """Dataclass for up_ref_budget_for_play_game arguments"""
    game_id: int

    @property
    def abi_method_signature(self) -> str:
        return "up_ref_budget_for_play_game(uint64)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class PlayGameArgs:
    """Dataclass for play_game arguments"""
    game_id: int

    @property
    def abi_method_signature(self) -> str:
        return "play_game(uint64)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class TriggerGameEventArgs:
    """Dataclass for trigger_game_event arguments"""
    game_id: int
    trigger_id: int

    @property
    def abi_method_signature(self) -> str:
        return "trigger_game_event(uint64,uint8)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class ResetGameArgs:
    """Dataclass for reset_game arguments"""
    game_id: int
    stake_pay: algokit_utils.AppMethodCallTransactionArgument

    @property
    def abi_method_signature(self) -> str:
        return "reset_game(uint64,pay)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class DeleteGameArgs:
    """Dataclass for delete_game arguments"""
    game_id: int

    @property
    def abi_method_signature(self) -> str:
        return "delete_game(uint64)void"


class _PieoutDelete:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def terminate(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppDeleteMethodCallParams:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.delete(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "terminate()void",
        }))


class PieoutParams:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    @property
    def delete(self) -> "_PieoutDelete":
        return _PieoutDelete(self.app_client)

    def calc_single_box_cost(
        self,
        args: tuple[int, int] | CalcSingleBoxCostArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "calc_single_box_cost(uint8,uint16)uint64",
            "args": method_args,
        }))

    def read_gen_unix(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "read_gen_unix()uint64",
        }))

    def does_box_game_state_exist(
        self,
        args: tuple[int] | DoesBoxGameStateExistArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "does_box_game_state_exist(uint64)bool",
            "args": method_args,
        }))

    def read_box_game_players(
        self,
        args: tuple[int] | ReadBoxGamePlayersArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "read_box_game_players(uint64)address[]",
            "args": method_args,
        }))

    def does_box_game_trophy_exist(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "does_box_game_trophy_exist()bool",
        }))

    def does_box_game_register_exist(
        self,
        args: tuple[str | bytes] | DoesBoxGameRegisterExistArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "does_box_game_register_exist(account)bool",
            "args": method_args,
        }))

    def mint_trophy(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument, algokit_utils.AppMethodCallTransactionArgument] | MintTrophyArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "mint_trophy(pay,pay)void",
            "args": method_args,
        }))

    def claim_trophy(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "claim_trophy()void",
        }))

    def get_box_game_register(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument] | GetBoxGameRegisterArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_box_game_register(pay)void",
            "args": method_args,
        }))

    def set_game_commit(
        self,
        args: tuple[int] | SetGameCommitArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "set_game_commit(uint64)void",
            "args": method_args,
        }))

    def new_game(
        self,
        args: tuple[int, algokit_utils.AppMethodCallTransactionArgument, algokit_utils.AppMethodCallTransactionArgument, algokit_utils.AppMethodCallTransactionArgument] | NewGameArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "new_game(uint64,pay,pay,pay)void",
            "args": method_args,
        }))

    def join_game(
        self,
        args: tuple[int, algokit_utils.AppMethodCallTransactionArgument] | JoinGameArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "join_game(uint64,pay)void",
            "args": method_args,
        }))

    def del_box_game_register_for_self(
        self,
        args: tuple[int] | DelBoxGameRegisterForSelfArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "del_box_game_register_for_self(uint64)void",
            "args": method_args,
        }))

    def del_box_game_register_for_other(
        self,
        args: tuple[str | bytes] | DelBoxGameRegisterForOtherArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "del_box_game_register_for_other(account)void",
            "args": method_args,
        }))

    def up_ref_budget_for_play_game(
        self,
        args: tuple[int] | UpRefBudgetForPlayGameArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "up_ref_budget_for_play_game(uint64)void",
            "args": method_args,
        }))

    def play_game(
        self,
        args: tuple[int] | PlayGameArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "play_game(uint64)void",
            "args": method_args,
        }))

    def trigger_game_event(
        self,
        args: tuple[int, int] | TriggerGameEventArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "trigger_game_event(uint64,uint8)void",
            "args": method_args,
        }))

    def reset_game(
        self,
        args: tuple[int, algokit_utils.AppMethodCallTransactionArgument] | ResetGameArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "reset_game(uint64,pay)void",
            "args": method_args,
        }))

    def delete_game(
        self,
        args: tuple[int] | DeleteGameArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "delete_game(uint64)void",
            "args": method_args,
        }))

    def generate(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "generate()void",
        }))

    def clear_state(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        
    ) -> algokit_utils.AppCallParams:
        return self.app_client.params.bare.clear_state(
            params,
            
        )


class _PieoutDeleteTransaction:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def terminate(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.delete(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "terminate()void",
        }))


class PieoutCreateTransactionParams:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    @property
    def delete(self) -> "_PieoutDeleteTransaction":
        return _PieoutDeleteTransaction(self.app_client)

    def calc_single_box_cost(
        self,
        args: tuple[int, int] | CalcSingleBoxCostArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "calc_single_box_cost(uint8,uint16)uint64",
            "args": method_args,
        }))

    def read_gen_unix(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "read_gen_unix()uint64",
        }))

    def does_box_game_state_exist(
        self,
        args: tuple[int] | DoesBoxGameStateExistArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "does_box_game_state_exist(uint64)bool",
            "args": method_args,
        }))

    def read_box_game_players(
        self,
        args: tuple[int] | ReadBoxGamePlayersArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "read_box_game_players(uint64)address[]",
            "args": method_args,
        }))

    def does_box_game_trophy_exist(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "does_box_game_trophy_exist()bool",
        }))

    def does_box_game_register_exist(
        self,
        args: tuple[str | bytes] | DoesBoxGameRegisterExistArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "does_box_game_register_exist(account)bool",
            "args": method_args,
        }))

    def mint_trophy(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument, algokit_utils.AppMethodCallTransactionArgument] | MintTrophyArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "mint_trophy(pay,pay)void",
            "args": method_args,
        }))

    def claim_trophy(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "claim_trophy()void",
        }))

    def get_box_game_register(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument] | GetBoxGameRegisterArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_box_game_register(pay)void",
            "args": method_args,
        }))

    def set_game_commit(
        self,
        args: tuple[int] | SetGameCommitArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "set_game_commit(uint64)void",
            "args": method_args,
        }))

    def new_game(
        self,
        args: tuple[int, algokit_utils.AppMethodCallTransactionArgument, algokit_utils.AppMethodCallTransactionArgument, algokit_utils.AppMethodCallTransactionArgument] | NewGameArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "new_game(uint64,pay,pay,pay)void",
            "args": method_args,
        }))

    def join_game(
        self,
        args: tuple[int, algokit_utils.AppMethodCallTransactionArgument] | JoinGameArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "join_game(uint64,pay)void",
            "args": method_args,
        }))

    def del_box_game_register_for_self(
        self,
        args: tuple[int] | DelBoxGameRegisterForSelfArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "del_box_game_register_for_self(uint64)void",
            "args": method_args,
        }))

    def del_box_game_register_for_other(
        self,
        args: tuple[str | bytes] | DelBoxGameRegisterForOtherArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "del_box_game_register_for_other(account)void",
            "args": method_args,
        }))

    def up_ref_budget_for_play_game(
        self,
        args: tuple[int] | UpRefBudgetForPlayGameArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "up_ref_budget_for_play_game(uint64)void",
            "args": method_args,
        }))

    def play_game(
        self,
        args: tuple[int] | PlayGameArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "play_game(uint64)void",
            "args": method_args,
        }))

    def trigger_game_event(
        self,
        args: tuple[int, int] | TriggerGameEventArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "trigger_game_event(uint64,uint8)void",
            "args": method_args,
        }))

    def reset_game(
        self,
        args: tuple[int, algokit_utils.AppMethodCallTransactionArgument] | ResetGameArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "reset_game(uint64,pay)void",
            "args": method_args,
        }))

    def delete_game(
        self,
        args: tuple[int] | DeleteGameArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "delete_game(uint64)void",
            "args": method_args,
        }))

    def generate(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "generate()void",
        }))

    def clear_state(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        
    ) -> Transaction:
        return self.app_client.create_transaction.bare.clear_state(
            params,
            
        )


class _PieoutDeleteSend:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def terminate(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
    
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.delete(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "terminate()void",
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)


class PieoutSend:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    @property
    def delete(self) -> "_PieoutDeleteSend":
        return _PieoutDeleteSend(self.app_client)

    def calc_single_box_cost(
        self,
        args: tuple[int, int] | CalcSingleBoxCostArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[int]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "calc_single_box_cost(uint8,uint16)uint64",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[int], parsed_response)

    def read_gen_unix(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[int]:
    
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "read_gen_unix()uint64",
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[int], parsed_response)

    def does_box_game_state_exist(
        self,
        args: tuple[int] | DoesBoxGameStateExistArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[bool]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "does_box_game_state_exist(uint64)bool",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[bool], parsed_response)

    def read_box_game_players(
        self,
        args: tuple[int] | ReadBoxGamePlayersArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[list[str]]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "read_box_game_players(uint64)address[]",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[list[str]], parsed_response)

    def does_box_game_trophy_exist(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[bool]:
    
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "does_box_game_trophy_exist()bool",
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[bool], parsed_response)

    def does_box_game_register_exist(
        self,
        args: tuple[str | bytes] | DoesBoxGameRegisterExistArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[bool]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "does_box_game_register_exist(account)bool",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[bool], parsed_response)

    def mint_trophy(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument, algokit_utils.AppMethodCallTransactionArgument] | MintTrophyArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "mint_trophy(pay,pay)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def claim_trophy(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
    
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "claim_trophy()void",
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def get_box_game_register(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument] | GetBoxGameRegisterArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_box_game_register(pay)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def set_game_commit(
        self,
        args: tuple[int] | SetGameCommitArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "set_game_commit(uint64)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def new_game(
        self,
        args: tuple[int, algokit_utils.AppMethodCallTransactionArgument, algokit_utils.AppMethodCallTransactionArgument, algokit_utils.AppMethodCallTransactionArgument] | NewGameArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "new_game(uint64,pay,pay,pay)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def join_game(
        self,
        args: tuple[int, algokit_utils.AppMethodCallTransactionArgument] | JoinGameArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "join_game(uint64,pay)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def del_box_game_register_for_self(
        self,
        args: tuple[int] | DelBoxGameRegisterForSelfArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "del_box_game_register_for_self(uint64)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def del_box_game_register_for_other(
        self,
        args: tuple[str | bytes] | DelBoxGameRegisterForOtherArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "del_box_game_register_for_other(account)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def up_ref_budget_for_play_game(
        self,
        args: tuple[int] | UpRefBudgetForPlayGameArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "up_ref_budget_for_play_game(uint64)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def play_game(
        self,
        args: tuple[int] | PlayGameArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "play_game(uint64)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def trigger_game_event(
        self,
        args: tuple[int, int] | TriggerGameEventArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "trigger_game_event(uint64,uint8)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def reset_game(
        self,
        args: tuple[int, algokit_utils.AppMethodCallTransactionArgument] | ResetGameArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "reset_game(uint64,pay)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def delete_game(
        self,
        args: tuple[int] | DeleteGameArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "delete_game(uint64)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def generate(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
    
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "generate()void",
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def clear_state(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[algokit_utils.ABIReturn]:
        return self.app_client.send.bare.clear_state(
            params,
            send_params=send_params,
        )


class GlobalStateValue(typing.TypedDict):
    """Shape of global_state state key values"""
    game_id: int

class BoxStateValue(typing.TypedDict):
    """Shape of box state key values"""
    box_game_trophy: GameTrophy

class PieoutState:
    """Methods to access state for the current Pieout app"""

    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    @property
    def global_state(
        self
    ) -> "_GlobalState":
            """Methods to access global_state for the current app"""
            return _GlobalState(self.app_client)

    @property
    def box(
        self
    ) -> "_BoxState":
            """Methods to access box for the current app"""
            return _BoxState(self.app_client)

class _GlobalState:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client
        
        # Pre-generated mapping of value types to their struct classes
        self._struct_classes: dict[str, typing.Type[typing.Any]] = {}

    def get_all(self) -> GlobalStateValue:
        """Get all current keyed values from global_state state"""
        result = self.app_client.state.global_state.get_all()
        if not result:
            return typing.cast(GlobalStateValue, {})

        converted = {}
        for key, value in result.items():
            key_info = self.app_client.app_spec.state.keys.global_state.get(key)
            struct_class = self._struct_classes.get(key_info.value_type) if key_info else None
            converted[key] = (
                _init_dataclass(struct_class, value) if struct_class and isinstance(value, dict)
                else value
            )
        return typing.cast(GlobalStateValue, converted)

    @property
    def game_id(self) -> int:
        """Get the current value of the game_id key in global_state state"""
        value = self.app_client.state.global_state.get_value("game_id")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

class _BoxState:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client
        
        # Pre-generated mapping of value types to their struct classes
        self._struct_classes: dict[str, typing.Type[typing.Any]] = {
            "GameTrophy": GameTrophy,
            "GameState": GameState,
            "GameRegister": GameRegister
        }

    def get_all(self) -> BoxStateValue:
        """Get all current keyed values from box state"""
        result = self.app_client.state.box.get_all()
        if not result:
            return typing.cast(BoxStateValue, {})

        converted = {}
        for key, value in result.items():
            key_info = self.app_client.app_spec.state.keys.box.get(key)
            struct_class = self._struct_classes.get(key_info.value_type) if key_info else None
            converted[key] = (
                _init_dataclass(struct_class, value) if struct_class and isinstance(value, dict)
                else value
            )
        return typing.cast(BoxStateValue, converted)

    @property
    def box_game_trophy(self) -> GameTrophy:
        """Get the current value of the box_game_trophy key in box state"""
        value = self.app_client.state.box.get_value("box_game_trophy")
        if isinstance(value, dict) and "GameTrophy" in self._struct_classes:
            return _init_dataclass(self._struct_classes["GameTrophy"], value)  # type: ignore
        return typing.cast(GameTrophy, value)

    @property
    def box_game_state(self) -> "_MapState[int, GameState]":
        """Get values from the box_game_state map in box state"""
        return _MapState(
            self.app_client.state.box,
            "box_game_state",
            self._struct_classes.get("GameState")
        )

    @property
    def box_game_players(self) -> "_MapState[int, bytes]":
        """Get values from the box_game_players map in box state"""
        return _MapState(
            self.app_client.state.box,
            "box_game_players",
            None
        )

    @property
    def box_game_register(self) -> "_MapState[str, GameRegister]":
        """Get values from the box_game_register map in box state"""
        return _MapState(
            self.app_client.state.box,
            "box_game_register",
            self._struct_classes.get("GameRegister")
        )

_KeyType = typing.TypeVar("_KeyType")
_ValueType = typing.TypeVar("_ValueType")

class _AppClientStateMethodsProtocol(typing.Protocol):
    def get_map(self, map_name: str) -> dict[typing.Any, typing.Any]:
        ...
    def get_map_value(self, map_name: str, key: typing.Any) -> typing.Any | None:
        ...

class _MapState(typing.Generic[_KeyType, _ValueType]):
    """Generic class for accessing state maps with strongly typed keys and values"""

    def __init__(self, state_accessor: _AppClientStateMethodsProtocol, map_name: str,
                struct_class: typing.Type[_ValueType] | None = None):
        self._state_accessor = state_accessor
        self._map_name = map_name
        self._struct_class = struct_class

    def get_map(self) -> dict[_KeyType, _ValueType]:
        """Get all current values in the map"""
        result = self._state_accessor.get_map(self._map_name)
        if self._struct_class and result:
            return {k: _init_dataclass(self._struct_class, v) if isinstance(v, dict) else v
                    for k, v in result.items()}  # type: ignore
        return typing.cast(dict[_KeyType, _ValueType], result or {})

    def get_value(self, key: _KeyType) -> _ValueType | None:
        """Get a value from the map by key"""
        key_value = dataclasses.asdict(key) if dataclasses.is_dataclass(key) else key  # type: ignore
        value = self._state_accessor.get_map_value(self._map_name, key_value)
        if value is not None and self._struct_class and isinstance(value, dict):
            return _init_dataclass(self._struct_class, value)  # type: ignore
        return typing.cast(_ValueType | None, value)


class PieoutClient:
    """Client for interacting with Pieout smart contract"""

    @typing.overload
    def __init__(self, app_client: algokit_utils.AppClient) -> None: ...
    
    @typing.overload
    def __init__(
        self,
        *,
        algorand: _AlgoKitAlgorandClient,
        app_id: int,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> None: ...

    def __init__(
        self,
        app_client: algokit_utils.AppClient | None = None,
        *,
        algorand: _AlgoKitAlgorandClient | None = None,
        app_id: int | None = None,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> None:
        if app_client:
            self.app_client = app_client
        elif algorand and app_id:
            self.app_client = algokit_utils.AppClient(
                algokit_utils.AppClientParams(
                    algorand=algorand,
                    app_spec=APP_SPEC,
                    app_id=app_id,
                    app_name=app_name,
                    default_sender=default_sender,
                    default_signer=default_signer,
                    approval_source_map=approval_source_map,
                    clear_source_map=clear_source_map,
                )
            )
        else:
            raise ValueError("Either app_client or algorand and app_id must be provided")
    
        self.params = PieoutParams(self.app_client)
        self.create_transaction = PieoutCreateTransactionParams(self.app_client)
        self.send = PieoutSend(self.app_client)
        self.state = PieoutState(self.app_client)

    @staticmethod
    def from_creator_and_name(
        creator_address: str,
        app_name: str,
        algorand: _AlgoKitAlgorandClient,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
        ignore_cache: bool | None = None,
        app_lookup_cache: algokit_utils.ApplicationLookup | None = None,
    ) -> "PieoutClient":
        return PieoutClient(
            algokit_utils.AppClient.from_creator_and_name(
                creator_address=creator_address,
                app_name=app_name,
                app_spec=APP_SPEC,
                algorand=algorand,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
                ignore_cache=ignore_cache,
                app_lookup_cache=app_lookup_cache,
            )
        )
    
    @staticmethod
    def from_network(
        algorand: _AlgoKitAlgorandClient,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> "PieoutClient":
        return PieoutClient(
            algokit_utils.AppClient.from_network(
                app_spec=APP_SPEC,
                algorand=algorand,
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
            )
        )

    @property
    def app_id(self) -> int:
        return self.app_client.app_id
    
    @property
    def app_address(self) -> str:
        return self.app_client.app_address
    
    @property
    def app_name(self) -> str:
        return self.app_client.app_name
    
    @property
    def app_spec(self) -> algokit_utils.Arc56Contract:
        return self.app_client.app_spec
    
    @property
    def algorand(self) -> _AlgoKitAlgorandClient:
        return self.app_client.algorand

    def clone(
        self,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> "PieoutClient":
        return PieoutClient(
            self.app_client.clone(
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
            )
        )

    def new_group(self) -> "PieoutComposer":
        return PieoutComposer(self)

    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["calc_single_box_cost(uint8,uint16)uint64"],
        return_value: algokit_utils.ABIReturn | None
    ) -> int | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["read_gen_unix()uint64"],
        return_value: algokit_utils.ABIReturn | None
    ) -> int | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["does_box_game_state_exist(uint64)bool"],
        return_value: algokit_utils.ABIReturn | None
    ) -> bool | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["read_box_game_players(uint64)address[]"],
        return_value: algokit_utils.ABIReturn | None
    ) -> list[str] | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["does_box_game_trophy_exist()bool"],
        return_value: algokit_utils.ABIReturn | None
    ) -> bool | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["does_box_game_register_exist(account)bool"],
        return_value: algokit_utils.ABIReturn | None
    ) -> bool | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["mint_trophy(pay,pay)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["claim_trophy()void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["get_box_game_register(pay)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["set_game_commit(uint64)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["new_game(uint64,pay,pay,pay)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["join_game(uint64,pay)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["del_box_game_register_for_self(uint64)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["del_box_game_register_for_other(account)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["up_ref_budget_for_play_game(uint64)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["play_game(uint64)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["trigger_game_event(uint64,uint8)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["reset_game(uint64,pay)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["delete_game(uint64)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["generate()void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["terminate()void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: str,
        return_value: algokit_utils.ABIReturn | None
    ) -> algokit_utils.ABIValue | algokit_utils.ABIStruct | None: ...

    def decode_return_value(
        self,
        method: str,
        return_value: algokit_utils.ABIReturn | None
    ) -> algokit_utils.ABIValue | algokit_utils.ABIStruct | None | bool | int | list[str]:
        """Decode ABI return value for the given method."""
        if return_value is None:
            return None
    
        arc56_method = self.app_spec.get_arc56_method(method)
        decoded = return_value.get_arc56_value(arc56_method, self.app_spec.structs)
    
        # If method returns a struct, convert the dict to appropriate dataclass
        if (arc56_method and
            arc56_method.returns and
            arc56_method.returns.struct and
            isinstance(decoded, dict)):
            struct_class = globals().get(arc56_method.returns.struct)
            if struct_class:
                return struct_class(**typing.cast(dict, decoded))
        return decoded


@dataclasses.dataclass(frozen=True)
class PieoutMethodCallCreateParams(
    algokit_utils.AppClientCreateSchema, algokit_utils.BaseAppClientMethodCallParams[
        typing.Any,
        str | None,
    ]
):
    """Parameters for creating Pieout contract using ABI"""
    on_complete: typing.Literal[OnComplete.NoOpOC] | None = None
    method: str | None = None

    def to_algokit_utils_params(self) -> algokit_utils.AppClientMethodCallCreateParams:
        method_args = _parse_abi_args(self.args)
        return algokit_utils.AppClientMethodCallCreateParams(
            **{
                **self.__dict__,
                "method": self.method or getattr(self.args, "abi_method_signature", None),
                "args": method_args,
            }
        )

@dataclasses.dataclass(frozen=True)
class PieoutMethodCallDeleteParams(
    algokit_utils.BaseAppClientMethodCallParams[
        typing.Any,
        str | None,
    ]
):
    """Parameters for calling Pieout contract using ABI"""
    on_complete: typing.Literal[OnComplete.DeleteApplicationOC] | None = None
    method: str | None = None

    def to_algokit_utils_params(self) -> algokit_utils.AppClientMethodCallParams:
        method_args = _parse_abi_args(self.args)
        return algokit_utils.AppClientMethodCallParams(
            **{
                **self.__dict__,
                "method": self.method or getattr(self.args, "abi_method_signature", None),
                "args": method_args,
            }
        )

class PieoutFactory(algokit_utils.TypedAppFactoryProtocol[PieoutMethodCallCreateParams, None, PieoutMethodCallDeleteParams]):
    """Factory for deploying and managing PieoutClient smart contracts"""

    def __init__(
        self,
        algorand: _AlgoKitAlgorandClient,
        *,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        version: str | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None,
    ):
        self.app_factory = algokit_utils.AppFactory(
            params=algokit_utils.AppFactoryParams(
                algorand=algorand,
                app_spec=APP_SPEC,
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                version=version,
                compilation_params=compilation_params,
            )
        )
        self.params = PieoutFactoryParams(self.app_factory)
        self.create_transaction = PieoutFactoryCreateTransaction(self.app_factory)
        self.send = PieoutFactorySend(self.app_factory)

    @property
    def app_name(self) -> str:
        return self.app_factory.app_name
    
    @property
    def app_spec(self) -> algokit_utils.Arc56Contract:
        return self.app_factory.app_spec
    
    @property
    def algorand(self) -> _AlgoKitAlgorandClient:
        return self.app_factory.algorand

    def deploy(
        self,
        *,
        on_update: algokit_utils.OnUpdate | None = None,
        on_schema_break: algokit_utils.OnSchemaBreak | None = None,
        create_params: PieoutMethodCallCreateParams | None = None,
        update_params: None = None,
        delete_params: PieoutMethodCallDeleteParams | None = None,
        existing_deployments: algokit_utils.ApplicationLookup | None = None,
        ignore_cache: bool = False,
        app_name: str | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None,
        send_params: algokit_utils.SendParams | None = None,
    ) -> tuple[PieoutClient, algokit_utils.AppFactoryDeployResult]:
        """Deploy the application"""
        deploy_response = self.app_factory.deploy(
            on_update=on_update,
            on_schema_break=on_schema_break,
            create_params=create_params.to_algokit_utils_params() if create_params else None,
            update_params=update_params,
            delete_params=delete_params.to_algokit_utils_params() if delete_params else None,
            existing_deployments=existing_deployments,
            ignore_cache=ignore_cache,
            app_name=app_name,
            compilation_params=compilation_params,
            send_params=send_params,
        )

        return PieoutClient(deploy_response[0]), deploy_response[1]

    def get_app_client_by_creator_and_name(
        self,
        creator_address: str,
        app_name: str,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        ignore_cache: bool | None = None,
        app_lookup_cache: algokit_utils.ApplicationLookup | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> PieoutClient:
        """Get an app client by creator address and name"""
        return PieoutClient(
            self.app_factory.get_app_client_by_creator_and_name(
                creator_address,
                app_name,
                default_sender,
                default_signer,
                ignore_cache,
                app_lookup_cache,
                approval_source_map,
                clear_source_map,
            )
        )

    def get_app_client_by_id(
        self,
        app_id: int,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> PieoutClient:
        """Get an app client by app ID"""
        return PieoutClient(
            self.app_factory.get_app_client_by_id(
                app_id,
                app_name,
                default_sender,
                default_signer,
                approval_source_map,
                clear_source_map,
            )
        )


class PieoutFactoryParams:
    """Parameters for creating transactions for Pieout contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory
        self.create = PieoutFactoryCreateParams(app_factory)
        self.update = PieoutFactoryUpdateParams(app_factory)
        self.delete = PieoutFactoryDeleteParams(app_factory)

class PieoutFactoryCreateParams:
    """Parameters for 'create' operations of Pieout contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateParams:
        """Creates an instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.bare.create(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
            compilation_params=compilation_params)

    def calc_single_box_cost(
        self,
        args: tuple[int, int] | CalcSingleBoxCostArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the calc_single_box_cost(uint8,uint16)uint64 ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "calc_single_box_cost(uint8,uint16)uint64",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def read_gen_unix(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the read_gen_unix()uint64 ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "read_gen_unix()uint64",
                "args": None,
                }
            ),
            compilation_params=compilation_params
        )

    def does_box_game_state_exist(
        self,
        args: tuple[int] | DoesBoxGameStateExistArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the does_box_game_state_exist(uint64)bool ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "does_box_game_state_exist(uint64)bool",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def read_box_game_players(
        self,
        args: tuple[int] | ReadBoxGamePlayersArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the read_box_game_players(uint64)address[] ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "read_box_game_players(uint64)address[]",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def does_box_game_trophy_exist(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the does_box_game_trophy_exist()bool ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "does_box_game_trophy_exist()bool",
                "args": None,
                }
            ),
            compilation_params=compilation_params
        )

    def does_box_game_register_exist(
        self,
        args: tuple[str | bytes] | DoesBoxGameRegisterExistArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the does_box_game_register_exist(account)bool ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "does_box_game_register_exist(account)bool",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def mint_trophy(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument, algokit_utils.AppMethodCallTransactionArgument] | MintTrophyArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the mint_trophy(pay,pay)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "mint_trophy(pay,pay)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def claim_trophy(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the claim_trophy()void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "claim_trophy()void",
                "args": None,
                }
            ),
            compilation_params=compilation_params
        )

    def get_box_game_register(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument] | GetBoxGameRegisterArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the get_box_game_register(pay)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "get_box_game_register(pay)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def set_game_commit(
        self,
        args: tuple[int] | SetGameCommitArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the set_game_commit(uint64)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "set_game_commit(uint64)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def new_game(
        self,
        args: tuple[int, algokit_utils.AppMethodCallTransactionArgument, algokit_utils.AppMethodCallTransactionArgument, algokit_utils.AppMethodCallTransactionArgument] | NewGameArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the new_game(uint64,pay,pay,pay)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "new_game(uint64,pay,pay,pay)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def join_game(
        self,
        args: tuple[int, algokit_utils.AppMethodCallTransactionArgument] | JoinGameArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the join_game(uint64,pay)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "join_game(uint64,pay)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def del_box_game_register_for_self(
        self,
        args: tuple[int] | DelBoxGameRegisterForSelfArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the del_box_game_register_for_self(uint64)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "del_box_game_register_for_self(uint64)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def del_box_game_register_for_other(
        self,
        args: tuple[str | bytes] | DelBoxGameRegisterForOtherArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the del_box_game_register_for_other(account)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "del_box_game_register_for_other(account)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def up_ref_budget_for_play_game(
        self,
        args: tuple[int] | UpRefBudgetForPlayGameArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the up_ref_budget_for_play_game(uint64)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "up_ref_budget_for_play_game(uint64)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def play_game(
        self,
        args: tuple[int] | PlayGameArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the play_game(uint64)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "play_game(uint64)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def trigger_game_event(
        self,
        args: tuple[int, int] | TriggerGameEventArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the trigger_game_event(uint64,uint8)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "trigger_game_event(uint64,uint8)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def reset_game(
        self,
        args: tuple[int, algokit_utils.AppMethodCallTransactionArgument] | ResetGameArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the reset_game(uint64,pay)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "reset_game(uint64,pay)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def delete_game(
        self,
        args: tuple[int] | DeleteGameArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the delete_game(uint64)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "delete_game(uint64)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def generate(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the generate()void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "generate()void",
                "args": None,
                }
            ),
            compilation_params=compilation_params
        )

    def terminate(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the terminate()void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "terminate()void",
                "args": None,
                }
            ),
            compilation_params=compilation_params
        )

class PieoutFactoryUpdateParams:
    """Parameters for 'update' operations of Pieout contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        
    ) -> algokit_utils.AppUpdateParams:
        """Updates an instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.bare.deploy_update(
            algokit_utils.AppClientBareCallParams(**dataclasses.asdict(params)),
            )

class PieoutFactoryDeleteParams:
    """Parameters for 'delete' operations of Pieout contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        
    ) -> algokit_utils.AppDeleteParams:
        """Deletes an instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.bare.deploy_delete(
            algokit_utils.AppClientBareCallParams(**dataclasses.asdict(params)),
            )


class PieoutFactoryCreateTransaction:
    """Create transactions for Pieout contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory
        self.create = PieoutFactoryCreateTransactionCreate(app_factory)


class PieoutFactoryCreateTransactionCreate:
    """Create new instances of Pieout contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
    ) -> Transaction:
        """Creates a new instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.create_transaction.bare.create(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
        )


class PieoutFactorySend:
    """Send calls to Pieout contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory
        self.create = PieoutFactorySendCreate(app_factory)


class PieoutFactorySendCreate:
    """Send create calls to Pieout contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        send_params: algokit_utils.SendParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None,
    ) -> tuple[PieoutClient, algokit_utils.SendAppCreateTransactionResult]:
        """Creates a new instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        result = self.app_factory.send.bare.create(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
            send_params=send_params,
            compilation_params=compilation_params
        )
        return PieoutClient(result[0]), result[1]

    def generate(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        send_params: algokit_utils.SendParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> tuple[PieoutClient, algokit_utils.AppFactoryCreateMethodCallResult[None]]:
            """Creates and sends a transaction using the generate()void ABI method"""
            params = params or algokit_utils.CommonAppCallCreateParams()
            client, result = self.app_factory.send.create(
                algokit_utils.AppFactoryCreateMethodCallParams(
                    **{
                    **dataclasses.asdict(params),
                    "method": "generate()void",
                    "args": None,
                    }
                ),
                send_params=send_params,
                compilation_params=compilation_params
            )
            return_value = None if result.abi_return is None else typing.cast(None, result.abi_return)
    
            return PieoutClient(client), algokit_utils.AppFactoryCreateMethodCallResult[None](
                **{
                    **result.__dict__,
                    "app_id": result.app_id,
                    "abi_return": return_value,
                    "transaction": result.transaction,
                    "confirmation": result.confirmation,
                    "group_id": result.group_id,
                    "tx_ids": result.tx_ids,
                    "transactions": result.transactions,
                    "confirmations": result.confirmations,
                    "app_address": result.app_address,
                }
            )


class _PieoutDeleteComposer:
    def __init__(self, composer: "PieoutComposer"):
        self.composer = composer
    def terminate(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "PieoutComposer":
        self.composer._composer.add_app_delete_method_call(
            self.composer.client.params.delete.terminate(
                
                params=params,
                
            )
        )
        self.composer._result_mappers.append(
            lambda v: self.composer.client.decode_return_value(
                "terminate()void", v
            )
        )
        return self.composer


class PieoutComposer:
    """Composer for creating transaction groups for Pieout contract calls"""

    def __init__(self, client: "PieoutClient"):
        self.client = client
        self._composer = client.algorand.new_group()
        self._result_mappers: list[typing.Callable[[algokit_utils.ABIReturn | None], object] | None] = []

    @property
    def delete(self) -> "_PieoutDeleteComposer":
        return _PieoutDeleteComposer(self)

    def calc_single_box_cost(
        self,
        args: tuple[int, int] | CalcSingleBoxCostArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "PieoutComposer":
        self._composer.add_app_call_method_call(
            self.client.params.calc_single_box_cost(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "calc_single_box_cost(uint8,uint16)uint64", v
            )
        )
        return self

    def read_gen_unix(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "PieoutComposer":
        self._composer.add_app_call_method_call(
            self.client.params.read_gen_unix(
                
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "read_gen_unix()uint64", v
            )
        )
        return self

    def does_box_game_state_exist(
        self,
        args: tuple[int] | DoesBoxGameStateExistArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "PieoutComposer":
        self._composer.add_app_call_method_call(
            self.client.params.does_box_game_state_exist(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "does_box_game_state_exist(uint64)bool", v
            )
        )
        return self

    def read_box_game_players(
        self,
        args: tuple[int] | ReadBoxGamePlayersArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "PieoutComposer":
        self._composer.add_app_call_method_call(
            self.client.params.read_box_game_players(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "read_box_game_players(uint64)address[]", v
            )
        )
        return self

    def does_box_game_trophy_exist(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "PieoutComposer":
        self._composer.add_app_call_method_call(
            self.client.params.does_box_game_trophy_exist(
                
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "does_box_game_trophy_exist()bool", v
            )
        )
        return self

    def does_box_game_register_exist(
        self,
        args: tuple[str | bytes] | DoesBoxGameRegisterExistArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "PieoutComposer":
        self._composer.add_app_call_method_call(
            self.client.params.does_box_game_register_exist(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "does_box_game_register_exist(account)bool", v
            )
        )
        return self

    def mint_trophy(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument, algokit_utils.AppMethodCallTransactionArgument] | MintTrophyArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "PieoutComposer":
        self._composer.add_app_call_method_call(
            self.client.params.mint_trophy(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "mint_trophy(pay,pay)void", v
            )
        )
        return self

    def claim_trophy(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "PieoutComposer":
        self._composer.add_app_call_method_call(
            self.client.params.claim_trophy(
                
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "claim_trophy()void", v
            )
        )
        return self

    def get_box_game_register(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument] | GetBoxGameRegisterArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "PieoutComposer":
        self._composer.add_app_call_method_call(
            self.client.params.get_box_game_register(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "get_box_game_register(pay)void", v
            )
        )
        return self

    def set_game_commit(
        self,
        args: tuple[int] | SetGameCommitArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "PieoutComposer":
        self._composer.add_app_call_method_call(
            self.client.params.set_game_commit(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "set_game_commit(uint64)void", v
            )
        )
        return self

    def new_game(
        self,
        args: tuple[int, algokit_utils.AppMethodCallTransactionArgument, algokit_utils.AppMethodCallTransactionArgument, algokit_utils.AppMethodCallTransactionArgument] | NewGameArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "PieoutComposer":
        self._composer.add_app_call_method_call(
            self.client.params.new_game(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "new_game(uint64,pay,pay,pay)void", v
            )
        )
        return self

    def join_game(
        self,
        args: tuple[int, algokit_utils.AppMethodCallTransactionArgument] | JoinGameArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "PieoutComposer":
        self._composer.add_app_call_method_call(
            self.client.params.join_game(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "join_game(uint64,pay)void", v
            )
        )
        return self

    def del_box_game_register_for_self(
        self,
        args: tuple[int] | DelBoxGameRegisterForSelfArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "PieoutComposer":
        self._composer.add_app_call_method_call(
            self.client.params.del_box_game_register_for_self(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "del_box_game_register_for_self(uint64)void", v
            )
        )
        return self

    def del_box_game_register_for_other(
        self,
        args: tuple[str | bytes] | DelBoxGameRegisterForOtherArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "PieoutComposer":
        self._composer.add_app_call_method_call(
            self.client.params.del_box_game_register_for_other(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "del_box_game_register_for_other(account)void", v
            )
        )
        return self

    def up_ref_budget_for_play_game(
        self,
        args: tuple[int] | UpRefBudgetForPlayGameArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "PieoutComposer":
        self._composer.add_app_call_method_call(
            self.client.params.up_ref_budget_for_play_game(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "up_ref_budget_for_play_game(uint64)void", v
            )
        )
        return self

    def play_game(
        self,
        args: tuple[int] | PlayGameArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "PieoutComposer":
        self._composer.add_app_call_method_call(
            self.client.params.play_game(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "play_game(uint64)void", v
            )
        )
        return self

    def trigger_game_event(
        self,
        args: tuple[int, int] | TriggerGameEventArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "PieoutComposer":
        self._composer.add_app_call_method_call(
            self.client.params.trigger_game_event(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "trigger_game_event(uint64,uint8)void", v
            )
        )
        return self

    def reset_game(
        self,
        args: tuple[int, algokit_utils.AppMethodCallTransactionArgument] | ResetGameArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "PieoutComposer":
        self._composer.add_app_call_method_call(
            self.client.params.reset_game(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "reset_game(uint64,pay)void", v
            )
        )
        return self

    def delete_game(
        self,
        args: tuple[int] | DeleteGameArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "PieoutComposer":
        self._composer.add_app_call_method_call(
            self.client.params.delete_game(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "delete_game(uint64)void", v
            )
        )
        return self

    def generate(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "PieoutComposer":
        self._composer.add_app_call_method_call(
            self.client.params.generate(
                
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "generate()void", v
            )
        )
        return self

    def clear_state(
        self,
        *,
        args: list[bytes] | None = None,
        params: algokit_utils.CommonAppCallParams | None = None,
    ) -> "PieoutComposer":
        params=params or algokit_utils.CommonAppCallParams()
        self._composer.add_app_call(
            self.client.params.clear_state(
                algokit_utils.AppClientBareCallParams(
                    **{
                        **dataclasses.asdict(params),
                        "args": args
                    }
                )
            )
        )
        return self
    
    def add_transaction(
        self, txn: Transaction, signer: TransactionSigner | None = None
    ) -> "PieoutComposer":
        self._composer.add_transaction(txn, signer)
        return self
    
    def composer(self) -> algokit_utils.TransactionComposer:
        return self._composer
    
    def simulate(
        self,
        allow_more_logs: bool | None = None,
        allow_empty_signatures: bool | None = None,
        allow_unnamed_resources: bool | None = None,
        extra_opcode_budget: int | None = None,
        exec_trace_config: SimulateTraceConfig | None = None,
        simulation_round: int | None = None,
        skip_signatures: bool | None = None,
    ) -> algokit_utils.SendAtomicTransactionComposerResults:
        return self._composer.simulate(
            allow_more_logs=allow_more_logs,
            allow_empty_signatures=allow_empty_signatures,
            allow_unnamed_resources=allow_unnamed_resources,
            extra_opcode_budget=extra_opcode_budget,
            exec_trace_config=exec_trace_config,
            simulation_round=simulation_round,
            skip_signatures=skip_signatures,
        )
    
    def send(
        self,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAtomicTransactionComposerResults:
        return self._composer.send(send_params)
