# flake8: noqa
# fmt: off
# mypy: ignore-errors
# This file was automatically generated by algokit-client-generator.
# DO NOT MODIFY IT BY HAND.
# requires: algokit-utils@^3.0.0

# common
import dataclasses
import typing
# core algosdk
import algosdk
from algosdk.transaction import OnComplete
from algosdk.atomic_transaction_composer import TransactionSigner
from algosdk.source_map import SourceMap
from algosdk.transaction import Transaction
from algosdk.v2client.models import SimulateTraceConfig
# utils
import algokit_utils
from algokit_utils import AlgorandClient as _AlgoKitAlgorandClient

_APP_SPEC_JSON = r"""{"arcs": [22, 28], "bareActions": {"call": [], "create": []}, "methods": [{"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint8", "name": "key_size"}, {"type": "uint16", "name": "value_size"}], "name": "calc_single_box_fee", "returns": {"type": "uint64"}, "events": [], "readonly": true, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [], "name": "get_gen_unix", "returns": {"type": "uint64"}, "events": [], "readonly": true, "recommendations": {}}, {"actions": {"call": [], "create": ["NoOp"]}, "args": [], "name": "generate", "returns": {"type": "void"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "pay", "name": "box_pay"}], "name": "create_player_addrs_box", "returns": {"type": "void"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "pay", "name": "box_pay"}, {"type": "pay", "name": "stake_pay"}], "name": "stake", "returns": {"type": "void"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [], "name": "gamba", "returns": {"type": "uint64"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["DeleteApplication"], "create": []}, "args": [], "name": "terminate", "returns": {"type": "void"}, "events": [], "readonly": false, "recommendations": {}}], "name": "Pieout", "state": {"keys": {"box": {}, "global": {"total_players": {"key": "dG90YWxfcGxheWVycw==", "keyType": "AVMString", "valueType": "AVMUint64"}, "players_pending": {"key": "cGxheWVyc19wZW5kaW5n", "keyType": "AVMString", "valueType": "AVMUint64"}, "players_elim": {"key": "cGxheWVyc19lbGlt", "keyType": "AVMString", "valueType": "AVMUint64"}, "total_stake": {"key": "dG90YWxfc3Rha2U=", "keyType": "AVMString", "valueType": "AVMUint64"}, "creator_stake_status": {"key": "Y3JlYXRvcl9zdGFrZV9zdGF0dXM=", "keyType": "AVMString", "valueType": "AVMUint64"}, "staking_finalized": {"key": "c3Rha2luZ19maW5hbGl6ZWQ=", "keyType": "AVMString", "valueType": "AVMUint64"}, "pa_box_offset": {"key": "cGFfYm94X29mZnNldA==", "keyType": "AVMString", "valueType": "AVMUint64"}, "current_turn": {"key": "Y3VycmVudF90dXJu", "keyType": "AVMString", "valueType": "AVMUint64"}}, "local": {}}, "maps": {"box": {"box_player": {"keyType": "address", "valueType": "PlayerBoxVal", "prefix": "cF8="}, "box_player_addrs": {"keyType": "AVMBytes", "valueType": "AVMBytes", "prefix": ""}}, "global": {}, "local": {}}, "schema": {"global": {"bytes": 0, "ints": 8}, "local": {"bytes": 0, "ints": 0}}}, "structs": {"PlayerBoxVal": [{"name": "id", "type": "uint8"}, {"name": "turn", "type": "uint8"}, {"name": "staked", "type": "bool"}, {"name": "pending", "type": "bool"}, {"name": "eliminated", "type": "bool"}, {"name": "winner", "type": "bool"}]}, "byteCode": {"approval": "CiAGAAEKAgAAJgwNdG90YWxfcGxheWVycwxwbGF5ZXJzX2VsaW0PcGxheWVyc19wZW5kaW5nDXBhX2JveF9vZmZzZXQMY3VycmVudF90dXJuEXN0YWtpbmdfZmluYWxpemVkBBUffHULdG90YWxfc3Rha2UUY3JlYXRvcl9zdGFrZV9zdGF0dXMDcGFfAnBfAwaBATEbQQA4ggcEE30QlAROzgz9BFviGfAE9pgCBgTWIz4bBJM2sJgEX/FtpDYaAI4HAHYAZQBYAEIAIgAQAAIiQzEZgQUSRDEYRIgDJSNDMRkURDEYRIgB0hYnBkxQsCNDMRkURDEYRDEWJQlJOBAjEkQxFiMJSTgQIxJEiAC5I0MxGRREMRhEMRYjCUk4ECMSRIgAbiNDMRkURDEYFESIAD4jQzEZFEQxGEQhBBYnBkxQsCNDMRkURDEYRDYaATYaAogACBYnBkxQsCNDigIBi/4Xi/8XCIGQAwuBxBMIiTEAMgkSRCgiZyoiZykiZycHImcnCCJnJwUiZysiZycEImeJigEAMQBJMgkSRIv/OAASRDIKi/84BxJEi/84CIICAQMCAUCI/6QPRIHAAq8nCbxIJwlMv4mKAgAiMQAyCjIJIicFZUQURCInCGVEQAAKiwGLAxJEJwgjZycKiwFJTgJQSYwAvUUBFESL/jgAEkEAtIv/OACLARJBAKojRIv+OAeLAhJBAJqL/zgHiwISQQCQI0SL/jgIgZSHAQ9Ei/84CEmBwJoMEkQiKGVEJAxEIihlRBZJk4EIDkRXBwEiJwRlRBZJk4EIDkRXBwFQgAGAUIERIlSBEiJUgRMiVIsATL8iJwdlRAgnB0xnIihlRCMIKExnIihlRCQSQQAEJwUjZyIrZUSBoAIOQQAUIitlRCcJTIsBuyIrZUSBIAgrTGeJIkL/bSJC/1OKAAEiRwKAAEcFgYILMgwNQQAYsYEGshCBBbIZJwuyHicLsh8isgGzQv/fMQA2GgCMADIIjAQyBElOAowDJwpMUEmMAr5MSU4CjAFEI1WMBSUPQQDuiwMkDkEA5yNEIowGiwaLAwxBADcijAeLB4sGDEEAFIsGOACLB0lOAjgAE0QjCIwHQv/kiwZJIsIaiwASREk4GIsEEkQjCIwGQv/BIicFZUQjEkQiKGVEJQ9BAI4iKGVEJA5BAIUjRCInBGVEiwUSRDIGFjEXUAGBEFlJjAiB8FUPQQBaiwUjCBZJk4EIDkRXBwGLAUxcAYsCTL8iKmVEIwgqTGciKmVEIihlRBJBACkiKWVEIihlRBNBABciKGVEIillRAkoTGciJwRlRCMIJwRMZykiZyoiZ4sIjACJIillRCMIKUxnQv+xIkL/eCJC/xYxADIJEkQhBUSJ", "clear": "CoEBQw=="}, "compilerInfo": {"compiler": "puya", "compilerVersion": {"major": 4, "minor": 7, "patch": 0}}, "events": [], "networks": {}, "source": {"approval": "", "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"}, "sourceInfo": {"approval": {"pcOffsetMethod": "cblocks", "sourceInfo": [{"pc": [68], "errorMessage": "OnCompletion is not DeleteApplication"}, {"pc": [80, 98, 130, 152, 165, 182], "errorMessage": "OnCompletion is not NoOp"}, {"pc": [888], "errorMessage": "Template variable 'DELETABLE' needs to be 'True' at deploy-time."}, {"pc": [227, 266, 885], "errorMessage": "Transaction sender address must match application creator address."}, {"pc": [156], "errorMessage": "can only call when creating"}, {"pc": [71, 83, 101, 133, 168, 185], "errorMessage": "can only call when not creating"}, {"pc": [628], "errorMessage": "check self.box_player entry exists"}, {"pc": [331], "errorMessage": "check self.creator_stake_status exists"}, {"pc": [449, 745, 842], "errorMessage": "check self.current_turn exists"}, {"pc": [516, 527, 537], "errorMessage": "check self.pa_box_offset exists"}, {"pc": [817, 833, 863], "errorMessage": "check self.players_elim exists"}, {"pc": [796, 805], "errorMessage": "check self.players_pending exists"}, {"pc": [324, 717], "errorMessage": "check self.staking_finalized exists"}, {"pc": [427, 434, 494, 503, 724, 733, 809, 821, 829], "errorMessage": "check self.total_players exists"}, {"pc": [485], "errorMessage": "check self.total_stake exists"}, {"pc": [705], "errorMessage": "gamba(): Rejected. Application ID mismatch not allowed."}, {"pc": [646], "errorMessage": "gamba(): Rejected. Atomic transaction group size is out of bounds."}, {"pc": [681], "errorMessage": "gamba(): Rejected. Every transaction in group must have unique sender address."}, {"pc": [720], "errorMessage": "gamba(): Rejected. Gamba not available until staking is finalized."}, {"pc": [698], "errorMessage": "gamba(): Rejected. Method selector mismatch not allowed."}, {"pc": [740], "errorMessage": "gamba(): Rejected. Total number of players must not be out of bounds."}, {"pc": [749], "errorMessage": "gamba(): Rejected. Transaction sender turn is not aligned with current turn."}, {"pc": [441, 456, 780], "errorMessage": "overflow"}, {"pc": [402], "errorMessage": "stake(): Box and Stake payment reciever address must match transaction sender address."}, {"pc": [380], "errorMessage": "stake(): Box and Stake payment sender address must match transaction sender address."}, {"pc": [280], "errorMessage": "stake(): Box payment reciever address must match transaction sender address."}, {"pc": [272], "errorMessage": "stake(): Box payment sender address must match transaction sender address."}, {"pc": [296, 412], "errorMessage": "stake(): Insufficient amount. Box pay amount does not cover application MBR."}, {"pc": [423], "errorMessage": "stake(): Insufficient amount. Stake pay amount does not cover minimum entry fee."}, {"pc": [430], "errorMessage": "stake(): Max player limit exceeded."}, {"pc": [340], "errorMessage": "stake(): Rejected. Application creator account must stake first before any other account."}, {"pc": [326], "errorMessage": "stake(): Rejected. Can only stake when staking is not finalized."}, {"pc": [360], "errorMessage": "stake(): Transaction sender address already staked."}, {"pc": [111, 121, 143], "errorMessage": "transaction type is pay"}]}, "clear": {"pcOffsetMethod": "none", "sourceInfo": []}}, "templateVariables": {"GEN_UNIX": {"type": "AVMUint64"}, "DELETABLE": {"type": "AVMUint64"}}}"""
APP_SPEC = algokit_utils.Arc56Contract.from_json(_APP_SPEC_JSON)

def _parse_abi_args(args: object | None = None) -> list[object] | None:
    """Helper to parse ABI args into the format expected by underlying client"""
    if args is None:
        return None

    def convert_dataclass(value: object) -> object:
        if dataclasses.is_dataclass(value):
            return tuple(convert_dataclass(getattr(value, field.name)) for field in dataclasses.fields(value))
        elif isinstance(value, (list, tuple)):
            return type(value)(convert_dataclass(item) for item in value)
        return value

    match args:
        case tuple():
            method_args = list(args)
        case _ if dataclasses.is_dataclass(args):
            method_args = [getattr(args, field.name) for field in dataclasses.fields(args)]
        case _:
            raise ValueError("Invalid 'args' type. Expected 'tuple' or 'TypedDict' for respective typed arguments.")

    return [
        convert_dataclass(arg) if not isinstance(arg, algokit_utils.AppMethodCallTransactionArgument) else arg
        for arg in method_args
    ] if method_args else None

def _init_dataclass(cls: type, data: dict) -> object:
    """
    Recursively instantiate a dataclass of type `cls` from `data`.

    For each field on the dataclass, if the field type is also a dataclass
    and the corresponding data is a dict, instantiate that field recursively.
    """
    field_values = {}
    for field in dataclasses.fields(cls):
        field_value = data.get(field.name)
        # Check if the field expects another dataclass and the value is a dict.
        if dataclasses.is_dataclass(field.type) and isinstance(field_value, dict):
            field_values[field.name] = _init_dataclass(typing.cast(type, field.type), field_value)
        else:
            field_values[field.name] = field_value
    return cls(**field_values)

@dataclasses.dataclass(frozen=True)
class PlayerBoxVal:
    """Struct for PlayerBoxVal"""
    id: int
    turn: int
    staked: bool
    pending: bool
    eliminated: bool
    winner: bool


@dataclasses.dataclass(frozen=True, kw_only=True)
class CalcSingleBoxFeeArgs:
    """Dataclass for calc_single_box_fee arguments"""
    key_size: int
    value_size: int

    @property
    def abi_method_signature(self) -> str:
        return "calc_single_box_fee(uint8,uint16)uint64"

@dataclasses.dataclass(frozen=True, kw_only=True)
class CreatePlayerAddrsBoxArgs:
    """Dataclass for create_player_addrs_box arguments"""
    box_pay: algokit_utils.AppMethodCallTransactionArgument

    @property
    def abi_method_signature(self) -> str:
        return "create_player_addrs_box(pay)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class StakeArgs:
    """Dataclass for stake arguments"""
    box_pay: algokit_utils.AppMethodCallTransactionArgument
    stake_pay: algokit_utils.AppMethodCallTransactionArgument

    @property
    def abi_method_signature(self) -> str:
        return "stake(pay,pay)void"


class _PieoutDelete:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def terminate(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppDeleteMethodCallParams:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.delete(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "terminate()void",
        }))


class PieoutParams:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    @property
    def delete(self) -> "_PieoutDelete":
        return _PieoutDelete(self.app_client)

    def calc_single_box_fee(
        self,
        args: tuple[int, int] | CalcSingleBoxFeeArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "calc_single_box_fee(uint8,uint16)uint64",
            "args": method_args,
        }))

    def get_gen_unix(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_gen_unix()uint64",
        }))

    def create_player_addrs_box(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument] | CreatePlayerAddrsBoxArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "create_player_addrs_box(pay)void",
            "args": method_args,
        }))

    def stake(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument, algokit_utils.AppMethodCallTransactionArgument] | StakeArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "stake(pay,pay)void",
            "args": method_args,
        }))

    def gamba(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "gamba()uint64",
        }))

    def generate(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "generate()void",
        }))

    def clear_state(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        
    ) -> algokit_utils.AppCallParams:
        return self.app_client.params.bare.clear_state(
            params,
            
        )


class _PieoutDeleteTransaction:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def terminate(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.delete(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "terminate()void",
        }))


class PieoutCreateTransactionParams:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    @property
    def delete(self) -> "_PieoutDeleteTransaction":
        return _PieoutDeleteTransaction(self.app_client)

    def calc_single_box_fee(
        self,
        args: tuple[int, int] | CalcSingleBoxFeeArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "calc_single_box_fee(uint8,uint16)uint64",
            "args": method_args,
        }))

    def get_gen_unix(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_gen_unix()uint64",
        }))

    def create_player_addrs_box(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument] | CreatePlayerAddrsBoxArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "create_player_addrs_box(pay)void",
            "args": method_args,
        }))

    def stake(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument, algokit_utils.AppMethodCallTransactionArgument] | StakeArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "stake(pay,pay)void",
            "args": method_args,
        }))

    def gamba(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "gamba()uint64",
        }))

    def generate(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "generate()void",
        }))

    def clear_state(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        
    ) -> Transaction:
        return self.app_client.create_transaction.bare.clear_state(
            params,
            
        )


class _PieoutDeleteSend:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def terminate(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
    
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.delete(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "terminate()void",
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)


class PieoutSend:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    @property
    def delete(self) -> "_PieoutDeleteSend":
        return _PieoutDeleteSend(self.app_client)

    def calc_single_box_fee(
        self,
        args: tuple[int, int] | CalcSingleBoxFeeArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[int]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "calc_single_box_fee(uint8,uint16)uint64",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[int], parsed_response)

    def get_gen_unix(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[int]:
    
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_gen_unix()uint64",
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[int], parsed_response)

    def create_player_addrs_box(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument] | CreatePlayerAddrsBoxArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "create_player_addrs_box(pay)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def stake(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument, algokit_utils.AppMethodCallTransactionArgument] | StakeArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "stake(pay,pay)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def gamba(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[int]:
    
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "gamba()uint64",
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[int], parsed_response)

    def generate(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
    
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "generate()void",
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def clear_state(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[algokit_utils.ABIReturn]:
        return self.app_client.send.bare.clear_state(
            params,
            send_params=send_params,
        )


class GlobalStateValue(typing.TypedDict):
    """Shape of global_state state key values"""
    total_players: int
    players_pending: int
    players_elim: int
    total_stake: int
    creator_stake_status: int
    staking_finalized: int
    pa_box_offset: int
    current_turn: int

class PieoutState:
    """Methods to access state for the current Pieout app"""

    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    @property
    def global_state(
        self
    ) -> "_GlobalState":
            """Methods to access global_state for the current app"""
            return _GlobalState(self.app_client)

    @property
    def box(
        self
    ) -> "_BoxState":
            """Methods to access box for the current app"""
            return _BoxState(self.app_client)

class _GlobalState:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client
        
        # Pre-generated mapping of value types to their struct classes
        self._struct_classes: dict[str, typing.Type[typing.Any]] = {}

    def get_all(self) -> GlobalStateValue:
        """Get all current keyed values from global_state state"""
        result = self.app_client.state.global_state.get_all()
        if not result:
            return typing.cast(GlobalStateValue, {})

        converted = {}
        for key, value in result.items():
            key_info = self.app_client.app_spec.state.keys.global_state.get(key)
            struct_class = self._struct_classes.get(key_info.value_type) if key_info else None
            converted[key] = (
                _init_dataclass(struct_class, value) if struct_class and isinstance(value, dict)
                else value
            )
        return typing.cast(GlobalStateValue, converted)

    @property
    def total_players(self) -> int:
        """Get the current value of the total_players key in global_state state"""
        value = self.app_client.state.global_state.get_value("total_players")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def players_pending(self) -> int:
        """Get the current value of the players_pending key in global_state state"""
        value = self.app_client.state.global_state.get_value("players_pending")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def players_elim(self) -> int:
        """Get the current value of the players_elim key in global_state state"""
        value = self.app_client.state.global_state.get_value("players_elim")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def total_stake(self) -> int:
        """Get the current value of the total_stake key in global_state state"""
        value = self.app_client.state.global_state.get_value("total_stake")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def creator_stake_status(self) -> int:
        """Get the current value of the creator_stake_status key in global_state state"""
        value = self.app_client.state.global_state.get_value("creator_stake_status")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def staking_finalized(self) -> int:
        """Get the current value of the staking_finalized key in global_state state"""
        value = self.app_client.state.global_state.get_value("staking_finalized")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def pa_box_offset(self) -> int:
        """Get the current value of the pa_box_offset key in global_state state"""
        value = self.app_client.state.global_state.get_value("pa_box_offset")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def current_turn(self) -> int:
        """Get the current value of the current_turn key in global_state state"""
        value = self.app_client.state.global_state.get_value("current_turn")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

class _BoxState:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client
        
        # Pre-generated mapping of value types to their struct classes
        self._struct_classes: dict[str, typing.Type[typing.Any]] = {
            "PlayerBoxVal": PlayerBoxVal
        }

    def get_all(self) -> dict[str, typing.Any]:
        """Get all current keyed values from box state"""
        result = self.app_client.state.box.get_all()
        if not result:
            return {}

        converted = {}
        for key, value in result.items():
            key_info = self.app_client.app_spec.state.keys.box.get(key)
            struct_class = self._struct_classes.get(key_info.value_type) if key_info else None
            converted[key] = (
                _init_dataclass(struct_class, value) if struct_class and isinstance(value, dict)
                else value
            )
        return converted

    @property
    def box_player(self) -> "_MapState[str, PlayerBoxVal]":
        """Get values from the box_player map in box state"""
        return _MapState(
            self.app_client.state.box,
            "box_player",
            self._struct_classes.get("PlayerBoxVal")
        )

    @property
    def box_player_addrs(self) -> "_MapState[bytes, bytes]":
        """Get values from the box_player_addrs map in box state"""
        return _MapState(
            self.app_client.state.box,
            "box_player_addrs",
            None
        )

_KeyType = typing.TypeVar("_KeyType")
_ValueType = typing.TypeVar("_ValueType")

class _AppClientStateMethodsProtocol(typing.Protocol):
    def get_map(self, map_name: str) -> dict[typing.Any, typing.Any]:
        ...
    def get_map_value(self, map_name: str, key: typing.Any) -> typing.Any | None:
        ...

class _MapState(typing.Generic[_KeyType, _ValueType]):
    """Generic class for accessing state maps with strongly typed keys and values"""

    def __init__(self, state_accessor: _AppClientStateMethodsProtocol, map_name: str,
                struct_class: typing.Type[_ValueType] | None = None):
        self._state_accessor = state_accessor
        self._map_name = map_name
        self._struct_class = struct_class

    def get_map(self) -> dict[_KeyType, _ValueType]:
        """Get all current values in the map"""
        result = self._state_accessor.get_map(self._map_name)
        if self._struct_class and result:
            return {k: _init_dataclass(self._struct_class, v) if isinstance(v, dict) else v
                    for k, v in result.items()}  # type: ignore
        return typing.cast(dict[_KeyType, _ValueType], result or {})

    def get_value(self, key: _KeyType) -> _ValueType | None:
        """Get a value from the map by key"""
        key_value = dataclasses.asdict(key) if dataclasses.is_dataclass(key) else key  # type: ignore
        value = self._state_accessor.get_map_value(self._map_name, key_value)
        if value is not None and self._struct_class and isinstance(value, dict):
            return _init_dataclass(self._struct_class, value)  # type: ignore
        return typing.cast(_ValueType | None, value)


class PieoutClient:
    """Client for interacting with Pieout smart contract"""

    @typing.overload
    def __init__(self, app_client: algokit_utils.AppClient) -> None: ...
    
    @typing.overload
    def __init__(
        self,
        *,
        algorand: _AlgoKitAlgorandClient,
        app_id: int,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> None: ...

    def __init__(
        self,
        app_client: algokit_utils.AppClient | None = None,
        *,
        algorand: _AlgoKitAlgorandClient | None = None,
        app_id: int | None = None,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> None:
        if app_client:
            self.app_client = app_client
        elif algorand and app_id:
            self.app_client = algokit_utils.AppClient(
                algokit_utils.AppClientParams(
                    algorand=algorand,
                    app_spec=APP_SPEC,
                    app_id=app_id,
                    app_name=app_name,
                    default_sender=default_sender,
                    default_signer=default_signer,
                    approval_source_map=approval_source_map,
                    clear_source_map=clear_source_map,
                )
            )
        else:
            raise ValueError("Either app_client or algorand and app_id must be provided")
    
        self.params = PieoutParams(self.app_client)
        self.create_transaction = PieoutCreateTransactionParams(self.app_client)
        self.send = PieoutSend(self.app_client)
        self.state = PieoutState(self.app_client)

    @staticmethod
    def from_creator_and_name(
        creator_address: str,
        app_name: str,
        algorand: _AlgoKitAlgorandClient,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
        ignore_cache: bool | None = None,
        app_lookup_cache: algokit_utils.ApplicationLookup | None = None,
    ) -> "PieoutClient":
        return PieoutClient(
            algokit_utils.AppClient.from_creator_and_name(
                creator_address=creator_address,
                app_name=app_name,
                app_spec=APP_SPEC,
                algorand=algorand,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
                ignore_cache=ignore_cache,
                app_lookup_cache=app_lookup_cache,
            )
        )
    
    @staticmethod
    def from_network(
        algorand: _AlgoKitAlgorandClient,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> "PieoutClient":
        return PieoutClient(
            algokit_utils.AppClient.from_network(
                app_spec=APP_SPEC,
                algorand=algorand,
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
            )
        )

    @property
    def app_id(self) -> int:
        return self.app_client.app_id
    
    @property
    def app_address(self) -> str:
        return self.app_client.app_address
    
    @property
    def app_name(self) -> str:
        return self.app_client.app_name
    
    @property
    def app_spec(self) -> algokit_utils.Arc56Contract:
        return self.app_client.app_spec
    
    @property
    def algorand(self) -> _AlgoKitAlgorandClient:
        return self.app_client.algorand

    def clone(
        self,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> "PieoutClient":
        return PieoutClient(
            self.app_client.clone(
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
            )
        )

    def new_group(self) -> "PieoutComposer":
        return PieoutComposer(self)

    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["calc_single_box_fee(uint8,uint16)uint64"],
        return_value: algokit_utils.ABIReturn | None
    ) -> int | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["get_gen_unix()uint64"],
        return_value: algokit_utils.ABIReturn | None
    ) -> int | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["create_player_addrs_box(pay)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["stake(pay,pay)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["gamba()uint64"],
        return_value: algokit_utils.ABIReturn | None
    ) -> int | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["generate()void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["terminate()void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: str,
        return_value: algokit_utils.ABIReturn | None
    ) -> algokit_utils.ABIValue | algokit_utils.ABIStruct | None: ...

    def decode_return_value(
        self,
        method: str,
        return_value: algokit_utils.ABIReturn | None
    ) -> algokit_utils.ABIValue | algokit_utils.ABIStruct | None | int:
        """Decode ABI return value for the given method."""
        if return_value is None:
            return None
    
        arc56_method = self.app_spec.get_arc56_method(method)
        decoded = return_value.get_arc56_value(arc56_method, self.app_spec.structs)
    
        # If method returns a struct, convert the dict to appropriate dataclass
        if (arc56_method and
            arc56_method.returns and
            arc56_method.returns.struct and
            isinstance(decoded, dict)):
            struct_class = globals().get(arc56_method.returns.struct)
            if struct_class:
                return struct_class(**typing.cast(dict, decoded))
        return decoded


@dataclasses.dataclass(frozen=True)
class PieoutMethodCallCreateParams(
    algokit_utils.AppClientCreateSchema, algokit_utils.BaseAppClientMethodCallParams[
        typing.Any,
        str | None,
    ]
):
    """Parameters for creating Pieout contract using ABI"""
    on_complete: typing.Literal[OnComplete.NoOpOC] | None = None
    method: str | None = None

    def to_algokit_utils_params(self) -> algokit_utils.AppClientMethodCallCreateParams:
        method_args = _parse_abi_args(self.args)
        return algokit_utils.AppClientMethodCallCreateParams(
            **{
                **self.__dict__,
                "method": self.method or getattr(self.args, "abi_method_signature", None),
                "args": method_args,
            }
        )

@dataclasses.dataclass(frozen=True)
class PieoutMethodCallDeleteParams(
    algokit_utils.BaseAppClientMethodCallParams[
        typing.Any,
        str | None,
    ]
):
    """Parameters for calling Pieout contract using ABI"""
    on_complete: typing.Literal[OnComplete.DeleteApplicationOC] | None = None
    method: str | None = None

    def to_algokit_utils_params(self) -> algokit_utils.AppClientMethodCallParams:
        method_args = _parse_abi_args(self.args)
        return algokit_utils.AppClientMethodCallParams(
            **{
                **self.__dict__,
                "method": self.method or getattr(self.args, "abi_method_signature", None),
                "args": method_args,
            }
        )

class PieoutFactory(algokit_utils.TypedAppFactoryProtocol[PieoutMethodCallCreateParams, None, PieoutMethodCallDeleteParams]):
    """Factory for deploying and managing PieoutClient smart contracts"""

    def __init__(
        self,
        algorand: _AlgoKitAlgorandClient,
        *,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        version: str | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None,
    ):
        self.app_factory = algokit_utils.AppFactory(
            params=algokit_utils.AppFactoryParams(
                algorand=algorand,
                app_spec=APP_SPEC,
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                version=version,
                compilation_params=compilation_params,
            )
        )
        self.params = PieoutFactoryParams(self.app_factory)
        self.create_transaction = PieoutFactoryCreateTransaction(self.app_factory)
        self.send = PieoutFactorySend(self.app_factory)

    @property
    def app_name(self) -> str:
        return self.app_factory.app_name
    
    @property
    def app_spec(self) -> algokit_utils.Arc56Contract:
        return self.app_factory.app_spec
    
    @property
    def algorand(self) -> _AlgoKitAlgorandClient:
        return self.app_factory.algorand

    def deploy(
        self,
        *,
        on_update: algokit_utils.OnUpdate | None = None,
        on_schema_break: algokit_utils.OnSchemaBreak | None = None,
        create_params: PieoutMethodCallCreateParams | None = None,
        update_params: None = None,
        delete_params: PieoutMethodCallDeleteParams | None = None,
        existing_deployments: algokit_utils.ApplicationLookup | None = None,
        ignore_cache: bool = False,
        app_name: str | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None,
        send_params: algokit_utils.SendParams | None = None,
    ) -> tuple[PieoutClient, algokit_utils.AppFactoryDeployResult]:
        """Deploy the application"""
        deploy_response = self.app_factory.deploy(
            on_update=on_update,
            on_schema_break=on_schema_break,
            create_params=create_params.to_algokit_utils_params() if create_params else None,
            update_params=update_params,
            delete_params=delete_params.to_algokit_utils_params() if delete_params else None,
            existing_deployments=existing_deployments,
            ignore_cache=ignore_cache,
            app_name=app_name,
            compilation_params=compilation_params,
            send_params=send_params,
        )

        return PieoutClient(deploy_response[0]), deploy_response[1]

    def get_app_client_by_creator_and_name(
        self,
        creator_address: str,
        app_name: str,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        ignore_cache: bool | None = None,
        app_lookup_cache: algokit_utils.ApplicationLookup | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> PieoutClient:
        """Get an app client by creator address and name"""
        return PieoutClient(
            self.app_factory.get_app_client_by_creator_and_name(
                creator_address,
                app_name,
                default_sender,
                default_signer,
                ignore_cache,
                app_lookup_cache,
                approval_source_map,
                clear_source_map,
            )
        )

    def get_app_client_by_id(
        self,
        app_id: int,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> PieoutClient:
        """Get an app client by app ID"""
        return PieoutClient(
            self.app_factory.get_app_client_by_id(
                app_id,
                app_name,
                default_sender,
                default_signer,
                approval_source_map,
                clear_source_map,
            )
        )


class PieoutFactoryParams:
    """Parameters for creating transactions for Pieout contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory
        self.create = PieoutFactoryCreateParams(app_factory)
        self.update = PieoutFactoryUpdateParams(app_factory)
        self.delete = PieoutFactoryDeleteParams(app_factory)

class PieoutFactoryCreateParams:
    """Parameters for 'create' operations of Pieout contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateParams:
        """Creates an instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.bare.create(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
            compilation_params=compilation_params)

    def calc_single_box_fee(
        self,
        args: tuple[int, int] | CalcSingleBoxFeeArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the calc_single_box_fee(uint8,uint16)uint64 ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "calc_single_box_fee(uint8,uint16)uint64",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def get_gen_unix(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the get_gen_unix()uint64 ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "get_gen_unix()uint64",
                "args": None,
                }
            ),
            compilation_params=compilation_params
        )

    def create_player_addrs_box(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument] | CreatePlayerAddrsBoxArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the create_player_addrs_box(pay)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "create_player_addrs_box(pay)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def stake(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument, algokit_utils.AppMethodCallTransactionArgument] | StakeArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the stake(pay,pay)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "stake(pay,pay)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def gamba(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the gamba()uint64 ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "gamba()uint64",
                "args": None,
                }
            ),
            compilation_params=compilation_params
        )

    def generate(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the generate()void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "generate()void",
                "args": None,
                }
            ),
            compilation_params=compilation_params
        )

    def terminate(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the terminate()void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "terminate()void",
                "args": None,
                }
            ),
            compilation_params=compilation_params
        )

class PieoutFactoryUpdateParams:
    """Parameters for 'update' operations of Pieout contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        
    ) -> algokit_utils.AppUpdateParams:
        """Updates an instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.bare.deploy_update(
            algokit_utils.AppClientBareCallParams(**dataclasses.asdict(params)),
            )

class PieoutFactoryDeleteParams:
    """Parameters for 'delete' operations of Pieout contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        
    ) -> algokit_utils.AppDeleteParams:
        """Deletes an instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.bare.deploy_delete(
            algokit_utils.AppClientBareCallParams(**dataclasses.asdict(params)),
            )


class PieoutFactoryCreateTransaction:
    """Create transactions for Pieout contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory
        self.create = PieoutFactoryCreateTransactionCreate(app_factory)


class PieoutFactoryCreateTransactionCreate:
    """Create new instances of Pieout contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
    ) -> Transaction:
        """Creates a new instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.create_transaction.bare.create(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
        )


class PieoutFactorySend:
    """Send calls to Pieout contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory
        self.create = PieoutFactorySendCreate(app_factory)


class PieoutFactorySendCreate:
    """Send create calls to Pieout contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        send_params: algokit_utils.SendParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None,
    ) -> tuple[PieoutClient, algokit_utils.SendAppCreateTransactionResult]:
        """Creates a new instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        result = self.app_factory.send.bare.create(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
            send_params=send_params,
            compilation_params=compilation_params
        )
        return PieoutClient(result[0]), result[1]

    def generate(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        send_params: algokit_utils.SendParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> tuple[PieoutClient, algokit_utils.AppFactoryCreateMethodCallResult[None]]:
            """Creates and sends a transaction using the generate()void ABI method"""
            params = params or algokit_utils.CommonAppCallCreateParams()
            client, result = self.app_factory.send.create(
                algokit_utils.AppFactoryCreateMethodCallParams(
                    **{
                    **dataclasses.asdict(params),
                    "method": "generate()void",
                    "args": None,
                    }
                ),
                send_params=send_params,
                compilation_params=compilation_params
            )
            return_value = None if result.abi_return is None else typing.cast(None, result.abi_return)
    
            return PieoutClient(client), algokit_utils.AppFactoryCreateMethodCallResult[None](
                **{
                    **result.__dict__,
                    "app_id": result.app_id,
                    "abi_return": return_value,
                    "transaction": result.transaction,
                    "confirmation": result.confirmation,
                    "group_id": result.group_id,
                    "tx_ids": result.tx_ids,
                    "transactions": result.transactions,
                    "confirmations": result.confirmations,
                    "app_address": result.app_address,
                }
            )


class _PieoutDeleteComposer:
    def __init__(self, composer: "PieoutComposer"):
        self.composer = composer
    def terminate(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "PieoutComposer":
        self.composer._composer.add_app_delete_method_call(
            self.composer.client.params.delete.terminate(
                
                params=params,
                
            )
        )
        self.composer._result_mappers.append(
            lambda v: self.composer.client.decode_return_value(
                "terminate()void", v
            )
        )
        return self.composer


class PieoutComposer:
    """Composer for creating transaction groups for Pieout contract calls"""

    def __init__(self, client: "PieoutClient"):
        self.client = client
        self._composer = client.algorand.new_group()
        self._result_mappers: list[typing.Callable[[algokit_utils.ABIReturn | None], object] | None] = []

    @property
    def delete(self) -> "_PieoutDeleteComposer":
        return _PieoutDeleteComposer(self)

    def calc_single_box_fee(
        self,
        args: tuple[int, int] | CalcSingleBoxFeeArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "PieoutComposer":
        self._composer.add_app_call_method_call(
            self.client.params.calc_single_box_fee(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "calc_single_box_fee(uint8,uint16)uint64", v
            )
        )
        return self

    def get_gen_unix(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "PieoutComposer":
        self._composer.add_app_call_method_call(
            self.client.params.get_gen_unix(
                
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "get_gen_unix()uint64", v
            )
        )
        return self

    def create_player_addrs_box(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument] | CreatePlayerAddrsBoxArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "PieoutComposer":
        self._composer.add_app_call_method_call(
            self.client.params.create_player_addrs_box(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "create_player_addrs_box(pay)void", v
            )
        )
        return self

    def stake(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument, algokit_utils.AppMethodCallTransactionArgument] | StakeArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "PieoutComposer":
        self._composer.add_app_call_method_call(
            self.client.params.stake(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "stake(pay,pay)void", v
            )
        )
        return self

    def gamba(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "PieoutComposer":
        self._composer.add_app_call_method_call(
            self.client.params.gamba(
                
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "gamba()uint64", v
            )
        )
        return self

    def generate(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "PieoutComposer":
        self._composer.add_app_call_method_call(
            self.client.params.generate(
                
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "generate()void", v
            )
        )
        return self

    def clear_state(
        self,
        *,
        args: list[bytes] | None = None,
        params: algokit_utils.CommonAppCallParams | None = None,
    ) -> "PieoutComposer":
        params=params or algokit_utils.CommonAppCallParams()
        self._composer.add_app_call(
            self.client.params.clear_state(
                algokit_utils.AppClientBareCallParams(
                    **{
                        **dataclasses.asdict(params),
                        "args": args
                    }
                )
            )
        )
        return self
    
    def add_transaction(
        self, txn: Transaction, signer: TransactionSigner | None = None
    ) -> "PieoutComposer":
        self._composer.add_transaction(txn, signer)
        return self
    
    def composer(self) -> algokit_utils.TransactionComposer:
        return self._composer
    
    def simulate(
        self,
        allow_more_logs: bool | None = None,
        allow_empty_signatures: bool | None = None,
        allow_unnamed_resources: bool | None = None,
        extra_opcode_budget: int | None = None,
        exec_trace_config: SimulateTraceConfig | None = None,
        simulation_round: int | None = None,
        skip_signatures: bool | None = None,
    ) -> algokit_utils.SendAtomicTransactionComposerResults:
        return self._composer.simulate(
            allow_more_logs=allow_more_logs,
            allow_empty_signatures=allow_empty_signatures,
            allow_unnamed_resources=allow_unnamed_resources,
            extra_opcode_budget=extra_opcode_budget,
            exec_trace_config=exec_trace_config,
            simulation_round=simulation_round,
            skip_signatures=skip_signatures,
        )
    
    def send(
        self,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAtomicTransactionComposerResults:
        return self._composer.send(send_params)
