# flake8: noqa
# fmt: off
# mypy: ignore-errors
# This file was automatically generated by algokit-client-generator.
# DO NOT MODIFY IT BY HAND.
# requires: algokit-utils@^3.0.0

# common
import dataclasses
import typing
# core algosdk
import algosdk
from algosdk.transaction import OnComplete
from algosdk.atomic_transaction_composer import TransactionSigner
from algosdk.source_map import SourceMap
from algosdk.transaction import Transaction
from algosdk.v2client.models import SimulateTraceConfig
# utils
import algokit_utils
from algokit_utils import AlgorandClient as _AlgoKitAlgorandClient

_APP_SPEC_JSON = r"""{"arcs": [22, 28], "bareActions": {"call": [], "create": []}, "methods": [{"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint8", "name": "key_size"}, {"type": "uint16", "name": "value_size"}], "name": "calc_single_box_fee", "returns": {"type": "uint64"}, "events": [], "readonly": true, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [], "name": "read_gen_unix", "returns": {"type": "uint64"}, "events": [], "readonly": true, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "name": "game_id"}], "name": "read_game_state", "returns": {"type": "(uint64,bool,uint8,uint8,uint8,uint8,uint8,uint16,uint64,uint64,address,address,address,address)"}, "events": [], "readonly": true, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "name": "game_id"}], "name": "read_game_players", "returns": {"type": "address[]"}, "events": [], "readonly": true, "recommendations": {}}, {"actions": {"call": [], "create": ["NoOp"]}, "args": [], "name": "generate", "returns": {"type": "void"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "pay", "name": "box_t_pay"}, {"type": "pay", "name": "mint_pay"}], "name": "mint_trophy", "returns": {"type": "address"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [], "name": "get_trophy", "returns": {"type": "void"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "name": "max_players"}, {"type": "pay", "name": "box_s_pay"}, {"type": "pay", "name": "box_p_pay"}, {"type": "pay", "name": "stake_pay"}], "name": "new_game", "returns": {"type": "void"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "name": "game_id"}, {"type": "pay", "name": "stake_pay"}], "name": "join_game", "returns": {"type": "void"}, "events": [{"args": [{"type": "bool", "name": "field1"}, {"type": "uint64", "name": "field2"}], "name": "game_live"}], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "name": "game_id"}], "name": "commit_rand", "returns": {"type": "void"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "pay", "name": "box_c_pay"}], "name": "get_box_commit_rand", "returns": {"type": "void"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [], "name": "del_box_commit_rand", "returns": {"type": "void"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "name": "game_id"}], "name": "play_game", "returns": {"type": "void"}, "events": [{"args": [{"type": "uint64", "name": "field1"}, {"type": "uint64", "name": "field2"}, {"type": "address", "name": "field3"}, {"type": "uint8", "name": "field4"}], "name": "player_score"}, {"args": [{"type": "uint8", "name": "field1"}, {"type": "address", "name": "field2"}, {"type": "address", "name": "field3"}, {"type": "address", "name": "field4"}], "name": "game_over"}], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "name": "game_id"}, {"type": "uint8", "name": "game_event_id"}], "name": "check_game_event", "returns": {"type": "bool"}, "events": [{"args": [{"type": "bool", "name": "field1"}, {"type": "uint64", "name": "field2"}], "name": "game_live"}, {"args": [{"type": "uint8", "name": "field1"}, {"type": "address", "name": "field2"}, {"type": "address", "name": "field3"}, {"type": "address", "name": "field4"}], "name": "game_over"}], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "name": "game_id"}, {"type": "pay", "name": "stake_pay"}], "name": "reset_game", "returns": {"type": "void"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "name": "game_id"}], "name": "delete_game", "returns": {"type": "void"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["DeleteApplication"], "create": []}, "args": [], "name": "terminate", "returns": {"type": "void"}, "events": [], "readonly": false, "recommendations": {}}], "name": "Pieout", "state": {"keys": {"box": {"box_game_trophy": {"key": "dF8=", "keyType": "AVMBytes", "valueType": "GameTrophy"}}, "global": {"game_id": {"key": "Z2FtZV9pZA==", "keyType": "AVMString", "valueType": "AVMUint64"}, "commit_rand_salt_id": {"key": "Y29tbWl0X3JhbmRfc2FsdF9pZA==", "keyType": "AVMString", "valueType": "AVMUint64"}, "ath_score": {"key": "YXRoX3Njb3Jl", "keyType": "AVMString", "valueType": "AVMUint64"}, "ath_address": {"key": "YXRoX2FkZHJlc3M=", "keyType": "AVMString", "valueType": "address"}}, "local": {}}, "maps": {"box": {"box_game_state": {"keyType": "uint64", "valueType": "GameState", "prefix": "c18="}, "box_game_players": {"keyType": "uint64", "valueType": "AVMBytes", "prefix": "cF8="}, "box_commit_rand": {"keyType": "address", "valueType": "CommitRand", "prefix": "Y18="}}, "global": {}, "local": {}}, "schema": {"global": {"bytes": 1, "ints": 3}, "local": {"bytes": 0, "ints": 0}}}, "structs": {"CommitRand": [{"name": "commit_round", "type": "uint64"}], "GameState": [{"name": "staking_finalized", "type": "bool"}, {"name": "max_players", "type": "uint8"}, {"name": "active_players", "type": "uint8"}, {"name": "first_place_score", "type": "uint8"}, {"name": "second_place_score", "type": "uint8"}, {"name": "third_place_score", "type": "uint8"}, {"name": "box_p_start_pos", "type": "uint16"}, {"name": "expiry_ts", "type": "uint64"}, {"name": "prize_pool", "type": "uint64"}, {"name": "manager_address", "type": "address"}, {"name": "first_place_address", "type": "address"}, {"name": "second_place_address", "type": "address"}, {"name": "third_place_address", "type": "address"}], "GameTrophy": [{"name": "asset_id", "type": "uint64"}, {"name": "owner_address", "type": "address"}]}, "byteCode": {"approval": "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", "clear": "CoEBQw=="}, "compilerInfo": {"compiler": "puya", "compilerVersion": {"major": 4, "minor": 8, "patch": 1}}, "events": [{"args": [{"type": "bool", "name": "field1"}, {"type": "uint64", "name": "field2"}], "name": "game_live"}, {"args": [{"type": "uint64", "name": "field1"}, {"type": "uint64", "name": "field2"}, {"type": "address", "name": "field3"}, {"type": "uint8", "name": "field4"}], "name": "player_score"}, {"args": [{"type": "uint8", "name": "field1"}, {"type": "address", "name": "field2"}, {"type": "address", "name": "field3"}, {"type": "address", "name": "field4"}], "name": "game_over"}], "networks": {}, "source": {"approval": "", "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"}, "sourceInfo": {"approval": {"pcOffsetMethod": "cblocks", "sourceInfo": [{"pc": [1941, 2018, 2065, 2232], "errorMessage": "Box commit rand not found for sender address. Ensure commit rand was called."}, {"pc": [1762, 1932, 2223, 2839, 2981, 3122], "errorMessage": "Box game state not found. Check if Game ID is valid."}, {"pc": [1386, 1627, 1635, 2042], "errorMessage": "Box payment receiver address must match application address."}, {"pc": [1378, 1603, 1611, 2034], "errorMessage": "Box payment sender address must match transaction sender address."}, {"pc": [2877], "errorMessage": "Game event not found. Check if Game Event ID is valid"}, {"pc": [3040, 3363], "errorMessage": "Game lobby not empty. Number of active players must be zero."}, {"pc": [1822, 1956, 2270, 2892, 3021], "errorMessage": "Game state staking finalized value mismatch."}, {"pc": [605, 617, 622, 659, 687, 731, 736, 741, 746, 1148, 1153, 1158, 1163, 1168, 1173, 1178, 1183, 1188, 1193, 1198, 1203, 1487, 1824, 1833, 1838, 2271, 2579, 2585, 2591, 2597, 2707, 2723, 2739, 2779, 2794, 2894, 2902, 2913, 2924, 2935, 3023, 3130], "errorMessage": "Index access is out of bounds"}, {"pc": [1370, 1557, 1587, 2026], "errorMessage": "Insufficient funds. Box pay amount is not enough to cover application MBR."}, {"pc": [1394], "errorMessage": "Insufficient funds. Mint pay amount is not enough to cover application MBR."}, {"pc": [1549, 1773, 3005], "errorMessage": "Insufficient funds. Stake pay amount is not enough to cover application MBR."}, {"pc": [2008, 2969], "errorMessage": "Invalid group size. Ensure number of transaction in group is within bounds."}, {"pc": [1495, 2056, 2206, 2828, 3109], "errorMessage": "Invalid group size. This app call only appproves standalone transactions."}, {"pc": [3155], "errorMessage": "Manager account must be sole active player in game."}, {"pc": [1410], "errorMessage": "Mint payment receiver address must match application address."}, {"pc": [1402], "errorMessage": "Mint payment sender address must match transaction sender address."}, {"pc": [1842], "errorMessage": "Number of active players must not exceed number of max players."}, {"pc": [138], "errorMessage": "OnCompletion is not DeleteApplication"}, {"pc": [150, 166, 192, 216, 232, 244, 266, 282, 308, 355, 367, 404, 417, 438, 459, 476], "errorMessage": "OnCompletion is not NoOp"}, {"pc": [1831, 2278, 2901], "errorMessage": "Phase deadline expired. Latest block timestamp must not exceed expiry timestamp."}, {"pc": [1540], "errorMessage": "Player cap overflow. Max players limit must not be exceeded."}, {"pc": [1856], "errorMessage": "Players box start position index overflow. Can not store more addresses."}, {"pc": [3035, 3370], "errorMessage": "Prize pool not empty. Amount in prize pool must be zero."}, {"pc": [1507], "errorMessage": "Sender needs to be opt-in to receieve trophy"}, {"pc": [1619, 1789, 2997], "errorMessage": "Stake payment receiver address must match application address."}, {"pc": [1595, 1781, 2989], "errorMessage": "Stake payment sender address must match transaction sender address."}, {"pc": [3382], "errorMessage": "Template variable 'DELETABLE' needs to be 'True' at deploy-time."}, {"pc": [1341, 3379], "errorMessage": "Transaction sender address must match application creator address."}, {"pc": [1810], "errorMessage": "Transaction sender is already recognized as a valid player for this game."}, {"pc": [2945], "errorMessage": "Transaction sender is not an authorized caller."}, {"pc": [1972, 2249, 2865], "errorMessage": "Transaction sender is not recognized as a valid player for this game."}, {"pc": [3029, 3136], "errorMessage": "Transaction sender is not recognized as valid manager address for this game."}, {"pc": [408], "errorMessage": "can only call when creating"}, {"pc": [141, 153, 169, 195, 219, 235, 247, 269, 285, 311, 358, 370, 420, 441, 462, 479], "errorMessage": "can only call when not creating"}, {"pc": [556], "errorMessage": "check BoxMap entry exists"}, {"pc": [2651, 2661], "errorMessage": "check self.ath_address exists"}, {"pc": [2635], "errorMessage": "check self.ath_score exists"}, {"pc": [1263], "errorMessage": "check self.box_game_players entry exists"}, {"pc": [1137, 1793, 1797, 1944, 1958, 2235, 2257, 2841, 3008, 3128], "errorMessage": "check self.box_game_state entry exists"}, {"pc": [1486, 1500, 1511, 2664], "errorMessage": "check self.box_game_trophy exists"}, {"pc": [2286, 2616], "errorMessage": "check self.commit_rand_salt_id exists"}, {"pc": [1701, 1713, 1727, 1740], "errorMessage": "check self.game_id exists"}, {"pc": [1573, 1644, 1878, 1896, 2541, 2684, 3259], "errorMessage": "overflow"}, {"pc": [183, 257, 299, 326, 336, 346, 380, 390], "errorMessage": "transaction type is pay"}]}, "clear": {"pcOffsetMethod": "none", "sourceInfo": []}}, "templateVariables": {"GEN_UNIX": {"type": "AVMUint64"}, "DELETABLE": {"type": "AVMUint64"}}}"""
APP_SPEC = algokit_utils.Arc56Contract.from_json(_APP_SPEC_JSON)

def _parse_abi_args(args: object | None = None) -> list[object] | None:
    """Helper to parse ABI args into the format expected by underlying client"""
    if args is None:
        return None

    def convert_dataclass(value: object) -> object:
        if dataclasses.is_dataclass(value):
            return tuple(convert_dataclass(getattr(value, field.name)) for field in dataclasses.fields(value))
        elif isinstance(value, (list, tuple)):
            return type(value)(convert_dataclass(item) for item in value)
        return value

    match args:
        case tuple():
            method_args = list(args)
        case _ if dataclasses.is_dataclass(args):
            method_args = [getattr(args, field.name) for field in dataclasses.fields(args)]
        case _:
            raise ValueError("Invalid 'args' type. Expected 'tuple' or 'TypedDict' for respective typed arguments.")

    return [
        convert_dataclass(arg) if not isinstance(arg, algokit_utils.AppMethodCallTransactionArgument) else arg
        for arg in method_args
    ] if method_args else None

def _init_dataclass(cls: type, data: dict) -> object:
    """
    Recursively instantiate a dataclass of type `cls` from `data`.

    For each field on the dataclass, if the field type is also a dataclass
    and the corresponding data is a dict, instantiate that field recursively.
    """
    field_values = {}
    for field in dataclasses.fields(cls):
        field_value = data.get(field.name)
        # Check if the field expects another dataclass and the value is a dict.
        if dataclasses.is_dataclass(field.type) and isinstance(field_value, dict):
            field_values[field.name] = _init_dataclass(typing.cast(type, field.type), field_value)
        else:
            field_values[field.name] = field_value
    return cls(**field_values)

@dataclasses.dataclass(frozen=True)
class CommitRand:
    """Struct for CommitRand"""
    commit_round: int

@dataclasses.dataclass(frozen=True)
class GameState:
    """Struct for GameState"""
    staking_finalized: bool
    max_players: int
    active_players: int
    first_place_score: int
    second_place_score: int
    third_place_score: int
    box_p_start_pos: int
    expiry_ts: int
    prize_pool: int
    manager_address: str
    first_place_address: str
    second_place_address: str
    third_place_address: str

@dataclasses.dataclass(frozen=True)
class GameTrophy:
    """Struct for GameTrophy"""
    asset_id: int
    owner_address: str


@dataclasses.dataclass(frozen=True, kw_only=True)
class CalcSingleBoxFeeArgs:
    """Dataclass for calc_single_box_fee arguments"""
    key_size: int
    value_size: int

    @property
    def abi_method_signature(self) -> str:
        return "calc_single_box_fee(uint8,uint16)uint64"

@dataclasses.dataclass(frozen=True, kw_only=True)
class ReadGameStateArgs:
    """Dataclass for read_game_state arguments"""
    game_id: int

    @property
    def abi_method_signature(self) -> str:
        return "read_game_state(uint64)(uint64,bool,uint8,uint8,uint8,uint8,uint8,uint16,uint64,uint64,address,address,address,address)"

@dataclasses.dataclass(frozen=True, kw_only=True)
class ReadGamePlayersArgs:
    """Dataclass for read_game_players arguments"""
    game_id: int

    @property
    def abi_method_signature(self) -> str:
        return "read_game_players(uint64)address[]"

@dataclasses.dataclass(frozen=True, kw_only=True)
class MintTrophyArgs:
    """Dataclass for mint_trophy arguments"""
    box_t_pay: algokit_utils.AppMethodCallTransactionArgument
    mint_pay: algokit_utils.AppMethodCallTransactionArgument

    @property
    def abi_method_signature(self) -> str:
        return "mint_trophy(pay,pay)address"

@dataclasses.dataclass(frozen=True, kw_only=True)
class NewGameArgs:
    """Dataclass for new_game arguments"""
    max_players: int
    box_s_pay: algokit_utils.AppMethodCallTransactionArgument
    box_p_pay: algokit_utils.AppMethodCallTransactionArgument
    stake_pay: algokit_utils.AppMethodCallTransactionArgument

    @property
    def abi_method_signature(self) -> str:
        return "new_game(uint64,pay,pay,pay)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class JoinGameArgs:
    """Dataclass for join_game arguments"""
    game_id: int
    stake_pay: algokit_utils.AppMethodCallTransactionArgument

    @property
    def abi_method_signature(self) -> str:
        return "join_game(uint64,pay)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class CommitRandArgs:
    """Dataclass for commit_rand arguments"""
    game_id: int

    @property
    def abi_method_signature(self) -> str:
        return "commit_rand(uint64)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class GetBoxCommitRandArgs:
    """Dataclass for get_box_commit_rand arguments"""
    box_c_pay: algokit_utils.AppMethodCallTransactionArgument

    @property
    def abi_method_signature(self) -> str:
        return "get_box_commit_rand(pay)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class PlayGameArgs:
    """Dataclass for play_game arguments"""
    game_id: int

    @property
    def abi_method_signature(self) -> str:
        return "play_game(uint64)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class CheckGameEventArgs:
    """Dataclass for check_game_event arguments"""
    game_id: int
    game_event_id: int

    @property
    def abi_method_signature(self) -> str:
        return "check_game_event(uint64,uint8)bool"

@dataclasses.dataclass(frozen=True, kw_only=True)
class ResetGameArgs:
    """Dataclass for reset_game arguments"""
    game_id: int
    stake_pay: algokit_utils.AppMethodCallTransactionArgument

    @property
    def abi_method_signature(self) -> str:
        return "reset_game(uint64,pay)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class DeleteGameArgs:
    """Dataclass for delete_game arguments"""
    game_id: int

    @property
    def abi_method_signature(self) -> str:
        return "delete_game(uint64)void"


class _PieoutDelete:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def terminate(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppDeleteMethodCallParams:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.delete(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "terminate()void",
        }))


class PieoutParams:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    @property
    def delete(self) -> "_PieoutDelete":
        return _PieoutDelete(self.app_client)

    def calc_single_box_fee(
        self,
        args: tuple[int, int] | CalcSingleBoxFeeArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "calc_single_box_fee(uint8,uint16)uint64",
            "args": method_args,
        }))

    def read_gen_unix(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "read_gen_unix()uint64",
        }))

    def read_game_state(
        self,
        args: tuple[int] | ReadGameStateArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "read_game_state(uint64)(uint64,bool,uint8,uint8,uint8,uint8,uint8,uint16,uint64,uint64,address,address,address,address)",
            "args": method_args,
        }))

    def read_game_players(
        self,
        args: tuple[int] | ReadGamePlayersArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "read_game_players(uint64)address[]",
            "args": method_args,
        }))

    def mint_trophy(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument, algokit_utils.AppMethodCallTransactionArgument] | MintTrophyArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "mint_trophy(pay,pay)address",
            "args": method_args,
        }))

    def get_trophy(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_trophy()void",
        }))

    def new_game(
        self,
        args: tuple[int, algokit_utils.AppMethodCallTransactionArgument, algokit_utils.AppMethodCallTransactionArgument, algokit_utils.AppMethodCallTransactionArgument] | NewGameArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "new_game(uint64,pay,pay,pay)void",
            "args": method_args,
        }))

    def join_game(
        self,
        args: tuple[int, algokit_utils.AppMethodCallTransactionArgument] | JoinGameArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "join_game(uint64,pay)void",
            "args": method_args,
        }))

    def commit_rand(
        self,
        args: tuple[int] | CommitRandArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "commit_rand(uint64)void",
            "args": method_args,
        }))

    def get_box_commit_rand(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument] | GetBoxCommitRandArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_box_commit_rand(pay)void",
            "args": method_args,
        }))

    def del_box_commit_rand(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "del_box_commit_rand()void",
        }))

    def play_game(
        self,
        args: tuple[int] | PlayGameArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "play_game(uint64)void",
            "args": method_args,
        }))

    def check_game_event(
        self,
        args: tuple[int, int] | CheckGameEventArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "check_game_event(uint64,uint8)bool",
            "args": method_args,
        }))

    def reset_game(
        self,
        args: tuple[int, algokit_utils.AppMethodCallTransactionArgument] | ResetGameArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "reset_game(uint64,pay)void",
            "args": method_args,
        }))

    def delete_game(
        self,
        args: tuple[int] | DeleteGameArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "delete_game(uint64)void",
            "args": method_args,
        }))

    def generate(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "generate()void",
        }))

    def clear_state(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        
    ) -> algokit_utils.AppCallParams:
        return self.app_client.params.bare.clear_state(
            params,
            
        )


class _PieoutDeleteTransaction:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def terminate(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.delete(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "terminate()void",
        }))


class PieoutCreateTransactionParams:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    @property
    def delete(self) -> "_PieoutDeleteTransaction":
        return _PieoutDeleteTransaction(self.app_client)

    def calc_single_box_fee(
        self,
        args: tuple[int, int] | CalcSingleBoxFeeArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "calc_single_box_fee(uint8,uint16)uint64",
            "args": method_args,
        }))

    def read_gen_unix(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "read_gen_unix()uint64",
        }))

    def read_game_state(
        self,
        args: tuple[int] | ReadGameStateArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "read_game_state(uint64)(uint64,bool,uint8,uint8,uint8,uint8,uint8,uint16,uint64,uint64,address,address,address,address)",
            "args": method_args,
        }))

    def read_game_players(
        self,
        args: tuple[int] | ReadGamePlayersArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "read_game_players(uint64)address[]",
            "args": method_args,
        }))

    def mint_trophy(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument, algokit_utils.AppMethodCallTransactionArgument] | MintTrophyArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "mint_trophy(pay,pay)address",
            "args": method_args,
        }))

    def get_trophy(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_trophy()void",
        }))

    def new_game(
        self,
        args: tuple[int, algokit_utils.AppMethodCallTransactionArgument, algokit_utils.AppMethodCallTransactionArgument, algokit_utils.AppMethodCallTransactionArgument] | NewGameArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "new_game(uint64,pay,pay,pay)void",
            "args": method_args,
        }))

    def join_game(
        self,
        args: tuple[int, algokit_utils.AppMethodCallTransactionArgument] | JoinGameArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "join_game(uint64,pay)void",
            "args": method_args,
        }))

    def commit_rand(
        self,
        args: tuple[int] | CommitRandArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "commit_rand(uint64)void",
            "args": method_args,
        }))

    def get_box_commit_rand(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument] | GetBoxCommitRandArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_box_commit_rand(pay)void",
            "args": method_args,
        }))

    def del_box_commit_rand(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "del_box_commit_rand()void",
        }))

    def play_game(
        self,
        args: tuple[int] | PlayGameArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "play_game(uint64)void",
            "args": method_args,
        }))

    def check_game_event(
        self,
        args: tuple[int, int] | CheckGameEventArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "check_game_event(uint64,uint8)bool",
            "args": method_args,
        }))

    def reset_game(
        self,
        args: tuple[int, algokit_utils.AppMethodCallTransactionArgument] | ResetGameArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "reset_game(uint64,pay)void",
            "args": method_args,
        }))

    def delete_game(
        self,
        args: tuple[int] | DeleteGameArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "delete_game(uint64)void",
            "args": method_args,
        }))

    def generate(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "generate()void",
        }))

    def clear_state(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        
    ) -> Transaction:
        return self.app_client.create_transaction.bare.clear_state(
            params,
            
        )


class _PieoutDeleteSend:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def terminate(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
    
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.delete(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "terminate()void",
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)


class PieoutSend:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    @property
    def delete(self) -> "_PieoutDeleteSend":
        return _PieoutDeleteSend(self.app_client)

    def calc_single_box_fee(
        self,
        args: tuple[int, int] | CalcSingleBoxFeeArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[int]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "calc_single_box_fee(uint8,uint16)uint64",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[int], parsed_response)

    def read_gen_unix(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[int]:
    
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "read_gen_unix()uint64",
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[int], parsed_response)

    def read_game_state(
        self,
        args: tuple[int] | ReadGameStateArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[tuple[int, bool, int, int, int, int, int, int, int, int, str, str, str, str]]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "read_game_state(uint64)(uint64,bool,uint8,uint8,uint8,uint8,uint8,uint16,uint64,uint64,address,address,address,address)",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[tuple[int, bool, int, int, int, int, int, int, int, int, str, str, str, str]], parsed_response)

    def read_game_players(
        self,
        args: tuple[int] | ReadGamePlayersArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[list[str]]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "read_game_players(uint64)address[]",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[list[str]], parsed_response)

    def mint_trophy(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument, algokit_utils.AppMethodCallTransactionArgument] | MintTrophyArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[str]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "mint_trophy(pay,pay)address",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[str], parsed_response)

    def get_trophy(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
    
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_trophy()void",
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def new_game(
        self,
        args: tuple[int, algokit_utils.AppMethodCallTransactionArgument, algokit_utils.AppMethodCallTransactionArgument, algokit_utils.AppMethodCallTransactionArgument] | NewGameArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "new_game(uint64,pay,pay,pay)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def join_game(
        self,
        args: tuple[int, algokit_utils.AppMethodCallTransactionArgument] | JoinGameArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "join_game(uint64,pay)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def commit_rand(
        self,
        args: tuple[int] | CommitRandArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "commit_rand(uint64)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def get_box_commit_rand(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument] | GetBoxCommitRandArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_box_commit_rand(pay)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def del_box_commit_rand(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
    
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "del_box_commit_rand()void",
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def play_game(
        self,
        args: tuple[int] | PlayGameArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "play_game(uint64)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def check_game_event(
        self,
        args: tuple[int, int] | CheckGameEventArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[bool]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "check_game_event(uint64,uint8)bool",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[bool], parsed_response)

    def reset_game(
        self,
        args: tuple[int, algokit_utils.AppMethodCallTransactionArgument] | ResetGameArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "reset_game(uint64,pay)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def delete_game(
        self,
        args: tuple[int] | DeleteGameArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "delete_game(uint64)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def generate(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
    
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "generate()void",
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def clear_state(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[algokit_utils.ABIReturn]:
        return self.app_client.send.bare.clear_state(
            params,
            send_params=send_params,
        )


class GlobalStateValue(typing.TypedDict):
    """Shape of global_state state key values"""
    game_id: int
    commit_rand_salt_id: int
    ath_score: int
    ath_address: str

class BoxStateValue(typing.TypedDict):
    """Shape of box state key values"""
    box_game_trophy: GameTrophy

class PieoutState:
    """Methods to access state for the current Pieout app"""

    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    @property
    def global_state(
        self
    ) -> "_GlobalState":
            """Methods to access global_state for the current app"""
            return _GlobalState(self.app_client)

    @property
    def box(
        self
    ) -> "_BoxState":
            """Methods to access box for the current app"""
            return _BoxState(self.app_client)

class _GlobalState:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client
        
        # Pre-generated mapping of value types to their struct classes
        self._struct_classes: dict[str, typing.Type[typing.Any]] = {}

    def get_all(self) -> GlobalStateValue:
        """Get all current keyed values from global_state state"""
        result = self.app_client.state.global_state.get_all()
        if not result:
            return typing.cast(GlobalStateValue, {})

        converted = {}
        for key, value in result.items():
            key_info = self.app_client.app_spec.state.keys.global_state.get(key)
            struct_class = self._struct_classes.get(key_info.value_type) if key_info else None
            converted[key] = (
                _init_dataclass(struct_class, value) if struct_class and isinstance(value, dict)
                else value
            )
        return typing.cast(GlobalStateValue, converted)

    @property
    def game_id(self) -> int:
        """Get the current value of the game_id key in global_state state"""
        value = self.app_client.state.global_state.get_value("game_id")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def commit_rand_salt_id(self) -> int:
        """Get the current value of the commit_rand_salt_id key in global_state state"""
        value = self.app_client.state.global_state.get_value("commit_rand_salt_id")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def ath_score(self) -> int:
        """Get the current value of the ath_score key in global_state state"""
        value = self.app_client.state.global_state.get_value("ath_score")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def ath_address(self) -> str:
        """Get the current value of the ath_address key in global_state state"""
        value = self.app_client.state.global_state.get_value("ath_address")
        if isinstance(value, dict) and "address" in self._struct_classes:
            return _init_dataclass(self._struct_classes["address"], value)  # type: ignore
        return typing.cast(str, value)

class _BoxState:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client
        
        # Pre-generated mapping of value types to their struct classes
        self._struct_classes: dict[str, typing.Type[typing.Any]] = {
            "GameTrophy": GameTrophy,
            "GameState": GameState,
            "CommitRand": CommitRand
        }

    def get_all(self) -> BoxStateValue:
        """Get all current keyed values from box state"""
        result = self.app_client.state.box.get_all()
        if not result:
            return typing.cast(BoxStateValue, {})

        converted = {}
        for key, value in result.items():
            key_info = self.app_client.app_spec.state.keys.box.get(key)
            struct_class = self._struct_classes.get(key_info.value_type) if key_info else None
            converted[key] = (
                _init_dataclass(struct_class, value) if struct_class and isinstance(value, dict)
                else value
            )
        return typing.cast(BoxStateValue, converted)

    @property
    def box_game_trophy(self) -> GameTrophy:
        """Get the current value of the box_game_trophy key in box state"""
        value = self.app_client.state.box.get_value("box_game_trophy")
        if isinstance(value, dict) and "GameTrophy" in self._struct_classes:
            return _init_dataclass(self._struct_classes["GameTrophy"], value)  # type: ignore
        return typing.cast(GameTrophy, value)

    @property
    def box_game_state(self) -> "_MapState[int, GameState]":
        """Get values from the box_game_state map in box state"""
        return _MapState(
            self.app_client.state.box,
            "box_game_state",
            self._struct_classes.get("GameState")
        )

    @property
    def box_game_players(self) -> "_MapState[int, bytes]":
        """Get values from the box_game_players map in box state"""
        return _MapState(
            self.app_client.state.box,
            "box_game_players",
            None
        )

    @property
    def box_commit_rand(self) -> "_MapState[str, CommitRand]":
        """Get values from the box_commit_rand map in box state"""
        return _MapState(
            self.app_client.state.box,
            "box_commit_rand",
            self._struct_classes.get("CommitRand")
        )

_KeyType = typing.TypeVar("_KeyType")
_ValueType = typing.TypeVar("_ValueType")

class _AppClientStateMethodsProtocol(typing.Protocol):
    def get_map(self, map_name: str) -> dict[typing.Any, typing.Any]:
        ...
    def get_map_value(self, map_name: str, key: typing.Any) -> typing.Any | None:
        ...

class _MapState(typing.Generic[_KeyType, _ValueType]):
    """Generic class for accessing state maps with strongly typed keys and values"""

    def __init__(self, state_accessor: _AppClientStateMethodsProtocol, map_name: str,
                struct_class: typing.Type[_ValueType] | None = None):
        self._state_accessor = state_accessor
        self._map_name = map_name
        self._struct_class = struct_class

    def get_map(self) -> dict[_KeyType, _ValueType]:
        """Get all current values in the map"""
        result = self._state_accessor.get_map(self._map_name)
        if self._struct_class and result:
            return {k: _init_dataclass(self._struct_class, v) if isinstance(v, dict) else v
                    for k, v in result.items()}  # type: ignore
        return typing.cast(dict[_KeyType, _ValueType], result or {})

    def get_value(self, key: _KeyType) -> _ValueType | None:
        """Get a value from the map by key"""
        key_value = dataclasses.asdict(key) if dataclasses.is_dataclass(key) else key  # type: ignore
        value = self._state_accessor.get_map_value(self._map_name, key_value)
        if value is not None and self._struct_class and isinstance(value, dict):
            return _init_dataclass(self._struct_class, value)  # type: ignore
        return typing.cast(_ValueType | None, value)


class PieoutClient:
    """Client for interacting with Pieout smart contract"""

    @typing.overload
    def __init__(self, app_client: algokit_utils.AppClient) -> None: ...
    
    @typing.overload
    def __init__(
        self,
        *,
        algorand: _AlgoKitAlgorandClient,
        app_id: int,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> None: ...

    def __init__(
        self,
        app_client: algokit_utils.AppClient | None = None,
        *,
        algorand: _AlgoKitAlgorandClient | None = None,
        app_id: int | None = None,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> None:
        if app_client:
            self.app_client = app_client
        elif algorand and app_id:
            self.app_client = algokit_utils.AppClient(
                algokit_utils.AppClientParams(
                    algorand=algorand,
                    app_spec=APP_SPEC,
                    app_id=app_id,
                    app_name=app_name,
                    default_sender=default_sender,
                    default_signer=default_signer,
                    approval_source_map=approval_source_map,
                    clear_source_map=clear_source_map,
                )
            )
        else:
            raise ValueError("Either app_client or algorand and app_id must be provided")
    
        self.params = PieoutParams(self.app_client)
        self.create_transaction = PieoutCreateTransactionParams(self.app_client)
        self.send = PieoutSend(self.app_client)
        self.state = PieoutState(self.app_client)

    @staticmethod
    def from_creator_and_name(
        creator_address: str,
        app_name: str,
        algorand: _AlgoKitAlgorandClient,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
        ignore_cache: bool | None = None,
        app_lookup_cache: algokit_utils.ApplicationLookup | None = None,
    ) -> "PieoutClient":
        return PieoutClient(
            algokit_utils.AppClient.from_creator_and_name(
                creator_address=creator_address,
                app_name=app_name,
                app_spec=APP_SPEC,
                algorand=algorand,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
                ignore_cache=ignore_cache,
                app_lookup_cache=app_lookup_cache,
            )
        )
    
    @staticmethod
    def from_network(
        algorand: _AlgoKitAlgorandClient,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> "PieoutClient":
        return PieoutClient(
            algokit_utils.AppClient.from_network(
                app_spec=APP_SPEC,
                algorand=algorand,
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
            )
        )

    @property
    def app_id(self) -> int:
        return self.app_client.app_id
    
    @property
    def app_address(self) -> str:
        return self.app_client.app_address
    
    @property
    def app_name(self) -> str:
        return self.app_client.app_name
    
    @property
    def app_spec(self) -> algokit_utils.Arc56Contract:
        return self.app_client.app_spec
    
    @property
    def algorand(self) -> _AlgoKitAlgorandClient:
        return self.app_client.algorand

    def clone(
        self,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> "PieoutClient":
        return PieoutClient(
            self.app_client.clone(
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
            )
        )

    def new_group(self) -> "PieoutComposer":
        return PieoutComposer(self)

    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["calc_single_box_fee(uint8,uint16)uint64"],
        return_value: algokit_utils.ABIReturn | None
    ) -> int | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["read_gen_unix()uint64"],
        return_value: algokit_utils.ABIReturn | None
    ) -> int | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["read_game_state(uint64)(uint64,bool,uint8,uint8,uint8,uint8,uint8,uint16,uint64,uint64,address,address,address,address)"],
        return_value: algokit_utils.ABIReturn | None
    ) -> tuple[int, bool, int, int, int, int, int, int, int, int, str, str, str, str] | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["read_game_players(uint64)address[]"],
        return_value: algokit_utils.ABIReturn | None
    ) -> list[str] | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["mint_trophy(pay,pay)address"],
        return_value: algokit_utils.ABIReturn | None
    ) -> str | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["get_trophy()void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["new_game(uint64,pay,pay,pay)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["join_game(uint64,pay)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["commit_rand(uint64)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["get_box_commit_rand(pay)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["del_box_commit_rand()void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["play_game(uint64)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["check_game_event(uint64,uint8)bool"],
        return_value: algokit_utils.ABIReturn | None
    ) -> bool | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["reset_game(uint64,pay)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["delete_game(uint64)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["generate()void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["terminate()void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: str,
        return_value: algokit_utils.ABIReturn | None
    ) -> algokit_utils.ABIValue | algokit_utils.ABIStruct | None: ...

    def decode_return_value(
        self,
        method: str,
        return_value: algokit_utils.ABIReturn | None
    ) -> algokit_utils.ABIValue | algokit_utils.ABIStruct | None | bool | int | list[str] | str | tuple[int, bool, int, int, int, int, int, int, int, int, str, str, str, str]:
        """Decode ABI return value for the given method."""
        if return_value is None:
            return None
    
        arc56_method = self.app_spec.get_arc56_method(method)
        decoded = return_value.get_arc56_value(arc56_method, self.app_spec.structs)
    
        # If method returns a struct, convert the dict to appropriate dataclass
        if (arc56_method and
            arc56_method.returns and
            arc56_method.returns.struct and
            isinstance(decoded, dict)):
            struct_class = globals().get(arc56_method.returns.struct)
            if struct_class:
                return struct_class(**typing.cast(dict, decoded))
        return decoded


@dataclasses.dataclass(frozen=True)
class PieoutMethodCallCreateParams(
    algokit_utils.AppClientCreateSchema, algokit_utils.BaseAppClientMethodCallParams[
        typing.Any,
        str | None,
    ]
):
    """Parameters for creating Pieout contract using ABI"""
    on_complete: typing.Literal[OnComplete.NoOpOC] | None = None
    method: str | None = None

    def to_algokit_utils_params(self) -> algokit_utils.AppClientMethodCallCreateParams:
        method_args = _parse_abi_args(self.args)
        return algokit_utils.AppClientMethodCallCreateParams(
            **{
                **self.__dict__,
                "method": self.method or getattr(self.args, "abi_method_signature", None),
                "args": method_args,
            }
        )

@dataclasses.dataclass(frozen=True)
class PieoutMethodCallDeleteParams(
    algokit_utils.BaseAppClientMethodCallParams[
        typing.Any,
        str | None,
    ]
):
    """Parameters for calling Pieout contract using ABI"""
    on_complete: typing.Literal[OnComplete.DeleteApplicationOC] | None = None
    method: str | None = None

    def to_algokit_utils_params(self) -> algokit_utils.AppClientMethodCallParams:
        method_args = _parse_abi_args(self.args)
        return algokit_utils.AppClientMethodCallParams(
            **{
                **self.__dict__,
                "method": self.method or getattr(self.args, "abi_method_signature", None),
                "args": method_args,
            }
        )

class PieoutFactory(algokit_utils.TypedAppFactoryProtocol[PieoutMethodCallCreateParams, None, PieoutMethodCallDeleteParams]):
    """Factory for deploying and managing PieoutClient smart contracts"""

    def __init__(
        self,
        algorand: _AlgoKitAlgorandClient,
        *,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        version: str | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None,
    ):
        self.app_factory = algokit_utils.AppFactory(
            params=algokit_utils.AppFactoryParams(
                algorand=algorand,
                app_spec=APP_SPEC,
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                version=version,
                compilation_params=compilation_params,
            )
        )
        self.params = PieoutFactoryParams(self.app_factory)
        self.create_transaction = PieoutFactoryCreateTransaction(self.app_factory)
        self.send = PieoutFactorySend(self.app_factory)

    @property
    def app_name(self) -> str:
        return self.app_factory.app_name
    
    @property
    def app_spec(self) -> algokit_utils.Arc56Contract:
        return self.app_factory.app_spec
    
    @property
    def algorand(self) -> _AlgoKitAlgorandClient:
        return self.app_factory.algorand

    def deploy(
        self,
        *,
        on_update: algokit_utils.OnUpdate | None = None,
        on_schema_break: algokit_utils.OnSchemaBreak | None = None,
        create_params: PieoutMethodCallCreateParams | None = None,
        update_params: None = None,
        delete_params: PieoutMethodCallDeleteParams | None = None,
        existing_deployments: algokit_utils.ApplicationLookup | None = None,
        ignore_cache: bool = False,
        app_name: str | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None,
        send_params: algokit_utils.SendParams | None = None,
    ) -> tuple[PieoutClient, algokit_utils.AppFactoryDeployResult]:
        """Deploy the application"""
        deploy_response = self.app_factory.deploy(
            on_update=on_update,
            on_schema_break=on_schema_break,
            create_params=create_params.to_algokit_utils_params() if create_params else None,
            update_params=update_params,
            delete_params=delete_params.to_algokit_utils_params() if delete_params else None,
            existing_deployments=existing_deployments,
            ignore_cache=ignore_cache,
            app_name=app_name,
            compilation_params=compilation_params,
            send_params=send_params,
        )

        return PieoutClient(deploy_response[0]), deploy_response[1]

    def get_app_client_by_creator_and_name(
        self,
        creator_address: str,
        app_name: str,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        ignore_cache: bool | None = None,
        app_lookup_cache: algokit_utils.ApplicationLookup | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> PieoutClient:
        """Get an app client by creator address and name"""
        return PieoutClient(
            self.app_factory.get_app_client_by_creator_and_name(
                creator_address,
                app_name,
                default_sender,
                default_signer,
                ignore_cache,
                app_lookup_cache,
                approval_source_map,
                clear_source_map,
            )
        )

    def get_app_client_by_id(
        self,
        app_id: int,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> PieoutClient:
        """Get an app client by app ID"""
        return PieoutClient(
            self.app_factory.get_app_client_by_id(
                app_id,
                app_name,
                default_sender,
                default_signer,
                approval_source_map,
                clear_source_map,
            )
        )


class PieoutFactoryParams:
    """Parameters for creating transactions for Pieout contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory
        self.create = PieoutFactoryCreateParams(app_factory)
        self.update = PieoutFactoryUpdateParams(app_factory)
        self.delete = PieoutFactoryDeleteParams(app_factory)

class PieoutFactoryCreateParams:
    """Parameters for 'create' operations of Pieout contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateParams:
        """Creates an instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.bare.create(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
            compilation_params=compilation_params)

    def calc_single_box_fee(
        self,
        args: tuple[int, int] | CalcSingleBoxFeeArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the calc_single_box_fee(uint8,uint16)uint64 ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "calc_single_box_fee(uint8,uint16)uint64",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def read_gen_unix(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the read_gen_unix()uint64 ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "read_gen_unix()uint64",
                "args": None,
                }
            ),
            compilation_params=compilation_params
        )

    def read_game_state(
        self,
        args: tuple[int] | ReadGameStateArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the read_game_state(uint64)(uint64,bool,uint8,uint8,uint8,uint8,uint8,uint16,uint64,uint64,address,address,address,address) ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "read_game_state(uint64)(uint64,bool,uint8,uint8,uint8,uint8,uint8,uint16,uint64,uint64,address,address,address,address)",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def read_game_players(
        self,
        args: tuple[int] | ReadGamePlayersArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the read_game_players(uint64)address[] ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "read_game_players(uint64)address[]",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def mint_trophy(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument, algokit_utils.AppMethodCallTransactionArgument] | MintTrophyArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the mint_trophy(pay,pay)address ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "mint_trophy(pay,pay)address",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def get_trophy(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the get_trophy()void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "get_trophy()void",
                "args": None,
                }
            ),
            compilation_params=compilation_params
        )

    def new_game(
        self,
        args: tuple[int, algokit_utils.AppMethodCallTransactionArgument, algokit_utils.AppMethodCallTransactionArgument, algokit_utils.AppMethodCallTransactionArgument] | NewGameArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the new_game(uint64,pay,pay,pay)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "new_game(uint64,pay,pay,pay)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def join_game(
        self,
        args: tuple[int, algokit_utils.AppMethodCallTransactionArgument] | JoinGameArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the join_game(uint64,pay)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "join_game(uint64,pay)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def commit_rand(
        self,
        args: tuple[int] | CommitRandArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the commit_rand(uint64)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "commit_rand(uint64)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def get_box_commit_rand(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument] | GetBoxCommitRandArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the get_box_commit_rand(pay)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "get_box_commit_rand(pay)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def del_box_commit_rand(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the del_box_commit_rand()void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "del_box_commit_rand()void",
                "args": None,
                }
            ),
            compilation_params=compilation_params
        )

    def play_game(
        self,
        args: tuple[int] | PlayGameArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the play_game(uint64)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "play_game(uint64)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def check_game_event(
        self,
        args: tuple[int, int] | CheckGameEventArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the check_game_event(uint64,uint8)bool ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "check_game_event(uint64,uint8)bool",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def reset_game(
        self,
        args: tuple[int, algokit_utils.AppMethodCallTransactionArgument] | ResetGameArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the reset_game(uint64,pay)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "reset_game(uint64,pay)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def delete_game(
        self,
        args: tuple[int] | DeleteGameArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the delete_game(uint64)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "delete_game(uint64)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def generate(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the generate()void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "generate()void",
                "args": None,
                }
            ),
            compilation_params=compilation_params
        )

    def terminate(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the terminate()void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "terminate()void",
                "args": None,
                }
            ),
            compilation_params=compilation_params
        )

class PieoutFactoryUpdateParams:
    """Parameters for 'update' operations of Pieout contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        
    ) -> algokit_utils.AppUpdateParams:
        """Updates an instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.bare.deploy_update(
            algokit_utils.AppClientBareCallParams(**dataclasses.asdict(params)),
            )

class PieoutFactoryDeleteParams:
    """Parameters for 'delete' operations of Pieout contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        
    ) -> algokit_utils.AppDeleteParams:
        """Deletes an instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.bare.deploy_delete(
            algokit_utils.AppClientBareCallParams(**dataclasses.asdict(params)),
            )


class PieoutFactoryCreateTransaction:
    """Create transactions for Pieout contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory
        self.create = PieoutFactoryCreateTransactionCreate(app_factory)


class PieoutFactoryCreateTransactionCreate:
    """Create new instances of Pieout contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
    ) -> Transaction:
        """Creates a new instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.create_transaction.bare.create(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
        )


class PieoutFactorySend:
    """Send calls to Pieout contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory
        self.create = PieoutFactorySendCreate(app_factory)


class PieoutFactorySendCreate:
    """Send create calls to Pieout contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        send_params: algokit_utils.SendParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None,
    ) -> tuple[PieoutClient, algokit_utils.SendAppCreateTransactionResult]:
        """Creates a new instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        result = self.app_factory.send.bare.create(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
            send_params=send_params,
            compilation_params=compilation_params
        )
        return PieoutClient(result[0]), result[1]

    def generate(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        send_params: algokit_utils.SendParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> tuple[PieoutClient, algokit_utils.AppFactoryCreateMethodCallResult[None]]:
            """Creates and sends a transaction using the generate()void ABI method"""
            params = params or algokit_utils.CommonAppCallCreateParams()
            client, result = self.app_factory.send.create(
                algokit_utils.AppFactoryCreateMethodCallParams(
                    **{
                    **dataclasses.asdict(params),
                    "method": "generate()void",
                    "args": None,
                    }
                ),
                send_params=send_params,
                compilation_params=compilation_params
            )
            return_value = None if result.abi_return is None else typing.cast(None, result.abi_return)
    
            return PieoutClient(client), algokit_utils.AppFactoryCreateMethodCallResult[None](
                **{
                    **result.__dict__,
                    "app_id": result.app_id,
                    "abi_return": return_value,
                    "transaction": result.transaction,
                    "confirmation": result.confirmation,
                    "group_id": result.group_id,
                    "tx_ids": result.tx_ids,
                    "transactions": result.transactions,
                    "confirmations": result.confirmations,
                    "app_address": result.app_address,
                }
            )


class _PieoutDeleteComposer:
    def __init__(self, composer: "PieoutComposer"):
        self.composer = composer
    def terminate(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "PieoutComposer":
        self.composer._composer.add_app_delete_method_call(
            self.composer.client.params.delete.terminate(
                
                params=params,
                
            )
        )
        self.composer._result_mappers.append(
            lambda v: self.composer.client.decode_return_value(
                "terminate()void", v
            )
        )
        return self.composer


class PieoutComposer:
    """Composer for creating transaction groups for Pieout contract calls"""

    def __init__(self, client: "PieoutClient"):
        self.client = client
        self._composer = client.algorand.new_group()
        self._result_mappers: list[typing.Callable[[algokit_utils.ABIReturn | None], object] | None] = []

    @property
    def delete(self) -> "_PieoutDeleteComposer":
        return _PieoutDeleteComposer(self)

    def calc_single_box_fee(
        self,
        args: tuple[int, int] | CalcSingleBoxFeeArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "PieoutComposer":
        self._composer.add_app_call_method_call(
            self.client.params.calc_single_box_fee(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "calc_single_box_fee(uint8,uint16)uint64", v
            )
        )
        return self

    def read_gen_unix(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "PieoutComposer":
        self._composer.add_app_call_method_call(
            self.client.params.read_gen_unix(
                
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "read_gen_unix()uint64", v
            )
        )
        return self

    def read_game_state(
        self,
        args: tuple[int] | ReadGameStateArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "PieoutComposer":
        self._composer.add_app_call_method_call(
            self.client.params.read_game_state(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "read_game_state(uint64)(uint64,bool,uint8,uint8,uint8,uint8,uint8,uint16,uint64,uint64,address,address,address,address)", v
            )
        )
        return self

    def read_game_players(
        self,
        args: tuple[int] | ReadGamePlayersArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "PieoutComposer":
        self._composer.add_app_call_method_call(
            self.client.params.read_game_players(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "read_game_players(uint64)address[]", v
            )
        )
        return self

    def mint_trophy(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument, algokit_utils.AppMethodCallTransactionArgument] | MintTrophyArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "PieoutComposer":
        self._composer.add_app_call_method_call(
            self.client.params.mint_trophy(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "mint_trophy(pay,pay)address", v
            )
        )
        return self

    def get_trophy(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "PieoutComposer":
        self._composer.add_app_call_method_call(
            self.client.params.get_trophy(
                
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "get_trophy()void", v
            )
        )
        return self

    def new_game(
        self,
        args: tuple[int, algokit_utils.AppMethodCallTransactionArgument, algokit_utils.AppMethodCallTransactionArgument, algokit_utils.AppMethodCallTransactionArgument] | NewGameArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "PieoutComposer":
        self._composer.add_app_call_method_call(
            self.client.params.new_game(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "new_game(uint64,pay,pay,pay)void", v
            )
        )
        return self

    def join_game(
        self,
        args: tuple[int, algokit_utils.AppMethodCallTransactionArgument] | JoinGameArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "PieoutComposer":
        self._composer.add_app_call_method_call(
            self.client.params.join_game(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "join_game(uint64,pay)void", v
            )
        )
        return self

    def commit_rand(
        self,
        args: tuple[int] | CommitRandArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "PieoutComposer":
        self._composer.add_app_call_method_call(
            self.client.params.commit_rand(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "commit_rand(uint64)void", v
            )
        )
        return self

    def get_box_commit_rand(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument] | GetBoxCommitRandArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "PieoutComposer":
        self._composer.add_app_call_method_call(
            self.client.params.get_box_commit_rand(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "get_box_commit_rand(pay)void", v
            )
        )
        return self

    def del_box_commit_rand(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "PieoutComposer":
        self._composer.add_app_call_method_call(
            self.client.params.del_box_commit_rand(
                
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "del_box_commit_rand()void", v
            )
        )
        return self

    def play_game(
        self,
        args: tuple[int] | PlayGameArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "PieoutComposer":
        self._composer.add_app_call_method_call(
            self.client.params.play_game(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "play_game(uint64)void", v
            )
        )
        return self

    def check_game_event(
        self,
        args: tuple[int, int] | CheckGameEventArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "PieoutComposer":
        self._composer.add_app_call_method_call(
            self.client.params.check_game_event(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "check_game_event(uint64,uint8)bool", v
            )
        )
        return self

    def reset_game(
        self,
        args: tuple[int, algokit_utils.AppMethodCallTransactionArgument] | ResetGameArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "PieoutComposer":
        self._composer.add_app_call_method_call(
            self.client.params.reset_game(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "reset_game(uint64,pay)void", v
            )
        )
        return self

    def delete_game(
        self,
        args: tuple[int] | DeleteGameArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "PieoutComposer":
        self._composer.add_app_call_method_call(
            self.client.params.delete_game(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "delete_game(uint64)void", v
            )
        )
        return self

    def generate(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "PieoutComposer":
        self._composer.add_app_call_method_call(
            self.client.params.generate(
                
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "generate()void", v
            )
        )
        return self

    def clear_state(
        self,
        *,
        args: list[bytes] | None = None,
        params: algokit_utils.CommonAppCallParams | None = None,
    ) -> "PieoutComposer":
        params=params or algokit_utils.CommonAppCallParams()
        self._composer.add_app_call(
            self.client.params.clear_state(
                algokit_utils.AppClientBareCallParams(
                    **{
                        **dataclasses.asdict(params),
                        "args": args
                    }
                )
            )
        )
        return self
    
    def add_transaction(
        self, txn: Transaction, signer: TransactionSigner | None = None
    ) -> "PieoutComposer":
        self._composer.add_transaction(txn, signer)
        return self
    
    def composer(self) -> algokit_utils.TransactionComposer:
        return self._composer
    
    def simulate(
        self,
        allow_more_logs: bool | None = None,
        allow_empty_signatures: bool | None = None,
        allow_unnamed_resources: bool | None = None,
        extra_opcode_budget: int | None = None,
        exec_trace_config: SimulateTraceConfig | None = None,
        simulation_round: int | None = None,
        skip_signatures: bool | None = None,
    ) -> algokit_utils.SendAtomicTransactionComposerResults:
        return self._composer.simulate(
            allow_more_logs=allow_more_logs,
            allow_empty_signatures=allow_empty_signatures,
            allow_unnamed_resources=allow_unnamed_resources,
            extra_opcode_budget=extra_opcode_budget,
            exec_trace_config=exec_trace_config,
            simulation_round=simulation_round,
            skip_signatures=skip_signatures,
        )
    
    def send(
        self,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAtomicTransactionComposerResults:
        return self._composer.send(send_params)
