# flake8: noqa
# fmt: off
# mypy: ignore-errors
# This file was automatically generated by algokit-client-generator.
# DO NOT MODIFY IT BY HAND.
# requires: algokit-utils@^3.0.0

# common
import dataclasses
import typing
# core algosdk
import algosdk
from algosdk.transaction import OnComplete
from algosdk.atomic_transaction_composer import TransactionSigner
from algosdk.source_map import SourceMap
from algosdk.transaction import Transaction
from algosdk.v2client.models import SimulateTraceConfig
# utils
import algokit_utils
from algokit_utils import AlgorandClient as _AlgoKitAlgorandClient

_APP_SPEC_JSON = r"""{"arcs": [22, 28], "bareActions": {"call": [], "create": []}, "methods": [{"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "name": "game_id"}], "name": "add_resource_budget_play_game", "returns": {"type": "void"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint8", "name": "key_size"}, {"type": "uint16", "name": "value_size"}], "name": "calc_single_box_cost", "returns": {"type": "uint64"}, "events": [], "readonly": true, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [], "name": "read_gen_unix", "returns": {"type": "uint64"}, "events": [], "readonly": true, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "name": "game_id"}], "name": "read_game_state", "returns": {"type": "(uint64,bool,uint8,uint8,uint8,uint8,uint8,uint16,uint64,uint64,address,address,address,address)"}, "events": [], "readonly": true, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "name": "game_id"}], "name": "read_game_players", "returns": {"type": "address[]"}, "events": [], "readonly": true, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "account", "name": "owner"}], "name": "read_commit_rand", "returns": {"type": "(uint64,uint64,uint64)"}, "events": [], "readonly": true, "recommendations": {}}, {"actions": {"call": [], "create": ["NoOp"]}, "args": [], "name": "generate", "returns": {"type": "void"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "pay", "name": "box_t_pay"}, {"type": "pay", "name": "mint_pay"}], "name": "mint_trophy", "returns": {"type": "void"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [], "name": "claim_trophy", "returns": {"type": "void"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "name": "max_players"}, {"type": "pay", "name": "box_s_pay"}, {"type": "pay", "name": "box_p_pay"}, {"type": "pay", "name": "stake_pay"}], "name": "new_game", "returns": {"type": "void"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "name": "game_id"}, {"type": "pay", "name": "stake_pay"}], "name": "join_game", "returns": {"type": "void"}, "events": [{"args": [{"type": "bool", "name": "field1"}, {"type": "uint64", "name": "field2"}], "name": "game_live"}], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "pay", "name": "box_c_pay"}], "name": "get_box_commit_rand", "returns": {"type": "void"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "name": "game_id"}], "name": "set_box_commit_rand", "returns": {"type": "void"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "name": "game_id"}], "name": "del_box_commit_rand_for_self", "returns": {"type": "void"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "account", "name": "player"}], "name": "del_box_commit_rand_for_other", "returns": {"type": "void"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "name": "game_id"}], "name": "play_game", "returns": {"type": "void"}, "events": [{"args": [{"type": "uint64", "name": "field1"}, {"type": "uint64", "name": "field2"}, {"type": "address", "name": "field3"}, {"type": "uint8", "name": "field4"}], "name": "player_score"}, {"args": [{"type": "uint8", "name": "field1"}, {"type": "address", "name": "field2"}, {"type": "address", "name": "field3"}, {"type": "address", "name": "field4"}], "name": "game_over"}], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "name": "game_id"}, {"type": "uint8", "name": "trigger_id"}], "name": "trigger_game_prog", "returns": {"type": "bool"}, "events": [{"args": [{"type": "bool", "name": "field1"}, {"type": "uint64", "name": "field2"}], "name": "game_live"}, {"args": [{"type": "uint8", "name": "field1"}, {"type": "address", "name": "field2"}, {"type": "address", "name": "field3"}, {"type": "address", "name": "field4"}], "name": "game_over"}], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "name": "game_id"}, {"type": "pay", "name": "stake_pay"}], "name": "reset_game", "returns": {"type": "void"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "name": "game_id"}], "name": "delete_game", "returns": {"type": "void"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["DeleteApplication"], "create": []}, "args": [], "name": "terminate", "returns": {"type": "void"}, "events": [], "readonly": false, "recommendations": {}}], "name": "Pieout", "state": {"keys": {"box": {"box_game_trophy": {"key": "dF8=", "keyType": "AVMString", "valueType": "GameTrophy"}}, "global": {"game_id": {"key": "Z2FtZV9pZA==", "keyType": "AVMString", "valueType": "AVMUint64"}, "score_id": {"key": "c2NvcmVfaWQ=", "keyType": "AVMString", "valueType": "AVMUint64"}, "ath_score": {"key": "YXRoX3Njb3Jl", "keyType": "AVMString", "valueType": "AVMUint64"}, "ath_address": {"key": "YXRoX2FkZHJlc3M=", "keyType": "AVMString", "valueType": "address"}}, "local": {}}, "maps": {"box": {"box_game_state": {"keyType": "uint64", "valueType": "GameState", "prefix": "c18="}, "box_game_players": {"keyType": "uint64", "valueType": "AVMBytes", "prefix": "cF8="}, "box_commit_rand": {"keyType": "address", "valueType": "CommitRand", "prefix": "Y18="}}, "global": {}, "local": {}}, "schema": {"global": {"bytes": 1, "ints": 3}, "local": {"bytes": 0, "ints": 0}}}, "structs": {"CommitRand": [{"name": "game_id", "type": "uint64"}, {"name": "commit_round", "type": "uint64"}, {"name": "expiry_round", "type": "uint64"}], "GameState": [{"name": "staking_finalized", "type": "bool"}, {"name": "max_players", "type": "uint8"}, {"name": "active_players", "type": "uint8"}, {"name": "first_place_score", "type": "uint8"}, {"name": "second_place_score", "type": "uint8"}, {"name": "third_place_score", "type": "uint8"}, {"name": "box_p_start_pos", "type": "uint16"}, {"name": "expiry_ts", "type": "uint64"}, {"name": "prize_pool", "type": "uint64"}, {"name": "admin_address", "type": "address"}, {"name": "first_place_address", "type": "address"}, {"name": "second_place_address", "type": "address"}, {"name": "third_place_address", "type": "address"}], "GameTrophy": [{"name": "asset_id", "type": "uint64"}, {"name": "owner_address", "type": "address"}]}, "byteCode": {"approval": "CiAPAQACIOgHkByA+gHk4QGt/tXk1IX9qFjPgp677+/eghT/////D+SNBP//AwAAJg8CY18BAAJ0XwJwXwJzXwQVH3x1CHNjb3JlX2lkC2F0aF9hZGRyZXNzIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB2dhbWVfaWQJYXRoX3Njb3JlAgAgBI1MlZYEGnie0AMGgQExG0EAjycMgg4EYzPNnQS2bS9WBGJ6c68EdAHKgwQXwymGBFviGfAEskYO9gQ65090BNp7Z4UEca+WbgR0x+BTBJZQ1c4EMuFjmASg7L4TJw2CBAQsOiGSBBAodecEGJigLgRf8W2kNhoAjhQBlgF+AW0BWAFDASwBHwD/APMAxACqAJQAhAB0AGIAUgA6ACAAEAACI0MxGYEFEkQxGESIEZIiQzEZFEQxGEQ2GgEXiBBAIkMxGRREMRhENhoBFzEWIglJOBAiEkSID5kiQzEZFEQxGEQ2GgEXNhoCiA8vJwVMULAiQzEZFEQxGEQ2GgEXiAtVIkMxGRREMRhENhoBF8AciAqxIkMxGRREMRhENhoBF4gJ3iJDMRkURDEYRDYaAReICXEiQzEZFEQxGEQxFiIJSTgQIhJEiAkkIkMxGRREMRhENhoBFzEWIglJOBAiEkSICFAiQzEZFEQxGEQ2GgEXMRaBAwlJOBAiEkQxFiQJSTgQIhJEMRYiCUk4ECISRIgHOSJDMRkURDEYRIgGoiJDMRkURDEYRDEWJAlJOBAiEkQxFiIJSTgQIhJEiAWfIkMxGRREMRgURIgFeiJDMRkURDEYRDYaARfAHIgFRicFTFCwIkMxGRREMRhENhoBF4gE2CcFTFCwIkMxGRREMRhENhoBF4gESScFTFCwIkMxGRREMRhEIQ0WJwVMULAiQzEZFEQxGEQ2GgE2GgKIBA4WJwVMULAiQzEZFEQxGEQ2GgEXiAPEIkOKAwCxi/+yBYv+sgiL/bIHIrIQI7IBs4mKAwGL/TIDE0EADIv9cwBFAUEAA4v9iYv+MgMTQQAMi/5zAEUBQQADi/6Ji/8yAxNBAAyL/3MARQFBAAOL/4kxADIDE0EADDEAcwBFAUEAAzEAiTIKiYoDADIGi/8IFoAQAAAAAAAAAAAAAAAAAAAAAExQi/2L/lBMv4mKBQEjgACL/iULI0mLBIsCDIsDjAFBACmL+xaL/UxQSYwAvkSLBCVYi/wSQQAYIowDi/9BAAeLAIsEJwi7iwOMAYsBjACJiwQlCIwEQv+9igECi/9XCAgyBxakQAAOi/9XAgGL/1cBAahBADGL/yMiVIz/MgchBQgWi/9MXAhJjP8jUykjTwJUi/9XCAhQgATx8ylKTFCwgAGAi/+JKYv/iYoEAiNHB4AARwSL/VcICDIHFqRAAAeL/SRVQAJpi/wWi/5MUEmMAb1MjAxEI4wJiwmLDAxBACGLAYsJJbpJjAInCBNBAAmL/4sCIQaI/uuLCSUIjAlC/9eL/SJVJQuviwFJvEhMv4v9KVwCSYz9VwMBi/1XOCBJjAWL/VdYIElOAowGi/1XeCBJTgSMB08CTFBMUExQgARBCyFQTFCwi/2BEFtJjAiB4OIPEkEBlSOMCiOMC4v9VxggMgmLBUsCTwKI/iCMADIJiwZLAk8CiP4TjAMyCYsHTgKI/giMBIsIQQBpiwCLCIBgcGllb3V0Omp7Im1ldGhvZCI6InBsYXlfZ2FtZSIsInN1YnJvdXRpbmU6ImlzX2dhbWVfb3ZlciIsImNvbmNlcm4iOiJpdHhuLnBheTtmaXJzdF9wcml6ZV9zaGFyZSJ9iP2AiwpBAGqLA4sKgGFwaWVvdXQ6ansibWV0aG9kIjoicGxheV9nYW1lIiwic3Vicm91dGluZToiaXNfZ2FtZV9vdmVyIiwiY29uY2VybiI6Iml0eG4ucGF5O3NlY29uZF9wcml6ZV9zaGFyZSJ9iP0RiwtBAGmLBIsLgGBwaWVvdXQ6ansibWV0aG9kIjoicGxheV9nYW1lIiwic3Vicm91dGluZToiaXNfZ2FtZV9vdmVyIiwiY29uY2VybiI6Iml0eG4ucGF5O3RoaXJkX3ByaXplX3NoYXJlIn2I/KOL/YAIAAAAAAAAAABcEIz9gAGAi/2MAYwAiYsIgcDFHxJBABeLCEmBPAuBZApMSwEJjAojjAuMCEL+UIsISYEyC4FkCksBgR4LgWQKSYwKTwJLAglMCYwLjAhC/i4pi/2MAYwAiYoBACM4EIEGEkQyBCQSRDEWIhJEIzgYMggSRCM4ADEAEkQjScIaJw0SRCMiwhqL/xYSRImKAgGL/heL/xcIgZADC4HEEwiJigEBi/8WJwRLAVC+REkjUykjTwJUSwFXAQFLAlcCAUsDVwMBSwRXBAFLBVcFAUsGVwYCSwdXCAhLCFcQCEsJVxggSwpXOCBLC1dYIE8MV3ggTw1PDVBPDFBPC1BPClBPCVBPCFBPB1BPBlBPBVBPBFBPA1BPAlBMUImKAQEjSYv/FitMUL5MSU8CRIACAABMFSOLBYsEDEEANIsCiwUlWEmMACcIE4sDjAFBABSLA1cCAIsAUEkVJQoWVwYCTFCMAYsBjAOLBSUIjAVC/8SLA4wAiYoBASiL/1BJvUUBRL5ESVcACEsBVwgITwJXEAhOAlBMUIkxADIJEkQnCSJnJwYiZycKI2cnBzIDZ4mKAgAyBIEDEkQqvUUBFESL/jgIgeSWAQ9Ei/44ADIJEkSL/jgHMgoSRIv/OAgyDw9Ei/84ADIJEkSL/zgHMgoSRLEyCkcDgFJwaWVvdXQ6ansibWV0aG9kIjoibWludF90cm9waHkiLCJjb25jZXJuIjoiaXR4bi5hc3NldF9jb25maWc7Y3JlYXRlX3Ryb3BoeV9hc3NldCJ9sgWyLLIrsiqyKSOyJCOyI4ATR2FtZW5hbWUtQVRILVRyb3BoebImgARUUkZZsiUisiKBA7IQI7IBs7Q8KoEouUgWMgNQKky/iTIEIhJEMQAjJwdlRBJEMQAqvkQjW0xLAXAARQFEsTEAgFdwaWVvdXQ6ansibWV0aG9kIjoiY2xhaW1fdHJvcGh5IiwiY29uY2VybiI6Iml0eG4uYXNzZXRfdHJhbnNmZXI7dHJhbnNmZXJfdHJvcGh5X2Fzc2V0In2yBSKyErIUshGBBLIQI7IBs4mKBAAyBIEEEkQqvUUBRIv8gQQPQQDOi/yBEA5BAMYiRIv/OAhJIQQSRIv9OAghCxJEi/44CCWL/AtJFkmTgRAORFcGAoABCkyI/SdPAhJEi/84ADEAEkSL/TgAMQASRIv+OAAxABJEi/84BzIKEkSL/TgHMgoSRIv+OAcyChJEi/wWSZOBCA5EVwcBMgchBQgWTwMWMQAyA0cCKU8HUIABAVApUClQKVAnC1BPBlBPBVBPBFBPA1BPAlBMUCMnCWVESRYnBEsBUE8Dv08CrytPAlBJvEhJTwK/IzEAuyIIJwlMZ4kjQv83igIAi/4WJwRLAVBJvkQyBCQSREsBvUUBRCq9RQFEi/84CEkhBBJEi/84ADEAEkSL/zgHMgoSRDEASwIkVYv+TwIrSwMjiPjfFERLAiNTKSNPAlQjUxRESwJXCAgyBxanREsCVwIBSwNXAQGmREsCgQZZSwMiVSULSwENRCtPBlAxAExOArsiCBZJk4EIDkRXBwFPAkxcAkmBBlklCBZJk4EQDkRXBgJcBkmBEFtPAggWXBCI+MBFAb+JigEAMgQkEkQoMQBQvUUBFEQqvUUBRIv/OAghBxJEi/84ADEAEkSL/zgHMgoSRCgxACEGiPgSiYoBADIEIhJEi/8WJwRLAVBJvUUBRCgxAFC9RQFEvkRJI1MpI08CVCNTIhJEMQBMIlWL/08CK08DI4j3+iISRCgxAFC+REmBCFsURDIGgQQIFlwITFwAKDEAUEy/iYoBADIEIhJEi/8WJwRMUEm9RQFEKDEAUL1FAUQoMQBQvkQjW0EADigxAFC+RCNbi/8SQQCKIkQoMQBQvkQjW0EAFTEAiwC+RCJVi/9PAitPAyOI94QURCgxAFC8SDEAIQeAWHBpZW91dDpqeyJtZXRob2QiOiJkZWxfYm94X2NvbW1pdF9yYW5kX2Zvcl9zZWxmIiwiY29uY2VybiI6InR4bi5hcHBfYzttYnJfYm94X2NfcmVmdW5kIn2I9oiJI0L/c4oBADIEIhJEKIv/UEm9RQFEi/8xABNESb5ESYEIWxREgRBbMgYMRLxIi/8xADIJiPZpIQeAWHBpZW91dDpqeyJtZXRob2QiOiJkZWxfYm94X2NvbW1pdF9yYW5kX2Zvcl9vdGhlciIsImNvbmNlcm4iOiJpdHhuLnBheTttYnJfYm94X2NfcmVmdW5kIn2I9fKJigEAI0cGgABHCIGamQEyDA1BABixgQayEIEFshknDrIeJw6yHyOyAbNC/94iOBCBBhJEMgQkEkQxFhREIjgYMggSRCI4ADEAEkQiI8IaJwwSRCJJwho2GgESRIv/FkmMAScETFBJjABJvUUBRCgxAFC9RQFEKr1FAUQxAEsBvkQiVYv/TwIrTwMiiPX3IhJEvkxJTgKMAkRJI1MpI08CVCNTIhJEVwgIMgcWp0QoMQBQvkQjW4v/EkQyBigxAFC+RIEIWw9EsSgxAFC+RIEIWxYnCzEAUIHv6I2eArIYgARHwgwjshpMshqyGoEGshAjsgGztD5JVwAEJwUSRElXBgAjJwZlTIwLRDEAjARMVxYIFYEIEkSBEFsjIQgdRQEhCR5FAR5FASEIHUUBIQkeRQGAAgD/jAWBgID8////////ASIeRQEhChohDBiMDSOMCYwMiwmB/wEMQQBciwxJIQgdRQEhCR5OAkhJgRKRSwEbgRuRIQoaTIE7kUqRTBwiHkUBgR8aTwJMkCEKGhlJjAiLDQ9BAByLCCEMGCIIFlcGAosFTFCMBYsJIgiMCYwMQv+gjAxC/6QjjAqLBRWMDiSMCYsJiw4MQQAsJIsOSU4CDyRLAk8CTYsFTE8CUosJWYHwVQ5AAA+LCiIIjAqLCSQIjAlC/8yLCxaLChZJk4EIDkRXBwFJjAaLAU8CUIsEUExQgAQcwq9RTFCwiwJXOCAyAxJAAAuLAoEDVYsKDEEBNYsCSVcEAVwFSVdYIFx4SVcDAVwESVc4IFxYiwZcA4sEXDiMAiMnBmVEIggnBkxniwKBA1VJjA8jJwplRA1BAMsnCosPZyMnB2VEMgMTQQCrKr5ESVcIIEwjW3AATIwHQQCZiwciEkEAkiq+REkjW0xXCCAyCrGAcHBpZW91dDpqeyJtZXRob2QiOiJwbGF5X2dhbWUiLCJzdWJyb3V0aW5lOiJjbGF3YmFja19pdHhuIiwiY29uY2VybiI6Iml0eG4uYXNzZXRfdHJhbnNmZXI7Y2xhd2JhY2tfdHJvcGh5X2Fzc2V0In2yBSKyErIUshOyEYEEshAjsgGzMQAnB0sBZyq+RExcCCpMv4sCSSRVIgkWSZOBCA5EVwcBXAIoMQAhBojzB4v/TCsoiPPFRQGLAEy/iYsCV1ggMgMSQAALiwKBBFWLCgxBAB+LAklXBAFcBUlXWCBceIsGXASLBFxYjAOLA4wCQv66iwJXeCAyAxJAAA+LAkmBBVWLCgxMjANB/9+LAosGXAWLBFx4jANC/9CKAgGL/hYnBExQSb5MTgJEMgQiEkS9RQFEi/8XSU4CQAAPSVcICDIHFqREiPLgSEyJiwAkEkRJI1MpI08CVCNTIhJESVcICDIHFqREi/5MKyiI8wxITImKAgAyBCQSRIv+FicESwFQSb1FAUSL/zgAMQASRIv/OAcyChJEi/84CCEED0RJvkRJI1MpI08CVCNTIhJESVcYIDEAEkRJgRBbFERJJFUURCtPA1AjMQC7I0lUgAEBXAIpXAMpXAQpXAUnC1wGMgchBQgWXAhJgRBbIQQIFlwQMgNcODIDXFgyA1x4v4mKAQCAAIv/FkknBExQRwK+TElOA04DRDIEIhJEvUUBRDEATFcYIBJAAAgxADIJEkEBDCJEiwMkVUmMACISQQDwiwK+RFcYIIv/TCsiI4jxiyISRDEAiwOBEFuATHBpZW91dDpqeyJtZXRob2QiOiJkZWxldGVfZ2FtZSIsImNvbmNlcm4iOiJpdHhuLnBheTtwcml6ZV9wb29sX2FkbWluX3N0YWtlIn2I8J2LArxIK4sBULxIiwMiVSULFkmTgRAORFcGAoABCkyI9HIxACELTwIIgFdwaWVvdXQ6ansibWV0aG9kIjoiZGVsZXRlX2dhbWUiLCJjb25jZXJuIjoiaXR4bi5wYXk7Ym94X3NfbWJyX3JlZnVuZCtib3hfcF9tYnJfcmVmdW5kIn2I8BmJiwAURIsDgRBbFERC/20jQv7xigAAgAAhDkQxADIJEkQqvUUBQQB7MgoqvkQjW3AATIwAQQBpiwAiEkEAYiq+RCNbsYBOcGllb3V0Omp7Im1ldGhvZCI6InRlcm1pbmF0ZSIsImNvbmNlcm4iOiJpdHhuLmFzc2V0X2NvbmZpZztidXJuX3Ryb3BoeV9hc3NldCJ9sgWyIYEDshAjsgGzKrxIsTEASYBGcGllb3V0Omp7Im1ldGhvZCI6InRlcm1pbmF0ZSIsImNvbmNlcm4iOiJpdHhuLnBheTtjbG9zZV9yZW1haW5kZXJfdG8ifbIFsgkjsgiyByKyECOyAbOJ", "clear": "CoEBQw=="}, "compilerInfo": {"compiler": "puya", "compilerVersion": {"major": 4, "minor": 9, "patch": 0}}, "events": [{"args": [{"type": "bool", "name": "field1"}, {"type": "uint64", "name": "field2"}], "name": "game_live"}, {"args": [{"type": "uint64", "name": "field1"}, {"type": "uint64", "name": "field2"}, {"type": "address", "name": "field3"}, {"type": "uint8", "name": "field4"}], "name": "player_score"}, {"args": [{"type": "uint8", "name": "field1"}, {"type": "address", "name": "field2"}, {"type": "address", "name": "field3"}, {"type": "address", "name": "field4"}], "name": "game_over"}], "networks": {}, "source": {"approval": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBzbWFydF9jb250cmFjdHMucGllb3V0LmNvbnRyYWN0LlBpZW91dC5fX2FsZ29weV9lbnRyeXBvaW50X3dpdGhfaW5pdCgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIGludGNibG9jayAxIDAgMiAzMiAxMDAwIDM2MDAgMzIwMDAgMjg5MDAgNjM2NDEzNjIyMzg0Njc5MzAwNSAxNDQyNjk1MDQwODg4OTYzNDA3IDQyOTQ5NjcyOTUgNjczMDAgNjU1MzUgVE1QTF9HRU5fVU5JWCBUTVBMX0RFTEVUQUJMRQogICAgYnl0ZWNibG9jayAiY18iIDB4MDAgInRfIiAicF8iICJzXyIgMHgxNTFmN2M3NSAic2NvcmVfaWQiICJhdGhfYWRkcmVzcyIgMHgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwICJnYW1lX2lkIiAiYXRoX3Njb3JlIiAweDAwMjAgMHg4ZDRjOTU5NiAweDFhNzg5ZWQwIDB4MDY4MTAxCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L2NvbnRyYWN0LnB5OjMxLTMyCiAgICAvLyAjIFNtYXJ0IGNvbnRyYWN0IGNsYXNzCiAgICAvLyBjbGFzcyBQaWVvdXQoQVJDNENvbnRyYWN0KToKICAgIHR4biBOdW1BcHBBcmdzCiAgICBieiBtYWluX2FmdGVyX2lmX2Vsc2VAMjUKICAgIGJ5dGVjIDEyIC8vIG1ldGhvZCAiYWRkX3Jlc291cmNlX2J1ZGdldF9wbGF5X2dhbWUodWludDY0KXZvaWQiCiAgICBwdXNoYnl0ZXNzIDB4NjMzM2NkOWQgMHhiNjZkMmY1NiAweDYyN2E3M2FmIDB4NzQwMWNhODMgMHgxN2MzMjk4NiAweDViZTIxOWYwIDB4YjI0NjBlZjYgMHgzYWU3NGY3NCAweGRhN2I2Nzg1IDB4NzFhZjk2NmUgMHg3NGM3ZTA1MyAweDk2NTBkNWNlIDB4MzJlMTYzOTggMHhhMGVjYmUxMyAvLyBtZXRob2QgImNhbGNfc2luZ2xlX2JveF9jb3N0KHVpbnQ4LHVpbnQxNil1aW50NjQiLCBtZXRob2QgInJlYWRfZ2VuX3VuaXgoKXVpbnQ2NCIsIG1ldGhvZCAicmVhZF9nYW1lX3N0YXRlKHVpbnQ2NCkodWludDY0LGJvb2wsdWludDgsdWludDgsdWludDgsdWludDgsdWludDgsdWludDE2LHVpbnQ2NCx1aW50NjQsYWRkcmVzcyxhZGRyZXNzLGFkZHJlc3MsYWRkcmVzcykiLCBtZXRob2QgInJlYWRfZ2FtZV9wbGF5ZXJzKHVpbnQ2NClhZGRyZXNzW10iLCBtZXRob2QgInJlYWRfY29tbWl0X3JhbmQoYWNjb3VudCkodWludDY0LHVpbnQ2NCx1aW50NjQpIiwgbWV0aG9kICJnZW5lcmF0ZSgpdm9pZCIsIG1ldGhvZCAibWludF90cm9waHkocGF5LHBheSl2b2lkIiwgbWV0aG9kICJjbGFpbV90cm9waHkoKXZvaWQiLCBtZXRob2QgIm5ld19nYW1lKHVpbnQ2NCxwYXkscGF5LHBheSl2b2lkIiwgbWV0aG9kICJqb2luX2dhbWUodWludDY0LHBheSl2b2lkIiwgbWV0aG9kICJnZXRfYm94X2NvbW1pdF9yYW5kKHBheSl2b2lkIiwgbWV0aG9kICJzZXRfYm94X2NvbW1pdF9yYW5kKHVpbnQ2NCl2b2lkIiwgbWV0aG9kICJkZWxfYm94X2NvbW1pdF9yYW5kX2Zvcl9zZWxmKHVpbnQ2NCl2b2lkIiwgbWV0aG9kICJkZWxfYm94X2NvbW1pdF9yYW5kX2Zvcl9vdGhlcihhY2NvdW50KXZvaWQiCiAgICBieXRlYyAxMyAvLyBtZXRob2QgInBsYXlfZ2FtZSh1aW50NjQpdm9pZCIKICAgIHB1c2hieXRlc3MgMHgyYzNhMjE5MiAweDEwMjg3NWU3IDB4MTg5OGEwMmUgMHg1ZmYxNmRhNCAvLyBtZXRob2QgInRyaWdnZXJfZ2FtZV9wcm9nKHVpbnQ2NCx1aW50OClib29sIiwgbWV0aG9kICJyZXNldF9nYW1lKHVpbnQ2NCxwYXkpdm9pZCIsIG1ldGhvZCAiZGVsZXRlX2dhbWUodWludDY0KXZvaWQiLCBtZXRob2QgInRlcm1pbmF0ZSgpdm9pZCIKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDAKICAgIG1hdGNoIG1haW5fYWRkX3Jlc291cmNlX2J1ZGdldF9wbGF5X2dhbWVfcm91dGVANSBtYWluX2NhbGNfc2luZ2xlX2JveF9jb3N0X3JvdXRlQDYgbWFpbl9yZWFkX2dlbl91bml4X3JvdXRlQDcgbWFpbl9yZWFkX2dhbWVfc3RhdGVfcm91dGVAOCBtYWluX3JlYWRfZ2FtZV9wbGF5ZXJzX3JvdXRlQDkgbWFpbl9yZWFkX2NvbW1pdF9yYW5kX3JvdXRlQDEwIG1haW5fZ2VuZXJhdGVfcm91dGVAMTEgbWFpbl9taW50X3Ryb3BoeV9yb3V0ZUAxMiBtYWluX2NsYWltX3Ryb3BoeV9yb3V0ZUAxMyBtYWluX25ld19nYW1lX3JvdXRlQDE0IG1haW5fam9pbl9nYW1lX3JvdXRlQDE1IG1haW5fZ2V0X2JveF9jb21taXRfcmFuZF9yb3V0ZUAxNiBtYWluX3NldF9ib3hfY29tbWl0X3JhbmRfcm91dGVAMTcgbWFpbl9kZWxfYm94X2NvbW1pdF9yYW5kX2Zvcl9zZWxmX3JvdXRlQDE4IG1haW5fZGVsX2JveF9jb21taXRfcmFuZF9mb3Jfb3RoZXJfcm91dGVAMTkgbWFpbl9wbGF5X2dhbWVfcm91dGVAMjAgbWFpbl90cmlnZ2VyX2dhbWVfcHJvZ19yb3V0ZUAyMSBtYWluX3Jlc2V0X2dhbWVfcm91dGVAMjIgbWFpbl9kZWxldGVfZ2FtZV9yb3V0ZUAyMyBtYWluX3Rlcm1pbmF0ZV9yb3V0ZUAyNAoKbWFpbl9hZnRlcl9pZl9lbHNlQDI1OgogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9jb250cmFjdC5weTozMS0zMgogICAgLy8gIyBTbWFydCBjb250cmFjdCBjbGFzcwogICAgLy8gY2xhc3MgUGllb3V0KEFSQzRDb250cmFjdCk6CiAgICBpbnRjXzEgLy8gMAogICAgcmV0dXJuCgptYWluX3Rlcm1pbmF0ZV9yb3V0ZUAyNDoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvY29udHJhY3QucHk6NzU3LTc1OAogICAgLy8gIyBBbGxvdyBhcHBsaWNhdGlvbiBjcmVhdG9yIHRvIGRlbGV0ZSB0aGUgc21hcnQgY29udHJhY3QgYXBwbGljYXRpb24KICAgIC8vIEBhcmM0LmFiaW1ldGhvZChhbGxvd19hY3Rpb25zPVsiRGVsZXRlQXBwbGljYXRpb24iXSkKICAgIHR4biBPbkNvbXBsZXRpb24KICAgIHB1c2hpbnQgNSAvLyBEZWxldGVBcHBsaWNhdGlvbgogICAgPT0KICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IERlbGV0ZUFwcGxpY2F0aW9uCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIGNhbGxzdWIgdGVybWluYXRlCiAgICBpbnRjXzAgLy8gMQogICAgcmV0dXJuCgptYWluX2RlbGV0ZV9nYW1lX3JvdXRlQDIzOgogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9jb250cmFjdC5weTo2OTEtNjkyCiAgICAvLyAjIEFsbG93IGFwcGxpY2F0aW9uIGNyZWF0b3Igb3IgYWRtaW4gdG8gZGVsZXRlIGV4aXN0aW5nIGdhbWUgaW5zdGFuY2UKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L2NvbnRyYWN0LnB5OjMxLTMyCiAgICAvLyAjIFNtYXJ0IGNvbnRyYWN0IGNsYXNzCiAgICAvLyBjbGFzcyBQaWVvdXQoQVJDNENvbnRyYWN0KToKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIGJ0b2kKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvY29udHJhY3QucHk6NjkxLTY5MgogICAgLy8gIyBBbGxvdyBhcHBsaWNhdGlvbiBjcmVhdG9yIG9yIGFkbWluIHRvIGRlbGV0ZSBleGlzdGluZyBnYW1lIGluc3RhbmNlCiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIGNhbGxzdWIgZGVsZXRlX2dhbWUKICAgIGludGNfMCAvLyAxCiAgICByZXR1cm4KCm1haW5fcmVzZXRfZ2FtZV9yb3V0ZUAyMjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvY29udHJhY3QucHk6NjM3LTYzOAogICAgLy8gIyBBbGxvdyBhZG1pbiB0byByZXNldCBleGlzdGluZyBnYW1lIGluc3RhbmNlCiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9jb250cmFjdC5weTozMS0zMgogICAgLy8gIyBTbWFydCBjb250cmFjdCBjbGFzcwogICAgLy8gY2xhc3MgUGllb3V0KEFSQzRDb250cmFjdCk6CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICBidG9pCiAgICB0eG4gR3JvdXBJbmRleAogICAgaW50Y18wIC8vIDEKICAgIC0KICAgIGR1cAogICAgZ3R4bnMgVHlwZUVudW0KICAgIGludGNfMCAvLyBwYXkKICAgID09CiAgICBhc3NlcnQgLy8gdHJhbnNhY3Rpb24gdHlwZSBpcyBwYXkKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvY29udHJhY3QucHk6NjM3LTYzOAogICAgLy8gIyBBbGxvdyBhZG1pbiB0byByZXNldCBleGlzdGluZyBnYW1lIGluc3RhbmNlCiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIGNhbGxzdWIgcmVzZXRfZ2FtZQogICAgaW50Y18wIC8vIDEKICAgIHJldHVybgoKbWFpbl90cmlnZ2VyX2dhbWVfcHJvZ19yb3V0ZUAyMToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvY29udHJhY3QucHk6NjAzLTYwNAogICAgLy8gIyBBbGxvdyBhbiBhY3RpdmUgcGxheWVyIHRvIGNoZWNrIGZvciBhIGdhbWUgZXZlbnQgYW5kIHRyaWdnZXIgaXRzIHByb2dyZXNzaW9uCiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9jb250cmFjdC5weTozMS0zMgogICAgLy8gIyBTbWFydCBjb250cmFjdCBjbGFzcwogICAgLy8gY2xhc3MgUGllb3V0KEFSQzRDb250cmFjdCk6CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICBidG9pCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAyCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L2NvbnRyYWN0LnB5OjYwMy02MDQKICAgIC8vICMgQWxsb3cgYW4gYWN0aXZlIHBsYXllciB0byBjaGVjayBmb3IgYSBnYW1lIGV2ZW50IGFuZCB0cmlnZ2VyIGl0cyBwcm9ncmVzc2lvbgogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICBjYWxsc3ViIHRyaWdnZXJfZ2FtZV9wcm9nCiAgICBieXRlYyA1IC8vIDB4MTUxZjdjNzUKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICBpbnRjXzAgLy8gMQogICAgcmV0dXJuCgptYWluX3BsYXlfZ2FtZV9yb3V0ZUAyMDoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvY29udHJhY3QucHk6NDg1LTQ4NgogICAgLy8gIyBSZXNvbHZlIHRoZSBwbGF5ZXIncyBzY29yZSBhc3NvY2lhdGVkIHdpdGggdGhlIHNwZWNpZmllZCBnYW1lIElELCB1cGRhdGluZyBnYW1lIHN0YXRlIGFjY29yZGluZ2x5CiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9jb250cmFjdC5weTozMS0zMgogICAgLy8gIyBTbWFydCBjb250cmFjdCBjbGFzcwogICAgLy8gY2xhc3MgUGllb3V0KEFSQzRDb250cmFjdCk6CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICBidG9pCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L2NvbnRyYWN0LnB5OjQ4NS00ODYKICAgIC8vICMgUmVzb2x2ZSB0aGUgcGxheWVyJ3Mgc2NvcmUgYXNzb2NpYXRlZCB3aXRoIHRoZSBzcGVjaWZpZWQgZ2FtZSBJRCwgdXBkYXRpbmcgZ2FtZSBzdGF0ZSBhY2NvcmRpbmdseQogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICBjYWxsc3ViIHBsYXlfZ2FtZQogICAgaW50Y18wIC8vIDEKICAgIHJldHVybgoKbWFpbl9kZWxfYm94X2NvbW1pdF9yYW5kX2Zvcl9vdGhlcl9yb3V0ZUAxOToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvY29udHJhY3QucHk6NDU0LTQ1NQogICAgLy8gIyBBbGxvdyBjYWxsZXIgdG8gZGVsZXRlIGJveCBjb21taXQgcmFuZCBjb250ZW50cyBmb3IgYW5vdGhlciBhY2NvdW50CiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9jb250cmFjdC5weTozMS0zMgogICAgLy8gIyBTbWFydCBjb250cmFjdCBjbGFzcwogICAgLy8gY2xhc3MgUGllb3V0KEFSQzRDb250cmFjdCk6CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICBidG9pCiAgICB0eG5hcyBBY2NvdW50cwogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9jb250cmFjdC5weTo0NTQtNDU1CiAgICAvLyAjIEFsbG93IGNhbGxlciB0byBkZWxldGUgYm94IGNvbW1pdCByYW5kIGNvbnRlbnRzIGZvciBhbm90aGVyIGFjY291bnQKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgY2FsbHN1YiBkZWxfYm94X2NvbW1pdF9yYW5kX2Zvcl9vdGhlcgogICAgaW50Y18wIC8vIDEKICAgIHJldHVybgoKbWFpbl9kZWxfYm94X2NvbW1pdF9yYW5kX2Zvcl9zZWxmX3JvdXRlQDE4OgogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9jb250cmFjdC5weTo0MTMtNDE0CiAgICAvLyAjIEFsbG93IGNhbGxlciB0byBkZWxldGUgYm94IGNvbW1pdCByYW5kIGNvbnRlbnRzIGZvciB0aGVpciBvd24gYWNjb3VudAogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvY29udHJhY3QucHk6MzEtMzIKICAgIC8vICMgU21hcnQgY29udHJhY3QgY2xhc3MKICAgIC8vIGNsYXNzIFBpZW91dChBUkM0Q29udHJhY3QpOgogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgYnRvaQogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9jb250cmFjdC5weTo0MTMtNDE0CiAgICAvLyAjIEFsbG93IGNhbGxlciB0byBkZWxldGUgYm94IGNvbW1pdCByYW5kIGNvbnRlbnRzIGZvciB0aGVpciBvd24gYWNjb3VudAogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICBjYWxsc3ViIGRlbF9ib3hfY29tbWl0X3JhbmRfZm9yX3NlbGYKICAgIGludGNfMCAvLyAxCiAgICByZXR1cm4KCm1haW5fc2V0X2JveF9jb21taXRfcmFuZF9yb3V0ZUAxNzoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvY29udHJhY3QucHk6Mzc0LTM3NQogICAgLy8gIyBTZXQgYm94IGNvbW1pdCByYW5kIGNvbnRlbnRzIHVzZWQgZm9yIG9idGFpbmluZyBvbi1jaGFpbiByYW5kb21uZXNzIGFuZCBwbGF5aW5nIHRoZSBnYW1lCiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9jb250cmFjdC5weTozMS0zMgogICAgLy8gIyBTbWFydCBjb250cmFjdCBjbGFzcwogICAgLy8gY2xhc3MgUGllb3V0KEFSQzRDb250cmFjdCk6CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICBidG9pCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L2NvbnRyYWN0LnB5OjM3NC0zNzUKICAgIC8vICMgU2V0IGJveCBjb21taXQgcmFuZCBjb250ZW50cyB1c2VkIGZvciBvYnRhaW5pbmcgb24tY2hhaW4gcmFuZG9tbmVzcyBhbmQgcGxheWluZyB0aGUgZ2FtZQogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICBjYWxsc3ViIHNldF9ib3hfY29tbWl0X3JhbmQKICAgIGludGNfMCAvLyAxCiAgICByZXR1cm4KCm1haW5fZ2V0X2JveF9jb21taXRfcmFuZF9yb3V0ZUAxNjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvY29udHJhY3QucHk6MzUzLTM1NAogICAgLy8gIyBHZXQgYm94IGNvbW1pdCByYW5kIGNvbnRlbnRzIHdpdGggZGVmYXVsdCBzdGFydCB2YWx1ZXMKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L2NvbnRyYWN0LnB5OjMxLTMyCiAgICAvLyAjIFNtYXJ0IGNvbnRyYWN0IGNsYXNzCiAgICAvLyBjbGFzcyBQaWVvdXQoQVJDNENvbnRyYWN0KToKICAgIHR4biBHcm91cEluZGV4CiAgICBpbnRjXzAgLy8gMQogICAgLQogICAgZHVwCiAgICBndHhucyBUeXBlRW51bQogICAgaW50Y18wIC8vIHBheQogICAgPT0KICAgIGFzc2VydCAvLyB0cmFuc2FjdGlvbiB0eXBlIGlzIHBheQogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9jb250cmFjdC5weTozNTMtMzU0CiAgICAvLyAjIEdldCBib3ggY29tbWl0IHJhbmQgY29udGVudHMgd2l0aCBkZWZhdWx0IHN0YXJ0IHZhbHVlcwogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICBjYWxsc3ViIGdldF9ib3hfY29tbWl0X3JhbmQKICAgIGludGNfMCAvLyAxCiAgICByZXR1cm4KCm1haW5fam9pbl9nYW1lX3JvdXRlQDE1OgogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9jb250cmFjdC5weToyODctMjg4CiAgICAvLyAjIEpvaW4gZXhpc3RpbmcgZ2FtZSBpbnN0YW5jZQogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvY29udHJhY3QucHk6MzEtMzIKICAgIC8vICMgU21hcnQgY29udHJhY3QgY2xhc3MKICAgIC8vIGNsYXNzIFBpZW91dChBUkM0Q29udHJhY3QpOgogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgYnRvaQogICAgdHhuIEdyb3VwSW5kZXgKICAgIGludGNfMCAvLyAxCiAgICAtCiAgICBkdXAKICAgIGd0eG5zIFR5cGVFbnVtCiAgICBpbnRjXzAgLy8gcGF5CiAgICA9PQogICAgYXNzZXJ0IC8vIHRyYW5zYWN0aW9uIHR5cGUgaXMgcGF5CiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L2NvbnRyYWN0LnB5OjI4Ny0yODgKICAgIC8vICMgSm9pbiBleGlzdGluZyBnYW1lIGluc3RhbmNlCiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIGNhbGxzdWIgam9pbl9nYW1lCiAgICBpbnRjXzAgLy8gMQogICAgcmV0dXJuCgptYWluX25ld19nYW1lX3JvdXRlQDE0OgogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9jb250cmFjdC5weToyMjAtMjIxCiAgICAvLyAjIENyZWF0ZSBuZXcgZ2FtZSBpbnN0YW5jZSB3aXRoIGEgdW5pcXVlIElECiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9jb250cmFjdC5weTozMS0zMgogICAgLy8gIyBTbWFydCBjb250cmFjdCBjbGFzcwogICAgLy8gY2xhc3MgUGllb3V0KEFSQzRDb250cmFjdCk6CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICBidG9pCiAgICB0eG4gR3JvdXBJbmRleAogICAgcHVzaGludCAzIC8vIDMKICAgIC0KICAgIGR1cAogICAgZ3R4bnMgVHlwZUVudW0KICAgIGludGNfMCAvLyBwYXkKICAgID09CiAgICBhc3NlcnQgLy8gdHJhbnNhY3Rpb24gdHlwZSBpcyBwYXkKICAgIHR4biBHcm91cEluZGV4CiAgICBpbnRjXzIgLy8gMgogICAgLQogICAgZHVwCiAgICBndHhucyBUeXBlRW51bQogICAgaW50Y18wIC8vIHBheQogICAgPT0KICAgIGFzc2VydCAvLyB0cmFuc2FjdGlvbiB0eXBlIGlzIHBheQogICAgdHhuIEdyb3VwSW5kZXgKICAgIGludGNfMCAvLyAxCiAgICAtCiAgICBkdXAKICAgIGd0eG5zIFR5cGVFbnVtCiAgICBpbnRjXzAgLy8gcGF5CiAgICA9PQogICAgYXNzZXJ0IC8vIHRyYW5zYWN0aW9uIHR5cGUgaXMgcGF5CiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L2NvbnRyYWN0LnB5OjIyMC0yMjEKICAgIC8vICMgQ3JlYXRlIG5ldyBnYW1lIGluc3RhbmNlIHdpdGggYSB1bmlxdWUgSUQKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgY2FsbHN1YiBuZXdfZ2FtZQogICAgaW50Y18wIC8vIDEKICAgIHJldHVybgoKbWFpbl9jbGFpbV90cm9waHlfcm91dGVAMTM6CiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L2NvbnRyYWN0LnB5OjIwMi0yMDMKICAgIC8vICMgQWxsb3cgdGhlIEFUSCBhZGRyZXNzIHRvIGFkZCB0aGUgdHJvcGh5IHRvIHRoZWlyIGFzc2V0IGJhbGFuY2UgdmlhIGFuIGFzc2V0IHRyYW5zZmVyIGlubmVyIHRyYW5zYWN0aW9uCiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgY2FsbHN1YiBjbGFpbV90cm9waHkKICAgIGludGNfMCAvLyAxCiAgICByZXR1cm4KCm1haW5fbWludF90cm9waHlfcm91dGVAMTI6CiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L2NvbnRyYWN0LnB5OjE1Ni0xNTcKICAgIC8vICMgQWxsb3cgYXBwbGljYXRpb24gY3JlYXRvciB0byBtaW50IGEgb25lLXRpbWUgTkZUIGFzc2V0IHVzZWQgYXMgdHJvcGh5IHRva2VuIHRvIGhvbm9yIHRoZSBBVEggYWRkcmVzcwogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvY29udHJhY3QucHk6MzEtMzIKICAgIC8vICMgU21hcnQgY29udHJhY3QgY2xhc3MKICAgIC8vIGNsYXNzIFBpZW91dChBUkM0Q29udHJhY3QpOgogICAgdHhuIEdyb3VwSW5kZXgKICAgIGludGNfMiAvLyAyCiAgICAtCiAgICBkdXAKICAgIGd0eG5zIFR5cGVFbnVtCiAgICBpbnRjXzAgLy8gcGF5CiAgICA9PQogICAgYXNzZXJ0IC8vIHRyYW5zYWN0aW9uIHR5cGUgaXMgcGF5CiAgICB0eG4gR3JvdXBJbmRleAogICAgaW50Y18wIC8vIDEKICAgIC0KICAgIGR1cAogICAgZ3R4bnMgVHlwZUVudW0KICAgIGludGNfMCAvLyBwYXkKICAgID09CiAgICBhc3NlcnQgLy8gdHJhbnNhY3Rpb24gdHlwZSBpcyBwYXkKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvY29udHJhY3QucHk6MTU2LTE1NwogICAgLy8gIyBBbGxvdyBhcHBsaWNhdGlvbiBjcmVhdG9yIHRvIG1pbnQgYSBvbmUtdGltZSBORlQgYXNzZXQgdXNlZCBhcyB0cm9waHkgdG9rZW4gdG8gaG9ub3IgdGhlIEFUSCBhZGRyZXNzCiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIGNhbGxzdWIgbWludF90cm9waHkKICAgIGludGNfMCAvLyAxCiAgICByZXR1cm4KCm1haW5fZ2VuZXJhdGVfcm91dGVAMTE6CiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L2NvbnRyYWN0LnB5OjE0Mi0xNDMKICAgIC8vICMgR2VuZXJhdGUgdGhlIHNtYXJ0IGNvbnRyYWN0IGFwcGxpY2F0aW9uIGNsaWVudCB3aXRoIGRlZmF1bHQgdmFsdWVzCiAgICAvLyBAYXJjNC5hYmltZXRob2QoY3JlYXRlPSJyZXF1aXJlIikKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICAhCiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIGNyZWF0aW5nCiAgICBjYWxsc3ViIGdlbmVyYXRlCiAgICBpbnRjXzAgLy8gMQogICAgcmV0dXJuCgptYWluX3JlYWRfY29tbWl0X3JhbmRfcm91dGVAMTA6CiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L2NvbnRyYWN0LnB5OjEzMC0xMzEKICAgIC8vICMgUmVhZCB0aGUgc21hcnQgY29udHJhY3QgYXBwbGljYXRpb24gY29tbWl0IHJvdW5kIGJveCBmb3IgZ2l2ZW4gYWNjb3VudAogICAgLy8gQGFyYzQuYWJpbWV0aG9kKHJlYWRvbmx5PVRydWUpCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvY29udHJhY3QucHk6MzEtMzIKICAgIC8vICMgU21hcnQgY29udHJhY3QgY2xhc3MKICAgIC8vIGNsYXNzIFBpZW91dChBUkM0Q29udHJhY3QpOgogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgYnRvaQogICAgdHhuYXMgQWNjb3VudHMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvY29udHJhY3QucHk6MTMwLTEzMQogICAgLy8gIyBSZWFkIHRoZSBzbWFydCBjb250cmFjdCBhcHBsaWNhdGlvbiBjb21taXQgcm91bmQgYm94IGZvciBnaXZlbiBhY2NvdW50CiAgICAvLyBAYXJjNC5hYmltZXRob2QocmVhZG9ubHk9VHJ1ZSkKICAgIGNhbGxzdWIgcmVhZF9jb21taXRfcmFuZAogICAgYnl0ZWMgNSAvLyAweDE1MWY3Yzc1CiAgICBzd2FwCiAgICBjb25jYXQKICAgIGxvZwogICAgaW50Y18wIC8vIDEKICAgIHJldHVybgoKbWFpbl9yZWFkX2dhbWVfcGxheWVyc19yb3V0ZUA5OgogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9jb250cmFjdC5weToxMDktMTEwCiAgICAvLyAjIFJlYWQgdGhlIHNtYXJ0IGNvbnRyYWN0IGFwcGxpY2F0aW9uIGdhbWUgcGxheWVycyBib3ggZm9yIGdpdmVuIGdhbWUgaWQKICAgIC8vIEBhcmM0LmFiaW1ldGhvZChyZWFkb25seT1UcnVlKQogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L2NvbnRyYWN0LnB5OjMxLTMyCiAgICAvLyAjIFNtYXJ0IGNvbnRyYWN0IGNsYXNzCiAgICAvLyBjbGFzcyBQaWVvdXQoQVJDNENvbnRyYWN0KToKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIGJ0b2kKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvY29udHJhY3QucHk6MTA5LTExMAogICAgLy8gIyBSZWFkIHRoZSBzbWFydCBjb250cmFjdCBhcHBsaWNhdGlvbiBnYW1lIHBsYXllcnMgYm94IGZvciBnaXZlbiBnYW1lIGlkCiAgICAvLyBAYXJjNC5hYmltZXRob2QocmVhZG9ubHk9VHJ1ZSkKICAgIGNhbGxzdWIgcmVhZF9nYW1lX3BsYXllcnMKICAgIGJ5dGVjIDUgLy8gMHgxNTFmN2M3NQogICAgc3dhcAogICAgY29uY2F0CiAgICBsb2cKICAgIGludGNfMCAvLyAxCiAgICByZXR1cm4KCm1haW5fcmVhZF9nYW1lX3N0YXRlX3JvdXRlQDg6CiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L2NvbnRyYWN0LnB5OjgxLTgyCiAgICAvLyAjIFJlYWQgdGhlIHNtYXJ0IGNvbnRyYWN0IGFwcGxpY2F0aW9uIGdhbWUgc3RhdGUgYm94IGZvciBnaXZlbiBnYW1lIGlkCiAgICAvLyBAYXJjNC5hYmltZXRob2QocmVhZG9ubHk9VHJ1ZSkKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9jb250cmFjdC5weTozMS0zMgogICAgLy8gIyBTbWFydCBjb250cmFjdCBjbGFzcwogICAgLy8gY2xhc3MgUGllb3V0KEFSQzRDb250cmFjdCk6CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICBidG9pCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L2NvbnRyYWN0LnB5OjgxLTgyCiAgICAvLyAjIFJlYWQgdGhlIHNtYXJ0IGNvbnRyYWN0IGFwcGxpY2F0aW9uIGdhbWUgc3RhdGUgYm94IGZvciBnaXZlbiBnYW1lIGlkCiAgICAvLyBAYXJjNC5hYmltZXRob2QocmVhZG9ubHk9VHJ1ZSkKICAgIGNhbGxzdWIgcmVhZF9nYW1lX3N0YXRlCiAgICBieXRlYyA1IC8vIDB4MTUxZjdjNzUKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICBpbnRjXzAgLy8gMQogICAgcmV0dXJuCgptYWluX3JlYWRfZ2VuX3VuaXhfcm91dGVANzoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvY29udHJhY3QucHk6NzYtNzcKICAgIC8vICMgUmVhZCB0aGUgc21hcnQgY29udHJhY3QgYXBwbGljYXRpb24gZ2VuZXNpcyB0aW1lc3RhbXAgaW4gVW5peCBmb3JtYXQKICAgIC8vIEBhcmM0LmFiaW1ldGhvZChyZWFkb25seT1UcnVlKQogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L2NvbnRyYWN0LnB5Ojc5CiAgICAvLyByZXR1cm4gVGVtcGxhdGVWYXJbVUludDY0XSgiR0VOX1VOSVgiKQogICAgaW50YyAxMyAvLyBUTVBMX0dFTl9VTklYCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L2NvbnRyYWN0LnB5Ojc2LTc3CiAgICAvLyAjIFJlYWQgdGhlIHNtYXJ0IGNvbnRyYWN0IGFwcGxpY2F0aW9uIGdlbmVzaXMgdGltZXN0YW1wIGluIFVuaXggZm9ybWF0CiAgICAvLyBAYXJjNC5hYmltZXRob2QocmVhZG9ubHk9VHJ1ZSkKICAgIGl0b2IKICAgIGJ5dGVjIDUgLy8gMHgxNTFmN2M3NQogICAgc3dhcAogICAgY29uY2F0CiAgICBsb2cKICAgIGludGNfMCAvLyAxCiAgICByZXR1cm4KCm1haW5fY2FsY19zaW5nbGVfYm94X2Nvc3Rfcm91dGVANjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvY29udHJhY3QucHk6NjItNjMKICAgIC8vICMgQ2FsY3VsYXRlIHRoZSBtaW5pbXVtIGJhbGFuY2UgcmVxdWlyZW1lbnQgKE1CUikgY29zdCBmb3Igc3RvcmluZyBhIHNpbmdsZSBib3ggdW5pdAogICAgLy8gQGFyYzQuYWJpbWV0aG9kKHJlYWRvbmx5PVRydWUpCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvY29udHJhY3QucHk6MzEtMzIKICAgIC8vICMgU21hcnQgY29udHJhY3QgY2xhc3MKICAgIC8vIGNsYXNzIFBpZW91dChBUkM0Q29udHJhY3QpOgogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9jb250cmFjdC5weTo2Mi02MwogICAgLy8gIyBDYWxjdWxhdGUgdGhlIG1pbmltdW0gYmFsYW5jZSByZXF1aXJlbWVudCAoTUJSKSBjb3N0IGZvciBzdG9yaW5nIGEgc2luZ2xlIGJveCB1bml0CiAgICAvLyBAYXJjNC5hYmltZXRob2QocmVhZG9ubHk9VHJ1ZSkKICAgIGNhbGxzdWIgY2FsY19zaW5nbGVfYm94X2Nvc3QKICAgIGl0b2IKICAgIGJ5dGVjIDUgLy8gMHgxNTFmN2M3NQogICAgc3dhcAogICAgY29uY2F0CiAgICBsb2cKICAgIGludGNfMCAvLyAxCiAgICByZXR1cm4KCm1haW5fYWRkX3Jlc291cmNlX2J1ZGdldF9wbGF5X2dhbWVfcm91dGVANToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvY29udHJhY3QucHk6NDctNDgKICAgIC8vICMgQWRkIGV4dHJhIGFwcCBjYWxsIHRvIGluY3JlYXNlIHRoZSByZXNvdXJjZSByZWZlcmVuY2UgYnVkZ2V0LCBtdXN0IGJlIGNhbGxlZCB0b2dldGhlciB3aXRoIHBsYXkgZ2FtZQogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvY29udHJhY3QucHk6MzEtMzIKICAgIC8vICMgU21hcnQgY29udHJhY3QgY2xhc3MKICAgIC8vIGNsYXNzIFBpZW91dChBUkM0Q29udHJhY3QpOgogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgYnRvaQogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9jb250cmFjdC5weTo0Ny00OAogICAgLy8gIyBBZGQgZXh0cmEgYXBwIGNhbGwgdG8gaW5jcmVhc2UgdGhlIHJlc291cmNlIHJlZmVyZW5jZSBidWRnZXQsIG11c3QgYmUgY2FsbGVkIHRvZ2V0aGVyIHdpdGggcGxheSBnYW1lCiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIGNhbGxzdWIgYWRkX3Jlc291cmNlX2J1ZGdldF9wbGF5X2dhbWUKICAgIGludGNfMCAvLyAxCiAgICByZXR1cm4KCgovLyBzbWFydF9jb250cmFjdHMucGllb3V0LnN1YnJvdXRpbmVzLnBheW91dF9pdHhuKHJlY2VpdmVyOiBieXRlcywgYW1vdW50OiB1aW50NjQsIG5vdGU6IGJ5dGVzKSAtPiB2b2lkOgpwYXlvdXRfaXR4bjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvc3Vicm91dGluZXMucHk6NTAtNTIKICAgIC8vICMgRXhlY3V0ZSBhIHBheW91dCBwYXltZW50IGlubmVyIHRyYW5zYWN0aW9uCiAgICAvLyBAc3Vicm91dGluZQogICAgLy8gZGVmIHBheW91dF9pdHhuKHJlY2VpdmVyOiBBY2NvdW50LCBhbW91bnQ6IFVJbnQ2NCwgbm90ZTogU3RyaW5nKSAtPiBOb25lOgogICAgcHJvdG8gMyAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L3N1YnJvdXRpbmVzLnB5OjUzLTU3CiAgICAvLyBpdHhuLlBheW1lbnQoCiAgICAvLyAgICAgcmVjZWl2ZXI9cmVjZWl2ZXIsCiAgICAvLyAgICAgYW1vdW50PWFtb3VudCwKICAgIC8vICAgICBub3RlPW5vdGUsCiAgICAvLyApLnN1Ym1pdCgpCiAgICBpdHhuX2JlZ2luCiAgICBmcmFtZV9kaWcgLTEKICAgIGl0eG5fZmllbGQgTm90ZQogICAgZnJhbWVfZGlnIC0yCiAgICBpdHhuX2ZpZWxkIEFtb3VudAogICAgZnJhbWVfZGlnIC0zCiAgICBpdHhuX2ZpZWxkIFJlY2VpdmVyCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L3N1YnJvdXRpbmVzLnB5OjUzCiAgICAvLyBpdHhuLlBheW1lbnQoCiAgICBpbnRjXzAgLy8gcGF5CiAgICBpdHhuX2ZpZWxkIFR5cGVFbnVtCiAgICBpbnRjXzEgLy8gMAogICAgaXR4bl9maWVsZCBGZWUKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvc3Vicm91dGluZXMucHk6NTMtNTcKICAgIC8vIGl0eG4uUGF5bWVudCgKICAgIC8vICAgICByZWNlaXZlcj1yZWNlaXZlciwKICAgIC8vICAgICBhbW91bnQ9YW1vdW50LAogICAgLy8gICAgIG5vdGU9bm90ZSwKICAgIC8vICkuc3VibWl0KCkKICAgIGl0eG5fc3VibWl0CiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMucGllb3V0LnN1YnJvdXRpbmVzLnJlc29sdmVfcmVjZWl2ZXJfYnlfcHJpbyhhY2MxOiBieXRlcywgYWNjMjogYnl0ZXMsIGFjYzM6IGJ5dGVzKSAtPiBieXRlczoKcmVzb2x2ZV9yZWNlaXZlcl9ieV9wcmlvOgogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9zdWJyb3V0aW5lcy5weTo1OS02NQogICAgLy8gIyBSZXNvbHZlIHJlY2lldmVyIGFjY291bnQgYWRkcmVzcyBieSBwcmlvcml0eQogICAgLy8gQHN1YnJvdXRpbmUKICAgIC8vIGRlZiByZXNvbHZlX3JlY2VpdmVyX2J5X3ByaW8oCiAgICAvLyAgICAgYWNjMTogQWNjb3VudCwKICAgIC8vICAgICBhY2MyOiBBY2NvdW50LAogICAgLy8gICAgIGFjYzM6IEFjY291bnQsCiAgICAvLyApIC0+IEFjY291bnQ6CiAgICBwcm90byAzIDEKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvc3Vicm91dGluZXMucHk6NjYKICAgIC8vIGlmIGFjYzEgIT0gR2xvYmFsLnplcm9fYWRkcmVzcyBhbmQgb3AuQWNjdFBhcmFtc0dldC5hY2N0X2JhbGFuY2UoYWNjMSlbMV06CiAgICBmcmFtZV9kaWcgLTMKICAgIGdsb2JhbCBaZXJvQWRkcmVzcwogICAgIT0KICAgIGJ6IHJlc29sdmVfcmVjZWl2ZXJfYnlfcHJpb19lbHNlX2JvZHlAMwogICAgZnJhbWVfZGlnIC0zCiAgICBhY2N0X3BhcmFtc19nZXQgQWNjdEJhbGFuY2UKICAgIGJ1cnkgMQogICAgYnogcmVzb2x2ZV9yZWNlaXZlcl9ieV9wcmlvX2Vsc2VfYm9keUAzCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L3N1YnJvdXRpbmVzLnB5OjY3CiAgICAvLyByZXR1cm4gYWNjMQogICAgZnJhbWVfZGlnIC0zCiAgICByZXRzdWIKCnJlc29sdmVfcmVjZWl2ZXJfYnlfcHJpb19lbHNlX2JvZHlAMzoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvc3Vicm91dGluZXMucHk6NjgKICAgIC8vIGVsaWYgYWNjMiAhPSBHbG9iYWwuemVyb19hZGRyZXNzIGFuZCBvcC5BY2N0UGFyYW1zR2V0LmFjY3RfYmFsYW5jZShhY2MyKVsxXToKICAgIGZyYW1lX2RpZyAtMgogICAgZ2xvYmFsIFplcm9BZGRyZXNzCiAgICAhPQogICAgYnogcmVzb2x2ZV9yZWNlaXZlcl9ieV9wcmlvX2Vsc2VfYm9keUA2CiAgICBmcmFtZV9kaWcgLTIKICAgIGFjY3RfcGFyYW1zX2dldCBBY2N0QmFsYW5jZQogICAgYnVyeSAxCiAgICBieiByZXNvbHZlX3JlY2VpdmVyX2J5X3ByaW9fZWxzZV9ib2R5QDYKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvc3Vicm91dGluZXMucHk6NjkKICAgIC8vIHJldHVybiBhY2MyCiAgICBmcmFtZV9kaWcgLTIKICAgIHJldHN1YgoKcmVzb2x2ZV9yZWNlaXZlcl9ieV9wcmlvX2Vsc2VfYm9keUA2OgogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9zdWJyb3V0aW5lcy5weTo3MAogICAgLy8gZWxpZiBhY2MzICE9IEdsb2JhbC56ZXJvX2FkZHJlc3MgYW5kIG9wLkFjY3RQYXJhbXNHZXQuYWNjdF9iYWxhbmNlKGFjYzMpWzFdOgogICAgZnJhbWVfZGlnIC0xCiAgICBnbG9iYWwgWmVyb0FkZHJlc3MKICAgICE9CiAgICBieiByZXNvbHZlX3JlY2VpdmVyX2J5X3ByaW9fZWxzZV9ib2R5QDkKICAgIGZyYW1lX2RpZyAtMQogICAgYWNjdF9wYXJhbXNfZ2V0IEFjY3RCYWxhbmNlCiAgICBidXJ5IDEKICAgIGJ6IHJlc29sdmVfcmVjZWl2ZXJfYnlfcHJpb19lbHNlX2JvZHlAOQogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9zdWJyb3V0aW5lcy5weTo3MQogICAgLy8gcmV0dXJuIGFjYzMKICAgIGZyYW1lX2RpZyAtMQogICAgcmV0c3ViCgpyZXNvbHZlX3JlY2VpdmVyX2J5X3ByaW9fZWxzZV9ib2R5QDk6CiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L3N1YnJvdXRpbmVzLnB5OjczCiAgICAvLyBUeG4uc2VuZGVyICE9IEdsb2JhbC56ZXJvX2FkZHJlc3MKICAgIHR4biBTZW5kZXIKICAgIGdsb2JhbCBaZXJvQWRkcmVzcwogICAgIT0KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvc3Vicm91dGluZXMucHk6NzMtNzQKICAgIC8vIFR4bi5zZW5kZXIgIT0gR2xvYmFsLnplcm9fYWRkcmVzcwogICAgLy8gYW5kIG9wLkFjY3RQYXJhbXNHZXQuYWNjdF9iYWxhbmNlKFR4bi5zZW5kZXIpWzFdCiAgICBieiByZXNvbHZlX3JlY2VpdmVyX2J5X3ByaW9fZWxzZV9ib2R5QDEyCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L3N1YnJvdXRpbmVzLnB5Ojc0CiAgICAvLyBhbmQgb3AuQWNjdFBhcmFtc0dldC5hY2N0X2JhbGFuY2UoVHhuLnNlbmRlcilbMV0KICAgIHR4biBTZW5kZXIKICAgIGFjY3RfcGFyYW1zX2dldCBBY2N0QmFsYW5jZQogICAgYnVyeSAxCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L3N1YnJvdXRpbmVzLnB5OjczLTc0CiAgICAvLyBUeG4uc2VuZGVyICE9IEdsb2JhbC56ZXJvX2FkZHJlc3MKICAgIC8vIGFuZCBvcC5BY2N0UGFyYW1zR2V0LmFjY3RfYmFsYW5jZShUeG4uc2VuZGVyKVsxXQogICAgYnogcmVzb2x2ZV9yZWNlaXZlcl9ieV9wcmlvX2Vsc2VfYm9keUAxMgogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9zdWJyb3V0aW5lcy5weTo3NgogICAgLy8gcmV0dXJuIFR4bi5zZW5kZXIKICAgIHR4biBTZW5kZXIKICAgIHJldHN1YgoKcmVzb2x2ZV9yZWNlaXZlcl9ieV9wcmlvX2Vsc2VfYm9keUAxMjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvc3Vicm91dGluZXMucHk6NzgKICAgIC8vIHJldHVybiBHbG9iYWwuY3VycmVudF9hcHBsaWNhdGlvbl9hZGRyZXNzCiAgICBnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwogICAgcmV0c3ViCgoKLy8gc21hcnRfY29udHJhY3RzLnBpZW91dC5zdWJyb3V0aW5lcy5yZXNldF9ib3hfY29tbWl0X3JhbmQoYm94X2NvbW1pdF9yYW5kOiBieXRlcywgYWNjb3VudDogYnl0ZXMsIHJvdW5kX2RlbHRhOiB1aW50NjQpIC0+IHZvaWQ6CnJlc2V0X2JveF9jb21taXRfcmFuZDoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvc3Vicm91dGluZXMucHk6ODAtODYKICAgIC8vICMgUmVzZXQgYm94IGNvbW1pdCByYW5kIHZhbHVlcyBiYWNrIHRvIGl0cyBpbml0aWFsIGRlZmF1bHQgc3RhdGUKICAgIC8vIEBzdWJyb3V0aW5lCiAgICAvLyBkZWYgcmVzZXRfYm94X2NvbW1pdF9yYW5kKAogICAgLy8gICAgIGJveF9jb21taXRfcmFuZDogQm94TWFwW0FjY291bnQsIHN0Yy5Db21taXRSYW5kXSwKICAgIC8vICAgICBhY2NvdW50OiBBY2NvdW50LAogICAgLy8gICAgIHJvdW5kX2RlbHRhOiBVSW50NjQKICAgIC8vICAgICApIC0+IE5vbmU6CiAgICBwcm90byAzIDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvc3Vicm91dGluZXMucHk6OTAKICAgIC8vIGV4cGlyeV9yb3VuZD1hcmM0LlVJbnQ2NChHbG9iYWwucm91bmQgKyByb3VuZF9kZWx0YSksCiAgICBnbG9iYWwgUm91bmQKICAgIGZyYW1lX2RpZyAtMQogICAgKwogICAgaXRvYgogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9zdWJyb3V0aW5lcy5weTo4Ny05MQogICAgLy8gYm94X2NvbW1pdF9yYW5kW2FjY291bnRdID0gc3RjLkNvbW1pdFJhbmQoCiAgICAvLyAgICAgZ2FtZV9pZD1hcmM0LlVJbnQ2NCgwKSwKICAgIC8vICAgICBjb21taXRfcm91bmQ9YXJjNC5VSW50NjQoMCksCiAgICAvLyAgICAgZXhwaXJ5X3JvdW5kPWFyYzQuVUludDY0KEdsb2JhbC5yb3VuZCArIHJvdW5kX2RlbHRhKSwKICAgIC8vICkKICAgIHB1c2hieXRlcyAweDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwCiAgICBzd2FwCiAgICBjb25jYXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvc3Vicm91dGluZXMucHk6ODcKICAgIC8vIGJveF9jb21taXRfcmFuZFthY2NvdW50XSA9IHN0Yy5Db21taXRSYW5kKAogICAgZnJhbWVfZGlnIC0zCiAgICBmcmFtZV9kaWcgLTIKICAgIGNvbmNhdAogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9zdWJyb3V0aW5lcy5weTo4Ny05MQogICAgLy8gYm94X2NvbW1pdF9yYW5kW2FjY291bnRdID0gc3RjLkNvbW1pdFJhbmQoCiAgICAvLyAgICAgZ2FtZV9pZD1hcmM0LlVJbnQ2NCgwKSwKICAgIC8vICAgICBjb21taXRfcm91bmQ9YXJjNC5VSW50NjQoMCksCiAgICAvLyAgICAgZXhwaXJ5X3JvdW5kPWFyYzQuVUludDY0KEdsb2JhbC5yb3VuZCArIHJvdW5kX2RlbHRhKSwKICAgIC8vICkKICAgIHN3YXAKICAgIGJveF9wdXQKICAgIHJldHN1YgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy5waWVvdXQuc3Vicm91dGluZXMuY2hlY2tfYWNjX2luX2dhbWUoZ2FtZV9pZDogdWludDY0LCBhY2NvdW50OiBieXRlcywgYm94X2dhbWVfcGxheWVyczogYnl0ZXMsIHBsYXllcl9jb3VudDogdWludDY0LCBjbGVhcl9wbGF5ZXI6IHVpbnQ2NCkgLT4gdWludDY0OgpjaGVja19hY2NfaW5fZ2FtZToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvc3Vicm91dGluZXMucHk6OTMtMTAxCiAgICAvLyAjIENoZWNrIGlmIGFjY291bnQgaXMgYW4gYWN0aXZlIHBsYXllciBvZiBhIHZhbGlkIGdhbWUgaW5zdGFuY2UKICAgIC8vIEBzdWJyb3V0aW5lCiAgICAvLyBkZWYgY2hlY2tfYWNjX2luX2dhbWUoCiAgICAvLyAgICAgZ2FtZV9pZDogVUludDY0LAogICAgLy8gICAgIGFjY291bnQ6IEFjY291bnQsCiAgICAvLyAgICAgYm94X2dhbWVfcGxheWVyczogQm94TWFwW1VJbnQ2NCwgQnl0ZXNdLAogICAgLy8gICAgIHBsYXllcl9jb3VudDogVUludDY0LAogICAgLy8gICAgIGNsZWFyX3BsYXllcjogYm9vbCwgICMgbm9xYTogRkJUMDAxCiAgICAvLyApIC0+IGJvb2w6CiAgICBwcm90byA1IDEKICAgIGludGNfMSAvLyAwCiAgICBwdXNoYnl0ZXMgIiIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvc3Vicm91dGluZXMucHk6MTAyLTEwMwogICAgLy8gIyBDYWxjdWxhdGUgdG90YWwgYnl0ZSBsZW5ndGggdG8gaXRlcmF0ZSBvdmVyIGJhc2VkIG9uIHBsYXllciBjb3VudCBhbmQgYWRkcmVzcyBzaXplCiAgICAvLyBnYW1lX3BsYXllcnNfbGVuZ3RoID0gcGxheWVyX2NvdW50ICogY3N0LkFERFJFU1NfU0laRQogICAgZnJhbWVfZGlnIC0yCiAgICBpbnRjXzMgLy8gMzIKICAgICoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvc3Vicm91dGluZXMucHk6MTA1LTEwNgogICAgLy8gIyBJbml0aWFsaXplIGZsYWcgdG8gdHJhY2sgaWYgYWNjb3VudCBpcyBmb3VuZCBpbiBnYW1lCiAgICAvLyBhY2NfaW5fZ2FtZSA9IEZhbHNlCiAgICBpbnRjXzEgLy8gMAogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9zdWJyb3V0aW5lcy5weToxMDgtMTA5CiAgICAvLyAjIEl0ZXJhdGUgdGhyb3VnaCB0aGUgcGxheWVyIGJ5dGUgYXJyYXkgaW4gMzItYnl0ZSBjaHVua3MgKG9uZSBhZGRyZXNzIHBlciBjaHVuaykKICAgIC8vIGZvciBpIGluIHVyYW5nZSgwLCBnYW1lX3BsYXllcnNfbGVuZ3RoLCBjc3QuQUREUkVTU19TSVpFKToKICAgIGR1cAoKY2hlY2tfYWNjX2luX2dhbWVfZm9yX2hlYWRlckAxOgogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9zdWJyb3V0aW5lcy5weToxMDgtMTA5CiAgICAvLyAjIEl0ZXJhdGUgdGhyb3VnaCB0aGUgcGxheWVyIGJ5dGUgYXJyYXkgaW4gMzItYnl0ZSBjaHVua3MgKG9uZSBhZGRyZXNzIHBlciBjaHVuaykKICAgIC8vIGZvciBpIGluIHVyYW5nZSgwLCBnYW1lX3BsYXllcnNfbGVuZ3RoLCBjc3QuQUREUkVTU19TSVpFKToKICAgIGZyYW1lX2RpZyA0CiAgICBmcmFtZV9kaWcgMgogICAgPAogICAgZnJhbWVfZGlnIDMKICAgIGZyYW1lX2J1cnkgMQogICAgYnogY2hlY2tfYWNjX2luX2dhbWVfYWZ0ZXJfZm9yQDgKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvc3Vicm91dGluZXMucHk6MTEwLTExMQogICAgLy8gIyBFeHRyYWN0IHRoZSAzMi1ieXRlIHBsYXllciBhZGRyZXNzIGF0IHN0YXJ0IGluZGV4IGkKICAgIC8vIHBsYXllcl9hZGRyX2J5dGVzID0gb3AuZXh0cmFjdChib3hfZ2FtZV9wbGF5ZXJzW2dhbWVfaWRdLCBpLCBjc3QuQUREUkVTU19TSVpFKQogICAgZnJhbWVfZGlnIC01CiAgICBpdG9iCiAgICBmcmFtZV9kaWcgLTMKICAgIHN3YXAKICAgIGNvbmNhdAogICAgZHVwCiAgICBmcmFtZV9idXJ5IDAKICAgIGJveF9nZXQKICAgIGFzc2VydCAvLyBjaGVjayBCb3hNYXAgZW50cnkgZXhpc3RzCiAgICBmcmFtZV9kaWcgNAogICAgaW50Y18zIC8vIDMyCiAgICBleHRyYWN0MwogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9zdWJyb3V0aW5lcy5weToxMTMtMTE0CiAgICAvLyAjIENoZWNrIGlmIHRoZSBleHRyYWN0ZWQgcGxheWVyIGFkZHJlc3MgYnl0ZXMgbWF0Y2ggdXAgd2l0aCB0aGUgYWNjb3VudCBieXRlcwogICAgLy8gaWYgYWNjb3VudC5ieXRlcyA9PSBwbGF5ZXJfYWRkcl9ieXRlczoKICAgIGZyYW1lX2RpZyAtNAogICAgPT0KICAgIGJ6IGNoZWNrX2FjY19pbl9nYW1lX2FmdGVyX2lmX2Vsc2VANgogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9zdWJyb3V0aW5lcy5weToxMTUKICAgIC8vIGFjY19pbl9nYW1lID0gVHJ1ZQogICAgaW50Y18wIC8vIDEKICAgIGZyYW1lX2J1cnkgMwogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9zdWJyb3V0aW5lcy5weToxMTctMTE4CiAgICAvLyAjIE9wdGlvbmFsbHkgY2xlYXIgdGhpcyBwbGF5ZXIgZnJvbSB0aGUgYm94IGJ5IHJlcGxhY2luZyB0aGVpciBhZGRyZXNzIHdpdGggemVybyBieXRlcwogICAgLy8gaWYgY2xlYXJfcGxheWVyOgogICAgZnJhbWVfZGlnIC0xCiAgICBieiBjaGVja19hY2NfaW5fZ2FtZV9hZnRlcl9pZl9lbHNlQDUKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvc3Vicm91dGluZXMucHk6MTIwCiAgICAvLyBnYW1lX3BsYXllcnNfYnJlZi5yZXBsYWNlKGksIGNzdC5aRVJPX0FERFJfQllURVMpCiAgICBmcmFtZV9kaWcgMAogICAgZnJhbWVfZGlnIDQKICAgIGJ5dGVjIDggLy8gMHgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwCiAgICBib3hfcmVwbGFjZQoKY2hlY2tfYWNjX2luX2dhbWVfYWZ0ZXJfaWZfZWxzZUA1OgogICAgZnJhbWVfZGlnIDMKICAgIGZyYW1lX2J1cnkgMQoKY2hlY2tfYWNjX2luX2dhbWVfYWZ0ZXJfZm9yQDg6CiAgICBmcmFtZV9kaWcgMQogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9zdWJyb3V0aW5lcy5weToxMjUtMTI2CiAgICAvLyAjIFJldHVybiBUcnVlIGlmIGFjY291bnQgd2FzIGZvdW5kIGluIHRoZSBnYW1lLCBlbHNlIEZhbHNlCiAgICAvLyByZXR1cm4gYWNjX2luX2dhbWUKICAgIGZyYW1lX2J1cnkgMAogICAgcmV0c3ViCgpjaGVja19hY2NfaW5fZ2FtZV9hZnRlcl9pZl9lbHNlQDY6CiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L3N1YnJvdXRpbmVzLnB5OjEwOC0xMDkKICAgIC8vICMgSXRlcmF0ZSB0aHJvdWdoIHRoZSBwbGF5ZXIgYnl0ZSBhcnJheSBpbiAzMi1ieXRlIGNodW5rcyAob25lIGFkZHJlc3MgcGVyIGNodW5rKQogICAgLy8gZm9yIGkgaW4gdXJhbmdlKDAsIGdhbWVfcGxheWVyc19sZW5ndGgsIGNzdC5BRERSRVNTX1NJWkUpOgogICAgZnJhbWVfZGlnIDQKICAgIGludGNfMyAvLyAzMgogICAgKwogICAgZnJhbWVfYnVyeSA0CiAgICBiIGNoZWNrX2FjY19pbl9nYW1lX2Zvcl9oZWFkZXJAMQoKCi8vIHNtYXJ0X2NvbnRyYWN0cy5waWVvdXQuc3Vicm91dGluZXMuaXNfZ2FtZV9saXZlKGdhbWVfc3RhdGU6IGJ5dGVzKSAtPiBieXRlcywgYnl0ZXM6CmlzX2dhbWVfbGl2ZToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvc3Vicm91dGluZXMucHk6MjA3LTIwOQogICAgLy8gIyBDaGVjayBpZiBnYW1lIGlzIGxpdmUgYW5kIGV4ZWN1dGUgaXRzIGNvbmRpdGlvbmFsIGxvZ2ljCiAgICAvLyBAc3Vicm91dGluZQogICAgLy8gZGVmIGlzX2dhbWVfbGl2ZShnYW1lX3N0YXRlOiBzdGMuR2FtZVN0YXRlKSAtPiBhcmM0LkJvb2w6CiAgICBwcm90byAxIDIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvc3Vicm91dGluZXMucHk6MjEyCiAgICAvLyBnYW1lX3N0YXRlLmV4cGlyeV90cyA8IEdsb2JhbC5sYXRlc3RfdGltZXN0YW1wICAjIElmIGRlYWRsaW5lIGV4cGlyZWQKICAgIGZyYW1lX2RpZyAtMQogICAgZXh0cmFjdCA4IDggLy8gb24gZXJyb3I6IEluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICBnbG9iYWwgTGF0ZXN0VGltZXN0YW1wCiAgICBpdG9iCiAgICBiPAogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9zdWJyb3V0aW5lcy5weToyMTItMjEzCiAgICAvLyBnYW1lX3N0YXRlLmV4cGlyeV90cyA8IEdsb2JhbC5sYXRlc3RfdGltZXN0YW1wICAjIElmIGRlYWRsaW5lIGV4cGlyZWQKICAgIC8vIG9yIGdhbWVfc3RhdGUuYWN0aXZlX3BsYXllcnMgPT0gZ2FtZV9zdGF0ZS5tYXhfcGxheWVycyAgIyBJZiBsb2JieSBmdWxsCiAgICBibnogaXNfZ2FtZV9saXZlX2lmX2JvZHlAMgogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9zdWJyb3V0aW5lcy5weToyMTMKICAgIC8vIG9yIGdhbWVfc3RhdGUuYWN0aXZlX3BsYXllcnMgPT0gZ2FtZV9zdGF0ZS5tYXhfcGxheWVycyAgIyBJZiBsb2JieSBmdWxsCiAgICBmcmFtZV9kaWcgLTEKICAgIGV4dHJhY3QgMiAxIC8vIG9uIGVycm9yOiBJbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgZnJhbWVfZGlnIC0xCiAgICBleHRyYWN0IDEgMSAvLyBvbiBlcnJvcjogSW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIGI9PQogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9zdWJyb3V0aW5lcy5weToyMTItMjEzCiAgICAvLyBnYW1lX3N0YXRlLmV4cGlyeV90cyA8IEdsb2JhbC5sYXRlc3RfdGltZXN0YW1wICAjIElmIGRlYWRsaW5lIGV4cGlyZWQKICAgIC8vIG9yIGdhbWVfc3RhdGUuYWN0aXZlX3BsYXllcnMgPT0gZ2FtZV9zdGF0ZS5tYXhfcGxheWVycyAgIyBJZiBsb2JieSBmdWxsCiAgICBieiBpc19nYW1lX2xpdmVfZWxzZV9ib2R5QDcKCmlzX2dhbWVfbGl2ZV9pZl9ib2R5QDI6CiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L3N1YnJvdXRpbmVzLnB5OjIxNS0yMTYKICAgIC8vICMgTWFyayBqb2luIHBoYXNlIGFzIGNvbXBsZXRlIHdoZW4gc3Rha2luZyBmaW5hbGl6ZWQgZXZhbHVhdGVzIFRydWUKICAgIC8vIGdhbWVfc3RhdGUuc3Rha2luZ19maW5hbGl6ZWQgPSBhcmM0LkJvb2woVHJ1ZSkgICMgbm9xYTogRkJUMDAzCiAgICBmcmFtZV9kaWcgLTEKICAgIGludGNfMSAvLyAwCiAgICBpbnRjXzAgLy8gMQogICAgc2V0Yml0CiAgICBmcmFtZV9idXJ5IC0xCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L3N1YnJvdXRpbmVzLnB5OjIyMAogICAgLy8gR2xvYmFsLmxhdGVzdF90aW1lc3RhbXAgKyBVSW50NjQoY3N0LkVYUElSWV9JTlRFUlZBTCkKICAgIGdsb2JhbCBMYXRlc3RUaW1lc3RhbXAKICAgIGludGMgNSAvLyAzNjAwCiAgICArCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L3N1YnJvdXRpbmVzLnB5OjIxOC0yMjEKICAgIC8vICMgRXN0YWJsaXNoIGdhbWUgcGxheSB3aW5kb3cgYnkgc2V0dGluZyBleHBpcnkgdGltZXN0YW1wCiAgICAvLyBnYW1lX3N0YXRlLmV4cGlyeV90cyA9IGFyYzQuVUludDY0KAogICAgLy8gICAgIEdsb2JhbC5sYXRlc3RfdGltZXN0YW1wICsgVUludDY0KGNzdC5FWFBJUllfSU5URVJWQUwpCiAgICAvLyApCiAgICBpdG9iCiAgICBmcmFtZV9kaWcgLTEKICAgIHN3YXAKICAgIHJlcGxhY2UyIDgKICAgIGR1cAogICAgZnJhbWVfYnVyeSAtMQogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9zdWJyb3V0aW5lcy5weToyMjYKICAgIC8vIGdhbWVfc3RhdGUuc3Rha2luZ19maW5hbGl6ZWQsCiAgICBpbnRjXzEgLy8gMAogICAgZ2V0Yml0CiAgICBieXRlY18xIC8vIDB4MDAKICAgIGludGNfMSAvLyAwCiAgICB1bmNvdmVyIDIKICAgIHNldGJpdAogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9zdWJyb3V0aW5lcy5weToyMjcKICAgIC8vIGdhbWVfc3RhdGUuZXhwaXJ5X3RzLAogICAgZnJhbWVfZGlnIC0xCiAgICBleHRyYWN0IDggOCAvLyBvbiBlcnJvcjogSW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvc3Vicm91dGluZXMucHk6MjIzLTIyOAogICAgLy8gIyBFbWl0IEFSQy0yOCBldmVudCBmb3Igb2ZmLWNoYWluIHRyYWNraW5nCiAgICAvLyBhcmM0LmVtaXQoCiAgICAvLyAgICAgImdhbWVfbGl2ZShib29sLHVpbnQ2NCkiLAogICAgLy8gICAgIGdhbWVfc3RhdGUuc3Rha2luZ19maW5hbGl6ZWQsCiAgICAvLyAgICAgZ2FtZV9zdGF0ZS5leHBpcnlfdHMsCiAgICAvLyApCiAgICBjb25jYXQKICAgIHB1c2hieXRlcyAweGYxZjMyOTRhIC8vIG1ldGhvZCAiZ2FtZV9saXZlKGJvb2wsdWludDY0KSIKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L3N1YnJvdXRpbmVzLnB5OjIzMAogICAgLy8gcmV0dXJuIGFyYzQuQm9vbChUcnVlKSAgIyBub3FhOiBGQlQwMDMKICAgIHB1c2hieXRlcyAweDgwCiAgICBmcmFtZV9kaWcgLTEKICAgIHJldHN1YgoKaXNfZ2FtZV9saXZlX2Vsc2VfYm9keUA3OgogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9zdWJyb3V0aW5lcy5weToyMzIKICAgIC8vIHJldHVybiBhcmM0LkJvb2woRmFsc2UpICAjIG5vcWE6IEZCVDAwMwogICAgYnl0ZWNfMSAvLyAweDAwCiAgICBmcmFtZV9kaWcgLTEKICAgIHJldHN1YgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy5waWVvdXQuc3Vicm91dGluZXMuaXNfZ2FtZV9vdmVyKGdhbWVfaWQ6IHVpbnQ2NCwgZ2FtZV9zdGF0ZTogYnl0ZXMsIGJveF9nYW1lX3BsYXllcnM6IGJ5dGVzLCBib3hfY29tbWl0X3JhbmQ6IGJ5dGVzKSAtPiBieXRlcywgYnl0ZXM6CmlzX2dhbWVfb3ZlcjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvc3Vicm91dGluZXMucHk6MjM0LTI0MQogICAgLy8gIyBDaGVjayBpZiBnYW1lIGlzIG92ZXIgYW5kIGV4ZWN1dGUgaXRzIGNvbmRpdGlvbmFsIGxvZ2ljCiAgICAvLyBAc3Vicm91dGluZQogICAgLy8gZGVmIGlzX2dhbWVfb3ZlcigKICAgIC8vICAgICBnYW1lX2lkOiBVSW50NjQsCiAgICAvLyAgICAgZ2FtZV9zdGF0ZTogc3RjLkdhbWVTdGF0ZSwKICAgIC8vICAgICBib3hfZ2FtZV9wbGF5ZXJzOiBCb3hNYXBbVUludDY0LCBCeXRlc10sCiAgICAvLyAgICAgYm94X2NvbW1pdF9yYW5kOiBCb3hNYXBbQWNjb3VudCwgc3RjLkNvbW1pdFJhbmRdLAogICAgLy8gKSAtPiBhcmM0LkJvb2w6CiAgICBwcm90byA0IDIKICAgIGludGNfMSAvLyAwCiAgICBkdXBuIDcKICAgIHB1c2hieXRlcyAiIgogICAgZHVwbiA0CiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L3N1YnJvdXRpbmVzLnB5OjI0NAogICAgLy8gZ2FtZV9zdGF0ZS5leHBpcnlfdHMgPCBHbG9iYWwubGF0ZXN0X3RpbWVzdGFtcCAgIyBJZiBkZWFkbGluZSBleHBpcmVkCiAgICBmcmFtZV9kaWcgLTMKICAgIGV4dHJhY3QgOCA4IC8vIG9uIGVycm9yOiBJbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgZ2xvYmFsIExhdGVzdFRpbWVzdGFtcAogICAgaXRvYgogICAgYjwKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvc3Vicm91dGluZXMucHk6MjQ0LTI0NQogICAgLy8gZ2FtZV9zdGF0ZS5leHBpcnlfdHMgPCBHbG9iYWwubGF0ZXN0X3RpbWVzdGFtcCAgIyBJZiBkZWFkbGluZSBleHBpcmVkCiAgICAvLyBvciBnYW1lX3N0YXRlLmFjdGl2ZV9wbGF5ZXJzLm5hdGl2ZSA9PSAwICAjIElmIG5vIG1vcmUgYWN0aXZlIHBsYXllcnMKICAgIGJueiBpc19nYW1lX292ZXJfaWZfYm9keUAyCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L3N1YnJvdXRpbmVzLnB5OjI0NQogICAgLy8gb3IgZ2FtZV9zdGF0ZS5hY3RpdmVfcGxheWVycy5uYXRpdmUgPT0gMCAgIyBJZiBubyBtb3JlIGFjdGl2ZSBwbGF5ZXJzCiAgICBmcmFtZV9kaWcgLTMKICAgIGludGNfMiAvLyAyCiAgICBnZXRieXRlCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L3N1YnJvdXRpbmVzLnB5OjI0NC0yNDUKICAgIC8vIGdhbWVfc3RhdGUuZXhwaXJ5X3RzIDwgR2xvYmFsLmxhdGVzdF90aW1lc3RhbXAgICMgSWYgZGVhZGxpbmUgZXhwaXJlZAogICAgLy8gb3IgZ2FtZV9zdGF0ZS5hY3RpdmVfcGxheWVycy5uYXRpdmUgPT0gMCAgIyBJZiBubyBtb3JlIGFjdGl2ZSBwbGF5ZXJzCiAgICBibnogaXNfZ2FtZV9vdmVyX2Vsc2VfYm9keUAyNQoKaXNfZ2FtZV9vdmVyX2lmX2JvZHlAMjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvc3Vicm91dGluZXMucHk6MjQ3LTI0OAogICAgLy8gIyBSZXNldCBib3ggY29tbWl0IHJhbmQgZmllbGRzIHRvIGRlZmF1bHQgc3RhcnQgdmFsdWVzIGZvciBhbnkgcmVtYWluaW5nIHBsYXllcnMKICAgIC8vIGdhbWVfcGxheWVyc19icmVmID0gQm94UmVmKGtleT1ib3hfZ2FtZV9wbGF5ZXJzLmtleV9wcmVmaXggKyBvcC5pdG9iKGdhbWVfaWQpKQogICAgZnJhbWVfZGlnIC00CiAgICBpdG9iCiAgICBmcmFtZV9kaWcgLTIKICAgIHN3YXAKICAgIGNvbmNhdAogICAgZHVwCiAgICBmcmFtZV9idXJ5IDEKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvc3Vicm91dGluZXMucHk6MjQ5CiAgICAvLyBmb3IgaSBpbiB1cmFuZ2UoMCwgZ2FtZV9wbGF5ZXJzX2JyZWYubGVuZ3RoLCAzMik6CiAgICBib3hfbGVuCiAgICBzd2FwCiAgICBmcmFtZV9idXJ5IDEyCiAgICBhc3NlcnQgLy8gY2hlY2sgQm94UmVmIGV4aXN0cwogICAgaW50Y18xIC8vIDAKICAgIGZyYW1lX2J1cnkgOQoKaXNfZ2FtZV9vdmVyX2Zvcl9oZWFkZXJAMzoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvc3Vicm91dGluZXMucHk6MjQ5CiAgICAvLyBmb3IgaSBpbiB1cmFuZ2UoMCwgZ2FtZV9wbGF5ZXJzX2JyZWYubGVuZ3RoLCAzMik6CiAgICBmcmFtZV9kaWcgOQogICAgZnJhbWVfZGlnIDEyCiAgICA8CiAgICBieiBpc19nYW1lX292ZXJfYWZ0ZXJfZm9yQDgKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvc3Vicm91dGluZXMucHk6MjUwCiAgICAvLyBwbGF5ZXJfYWRkcl9ieXRlcyA9IGdhbWVfcGxheWVyc19icmVmLmV4dHJhY3QoaSwgMzIpCiAgICBmcmFtZV9kaWcgMQogICAgZnJhbWVfZGlnIDkKICAgIGludGNfMyAvLyAzMgogICAgYm94X2V4dHJhY3QKICAgIGR1cAogICAgZnJhbWVfYnVyeSAyCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L3N1YnJvdXRpbmVzLnB5OjI1MQogICAgLy8gaWYgcGxheWVyX2FkZHJfYnl0ZXMgIT0gQnl0ZXMoY3N0LlpFUk9fQUREUl9CWVRFUyk6CiAgICBieXRlYyA4IC8vIDB4MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMAogICAgIT0KICAgIGJ6IGlzX2dhbWVfb3Zlcl9hZnRlcl9pZl9lbHNlQDYKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvc3Vicm91dGluZXMucHk6MjUzLTI1OAogICAgLy8gIyBSZXNldCBib3ggY29tbWl0IHJhbmQgZmllbGRzIGJhY2sgdG8gdGhlaXIgb3JpZ2luYWwgc3RhcnQgdmFsdWVzCiAgICAvLyByZXNldF9ib3hfY29tbWl0X3JhbmQoCiAgICAvLyAgICAgYm94X2NvbW1pdF9yYW5kPWJveF9jb21taXRfcmFuZCwKICAgIC8vICAgICBhY2NvdW50PXBsYXllciwKICAgIC8vICAgICByb3VuZF9kZWx0YT1VSW50NjQoY3N0LkJPWF9DX0VYUF9ST1VORF9ERUxUQSkKICAgIC8vICkKICAgIGZyYW1lX2RpZyAtMQogICAgZnJhbWVfZGlnIDIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvc3Vicm91dGluZXMucHk6MjU3CiAgICAvLyByb3VuZF9kZWx0YT1VSW50NjQoY3N0LkJPWF9DX0VYUF9ST1VORF9ERUxUQSkKICAgIGludGMgNiAvLyAzMjAwMAogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9zdWJyb3V0aW5lcy5weToyNTMtMjU4CiAgICAvLyAjIFJlc2V0IGJveCBjb21taXQgcmFuZCBmaWVsZHMgYmFjayB0byB0aGVpciBvcmlnaW5hbCBzdGFydCB2YWx1ZXMKICAgIC8vIHJlc2V0X2JveF9jb21taXRfcmFuZCgKICAgIC8vICAgICBib3hfY29tbWl0X3JhbmQ9Ym94X2NvbW1pdF9yYW5kLAogICAgLy8gICAgIGFjY291bnQ9cGxheWVyLAogICAgLy8gICAgIHJvdW5kX2RlbHRhPVVJbnQ2NChjc3QuQk9YX0NfRVhQX1JPVU5EX0RFTFRBKQogICAgLy8gKQogICAgY2FsbHN1YiByZXNldF9ib3hfY29tbWl0X3JhbmQKCmlzX2dhbWVfb3Zlcl9hZnRlcl9pZl9lbHNlQDY6CiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L3N1YnJvdXRpbmVzLnB5OjI0OQogICAgLy8gZm9yIGkgaW4gdXJhbmdlKDAsIGdhbWVfcGxheWVyc19icmVmLmxlbmd0aCwgMzIpOgogICAgZnJhbWVfZGlnIDkKICAgIGludGNfMyAvLyAzMgogICAgKwogICAgZnJhbWVfYnVyeSA5CiAgICBiIGlzX2dhbWVfb3Zlcl9mb3JfaGVhZGVyQDMKCmlzX2dhbWVfb3Zlcl9hZnRlcl9mb3JAODoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvc3Vicm91dGluZXMucHk6MjYzCiAgICAvLyBjc3QuQUREUkVTU19TSVpFICogZ2FtZV9zdGF0ZS5tYXhfcGxheWVycy5uYXRpdmUKICAgIGZyYW1lX2RpZyAtMwogICAgaW50Y18wIC8vIDEKICAgIGdldGJ5dGUKICAgIGludGNfMyAvLyAzMgogICAgKgogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9zdWJyb3V0aW5lcy5weToyNjEtMjY0CiAgICAvLyAjIENsZWFyIGJveCBnYW1lIHBsYXllcnMgZGF0YSBieSBzZXR0aW5nIGl0cyB2YWx1ZSB0byBhbGwgemVyb2VzCiAgICAvLyBib3hfZ2FtZV9wbGF5ZXJzW2dhbWVfaWRdID0gb3AuYnplcm8oCiAgICAvLyAgICAgY3N0LkFERFJFU1NfU0laRSAqIGdhbWVfc3RhdGUubWF4X3BsYXllcnMubmF0aXZlCiAgICAvLyApCiAgICBiemVybwogICAgZnJhbWVfZGlnIDEKICAgIGR1cAogICAgYm94X2RlbAogICAgcG9wCiAgICBzd2FwCiAgICBib3hfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L3N1YnJvdXRpbmVzLnB5OjI2Ni0yNjcKICAgIC8vICMgTWFyayBnYW1lIGFzIG92ZXIgYnkgc2V0dGluZyBhY3RpdmUgcGxheWVycyB0byB6ZXJvCiAgICAvLyBnYW1lX3N0YXRlLmFjdGl2ZV9wbGF5ZXJzID0gYXJjNC5VSW50OCgwKQogICAgZnJhbWVfZGlnIC0zCiAgICBieXRlY18xIC8vIDB4MDAKICAgIHJlcGxhY2UyIDIKICAgIGR1cAogICAgZnJhbWVfYnVyeSAtMwogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9zdWJyb3V0aW5lcy5weToyNzIKICAgIC8vIGdhbWVfc3RhdGUuZmlyc3RfcGxhY2Vfc2NvcmUsCiAgICBleHRyYWN0IDMgMSAvLyBvbiBlcnJvcjogSW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvc3Vicm91dGluZXMucHk6MjczCiAgICAvLyBnYW1lX3N0YXRlLmZpcnN0X3BsYWNlX2FkZHJlc3MsCiAgICBmcmFtZV9kaWcgLTMKICAgIGV4dHJhY3QgNTYgMzIgLy8gb24gZXJyb3I6IEluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICBkdXAKICAgIGZyYW1lX2J1cnkgNQogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9zdWJyb3V0aW5lcy5weToyNzQKICAgIC8vIGdhbWVfc3RhdGUuc2Vjb25kX3BsYWNlX2FkZHJlc3MsCiAgICBmcmFtZV9kaWcgLTMKICAgIGV4dHJhY3QgODggMzIgLy8gb24gZXJyb3I6IEluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICBkdXAKICAgIGNvdmVyIDIKICAgIGZyYW1lX2J1cnkgNgogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9zdWJyb3V0aW5lcy5weToyNzUKICAgIC8vIGdhbWVfc3RhdGUudGhpcmRfcGxhY2VfYWRkcmVzcywKICAgIGZyYW1lX2RpZyAtMwogICAgZXh0cmFjdCAxMjAgMzIgLy8gb24gZXJyb3I6IEluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICBkdXAKICAgIGNvdmVyIDQKICAgIGZyYW1lX2J1cnkgNwogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9zdWJyb3V0aW5lcy5weToyNjktMjc2CiAgICAvLyAjIEVtaXQgQVJDLTI4IGV2ZW50IGZvciBvZmYtY2hhaW4gdHJhY2tpbmcKICAgIC8vIGFyYzQuZW1pdCgKICAgIC8vICAgICAiZ2FtZV9vdmVyKHVpbnQ4LGFkZHJlc3MsYWRkcmVzcyxhZGRyZXNzKSIsCiAgICAvLyAgICAgZ2FtZV9zdGF0ZS5maXJzdF9wbGFjZV9zY29yZSwKICAgIC8vICAgICBnYW1lX3N0YXRlLmZpcnN0X3BsYWNlX2FkZHJlc3MsCiAgICAvLyAgICAgZ2FtZV9zdGF0ZS5zZWNvbmRfcGxhY2VfYWRkcmVzcywKICAgIC8vICAgICBnYW1lX3N0YXRlLnRoaXJkX3BsYWNlX2FkZHJlc3MsCiAgICAvLyApCiAgICB1bmNvdmVyIDIKICAgIHN3YXAKICAgIGNvbmNhdAogICAgc3dhcAogICAgY29uY2F0CiAgICBzd2FwCiAgICBjb25jYXQKICAgIHB1c2hieXRlcyAweDQxMGIyMTUwIC8vIG1ldGhvZCAiZ2FtZV9vdmVyKHVpbnQ4LGFkZHJlc3MsYWRkcmVzcyxhZGRyZXNzKSIKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L3N1YnJvdXRpbmVzLnB5OjI3OC0yNzkKICAgIC8vICMgSWYgb25seSAxIHBsYXllciBpbiBsb2JieSBhZnRlciBnYW1lIGdvZXMgbGl2ZSwgdGhleSBnZXQgZW50aXJlIHByaXplIHBvb2wKICAgIC8vIGlmIGdhbWVfc3RhdGUucHJpemVfcG9vbC5uYXRpdmUgPT0gY3N0LlNUQUtFX0FNT1VOVF9PVEhFUjoKICAgIGZyYW1lX2RpZyAtMwogICAgcHVzaGludCAxNiAvLyAxNgogICAgZXh0cmFjdF91aW50NjQKICAgIGR1cAogICAgZnJhbWVfYnVyeSA4CiAgICBwdXNoaW50IDI1ODQwMCAvLyAyNTg0MDAKICAgID09CiAgICBieiBpc19nYW1lX292ZXJfZWxzZV9ib2R5QDEyCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L3N1YnJvdXRpbmVzLnB5OjI4MQogICAgLy8gc2Vjb25kX3ByaXplX3NoYXJlID0gVUludDY0KDApCiAgICBpbnRjXzEgLy8gMAogICAgZnJhbWVfYnVyeSAxMAogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9zdWJyb3V0aW5lcy5weToyODIKICAgIC8vIHRoaXJkX3ByaXplX3NoYXJlID0gVUludDY0KDApCiAgICBpbnRjXzEgLy8gMAogICAgZnJhbWVfYnVyeSAxMQoKaXNfZ2FtZV9vdmVyX2FmdGVyX2lmX2Vsc2VAMTY6CiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L3N1YnJvdXRpbmVzLnB5OjMwMQogICAgLy8gYWNjMj1nYW1lX3N0YXRlLmFkbWluX2FkZHJlc3MubmF0aXZlLAogICAgZnJhbWVfZGlnIC0zCiAgICBleHRyYWN0IDI0IDMyIC8vIG9uIGVycm9yOiBJbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9zdWJyb3V0aW5lcy5weTozMDIKICAgIC8vIGFjYzM9R2xvYmFsLmNyZWF0b3JfYWRkcmVzcywKICAgIGdsb2JhbCBDcmVhdG9yQWRkcmVzcwogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9zdWJyb3V0aW5lcy5weToyOTgtMzAzCiAgICAvLyAjIFJlc29sdmUgcHJpemUgcG9vbCB3aW4gc2hhcmUgcmVjZWl2ZXJzIGJ5IHByaW9yaXR5CiAgICAvLyBmaXJzdF9wbGFjZV9yZWNlaXZlciA9IHJlc29sdmVfcmVjZWl2ZXJfYnlfcHJpbygKICAgIC8vICAgICBhY2MxPWdhbWVfc3RhdGUuZmlyc3RfcGxhY2VfYWRkcmVzcy5uYXRpdmUsCiAgICAvLyAgICAgYWNjMj1nYW1lX3N0YXRlLmFkbWluX2FkZHJlc3MubmF0aXZlLAogICAgLy8gICAgIGFjYzM9R2xvYmFsLmNyZWF0b3JfYWRkcmVzcywKICAgIC8vICkKICAgIGZyYW1lX2RpZyA1CiAgICBkaWcgMgogICAgdW5jb3ZlciAyCiAgICBjYWxsc3ViIHJlc29sdmVfcmVjZWl2ZXJfYnlfcHJpbwogICAgZnJhbWVfYnVyeSAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L3N1YnJvdXRpbmVzLnB5OjMwNwogICAgLy8gYWNjMz1HbG9iYWwuY3JlYXRvcl9hZGRyZXNzLAogICAgZ2xvYmFsIENyZWF0b3JBZGRyZXNzCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L3N1YnJvdXRpbmVzLnB5OjMwNC0zMDgKICAgIC8vIHNlY29uZF9wbGFjZV9yZWNlaXZlciA9IHJlc29sdmVfcmVjZWl2ZXJfYnlfcHJpbygKICAgIC8vICAgICBhY2MxPWdhbWVfc3RhdGUuc2Vjb25kX3BsYWNlX2FkZHJlc3MubmF0aXZlLAogICAgLy8gICAgIGFjYzI9Z2FtZV9zdGF0ZS5hZG1pbl9hZGRyZXNzLm5hdGl2ZSwKICAgIC8vICAgICBhY2MzPUdsb2JhbC5jcmVhdG9yX2FkZHJlc3MsCiAgICAvLyApCiAgICBmcmFtZV9kaWcgNgogICAgZGlnIDIKICAgIHVuY292ZXIgMgogICAgY2FsbHN1YiByZXNvbHZlX3JlY2VpdmVyX2J5X3ByaW8KICAgIGZyYW1lX2J1cnkgMwogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9zdWJyb3V0aW5lcy5weTozMTIKICAgIC8vIGFjYzM9R2xvYmFsLmNyZWF0b3JfYWRkcmVzcywKICAgIGdsb2JhbCBDcmVhdG9yQWRkcmVzcwogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9zdWJyb3V0aW5lcy5weTozMDktMzEzCiAgICAvLyB0aGlyZF9wbGFjZV9yZWNlaXZlciA9IHJlc29sdmVfcmVjZWl2ZXJfYnlfcHJpbygKICAgIC8vICAgICBhY2MxPWdhbWVfc3RhdGUudGhpcmRfcGxhY2VfYWRkcmVzcy5uYXRpdmUsCiAgICAvLyAgICAgYWNjMj1nYW1lX3N0YXRlLmFkbWluX2FkZHJlc3MubmF0aXZlLAogICAgLy8gICAgIGFjYzM9R2xvYmFsLmNyZWF0b3JfYWRkcmVzcywKICAgIC8vICkKICAgIGZyYW1lX2RpZyA3CiAgICBjb3ZlciAyCiAgICBjYWxsc3ViIHJlc29sdmVfcmVjZWl2ZXJfYnlfcHJpbwogICAgZnJhbWVfYnVyeSA0CiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L3N1YnJvdXRpbmVzLnB5OjMxNS0zMTYKICAgIC8vICMgSXNzdWUgcHJpemUgcG9vbCBzaGFyZSBwYXlvdXRzIHRvIGZpcnN0LCBzZWNvbmQgYW5kIHRoaXJkIHBsYWNlIGFjY291bnRzIGlmIHRoZWlyIHNoYXJlIGlzIG5vbi16ZXJvIGFtb3VudAogICAgLy8gaWYgZmlyc3RfcHJpemVfc2hhcmUgPiBVSW50NjQoMCk6CiAgICBmcmFtZV9kaWcgOAogICAgYnogaXNfZ2FtZV9vdmVyX2FmdGVyX2lmX2Vsc2VAMTgKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvc3Vicm91dGluZXMucHk6MzE3LTMyMwogICAgLy8gcGF5b3V0X2l0eG4oCiAgICAvLyAgICAgcmVjZWl2ZXI9Zmlyc3RfcGxhY2VfcmVjZWl2ZXIsCiAgICAvLyAgICAgYW1vdW50PWZpcnN0X3ByaXplX3NoYXJlLAogICAgLy8gICAgIG5vdGU9U3RyaW5nKAogICAgLy8gICAgICAgICAncGllb3V0Omp7Im1ldGhvZCI6InBsYXlfZ2FtZSIsInN1YnJvdXRpbmU6ImlzX2dhbWVfb3ZlciIsImNvbmNlcm4iOiJpdHhuLnBheTtmaXJzdF9wcml6ZV9zaGFyZSJ9JwogICAgLy8gICAgICksCiAgICAvLyApCiAgICBmcmFtZV9kaWcgMAogICAgZnJhbWVfZGlnIDgKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvc3Vicm91dGluZXMucHk6MzIwLTMyMgogICAgLy8gbm90ZT1TdHJpbmcoCiAgICAvLyAgICAgJ3BpZW91dDpqeyJtZXRob2QiOiJwbGF5X2dhbWUiLCJzdWJyb3V0aW5lOiJpc19nYW1lX292ZXIiLCJjb25jZXJuIjoiaXR4bi5wYXk7Zmlyc3RfcHJpemVfc2hhcmUifScKICAgIC8vICksCiAgICBwdXNoYnl0ZXMgInBpZW91dDpqe1wibWV0aG9kXCI6XCJwbGF5X2dhbWVcIixcInN1YnJvdXRpbmU6XCJpc19nYW1lX292ZXJcIixcImNvbmNlcm5cIjpcIml0eG4ucGF5O2ZpcnN0X3ByaXplX3NoYXJlXCJ9IgogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9zdWJyb3V0aW5lcy5weTozMTctMzIzCiAgICAvLyBwYXlvdXRfaXR4bigKICAgIC8vICAgICByZWNlaXZlcj1maXJzdF9wbGFjZV9yZWNlaXZlciwKICAgIC8vICAgICBhbW91bnQ9Zmlyc3RfcHJpemVfc2hhcmUsCiAgICAvLyAgICAgbm90ZT1TdHJpbmcoCiAgICAvLyAgICAgICAgICdwaWVvdXQ6ansibWV0aG9kIjoicGxheV9nYW1lIiwic3Vicm91dGluZToiaXNfZ2FtZV9vdmVyIiwiY29uY2VybiI6Iml0eG4ucGF5O2ZpcnN0X3ByaXplX3NoYXJlIn0nCiAgICAvLyAgICAgKSwKICAgIC8vICkKICAgIGNhbGxzdWIgcGF5b3V0X2l0eG4KCmlzX2dhbWVfb3Zlcl9hZnRlcl9pZl9lbHNlQDE4OgogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9zdWJyb3V0aW5lcy5weTozMjQKICAgIC8vIGlmIHNlY29uZF9wcml6ZV9zaGFyZSA+IFVJbnQ2NCgwKToKICAgIGZyYW1lX2RpZyAxMAogICAgYnogaXNfZ2FtZV9vdmVyX2FmdGVyX2lmX2Vsc2VAMjAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvc3Vicm91dGluZXMucHk6MzI1LTMzMQogICAgLy8gcGF5b3V0X2l0eG4oCiAgICAvLyAgICAgcmVjZWl2ZXI9c2Vjb25kX3BsYWNlX3JlY2VpdmVyLAogICAgLy8gICAgIGFtb3VudD1zZWNvbmRfcHJpemVfc2hhcmUsCiAgICAvLyAgICAgbm90ZT1TdHJpbmcoCiAgICAvLyAgICAgICAgICdwaWVvdXQ6ansibWV0aG9kIjoicGxheV9nYW1lIiwic3Vicm91dGluZToiaXNfZ2FtZV9vdmVyIiwiY29uY2VybiI6Iml0eG4ucGF5O3NlY29uZF9wcml6ZV9zaGFyZSJ9JwogICAgLy8gICAgICksCiAgICAvLyApCiAgICBmcmFtZV9kaWcgMwogICAgZnJhbWVfZGlnIDEwCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L3N1YnJvdXRpbmVzLnB5OjMyOC0zMzAKICAgIC8vIG5vdGU9U3RyaW5nKAogICAgLy8gICAgICdwaWVvdXQ6ansibWV0aG9kIjoicGxheV9nYW1lIiwic3Vicm91dGluZToiaXNfZ2FtZV9vdmVyIiwiY29uY2VybiI6Iml0eG4ucGF5O3NlY29uZF9wcml6ZV9zaGFyZSJ9JwogICAgLy8gKSwKICAgIHB1c2hieXRlcyAicGllb3V0Omp7XCJtZXRob2RcIjpcInBsYXlfZ2FtZVwiLFwic3Vicm91dGluZTpcImlzX2dhbWVfb3ZlclwiLFwiY29uY2VyblwiOlwiaXR4bi5wYXk7c2Vjb25kX3ByaXplX3NoYXJlXCJ9IgogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9zdWJyb3V0aW5lcy5weTozMjUtMzMxCiAgICAvLyBwYXlvdXRfaXR4bigKICAgIC8vICAgICByZWNlaXZlcj1zZWNvbmRfcGxhY2VfcmVjZWl2ZXIsCiAgICAvLyAgICAgYW1vdW50PXNlY29uZF9wcml6ZV9zaGFyZSwKICAgIC8vICAgICBub3RlPVN0cmluZygKICAgIC8vICAgICAgICAgJ3BpZW91dDpqeyJtZXRob2QiOiJwbGF5X2dhbWUiLCJzdWJyb3V0aW5lOiJpc19nYW1lX292ZXIiLCJjb25jZXJuIjoiaXR4bi5wYXk7c2Vjb25kX3ByaXplX3NoYXJlIn0nCiAgICAvLyAgICAgKSwKICAgIC8vICkKICAgIGNhbGxzdWIgcGF5b3V0X2l0eG4KCmlzX2dhbWVfb3Zlcl9hZnRlcl9pZl9lbHNlQDIwOgogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9zdWJyb3V0aW5lcy5weTozMzIKICAgIC8vIGlmIHRoaXJkX3ByaXplX3NoYXJlID4gVUludDY0KDApOgogICAgZnJhbWVfZGlnIDExCiAgICBieiBpc19nYW1lX292ZXJfYWZ0ZXJfaWZfZWxzZUAyMgogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9zdWJyb3V0aW5lcy5weTozMzMtMzM5CiAgICAvLyBwYXlvdXRfaXR4bigKICAgIC8vICAgICByZWNlaXZlcj10aGlyZF9wbGFjZV9yZWNlaXZlciwKICAgIC8vICAgICBhbW91bnQ9dGhpcmRfcHJpemVfc2hhcmUsCiAgICAvLyAgICAgbm90ZT1TdHJpbmcoCiAgICAvLyAgICAgICAgICdwaWVvdXQ6ansibWV0aG9kIjoicGxheV9nYW1lIiwic3Vicm91dGluZToiaXNfZ2FtZV9vdmVyIiwiY29uY2VybiI6Iml0eG4ucGF5O3RoaXJkX3ByaXplX3NoYXJlIn0nCiAgICAvLyAgICAgKSwKICAgIC8vICkKICAgIGZyYW1lX2RpZyA0CiAgICBmcmFtZV9kaWcgMTEKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvc3Vicm91dGluZXMucHk6MzM2LTMzOAogICAgLy8gbm90ZT1TdHJpbmcoCiAgICAvLyAgICAgJ3BpZW91dDpqeyJtZXRob2QiOiJwbGF5X2dhbWUiLCJzdWJyb3V0aW5lOiJpc19nYW1lX292ZXIiLCJjb25jZXJuIjoiaXR4bi5wYXk7dGhpcmRfcHJpemVfc2hhcmUifScKICAgIC8vICksCiAgICBwdXNoYnl0ZXMgInBpZW91dDpqe1wibWV0aG9kXCI6XCJwbGF5X2dhbWVcIixcInN1YnJvdXRpbmU6XCJpc19nYW1lX292ZXJcIixcImNvbmNlcm5cIjpcIml0eG4ucGF5O3RoaXJkX3ByaXplX3NoYXJlXCJ9IgogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9zdWJyb3V0aW5lcy5weTozMzMtMzM5CiAgICAvLyBwYXlvdXRfaXR4bigKICAgIC8vICAgICByZWNlaXZlcj10aGlyZF9wbGFjZV9yZWNlaXZlciwKICAgIC8vICAgICBhbW91bnQ9dGhpcmRfcHJpemVfc2hhcmUsCiAgICAvLyAgICAgbm90ZT1TdHJpbmcoCiAgICAvLyAgICAgICAgICdwaWVvdXQ6ansibWV0aG9kIjoicGxheV9nYW1lIiwic3Vicm91dGluZToiaXNfZ2FtZV9vdmVyIiwiY29uY2VybiI6Iml0eG4ucGF5O3RoaXJkX3ByaXplX3NoYXJlIn0nCiAgICAvLyAgICAgKSwKICAgIC8vICkKICAgIGNhbGxzdWIgcGF5b3V0X2l0eG4KCmlzX2dhbWVfb3Zlcl9hZnRlcl9pZl9lbHNlQDIyOgogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9zdWJyb3V0aW5lcy5weTozNDEtMzQyCiAgICAvLyAjIFNldCBwcml6ZSBwb29sIGFtb3VudCB0byB6ZXJvIGFmdGVyIG1ha2luZyBwYXlvdXRzCiAgICAvLyBnYW1lX3N0YXRlLnByaXplX3Bvb2wgPSBhcmM0LlVJbnQ2NCgwKQogICAgZnJhbWVfZGlnIC0zCiAgICBwdXNoYnl0ZXMgMHgwMDAwMDAwMDAwMDAwMDAwCiAgICByZXBsYWNlMiAxNgogICAgZnJhbWVfYnVyeSAtMwogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9zdWJyb3V0aW5lcy5weTozNDQKICAgIC8vIHJldHVybiBhcmM0LkJvb2woVHJ1ZSkgICMgbm9xYTogRkJUMDAzCiAgICBwdXNoYnl0ZXMgMHg4MAogICAgZnJhbWVfZGlnIC0zCiAgICBmcmFtZV9idXJ5IDEKICAgIGZyYW1lX2J1cnkgMAogICAgcmV0c3ViCgppc19nYW1lX292ZXJfZWxzZV9ib2R5QDEyOgogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9zdWJyb3V0aW5lcy5weToyODMtMjg0CiAgICAvLyAjIEVsaWYsIG9ubHkgMiBwbGF5ZXJzIGluIGxvYmJ5IGFmdGVyIGdhbWUgZ29lcyBsaXZlLCBzcGxpdCBwcml6ZSBwb29sOiA2MCUgLyByZW1haW5kZXIgLyAwCiAgICAvLyBlbGlmIGdhbWVfc3RhdGUucHJpemVfcG9vbC5uYXRpdmUgPT0gMiAqIGNzdC5TVEFLRV9BTU9VTlRfT1RIRVI6CiAgICBmcmFtZV9kaWcgOAogICAgcHVzaGludCA1MTY4MDAgLy8gNTE2ODAwCiAgICA9PQogICAgYnogaXNfZ2FtZV9vdmVyX2Vsc2VfYm9keUAxNAogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9zdWJyb3V0aW5lcy5weToyODUKICAgIC8vIGZpcnN0X3ByaXplX3NoYXJlID0gZ2FtZV9zdGF0ZS5wcml6ZV9wb29sLm5hdGl2ZSAqIFVJbnQ2NCg2MCkgLy8gVUludDY0KDEwMCkKICAgIGZyYW1lX2RpZyA4CiAgICBkdXAKICAgIHB1c2hpbnQgNjAgLy8gNjAKICAgICoKICAgIHB1c2hpbnQgMTAwIC8vIDEwMAogICAgLwogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9zdWJyb3V0aW5lcy5weToyODYKICAgIC8vIHNlY29uZF9wcml6ZV9zaGFyZSA9IGdhbWVfc3RhdGUucHJpemVfcG9vbC5uYXRpdmUgLSBmaXJzdF9wcml6ZV9zaGFyZQogICAgc3dhcAogICAgZGlnIDEKICAgIC0KICAgIGZyYW1lX2J1cnkgMTAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvc3Vicm91dGluZXMucHk6Mjg3CiAgICAvLyB0aGlyZF9wcml6ZV9zaGFyZSA9IFVJbnQ2NCgwKSAgIyBObyB0aGlyZCBwbGF5ZXIKICAgIGludGNfMSAvLyAwCiAgICBmcmFtZV9idXJ5IDExCiAgICBmcmFtZV9idXJ5IDgKICAgIGIgaXNfZ2FtZV9vdmVyX2FmdGVyX2lmX2Vsc2VAMTYKCmlzX2dhbWVfb3Zlcl9lbHNlX2JvZHlAMTQ6CiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L3N1YnJvdXRpbmVzLnB5OjI5MAogICAgLy8gZmlyc3RfcHJpemVfc2hhcmUgPSBnYW1lX3N0YXRlLnByaXplX3Bvb2wubmF0aXZlICogVUludDY0KDUwKSAvLyBVSW50NjQoMTAwKQogICAgZnJhbWVfZGlnIDgKICAgIGR1cAogICAgcHVzaGludCA1MCAvLyA1MAogICAgKgogICAgcHVzaGludCAxMDAgLy8gMTAwCiAgICAvCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L3N1YnJvdXRpbmVzLnB5OjI5MgogICAgLy8gZ2FtZV9zdGF0ZS5wcml6ZV9wb29sLm5hdGl2ZSAqIFVJbnQ2NCgzMCkgLy8gVUludDY0KDEwMCkKICAgIGRpZyAxCiAgICBwdXNoaW50IDMwIC8vIDMwCiAgICAqCiAgICBwdXNoaW50IDEwMCAvLyAxMDAKICAgIC8KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvc3Vicm91dGluZXMucHk6MjkxLTI5MwogICAgLy8gc2Vjb25kX3ByaXplX3NoYXJlID0gKAogICAgLy8gICAgIGdhbWVfc3RhdGUucHJpemVfcG9vbC5uYXRpdmUgKiBVSW50NjQoMzApIC8vIFVJbnQ2NCgxMDApCiAgICAvLyApCiAgICBkdXAKICAgIGZyYW1lX2J1cnkgMTAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvc3Vicm91dGluZXMucHk6Mjk1CiAgICAvLyBnYW1lX3N0YXRlLnByaXplX3Bvb2wubmF0aXZlIC0gZmlyc3RfcHJpemVfc2hhcmUgLSBzZWNvbmRfcHJpemVfc2hhcmUKICAgIHVuY292ZXIgMgogICAgZGlnIDIKICAgIC0KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvc3Vicm91dGluZXMucHk6Mjk0LTI5NgogICAgLy8gdGhpcmRfcHJpemVfc2hhcmUgPSAoCiAgICAvLyAgICAgZ2FtZV9zdGF0ZS5wcml6ZV9wb29sLm5hdGl2ZSAtIGZpcnN0X3ByaXplX3NoYXJlIC0gc2Vjb25kX3ByaXplX3NoYXJlCiAgICAvLyApCiAgICBzd2FwCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L3N1YnJvdXRpbmVzLnB5OjI5NQogICAgLy8gZ2FtZV9zdGF0ZS5wcml6ZV9wb29sLm5hdGl2ZSAtIGZpcnN0X3ByaXplX3NoYXJlIC0gc2Vjb25kX3ByaXplX3NoYXJlCiAgICAtCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L3N1YnJvdXRpbmVzLnB5OjI5NC0yOTYKICAgIC8vIHRoaXJkX3ByaXplX3NoYXJlID0gKAogICAgLy8gICAgIGdhbWVfc3RhdGUucHJpemVfcG9vbC5uYXRpdmUgLSBmaXJzdF9wcml6ZV9zaGFyZSAtIHNlY29uZF9wcml6ZV9zaGFyZQogICAgLy8gKQogICAgZnJhbWVfYnVyeSAxMQogICAgZnJhbWVfYnVyeSA4CiAgICBiIGlzX2dhbWVfb3Zlcl9hZnRlcl9pZl9lbHNlQDE2Cgppc19nYW1lX292ZXJfZWxzZV9ib2R5QDI1OgogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9zdWJyb3V0aW5lcy5weTozNDYKICAgIC8vIHJldHVybiBhcmM0LkJvb2woRmFsc2UpICAjIG5vcWE6IEZCVDAwMwogICAgYnl0ZWNfMSAvLyAweDAwCiAgICBmcmFtZV9kaWcgLTMKICAgIGZyYW1lX2J1cnkgMQogICAgZnJhbWVfYnVyeSAwCiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMucGllb3V0LmNvbnRyYWN0LlBpZW91dC5hZGRfcmVzb3VyY2VfYnVkZ2V0X3BsYXlfZ2FtZShnYW1lX2lkOiB1aW50NjQpIC0+IHZvaWQ6CmFkZF9yZXNvdXJjZV9idWRnZXRfcGxheV9nYW1lOgogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9jb250cmFjdC5weTo0Ny00OQogICAgLy8gIyBBZGQgZXh0cmEgYXBwIGNhbGwgdG8gaW5jcmVhc2UgdGhlIHJlc291cmNlIHJlZmVyZW5jZSBidWRnZXQsIG11c3QgYmUgY2FsbGVkIHRvZ2V0aGVyIHdpdGggcGxheSBnYW1lCiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIC8vIGRlZiBhZGRfcmVzb3VyY2VfYnVkZ2V0X3BsYXlfZ2FtZShzZWxmLCBnYW1lX2lkOiBVSW50NjQpIC0+IE5vbmU6CiAgICBwcm90byAxIDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvY29udHJhY3QucHk6NTAtNTEKICAgIC8vICMgR2V0IHRoZSBmaXJzdCB0cmFuc2FjdGlvbiBpbiB0aGUgZ3JvdXAKICAgIC8vIGZpcnN0X3R4biA9IGd0eG4uQXBwbGljYXRpb25DYWxsVHJhbnNhY3Rpb24oZ3JvdXBfaW5kZXg9MCkKICAgIGludGNfMSAvLyAwCiAgICBndHhucyBUeXBlRW51bQogICAgcHVzaGludCA2IC8vIGFwcGwKICAgID09CiAgICBhc3NlcnQgLy8gdHJhbnNhY3Rpb24gdHlwZSBpcyBhcHBsCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L2NvbnRyYWN0LnB5OjUzLTU0CiAgICAvLyAjIEZhaWwgdHJhbnNhY3Rpb24gdW5sZXNzIHRoZSBhc3NlcnRpb24gYmVsb3cgZXZhbHVhdGVzIFRydWUKICAgIC8vIGFzc2VydCBHbG9iYWwuZ3JvdXBfc2l6ZSA9PSAyLCBlcnIuSU5WQUxJRF9HUk9VUF9TSVpFCiAgICBnbG9iYWwgR3JvdXBTaXplCiAgICBpbnRjXzIgLy8gMgogICAgPT0KICAgIGFzc2VydCAvLyBJbnZhbGlkIGdyb3VwIHNpemUuIEVuc3VyZSBudW1iZXIgb2YgdHJhbnNhY3Rpb24gaW4gZ3JvdXAgaXMgd2l0aGluIHZhbGlkIGJvdW5kcy4KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvY29udHJhY3QucHk6NTUKICAgIC8vIGFzc2VydCBUeG4uZ3JvdXBfaW5kZXggPT0gMSwgZXJyLklOVkFMSURfR1JPVVBfSURYCiAgICB0eG4gR3JvdXBJbmRleAogICAgaW50Y18wIC8vIDEKICAgID09CiAgICBhc3NlcnQgLy8gSW52YWxpZCBncm91cCBpbmRleC4gRW5zdXJlIHRyYW5zYWN0aW9uIGdyb3VwIGluZGV4IG1hdGNoZXMgdGhlIGV4cGVjdGVkIHZhbHVlLiAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvY29udHJhY3QucHk6NTAtNTEKICAgIC8vICMgR2V0IHRoZSBmaXJzdCB0cmFuc2FjdGlvbiBpbiB0aGUgZ3JvdXAKICAgIC8vIGZpcnN0X3R4biA9IGd0eG4uQXBwbGljYXRpb25DYWxsVHJhbnNhY3Rpb24oZ3JvdXBfaW5kZXg9MCkKICAgIGludGNfMSAvLyAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L2NvbnRyYWN0LnB5OjU3CiAgICAvLyBhc3NlcnQgZmlyc3RfdHhuLmFwcF9pZCA9PSBHbG9iYWwuY3VycmVudF9hcHBsaWNhdGlvbl9pZCwgZXJyLkFQUF9JRF9NSVNNQVRDSAogICAgZ3R4bnMgQXBwbGljYXRpb25JRAogICAgZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbklECiAgICA9PQogICAgYXNzZXJ0IC8vIEFwcGxpY2F0aW9uIElEIG1pc21hdGNoLiBBcHAgSUQgbXVzdCBiZSBzYW1lIGFjcm9zcyBhbGwgdHJhbnNhY3Rpb25zIGluIGdyb3VwLgogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9jb250cmFjdC5weTo1MC01MQogICAgLy8gIyBHZXQgdGhlIGZpcnN0IHRyYW5zYWN0aW9uIGluIHRoZSBncm91cAogICAgLy8gZmlyc3RfdHhuID0gZ3R4bi5BcHBsaWNhdGlvbkNhbGxUcmFuc2FjdGlvbihncm91cF9pbmRleD0wKQogICAgaW50Y18xIC8vIDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvY29udHJhY3QucHk6NTgKICAgIC8vIGFzc2VydCBmaXJzdF90eG4uc2VuZGVyID09IFR4bi5zZW5kZXIsIGVyci5TRU5ERVJfTUlTTUFUQ0gKICAgIGd0eG5zIFNlbmRlcgogICAgdHhuIFNlbmRlcgogICAgPT0KICAgIGFzc2VydCAvLyBTZW5kZXIgbWlzbWF0Y2guIFNlbmRlciBtdXN0IGJlIHNhbWUgYWRkcmVzcyBhY3Jvc3MgYWxsIHRyYW5zYWN0aW9ucyBpbiBncm91cC4KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvY29udHJhY3QucHk6NTAtNTEKICAgIC8vICMgR2V0IHRoZSBmaXJzdCB0cmFuc2FjdGlvbiBpbiB0aGUgZ3JvdXAKICAgIC8vIGZpcnN0X3R4biA9IGd0eG4uQXBwbGljYXRpb25DYWxsVHJhbnNhY3Rpb24oZ3JvdXBfaW5kZXg9MCkKICAgIGludGNfMSAvLyAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L2NvbnRyYWN0LnB5OjU5CiAgICAvLyBhc3NlcnQgZmlyc3RfdHhuLmFwcF9hcmdzKDApID09IGFyYzQuYXJjNF9zaWduYXR1cmUoInBsYXlfZ2FtZSh1aW50NjQpdm9pZCIpLCBlcnIuSU5WQUxJRF9NRVRIT0RfU0VMRUNUT1IKICAgIGR1cAogICAgZ3R4bnNhcyBBcHBsaWNhdGlvbkFyZ3MKICAgIGJ5dGVjIDEzIC8vIG1ldGhvZCAicGxheV9nYW1lKHVpbnQ2NCl2b2lkIgogICAgPT0KICAgIGFzc2VydCAvLyBUcmFuc2FjdGlvbiBhdCB0aGlzIGdyb3VwIGluZGV4IG11c3QgaGF2ZSBleGFjdCByZXF1aXJlZCBtZXRob2Qgc2VsZWN0b3IuCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L2NvbnRyYWN0LnB5OjUwLTUxCiAgICAvLyAjIEdldCB0aGUgZmlyc3QgdHJhbnNhY3Rpb24gaW4gdGhlIGdyb3VwCiAgICAvLyBmaXJzdF90eG4gPSBndHhuLkFwcGxpY2F0aW9uQ2FsbFRyYW5zYWN0aW9uKGdyb3VwX2luZGV4PTApCiAgICBpbnRjXzEgLy8gMAogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9jb250cmFjdC5weTo2MAogICAgLy8gYXNzZXJ0IGZpcnN0X3R4bi5hcHBfYXJncygxKSA9PSBvcC5pdG9iKGdhbWVfaWQpLCBlcnIuSU5WQUxJRF9HQU1FX0lECiAgICBpbnRjXzAgLy8gMQogICAgZ3R4bnNhcyBBcHBsaWNhdGlvbkFyZ3MKICAgIGZyYW1lX2RpZyAtMQogICAgaXRvYgogICAgPT0KICAgIGFzc2VydCAvLyBJbnZhbGlkIEdhbWUgSUQuIEJveCBDb21taXQgUmFuZCBHYW1lIElEIG11c3QgYmUgYSBjZXJ0YWluIHZhbHVlIG9yIG1hdGNoIEdhbWUgSUQgYXJnLgogICAgcmV0c3ViCgoKLy8gc21hcnRfY29udHJhY3RzLnBpZW91dC5jb250cmFjdC5QaWVvdXQuY2FsY19zaW5nbGVfYm94X2Nvc3Qoa2V5X3NpemU6IGJ5dGVzLCB2YWx1ZV9zaXplOiBieXRlcykgLT4gdWludDY0OgpjYWxjX3NpbmdsZV9ib3hfY29zdDoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvY29udHJhY3QucHk6NjItNjYKICAgIC8vICMgQ2FsY3VsYXRlIHRoZSBtaW5pbXVtIGJhbGFuY2UgcmVxdWlyZW1lbnQgKE1CUikgY29zdCBmb3Igc3RvcmluZyBhIHNpbmdsZSBib3ggdW5pdAogICAgLy8gQGFyYzQuYWJpbWV0aG9kKHJlYWRvbmx5PVRydWUpCiAgICAvLyBkZWYgY2FsY19zaW5nbGVfYm94X2Nvc3QoCiAgICAvLyAgICAgc2VsZiwga2V5X3NpemU6IGFyYzQuVUludDgsIHZhbHVlX3NpemU6IGFyYzQuVUludDE2CiAgICAvLyApIC0+IFVJbnQ2NDoKICAgIHByb3RvIDIgMQogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9jb250cmFjdC5weTo3MAogICAgLy8ga2V5X3NpemUubmF0aXZlICsgdmFsdWVfc2l6ZS5uYXRpdmUKICAgIGZyYW1lX2RpZyAtMgogICAgYnRvaQogICAgZnJhbWVfZGlnIC0xCiAgICBidG9pCiAgICArCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L2NvbnRyYWN0LnB5OjY5CiAgICAvLyBzaXplX2Nvc3QgPSBhcmM0LlVJbnQxNig0MDApLm5hdGl2ZSAqICgKICAgIHB1c2hpbnQgNDAwIC8vIDQwMAogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9jb250cmFjdC5weTo2OS03MQogICAgLy8gc2l6ZV9jb3N0ID0gYXJjNC5VSW50MTYoNDAwKS5uYXRpdmUgKiAoCiAgICAvLyAgICAga2V5X3NpemUubmF0aXZlICsgdmFsdWVfc2l6ZS5uYXRpdmUKICAgIC8vICkgICMgU2l6ZSBmZWUgKDQwMCBwZXIgYnl0ZSAqIChsZW4oa2V5KStsZW4odmFsdWUpKSkKICAgICoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvY29udHJhY3QucHk6NzMtNzQKICAgIC8vICMgUmV0dXJuIHNpbmdsZSBib3ggdG90YWwgY29zdCBhbW91bnQKICAgIC8vIHJldHVybiBiYXNlX2Nvc3QubmF0aXZlICsgc2l6ZV9jb3N0CiAgICBwdXNoaW50IDI1MDAgLy8gMjUwMAogICAgKwogICAgcmV0c3ViCgoKLy8gc21hcnRfY29udHJhY3RzLnBpZW91dC5jb250cmFjdC5QaWVvdXQucmVhZF9nYW1lX3N0YXRlKGdhbWVfaWQ6IHVpbnQ2NCkgLT4gYnl0ZXM6CnJlYWRfZ2FtZV9zdGF0ZToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvY29udHJhY3QucHk6ODEtODMKICAgIC8vICMgUmVhZCB0aGUgc21hcnQgY29udHJhY3QgYXBwbGljYXRpb24gZ2FtZSBzdGF0ZSBib3ggZm9yIGdpdmVuIGdhbWUgaWQKICAgIC8vIEBhcmM0LmFiaW1ldGhvZChyZWFkb25seT1UcnVlKQogICAgLy8gZGVmIHJlYWRfZ2FtZV9zdGF0ZShzZWxmLCBnYW1lX2lkOiBVSW50NjQpIC0+IHRhLkdhbWVTdGF0ZVR1cGxlOgogICAgcHJvdG8gMSAxCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L2NvbnRyYWN0LnB5Ojg2CiAgICAvLyBnYW1lX2lkCiAgICBmcmFtZV9kaWcgLTEKICAgIGl0b2IKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvY29udHJhY3QucHk6ODQtODUKICAgIC8vICMgUmV0cmlldmUgY3VycmVudCBnYW1lIHN0YXRlIGZyb20gYm94IHVzaW5nIHRoZSBnYW1lIGlkIHBhcmFtZXRlcgogICAgLy8gZ2FtZV9zdGF0ZSA9IHNlbGYuYm94X2dhbWVfc3RhdGVbCiAgICBieXRlYyA0IC8vICJzXyIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvY29udHJhY3QucHk6ODQtODcKICAgIC8vICMgUmV0cmlldmUgY3VycmVudCBnYW1lIHN0YXRlIGZyb20gYm94IHVzaW5nIHRoZSBnYW1lIGlkIHBhcmFtZXRlcgogICAgLy8gZ2FtZV9zdGF0ZSA9IHNlbGYuYm94X2dhbWVfc3RhdGVbCiAgICAvLyAgICAgZ2FtZV9pZAogICAgLy8gXS5jb3B5KCkgICMgTWFrZSBhIGNvcHkgb2YgdGhlIGdhbWUgc3RhdGUgZGF0YSBlbHNlIGltbXV0YWJsZQogICAgZGlnIDEKICAgIGNvbmNhdAogICAgYm94X2dldAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYuYm94X2dhbWVfc3RhdGUgZW50cnkgZXhpc3RzCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L2NvbnRyYWN0LnB5OjkzCiAgICAvLyBnYW1lX3N0YXRlLnN0YWtpbmdfZmluYWxpemVkLAogICAgZHVwCiAgICBpbnRjXzEgLy8gMAogICAgZ2V0Yml0CiAgICBieXRlY18xIC8vIDB4MDAKICAgIGludGNfMSAvLyAwCiAgICB1bmNvdmVyIDIKICAgIHNldGJpdAogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9jb250cmFjdC5weTo5NAogICAgLy8gZ2FtZV9zdGF0ZS5tYXhfcGxheWVycywKICAgIGRpZyAxCiAgICBleHRyYWN0IDEgMSAvLyBvbiBlcnJvcjogSW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvY29udHJhY3QucHk6OTUKICAgIC8vIGdhbWVfc3RhdGUuYWN0aXZlX3BsYXllcnMsCiAgICBkaWcgMgogICAgZXh0cmFjdCAyIDEgLy8gb24gZXJyb3I6IEluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L2NvbnRyYWN0LnB5Ojk2CiAgICAvLyBnYW1lX3N0YXRlLmZpcnN0X3BsYWNlX3Njb3JlLAogICAgZGlnIDMKICAgIGV4dHJhY3QgMyAxIC8vIG9uIGVycm9yOiBJbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9jb250cmFjdC5weTo5NwogICAgLy8gZ2FtZV9zdGF0ZS5zZWNvbmRfcGxhY2Vfc2NvcmUsCiAgICBkaWcgNAogICAgZXh0cmFjdCA0IDEgLy8gb24gZXJyb3I6IEluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L2NvbnRyYWN0LnB5Ojk4CiAgICAvLyBnYW1lX3N0YXRlLnRoaXJkX3BsYWNlX3Njb3JlLAogICAgZGlnIDUKICAgIGV4dHJhY3QgNSAxIC8vIG9uIGVycm9yOiBJbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9jb250cmFjdC5weTo5OQogICAgLy8gZ2FtZV9zdGF0ZS5ib3hfcF9zdGFydF9wb3MsCiAgICBkaWcgNgogICAgZXh0cmFjdCA2IDIgLy8gb24gZXJyb3I6IEluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L2NvbnRyYWN0LnB5OjEwMAogICAgLy8gZ2FtZV9zdGF0ZS5leHBpcnlfdHMsCiAgICBkaWcgNwogICAgZXh0cmFjdCA4IDggLy8gb24gZXJyb3I6IEluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L2NvbnRyYWN0LnB5OjEwMQogICAgLy8gZ2FtZV9zdGF0ZS5wcml6ZV9wb29sLAogICAgZGlnIDgKICAgIGV4dHJhY3QgMTYgOCAvLyBvbiBlcnJvcjogSW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvY29udHJhY3QucHk6MTAyCiAgICAvLyBnYW1lX3N0YXRlLmFkbWluX2FkZHJlc3MsCiAgICBkaWcgOQogICAgZXh0cmFjdCAyNCAzMiAvLyBvbiBlcnJvcjogSW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvY29udHJhY3QucHk6MTAzCiAgICAvLyBnYW1lX3N0YXRlLmZpcnN0X3BsYWNlX2FkZHJlc3MsCiAgICBkaWcgMTAKICAgIGV4dHJhY3QgNTYgMzIgLy8gb24gZXJyb3I6IEluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L2NvbnRyYWN0LnB5OjEwNAogICAgLy8gZ2FtZV9zdGF0ZS5zZWNvbmRfcGxhY2VfYWRkcmVzcywKICAgIGRpZyAxMQogICAgZXh0cmFjdCA4OCAzMiAvLyBvbiBlcnJvcjogSW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvY29udHJhY3QucHk6MTA1CiAgICAvLyBnYW1lX3N0YXRlLnRoaXJkX3BsYWNlX2FkZHJlc3MsCiAgICB1bmNvdmVyIDEyCiAgICBleHRyYWN0IDEyMCAzMiAvLyBvbiBlcnJvcjogSW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvY29udHJhY3QucHk6ODktMTA3CiAgICAvLyAjIFJldHVybiB0aGUgZ2FtZSBzdGF0ZSBhcyBhIHR1cGxlCiAgICAvLyByZXR1cm4gdGEuR2FtZVN0YXRlVHVwbGUoCiAgICAvLyAgICAgKAogICAgLy8gICAgICAgICBhcmM0LlVJbnQ2NChnYW1lX2lkKSwKICAgIC8vICAgICAgICAgZ2FtZV9zdGF0ZS5zdGFraW5nX2ZpbmFsaXplZCwKICAgIC8vICAgICAgICAgZ2FtZV9zdGF0ZS5tYXhfcGxheWVycywKICAgIC8vICAgICAgICAgZ2FtZV9zdGF0ZS5hY3RpdmVfcGxheWVycywKICAgIC8vICAgICAgICAgZ2FtZV9zdGF0ZS5maXJzdF9wbGFjZV9zY29yZSwKICAgIC8vICAgICAgICAgZ2FtZV9zdGF0ZS5zZWNvbmRfcGxhY2Vfc2NvcmUsCiAgICAvLyAgICAgICAgIGdhbWVfc3RhdGUudGhpcmRfcGxhY2Vfc2NvcmUsCiAgICAvLyAgICAgICAgIGdhbWVfc3RhdGUuYm94X3Bfc3RhcnRfcG9zLAogICAgLy8gICAgICAgICBnYW1lX3N0YXRlLmV4cGlyeV90cywKICAgIC8vICAgICAgICAgZ2FtZV9zdGF0ZS5wcml6ZV9wb29sLAogICAgLy8gICAgICAgICBnYW1lX3N0YXRlLmFkbWluX2FkZHJlc3MsCiAgICAvLyAgICAgICAgIGdhbWVfc3RhdGUuZmlyc3RfcGxhY2VfYWRkcmVzcywKICAgIC8vICAgICAgICAgZ2FtZV9zdGF0ZS5zZWNvbmRfcGxhY2VfYWRkcmVzcywKICAgIC8vICAgICAgICAgZ2FtZV9zdGF0ZS50aGlyZF9wbGFjZV9hZGRyZXNzLAogICAgLy8gICAgICkKICAgIC8vICkKICAgIHVuY292ZXIgMTMKICAgIHVuY292ZXIgMTMKICAgIGNvbmNhdAogICAgdW5jb3ZlciAxMgogICAgY29uY2F0CiAgICB1bmNvdmVyIDExCiAgICBjb25jYXQKICAgIHVuY292ZXIgMTAKICAgIGNvbmNhdAogICAgdW5jb3ZlciA5CiAgICBjb25jYXQKICAgIHVuY292ZXIgOAogICAgY29uY2F0CiAgICB1bmNvdmVyIDcKICAgIGNvbmNhdAogICAgdW5jb3ZlciA2CiAgICBjb25jYXQKICAgIHVuY292ZXIgNQogICAgY29uY2F0CiAgICB1bmNvdmVyIDQKICAgIGNvbmNhdAogICAgdW5jb3ZlciAzCiAgICBjb25jYXQKICAgIHVuY292ZXIgMgogICAgY29uY2F0CiAgICBzd2FwCiAgICBjb25jYXQKICAgIHJldHN1YgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy5waWVvdXQuY29udHJhY3QuUGllb3V0LnJlYWRfZ2FtZV9wbGF5ZXJzKGdhbWVfaWQ6IHVpbnQ2NCkgLT4gYnl0ZXM6CnJlYWRfZ2FtZV9wbGF5ZXJzOgogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9jb250cmFjdC5weToxMDktMTExCiAgICAvLyAjIFJlYWQgdGhlIHNtYXJ0IGNvbnRyYWN0IGFwcGxpY2F0aW9uIGdhbWUgcGxheWVycyBib3ggZm9yIGdpdmVuIGdhbWUgaWQKICAgIC8vIEBhcmM0LmFiaW1ldGhvZChyZWFkb25seT1UcnVlKQogICAgLy8gZGVmIHJlYWRfZ2FtZV9wbGF5ZXJzKHNlbGYsIGdhbWVfaWQ6IFVJbnQ2NCkgLT4gdGEuR2FtZVBsYXllcnNBcnI6CiAgICBwcm90byAxIDEKICAgIGludGNfMSAvLyAwCiAgICBkdXAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvY29udHJhY3QucHk6MTEyLTExMwogICAgLy8gIyBSZXRyaWV2ZSBjdXJyZW50IGdhbWUgcGxheWVycyBmcm9tIGJveCB1c2luZyB0aGUgZ2FtZSBpZCBwYXJhbWV0ZXIKICAgIC8vIGdhbWVfcGxheWVycyA9IHNlbGYuYm94X2dhbWVfcGxheWVyc1tnYW1lX2lkXQogICAgZnJhbWVfZGlnIC0xCiAgICBpdG9iCiAgICBieXRlY18zIC8vICJwXyIKICAgIHN3YXAKICAgIGNvbmNhdAogICAgYm94X2dldAogICAgc3dhcAogICAgZHVwCiAgICB1bmNvdmVyIDIKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmJveF9nYW1lX3BsYXllcnMgZW50cnkgZXhpc3RzCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L2NvbnRyYWN0LnB5OjExNS0xMTYKICAgIC8vICMgRGVmaW5lIGEgZHluYW1pYyBhcnJheSB0byBhcHBlbmQgYWxsIHJlbWFpbmluZyBwbGF5ZXJzCiAgICAvLyBwbGF5ZXJzID0gdGEuR2FtZVBsYXllcnNBcnIoKQogICAgcHVzaGJ5dGVzIDB4MDAwMAogICAgc3dhcAogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9jb250cmFjdC5weToxMTgtMTE5CiAgICAvLyAjIEl0ZXJhdGUgdGhyb3VnaCB0aGUgZ2FtZSBwbGF5ZXJzIGJ5dGUgYXJyYXkKICAgIC8vIGZvciBpIGluIHVyYW5nZSgwLCBnYW1lX3BsYXllcnMubGVuZ3RoLCBjc3QuQUREUkVTU19TSVpFKToKICAgIGxlbgogICAgaW50Y18xIC8vIDAKCnJlYWRfZ2FtZV9wbGF5ZXJzX2Zvcl9oZWFkZXJAMToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvY29udHJhY3QucHk6MTE4LTExOQogICAgLy8gIyBJdGVyYXRlIHRocm91Z2ggdGhlIGdhbWUgcGxheWVycyBieXRlIGFycmF5CiAgICAvLyBmb3IgaSBpbiB1cmFuZ2UoMCwgZ2FtZV9wbGF5ZXJzLmxlbmd0aCwgY3N0LkFERFJFU1NfU0laRSk6CiAgICBmcmFtZV9kaWcgNQogICAgZnJhbWVfZGlnIDQKICAgIDwKICAgIGJ6IHJlYWRfZ2FtZV9wbGF5ZXJzX2FmdGVyX2ZvckA2CiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L2NvbnRyYWN0LnB5OjEyMC0xMjEKICAgIC8vICMgRXh0cmFjdCB0aGUgYnl0ZXMgcmVwcmVzZW50aW5nIHRoZSBwbGF5ZXIgYWRkcmVzcwogICAgLy8gcGxheWVyX2FkZHJfYnl0ZXMgPSBvcC5leHRyYWN0KGdhbWVfcGxheWVycywgaSwgY3N0LkFERFJFU1NfU0laRSkKICAgIGZyYW1lX2RpZyAyCiAgICBmcmFtZV9kaWcgNQogICAgaW50Y18zIC8vIDMyCiAgICBleHRyYWN0MwogICAgZHVwCiAgICBmcmFtZV9idXJ5IDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvY29udHJhY3QucHk6MTIyLTEyMwogICAgLy8gIyBPbmx5IGFwcGVuZCBhZGRyZXNzIGlmIGl0cyBieXRlcyBkbyBOT1QgZXF1YWwgdG8gYSB6ZXJvZWQgYnl0ZSBhcnJheSBvZiBzaXplIDMyCiAgICAvLyBpZiBwbGF5ZXJfYWRkcl9ieXRlcyAhPSBCeXRlcyhjc3QuWkVST19BRERSX0JZVEVTKToKICAgIGJ5dGVjIDggLy8gMHgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwCiAgICAhPQogICAgZnJhbWVfZGlnIDMKICAgIGZyYW1lX2J1cnkgMQogICAgYnogcmVhZF9nYW1lX3BsYXllcnNfYWZ0ZXJfaWZfZWxzZUA0CiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L2NvbnRyYWN0LnB5OjEyNQogICAgLy8gcGxheWVycy5hcHBlbmQoYXJjNC5BZGRyZXNzKHBsYXllcl9hY2NvdW50KSkKICAgIGZyYW1lX2RpZyAzCiAgICBleHRyYWN0IDIgMAogICAgZnJhbWVfZGlnIDAKICAgIGNvbmNhdAogICAgZHVwCiAgICBsZW4KICAgIGludGNfMyAvLyAzMgogICAgLwogICAgaXRvYgogICAgZXh0cmFjdCA2IDIKICAgIHN3YXAKICAgIGNvbmNhdAogICAgZnJhbWVfYnVyeSAxCgpyZWFkX2dhbWVfcGxheWVyc19hZnRlcl9pZl9lbHNlQDQ6CiAgICBmcmFtZV9kaWcgMQogICAgZnJhbWVfYnVyeSAzCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L2NvbnRyYWN0LnB5OjExOC0xMTkKICAgIC8vICMgSXRlcmF0ZSB0aHJvdWdoIHRoZSBnYW1lIHBsYXllcnMgYnl0ZSBhcnJheQogICAgLy8gZm9yIGkgaW4gdXJhbmdlKDAsIGdhbWVfcGxheWVycy5sZW5ndGgsIGNzdC5BRERSRVNTX1NJWkUpOgogICAgZnJhbWVfZGlnIDUKICAgIGludGNfMyAvLyAzMgogICAgKwogICAgZnJhbWVfYnVyeSA1CiAgICBiIHJlYWRfZ2FtZV9wbGF5ZXJzX2Zvcl9oZWFkZXJAMQoKcmVhZF9nYW1lX3BsYXllcnNfYWZ0ZXJfZm9yQDY6CiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L2NvbnRyYWN0LnB5OjEyNy0xMjgKICAgIC8vICMgUmV0dXJuIHRoZSBhcnJheSBjb250YWluaW5nIHRoZSByZW1haW5pbmcgcGxheWVycwogICAgLy8gcmV0dXJuIHBsYXllcnMKICAgIGZyYW1lX2RpZyAzCiAgICBmcmFtZV9idXJ5IDAKICAgIHJldHN1YgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy5waWVvdXQuY29udHJhY3QuUGllb3V0LnJlYWRfY29tbWl0X3JhbmQob3duZXI6IGJ5dGVzKSAtPiBieXRlczoKcmVhZF9jb21taXRfcmFuZDoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvY29udHJhY3QucHk6MTMwLTEzMgogICAgLy8gIyBSZWFkIHRoZSBzbWFydCBjb250cmFjdCBhcHBsaWNhdGlvbiBjb21taXQgcm91bmQgYm94IGZvciBnaXZlbiBhY2NvdW50CiAgICAvLyBAYXJjNC5hYmltZXRob2QocmVhZG9ubHk9VHJ1ZSkKICAgIC8vIGRlZiByZWFkX2NvbW1pdF9yYW5kKHNlbGYsIG93bmVyOiBBY2NvdW50KSAtPiB0YS5Db21taXRSYW5kVHVwbGU6CiAgICBwcm90byAxIDEKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvY29udHJhY3QucHk6MTMzLTEzNAogICAgLy8gIyBGYWlsIHRyYW5zYWN0aW9uIHVubGVzcyB0aGUgYXNzZXJ0aW9uIGJlbG93IGV2YWx1YXRlcyBUcnVlCiAgICAvLyBhc3NlcnQgb3duZXIgaW4gc2VsZi5ib3hfY29tbWl0X3JhbmQsIGVyci5CT1hfTk9UX0ZPVU5ECiAgICBieXRlY18wIC8vICJjXyIKICAgIGZyYW1lX2RpZyAtMQogICAgY29uY2F0CiAgICBkdXAKICAgIGJveF9sZW4KICAgIGJ1cnkgMQogICAgYXNzZXJ0IC8vIEJveCBub3QgZm91bmQuIEVuc3VyZSB0aGUgYm94IHlvdSBhcmUgdHJ5aW5nIHRvIGFjY2VzcyB3YXMgY3JlYXRlZCBhbmQgc3RpbGwgZXhpc3RzLgogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9jb250cmFjdC5weToxMzYtMTM3CiAgICAvLyAjIENyZWF0ZSBhIGNvcHkgb2YgdGhlIGJveCBjb21taXQgcmFuZCBjb250ZW50cwogICAgLy8gY29tbWl0X3JhbmQgPSBzZWxmLmJveF9jb21taXRfcmFuZFtvd25lcl0uY29weSgpCiAgICBib3hfZ2V0CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5ib3hfY29tbWl0X3JhbmQgZW50cnkgZXhpc3RzCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L2NvbnRyYWN0LnB5OjEzOS0xNDAKICAgIC8vICMgUmV0dXJuIGEgdHVwbGUgY29udGFpbmluZyBjb21taXQgcmFuZCBnYW1lIGlkLCBjb21taXQgcm91bmQgYW5kIGV4cGlyeSByb3VuZAogICAgLy8gcmV0dXJuIHRhLkNvbW1pdFJhbmRUdXBsZSgoY29tbWl0X3JhbmQuZ2FtZV9pZCwgY29tbWl0X3JhbmQuY29tbWl0X3JvdW5kLCBjb21taXRfcmFuZC5leHBpcnlfcm91bmQpKQogICAgZHVwCiAgICBleHRyYWN0IDAgOCAvLyBvbiBlcnJvcjogSW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIGRpZyAxCiAgICBleHRyYWN0IDggOCAvLyBvbiBlcnJvcjogSW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIHVuY292ZXIgMgogICAgZXh0cmFjdCAxNiA4IC8vIG9uIGVycm9yOiBJbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgY292ZXIgMgogICAgY29uY2F0CiAgICBzd2FwCiAgICBjb25jYXQKICAgIHJldHN1YgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy5waWVvdXQuY29udHJhY3QuUGllb3V0LmdlbmVyYXRlKCkgLT4gdm9pZDoKZ2VuZXJhdGU6CiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L2NvbnRyYWN0LnB5OjE0Ny0xNDgKICAgIC8vICMgRmFpbCB0cmFuc2FjdGlvbiB1bmxlc3MgdGhlIGFzc2VydGlvbiBiZWxvdyBldmFsdWF0ZXMgVHJ1ZQogICAgLy8gYXNzZXJ0IFR4bi5zZW5kZXIgPT0gR2xvYmFsLmNyZWF0b3JfYWRkcmVzcywgZXJyLklOVkFMSURfQ1JFQVRPUgogICAgdHhuIFNlbmRlcgogICAgZ2xvYmFsIENyZWF0b3JBZGRyZXNzCiAgICA9PQogICAgYXNzZXJ0IC8vIEFjY291bnQgbXVzdCBtYXRjaCBhcHBsaWNhdGlvbiBjcmVhdG9yIGFkZHJlc3MuCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L2NvbnRyYWN0LnB5OjE1MC0xNTEKICAgIC8vICMgQXNzaWduIEdsb2JhbCBTdGF0ZSB2YXJpYWJsZXMgd2l0aCB0aGVpciBkZWZhdWx0IHN0YXJ0aW5nIHZhbHVlCiAgICAvLyBzZWxmLmdhbWVfaWQgPSBVSW50NjQoMSkKICAgIGJ5dGVjIDkgLy8gImdhbWVfaWQiCiAgICBpbnRjXzAgLy8gMQogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvY29udHJhY3QucHk6MTUyCiAgICAvLyBzZWxmLnNjb3JlX2lkID0gVUludDY0KDEpCiAgICBieXRlYyA2IC8vICJzY29yZV9pZCIKICAgIGludGNfMCAvLyAxCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9jb250cmFjdC5weToxNTMKICAgIC8vIHNlbGYuYXRoX3Njb3JlID0gVUludDY0KDApCiAgICBieXRlYyAxMCAvLyAiYXRoX3Njb3JlIgogICAgaW50Y18xIC8vIDAKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L2NvbnRyYWN0LnB5OjE1NAogICAgLy8gc2VsZi5hdGhfYWRkcmVzcyA9IEdsb2JhbC56ZXJvX2FkZHJlc3MKICAgIGJ5dGVjIDcgLy8gImF0aF9hZGRyZXNzIgogICAgZ2xvYmFsIFplcm9BZGRyZXNzCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgcmV0c3ViCgoKLy8gc21hcnRfY29udHJhY3RzLnBpZW91dC5jb250cmFjdC5QaWVvdXQubWludF90cm9waHkoYm94X3RfcGF5OiB1aW50NjQsIG1pbnRfcGF5OiB1aW50NjQpIC0+IHZvaWQ6Cm1pbnRfdHJvcGh5OgogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9jb250cmFjdC5weToxNTYtMTYyCiAgICAvLyAjIEFsbG93IGFwcGxpY2F0aW9uIGNyZWF0b3IgdG8gbWludCBhIG9uZS10aW1lIE5GVCBhc3NldCB1c2VkIGFzIHRyb3BoeSB0b2tlbiB0byBob25vciB0aGUgQVRIIGFkZHJlc3MKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgLy8gZGVmIG1pbnRfdHJvcGh5KAogICAgLy8gICAgIHNlbGYsCiAgICAvLyAgICAgYm94X3RfcGF5OiBndHhuLlBheW1lbnRUcmFuc2FjdGlvbiwKICAgIC8vICAgICBtaW50X3BheTogZ3R4bi5QYXltZW50VHJhbnNhY3Rpb24sCiAgICAvLyApIC0+IE5vbmU6CiAgICBwcm90byAyIDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvY29udHJhY3QucHk6MTYzLTE2NAogICAgLy8gIyBGYWlsIHRyYW5zYWN0aW9uIHVubGVzcyB0aGUgYXNzZXJ0aW9uIGJlbG93IGV2YWx1YXRlcyBUcnVlCiAgICAvLyBhc3NlcnQgR2xvYmFsLmdyb3VwX3NpemUgPT0gMywgZXJyLklOVkFMSURfR1JPVVBfU0laRQogICAgZ2xvYmFsIEdyb3VwU2l6ZQogICAgcHVzaGludCAzIC8vIDMKICAgID09CiAgICBhc3NlcnQgLy8gSW52YWxpZCBncm91cCBzaXplLiBFbnN1cmUgbnVtYmVyIG9mIHRyYW5zYWN0aW9uIGluIGdyb3VwIGlzIHdpdGhpbiB2YWxpZCBib3VuZHMuCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L2NvbnRyYWN0LnB5OjE2NQogICAgLy8gYXNzZXJ0IG5vdCBzZWxmLmJveF9nYW1lX3Ryb3BoeSwgZXJyLkJPWF9GT1VORAogICAgYnl0ZWNfMiAvLyAidF8iCiAgICBib3hfbGVuCiAgICBidXJ5IDEKICAgICEKICAgIGFzc2VydCAvLyBCb3ggZm91bmQuIEVuc3VyZSB0aGUgYm94IHlvdSBhcmUgdHJ5aW5nIHRvIGFjY2VzcyBkb2VzIG5vdCBleGlzdCBhbHJlYWR5LgogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9jb250cmFjdC5weToxNjcKICAgIC8vIGFzc2VydCBib3hfdF9wYXkuYW1vdW50ID49IGNzdC5CT1hfVF9DT1NULCBlcnIuSU5WQUxJRF9CT1hfUEFZX0ZFRQogICAgZnJhbWVfZGlnIC0yCiAgICBndHhucyBBbW91bnQKICAgIHB1c2hpbnQgMTkzMDAgLy8gMTkzMDAKICAgID49CiAgICBhc3NlcnQgLy8gSW5zdWZmaWNpZW50IGZ1bmRzLiBCb3ggcGF5IGFtb3VudCBpcyBub3QgZW5vdWdoIHRvIGNvdmVyIGFwcGxpY2F0aW9uIE1CUi4KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvY29udHJhY3QucHk6MTY4CiAgICAvLyBhc3NlcnQgYm94X3RfcGF5LnNlbmRlciA9PSBHbG9iYWwuY3JlYXRvcl9hZGRyZXNzLCBlcnIuSU5WQUxJRF9CT1hfUEFZX1NFTkRFUgogICAgZnJhbWVfZGlnIC0yCiAgICBndHhucyBTZW5kZXIKICAgIGdsb2JhbCBDcmVhdG9yQWRkcmVzcwogICAgPT0KICAgIGFzc2VydCAvLyBCb3ggcGF5bWVudCBzZW5kZXIgYWRkcmVzcyBtdXN0IG1hdGNoIHRyYW5zYWN0aW9uIHNlbmRlciBhZGRyZXNzLgogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9jb250cmFjdC5weToxNzAKICAgIC8vIGJveF90X3BheS5yZWNlaXZlciA9PSBHbG9iYWwuY3VycmVudF9hcHBsaWNhdGlvbl9hZGRyZXNzCiAgICBmcmFtZV9kaWcgLTIKICAgIGd0eG5zIFJlY2VpdmVyCiAgICBnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwogICAgPT0KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvY29udHJhY3QucHk6MTY5LTE3MQogICAgLy8gYXNzZXJ0ICgKICAgIC8vICAgICBib3hfdF9wYXkucmVjZWl2ZXIgPT0gR2xvYmFsLmN1cnJlbnRfYXBwbGljYXRpb25fYWRkcmVzcwogICAgLy8gKSwgZXJyLklOVkFMSURfQk9YX1BBWV9SRUNFSVZFUgogICAgYXNzZXJ0IC8vIEJveCBwYXltZW50IHJlY2VpdmVyIGFkZHJlc3MgbXVzdCBtYXRjaCBhcHBsaWNhdGlvbiBhZGRyZXNzLgogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9jb250cmFjdC5weToxNzQKICAgIC8vIG1pbnRfcGF5LmFtb3VudCA+PSBHbG9iYWwuYXNzZXRfY3JlYXRlX21pbl9iYWxhbmNlCiAgICBmcmFtZV9kaWcgLTEKICAgIGd0eG5zIEFtb3VudAogICAgZ2xvYmFsIEFzc2V0Q3JlYXRlTWluQmFsYW5jZQogICAgPj0KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvY29udHJhY3QucHk6MTczLTE3NQogICAgLy8gYXNzZXJ0ICgKICAgIC8vICAgICBtaW50X3BheS5hbW91bnQgPj0gR2xvYmFsLmFzc2V0X2NyZWF0ZV9taW5fYmFsYW5jZQogICAgLy8gKSwgZXJyLklOVkFMSURfTUlOVF9QQVlfRkVFCiAgICBhc3NlcnQgLy8gSW5zdWZmaWNpZW50IGZ1bmRzLiBNaW50IHBheSBhbW91bnQgaXMgbm90IGVub3VnaCB0byBjb3ZlciBhc3NldCBjcmVhdGlvbiBjb3N0LgogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9jb250cmFjdC5weToxNzYKICAgIC8vIGFzc2VydCBtaW50X3BheS5zZW5kZXIgPT0gR2xvYmFsLmNyZWF0b3JfYWRkcmVzcywgZXJyLklOVkFMSURfTUlOVF9QQVlfU0VOREVSCiAgICBmcmFtZV9kaWcgLTEKICAgIGd0eG5zIFNlbmRlcgogICAgZ2xvYmFsIENyZWF0b3JBZGRyZXNzCiAgICA9PQogICAgYXNzZXJ0IC8vIE1pbnQgcGF5bWVudCBzZW5kZXIgYWRkcmVzcyBtdXN0IG1hdGNoIHRyYW5zYWN0aW9uIHNlbmRlciBhZGRyZXNzLgogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9jb250cmFjdC5weToxNzgKICAgIC8vIG1pbnRfcGF5LnJlY2VpdmVyID09IEdsb2JhbC5jdXJyZW50X2FwcGxpY2F0aW9uX2FkZHJlc3MKICAgIGZyYW1lX2RpZyAtMQogICAgZ3R4bnMgUmVjZWl2ZXIKICAgIGdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCiAgICA9PQogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9jb250cmFjdC5weToxNzctMTc5CiAgICAvLyBhc3NlcnQgKAogICAgLy8gICAgIG1pbnRfcGF5LnJlY2VpdmVyID09IEdsb2JhbC5jdXJyZW50X2FwcGxpY2F0aW9uX2FkZHJlc3MKICAgIC8vICksIGVyci5JTlZBTElEX01JTlRfUEFZX1JFQ0VJVkVSCiAgICBhc3NlcnQgLy8gTWludCBwYXltZW50IHJlY2VpdmVyIGFkZHJlc3MgbXVzdCBtYXRjaCBhcHBsaWNhdGlvbiBhZGRyZXNzLgogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9jb250cmFjdC5weToxODEtMTkzCiAgICAvLyAjIE1pbnQgYSBuZXcgdW5pcXVlIGFzc2V0IHJlcHJlc2VudGluZyB0aGUgZ2FtZSB0cm9waHkgYnkgbWFraW5nIGFuIGFzc2V0IGNvbmZpZyBpbm5lciB0cmFuc2FjdGlvbgogICAgLy8gYWNmZ19pdHhuID0gaXR4bi5Bc3NldENvbmZpZygKICAgIC8vICAgICB0b3RhbD0xLAogICAgLy8gICAgIHVuaXRfbmFtZT0iVFJGWSIsCiAgICAvLyAgICAgYXNzZXRfbmFtZT0iR2FtZW5hbWUtQVRILVRyb3BoeSIsCiAgICAvLyAgICAgZGVjaW1hbHM9MCwKICAgIC8vICAgICBkZWZhdWx0X2Zyb3plbj1GYWxzZSwKICAgIC8vICAgICBtYW5hZ2VyPUdsb2JhbC5jdXJyZW50X2FwcGxpY2F0aW9uX2FkZHJlc3MsCiAgICAvLyAgICAgcmVzZXJ2ZT1HbG9iYWwuY3VycmVudF9hcHBsaWNhdGlvbl9hZGRyZXNzLAogICAgLy8gICAgIGZyZWV6ZT1HbG9iYWwuY3VycmVudF9hcHBsaWNhdGlvbl9hZGRyZXNzLAogICAgLy8gICAgIGNsYXdiYWNrPUdsb2JhbC5jdXJyZW50X2FwcGxpY2F0aW9uX2FkZHJlc3MsCiAgICAvLyAgICAgbm90ZT1iJ3BpZW91dDpqeyJtZXRob2QiOiJtaW50X3Ryb3BoeSIsImNvbmNlcm4iOiJpdHhuLmFzc2V0X2NvbmZpZztjcmVhdGVfdHJvcGh5X2Fzc2V0In0nLAogICAgLy8gKS5zdWJtaXQoKQogICAgaXR4bl9iZWdpbgogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9jb250cmFjdC5weToxODgKICAgIC8vIG1hbmFnZXI9R2xvYmFsLmN1cnJlbnRfYXBwbGljYXRpb25fYWRkcmVzcywKICAgIGdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L2NvbnRyYWN0LnB5OjE4OS0xOTEKICAgIC8vIHJlc2VydmU9R2xvYmFsLmN1cnJlbnRfYXBwbGljYXRpb25fYWRkcmVzcywKICAgIC8vIGZyZWV6ZT1HbG9iYWwuY3VycmVudF9hcHBsaWNhdGlvbl9hZGRyZXNzLAogICAgLy8gY2xhd2JhY2s9R2xvYmFsLmN1cnJlbnRfYXBwbGljYXRpb25fYWRkcmVzcywKICAgIGR1cG4gMwogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9jb250cmFjdC5weToxOTIKICAgIC8vIG5vdGU9YidwaWVvdXQ6ansibWV0aG9kIjoibWludF90cm9waHkiLCJjb25jZXJuIjoiaXR4bi5hc3NldF9jb25maWc7Y3JlYXRlX3Ryb3BoeV9hc3NldCJ9JywKICAgIHB1c2hieXRlcyAweDcwNjk2NTZmNzU3NDNhNmE3YjIyNmQ2NTc0Njg2ZjY0MjIzYTIyNmQ2OTZlNzQ1Zjc0NzI2ZjcwNjg3OTIyMmMyMjYzNmY2ZTYzNjU3MjZlMjIzYTIyNjk3NDc4NmUyZTYxNzM3MzY1NzQ1ZjYzNmY2ZTY2Njk2NzNiNjM3MjY1NjE3NDY1NWY3NDcyNmY3MDY4Nzk1ZjYxNzM3MzY1NzQyMjdkCiAgICBpdHhuX2ZpZWxkIE5vdGUKICAgIGl0eG5fZmllbGQgQ29uZmlnQXNzZXRDbGF3YmFjawogICAgaXR4bl9maWVsZCBDb25maWdBc3NldEZyZWV6ZQogICAgaXR4bl9maWVsZCBDb25maWdBc3NldFJlc2VydmUKICAgIGl0eG5fZmllbGQgQ29uZmlnQXNzZXRNYW5hZ2VyCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L2NvbnRyYWN0LnB5OjE4NwogICAgLy8gZGVmYXVsdF9mcm96ZW49RmFsc2UsCiAgICBpbnRjXzEgLy8gMAogICAgaXR4bl9maWVsZCBDb25maWdBc3NldERlZmF1bHRGcm96ZW4KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvY29udHJhY3QucHk6MTg2CiAgICAvLyBkZWNpbWFscz0wLAogICAgaW50Y18xIC8vIDAKICAgIGl0eG5fZmllbGQgQ29uZmlnQXNzZXREZWNpbWFscwogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9jb250cmFjdC5weToxODUKICAgIC8vIGFzc2V0X25hbWU9IkdhbWVuYW1lLUFUSC1Ucm9waHkiLAogICAgcHVzaGJ5dGVzICJHYW1lbmFtZS1BVEgtVHJvcGh5IgogICAgaXR4bl9maWVsZCBDb25maWdBc3NldE5hbWUKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvY29udHJhY3QucHk6MTg0CiAgICAvLyB1bml0X25hbWU9IlRSRlkiLAogICAgcHVzaGJ5dGVzICJUUkZZIgogICAgaXR4bl9maWVsZCBDb25maWdBc3NldFVuaXROYW1lCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L2NvbnRyYWN0LnB5OjE4MwogICAgLy8gdG90YWw9MSwKICAgIGludGNfMCAvLyAxCiAgICBpdHhuX2ZpZWxkIENvbmZpZ0Fzc2V0VG90YWwKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvY29udHJhY3QucHk6MTgxLTE4MgogICAgLy8gIyBNaW50IGEgbmV3IHVuaXF1ZSBhc3NldCByZXByZXNlbnRpbmcgdGhlIGdhbWUgdHJvcGh5IGJ5IG1ha2luZyBhbiBhc3NldCBjb25maWcgaW5uZXIgdHJhbnNhY3Rpb24KICAgIC8vIGFjZmdfaXR4biA9IGl0eG4uQXNzZXRDb25maWcoCiAgICBwdXNoaW50IDMgLy8gYWNmZwogICAgaXR4bl9maWVsZCBUeXBlRW51bQogICAgaW50Y18xIC8vIDAKICAgIGl0eG5fZmllbGQgRmVlCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L2NvbnRyYWN0LnB5OjE4MS0xOTMKICAgIC8vICMgTWludCBhIG5ldyB1bmlxdWUgYXNzZXQgcmVwcmVzZW50aW5nIHRoZSBnYW1lIHRyb3BoeSBieSBtYWtpbmcgYW4gYXNzZXQgY29uZmlnIGlubmVyIHRyYW5zYWN0aW9uCiAgICAvLyBhY2ZnX2l0eG4gPSBpdHhuLkFzc2V0Q29uZmlnKAogICAgLy8gICAgIHRvdGFsPTEsCiAgICAvLyAgICAgdW5pdF9uYW1lPSJUUkZZIiwKICAgIC8vICAgICBhc3NldF9uYW1lPSJHYW1lbmFtZS1BVEgtVHJvcGh5IiwKICAgIC8vICAgICBkZWNpbWFscz0wLAogICAgLy8gICAgIGRlZmF1bHRfZnJvemVuPUZhbHNlLAogICAgLy8gICAgIG1hbmFnZXI9R2xvYmFsLmN1cnJlbnRfYXBwbGljYXRpb25fYWRkcmVzcywKICAgIC8vICAgICByZXNlcnZlPUdsb2JhbC5jdXJyZW50X2FwcGxpY2F0aW9uX2FkZHJlc3MsCiAgICAvLyAgICAgZnJlZXplPUdsb2JhbC5jdXJyZW50X2FwcGxpY2F0aW9uX2FkZHJlc3MsCiAgICAvLyAgICAgY2xhd2JhY2s9R2xvYmFsLmN1cnJlbnRfYXBwbGljYXRpb25fYWRkcmVzcywKICAgIC8vICAgICBub3RlPWIncGllb3V0Omp7Im1ldGhvZCI6Im1pbnRfdHJvcGh5IiwiY29uY2VybiI6Iml0eG4uYXNzZXRfY29uZmlnO2NyZWF0ZV90cm9waHlfYXNzZXQifScsCiAgICAvLyApLnN1Ym1pdCgpCiAgICBpdHhuX3N1Ym1pdAogICAgaXR4biBDcmVhdGVkQXNzZXRJRAogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9jb250cmFjdC5weToxOTUtMTk2CiAgICAvLyAjIENyZWF0ZSB0aGUgYm94IGdhbWUgdHJvcGh5IGFuZCBhc3NpZ24gaXRzIGRlZmF1bHQgc3RhcnRpbmcgdmFsdWVzCiAgICAvLyBzZWxmLmJveF9nYW1lX3Ryb3BoeS5jcmVhdGUoKQogICAgYnl0ZWNfMiAvLyAidF8iCiAgICBwdXNoaW50IDQwIC8vIDQwCiAgICBib3hfY3JlYXRlCiAgICBwb3AKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvY29udHJhY3QucHk6MTk4CiAgICAvLyBhc3NldF9pZD1hcmM0LlVJbnQ2NChhY2ZnX2l0eG4uY3JlYXRlZF9hc3NldC5pZCksCiAgICBpdG9iCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L2NvbnRyYWN0LnB5OjE5OQogICAgLy8gb3duZXJfYWRkcmVzcz1hcmM0LkFkZHJlc3MoR2xvYmFsLnplcm9fYWRkcmVzcyksCiAgICBnbG9iYWwgWmVyb0FkZHJlc3MKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvY29udHJhY3QucHk6MTk3LTIwMAogICAgLy8gc2VsZi5ib3hfZ2FtZV90cm9waHkudmFsdWUgPSBzdGMuR2FtZVRyb3BoeSgKICAgIC8vICAgICBhc3NldF9pZD1hcmM0LlVJbnQ2NChhY2ZnX2l0eG4uY3JlYXRlZF9hc3NldC5pZCksCiAgICAvLyAgICAgb3duZXJfYWRkcmVzcz1hcmM0LkFkZHJlc3MoR2xvYmFsLnplcm9fYWRkcmVzcyksCiAgICAvLyApCiAgICBjb25jYXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvY29udHJhY3QucHk6MTk3CiAgICAvLyBzZWxmLmJveF9nYW1lX3Ryb3BoeS52YWx1ZSA9IHN0Yy5HYW1lVHJvcGh5KAogICAgYnl0ZWNfMiAvLyAidF8iCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L2NvbnRyYWN0LnB5OjE5Ny0yMDAKICAgIC8vIHNlbGYuYm94X2dhbWVfdHJvcGh5LnZhbHVlID0gc3RjLkdhbWVUcm9waHkoCiAgICAvLyAgICAgYXNzZXRfaWQ9YXJjNC5VSW50NjQoYWNmZ19pdHhuLmNyZWF0ZWRfYXNzZXQuaWQpLAogICAgLy8gICAgIG93bmVyX2FkZHJlc3M9YXJjNC5BZGRyZXNzKEdsb2JhbC56ZXJvX2FkZHJlc3MpLAogICAgLy8gKQogICAgc3dhcAogICAgYm94X3B1dAogICAgcmV0c3ViCgoKLy8gc21hcnRfY29udHJhY3RzLnBpZW91dC5jb250cmFjdC5QaWVvdXQuY2xhaW1fdHJvcGh5KCkgLT4gdm9pZDoKY2xhaW1fdHJvcGh5OgogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9jb250cmFjdC5weToyMDUtMjA2CiAgICAvLyAjIEZhaWwgdHJhbnNhY3Rpb24gdW5sZXNzIHRoZSBhc3NlcnRpb24gYmVsb3cgZXZhbHVhdGVzIFRydWUKICAgIC8vIGFzc2VydCBHbG9iYWwuZ3JvdXBfc2l6ZSA9PSAxLCBlcnIuU1RBTkRBTE9ORV9UWE5fT05MWQogICAgZ2xvYmFsIEdyb3VwU2l6ZQogICAgaW50Y18wIC8vIDEKICAgID09CiAgICBhc3NlcnQgLy8gSW52YWxpZCBncm91cCBzaXplLiBUaGlzIGFwcCBjYWxsIGNhbiBvbmx5IHRha2Ugc3RhbmRhbG9uZSB0cmFuc2FjdGlvbnMuCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L2NvbnRyYWN0LnB5OjIwNwogICAgLy8gYXNzZXJ0IFR4bi5zZW5kZXIgPT0gc2VsZi5hdGhfYWRkcmVzcywgZXJyLklOVkFMSURfVFJPUEhZX1JFQ0VJVkVSCiAgICB0eG4gU2VuZGVyCiAgICBpbnRjXzEgLy8gMAogICAgYnl0ZWMgNyAvLyAiYXRoX2FkZHJlc3MiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYuYXRoX2FkZHJlc3MgZXhpc3RzCiAgICA9PQogICAgYXNzZXJ0IC8vIEFzc2V0IHRyb3BoeSByZWNlaXZlciBtdXN0IG1hdGNoIGFwcGxpY2F0aW9uIEFUSCBhZGRyZXNzLgogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9jb250cmFjdC5weToyMDgKICAgIC8vIGFzc2VydCBUeG4uc2VuZGVyLmlzX29wdGVkX2luKAogICAgdHhuIFNlbmRlcgogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9jb250cmFjdC5weToyMDkKICAgIC8vIEFzc2V0KHNlbGYuYm94X2dhbWVfdHJvcGh5LnZhbHVlLmFzc2V0X2lkLm5hdGl2ZSkKICAgIGJ5dGVjXzIgLy8gInRfIgogICAgYm94X2dldAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYuYm94X2dhbWVfdHJvcGh5IGV4aXN0cwogICAgaW50Y18xIC8vIDAKICAgIGV4dHJhY3RfdWludDY0CiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L2NvbnRyYWN0LnB5OjIwOC0yMTAKICAgIC8vIGFzc2VydCBUeG4uc2VuZGVyLmlzX29wdGVkX2luKAogICAgLy8gICAgIEFzc2V0KHNlbGYuYm94X2dhbWVfdHJvcGh5LnZhbHVlLmFzc2V0X2lkLm5hdGl2ZSkKICAgIC8vICksIGVyci5BU1NFVF9PUFRfSU5fUkVRVUlSRUQKICAgIHN3YXAKICAgIGRpZyAxCiAgICBhc3NldF9ob2xkaW5nX2dldCBBc3NldEJhbGFuY2UKICAgIGJ1cnkgMQogICAgYXNzZXJ0IC8vIEFjY291bnQgbXVzdCBiZSBvcHRlZCBpbiB0byBhc3NldCBpbiBvcmRlciB0byBwZXJmb3JtIHRoaXMgYWN0aW9uLgogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9jb250cmFjdC5weToyMTItMjE4CiAgICAvLyAjIFRyYW5zZmVyIGdhbWUgdHJvcGh5IHRvIHNlbmRlciBieSBtYWtpbmcgYW4gYXNzZXQgdHJhbnNmZXIgaW5uZXIgdHJhbnNhY3Rpb24KICAgIC8vIGl0eG4uQXNzZXRUcmFuc2ZlcigKICAgIC8vICAgICB4ZmVyX2Fzc2V0PXNlbGYuYm94X2dhbWVfdHJvcGh5LnZhbHVlLmFzc2V0X2lkLm5hdGl2ZSwKICAgIC8vICAgICBhc3NldF9yZWNlaXZlcj1UeG4uc2VuZGVyLAogICAgLy8gICAgIGFzc2V0X2Ftb3VudD0xLAogICAgLy8gICAgIG5vdGU9YidwaWVvdXQ6ansibWV0aG9kIjoiY2xhaW1fdHJvcGh5IiwiY29uY2VybiI6Iml0eG4uYXNzZXRfdHJhbnNmZXI7dHJhbnNmZXJfdHJvcGh5X2Fzc2V0In0nLAogICAgLy8gKS5zdWJtaXQoKQogICAgaXR4bl9iZWdpbgogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9jb250cmFjdC5weToyMTUKICAgIC8vIGFzc2V0X3JlY2VpdmVyPVR4bi5zZW5kZXIsCiAgICB0eG4gU2VuZGVyCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L2NvbnRyYWN0LnB5OjIxNwogICAgLy8gbm90ZT1iJ3BpZW91dDpqeyJtZXRob2QiOiJjbGFpbV90cm9waHkiLCJjb25jZXJuIjoiaXR4bi5hc3NldF90cmFuc2Zlcjt0cmFuc2Zlcl90cm9waHlfYXNzZXQifScsCiAgICBwdXNoYnl0ZXMgMHg3MDY5NjU2Zjc1NzQzYTZhN2IyMjZkNjU3NDY4NmY2NDIyM2EyMjYzNmM2MTY5NmQ1Zjc0NzI2ZjcwNjg3OTIyMmMyMjYzNmY2ZTYzNjU3MjZlMjIzYTIyNjk3NDc4NmUyZTYxNzM3MzY1NzQ1Zjc0NzI2MTZlNzM2NjY1NzIzYjc0NzI2MTZlNzM2NjY1NzI1Zjc0NzI2ZjcwNjg3OTVmNjE3MzczNjU3NDIyN2QKICAgIGl0eG5fZmllbGQgTm90ZQogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9jb250cmFjdC5weToyMTYKICAgIC8vIGFzc2V0X2Ftb3VudD0xLAogICAgaW50Y18wIC8vIDEKICAgIGl0eG5fZmllbGQgQXNzZXRBbW91bnQKICAgIGl0eG5fZmllbGQgQXNzZXRSZWNlaXZlcgogICAgaXR4bl9maWVsZCBYZmVyQXNzZXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvY29udHJhY3QucHk6MjEyLTIxMwogICAgLy8gIyBUcmFuc2ZlciBnYW1lIHRyb3BoeSB0byBzZW5kZXIgYnkgbWFraW5nIGFuIGFzc2V0IHRyYW5zZmVyIGlubmVyIHRyYW5zYWN0aW9uCiAgICAvLyBpdHhuLkFzc2V0VHJhbnNmZXIoCiAgICBwdXNoaW50IDQgLy8gYXhmZXIKICAgIGl0eG5fZmllbGQgVHlwZUVudW0KICAgIGludGNfMSAvLyAwCiAgICBpdHhuX2ZpZWxkIEZlZQogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9jb250cmFjdC5weToyMTItMjE4CiAgICAvLyAjIFRyYW5zZmVyIGdhbWUgdHJvcGh5IHRvIHNlbmRlciBieSBtYWtpbmcgYW4gYXNzZXQgdHJhbnNmZXIgaW5uZXIgdHJhbnNhY3Rpb24KICAgIC8vIGl0eG4uQXNzZXRUcmFuc2ZlcigKICAgIC8vICAgICB4ZmVyX2Fzc2V0PXNlbGYuYm94X2dhbWVfdHJvcGh5LnZhbHVlLmFzc2V0X2lkLm5hdGl2ZSwKICAgIC8vICAgICBhc3NldF9yZWNlaXZlcj1UeG4uc2VuZGVyLAogICAgLy8gICAgIGFzc2V0X2Ftb3VudD0xLAogICAgLy8gICAgIG5vdGU9YidwaWVvdXQ6ansibWV0aG9kIjoiY2xhaW1fdHJvcGh5IiwiY29uY2VybiI6Iml0eG4uYXNzZXRfdHJhbnNmZXI7dHJhbnNmZXJfdHJvcGh5X2Fzc2V0In0nLAogICAgLy8gKS5zdWJtaXQoKQogICAgaXR4bl9zdWJtaXQKICAgIHJldHN1YgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy5waWVvdXQuY29udHJhY3QuUGllb3V0Lm5ld19nYW1lKG1heF9wbGF5ZXJzOiB1aW50NjQsIGJveF9zX3BheTogdWludDY0LCBib3hfcF9wYXk6IHVpbnQ2NCwgc3Rha2VfcGF5OiB1aW50NjQpIC0+IHZvaWQ6Cm5ld19nYW1lOgogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9jb250cmFjdC5weToyMjAtMjI4CiAgICAvLyAjIENyZWF0ZSBuZXcgZ2FtZSBpbnN0YW5jZSB3aXRoIGEgdW5pcXVlIElECiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIC8vIGRlZiBuZXdfZ2FtZSgKICAgIC8vICAgICBzZWxmLAogICAgLy8gICAgIG1heF9wbGF5ZXJzOiBVSW50NjQsCiAgICAvLyAgICAgYm94X3NfcGF5OiBndHhuLlBheW1lbnRUcmFuc2FjdGlvbiwKICAgIC8vICAgICBib3hfcF9wYXk6IGd0eG4uUGF5bWVudFRyYW5zYWN0aW9uLAogICAgLy8gICAgIHN0YWtlX3BheTogZ3R4bi5QYXltZW50VHJhbnNhY3Rpb24sCiAgICAvLyApIC0+IE5vbmU6CiAgICBwcm90byA0IDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvY29udHJhY3QucHk6MjI5LTIzMAogICAgLy8gIyBGYWlsIHRyYW5zYWN0aW9uIHVubGVzcyB0aGUgYXNzZXJ0aW9uIGJlbG93IGV2YWx1YXRlcyBUcnVlCiAgICAvLyBhc3NlcnQgR2xvYmFsLmdyb3VwX3NpemUgPT0gNCwgZXJyLklOVkFMSURfR1JPVVBfU0laRQogICAgZ2xvYmFsIEdyb3VwU2l6ZQogICAgcHVzaGludCA0IC8vIDQKICAgID09CiAgICBhc3NlcnQgLy8gSW52YWxpZCBncm91cCBzaXplLiBFbnN1cmUgbnVtYmVyIG9mIHRyYW5zYWN0aW9uIGluIGdyb3VwIGlzIHdpdGhpbiB2YWxpZCBib3VuZHMuCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L2NvbnRyYWN0LnB5OjIzMQogICAgLy8gYXNzZXJ0IHNlbGYuYm94X2dhbWVfdHJvcGh5LCBlcnIuQk9YX05PVF9GT1VORAogICAgYnl0ZWNfMiAvLyAidF8iCiAgICBib3hfbGVuCiAgICBidXJ5IDEKICAgIGFzc2VydCAvLyBCb3ggbm90IGZvdW5kLiBFbnN1cmUgdGhlIGJveCB5b3UgYXJlIHRyeWluZyB0byBhY2Nlc3Mgd2FzIGNyZWF0ZWQgYW5kIHN0aWxsIGV4aXN0cy4KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvY29udHJhY3QucHk6MjMzCiAgICAvLyBtYXhfcGxheWVycyA+PSBjc3QuTUFYX1BMQVlFUlNfQk9UX0JPVU5ECiAgICBmcmFtZV9kaWcgLTQKICAgIHB1c2hpbnQgNCAvLyA0CiAgICA+PQogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9jb250cmFjdC5weToyMzMtMjM0CiAgICAvLyBtYXhfcGxheWVycyA+PSBjc3QuTUFYX1BMQVlFUlNfQk9UX0JPVU5ECiAgICAvLyBhbmQgbWF4X3BsYXllcnMgPD0gY3N0Lk1BWF9QTEFZRVJTX1RPUF9CT1VORAogICAgYnogbmV3X2dhbWVfYm9vbF9mYWxzZUAzCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L2NvbnRyYWN0LnB5OjIzNAogICAgLy8gYW5kIG1heF9wbGF5ZXJzIDw9IGNzdC5NQVhfUExBWUVSU19UT1BfQk9VTkQKICAgIGZyYW1lX2RpZyAtNAogICAgcHVzaGludCAxNiAvLyAxNgogICAgPD0KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvY29udHJhY3QucHk6MjMzLTIzNAogICAgLy8gbWF4X3BsYXllcnMgPj0gY3N0Lk1BWF9QTEFZRVJTX0JPVF9CT1VORAogICAgLy8gYW5kIG1heF9wbGF5ZXJzIDw9IGNzdC5NQVhfUExBWUVSU19UT1BfQk9VTkQKICAgIGJ6IG5ld19nYW1lX2Jvb2xfZmFsc2VAMwogICAgaW50Y18wIC8vIDEKCm5ld19nYW1lX2Jvb2xfbWVyZ2VANDoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvY29udHJhY3QucHk6MjMyLTIzNQogICAgLy8gYXNzZXJ0ICgKICAgIC8vICAgICBtYXhfcGxheWVycyA+PSBjc3QuTUFYX1BMQVlFUlNfQk9UX0JPVU5ECiAgICAvLyAgICAgYW5kIG1heF9wbGF5ZXJzIDw9IGNzdC5NQVhfUExBWUVSU19UT1BfQk9VTkQKICAgIC8vICksIGVyci5JTlZBTElEX01BWF9QTEFZRVJTCiAgICBhc3NlcnQgLy8gVGhlIG51bWJlciBvZiBtYXggcGxheWVycyBtdXN0IGJlIHdpdGhpbiBib3VuZHMuCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L2NvbnRyYWN0LnB5OjIzNwogICAgLy8gYXNzZXJ0IHN0YWtlX3BheS5hbW91bnQgPT0gY3N0LlNUQUtFX0FNT1VOVF9NQU5BR0VSLCBlcnIuSU5WQUxJRF9TVEFLRV9QQVlfRkVFCiAgICBmcmFtZV9kaWcgLTEKICAgIGd0eG5zIEFtb3VudAogICAgZHVwCiAgICBpbnRjIDQgLy8gMTAwMAogICAgPT0KICAgIGFzc2VydCAvLyBJbnN1ZmZpY2llbnQgZnVuZHMuIFN0YWtlIHBheSBhbW91bnQgaXMgbm90IGVub3VnaCB0byBjb3ZlciBzdGFraW5nIHJlcXVpcmVtZW50cy4KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvY29udHJhY3QucHk6MjM4CiAgICAvLyBhc3NlcnQgYm94X3NfcGF5LmFtb3VudCA9PSBjc3QuQk9YX1NfQ09TVCwgZXJyLklOVkFMSURfQk9YX1BBWV9GRUUKICAgIGZyYW1lX2RpZyAtMwogICAgZ3R4bnMgQW1vdW50CiAgICBpbnRjIDExIC8vIDY3MzAwCiAgICA9PQogICAgYXNzZXJ0IC8vIEluc3VmZmljaWVudCBmdW5kcy4gQm94IHBheSBhbW91bnQgaXMgbm90IGVub3VnaCB0byBjb3ZlciBhcHBsaWNhdGlvbiBNQlIuCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L2NvbnRyYWN0LnB5OjIzOQogICAgLy8gYXNzZXJ0IGJveF9wX3BheS5hbW91bnQgPT0gc2VsZi5jYWxjX3NpbmdsZV9ib3hfY29zdCgKICAgIGZyYW1lX2RpZyAtMgogICAgZ3R4bnMgQW1vdW50CiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L2NvbnRyYWN0LnB5OjI0MQogICAgLy8gdmFsdWVfc2l6ZT1hcmM0LlVJbnQxNihjc3QuQUREUkVTU19TSVpFICogbWF4X3BsYXllcnMpLAogICAgaW50Y18zIC8vIDMyCiAgICBmcmFtZV9kaWcgLTQKICAgICoKICAgIGR1cAogICAgaXRvYgogICAgZHVwCiAgICBiaXRsZW4KICAgIHB1c2hpbnQgMTYgLy8gMTYKICAgIDw9CiAgICBhc3NlcnQgLy8gb3ZlcmZsb3cKICAgIGV4dHJhY3QgNiAyCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L2NvbnRyYWN0LnB5OjI0MAogICAgLy8ga2V5X3NpemU9YXJjNC5VSW50OCgxMCksCiAgICBwdXNoYnl0ZXMgMHgwYQogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9jb250cmFjdC5weToyMzktMjQyCiAgICAvLyBhc3NlcnQgYm94X3BfcGF5LmFtb3VudCA9PSBzZWxmLmNhbGNfc2luZ2xlX2JveF9jb3N0KAogICAgLy8gICAgIGtleV9zaXplPWFyYzQuVUludDgoMTApLAogICAgLy8gICAgIHZhbHVlX3NpemU9YXJjNC5VSW50MTYoY3N0LkFERFJFU1NfU0laRSAqIG1heF9wbGF5ZXJzKSwKICAgIC8vICksIGVyci5JTlZBTElEX0JPWF9QQVlfRkVFCiAgICBzd2FwCiAgICBjYWxsc3ViIGNhbGNfc2luZ2xlX2JveF9jb3N0CiAgICB1bmNvdmVyIDIKICAgID09CiAgICBhc3NlcnQgLy8gSW5zdWZmaWNpZW50IGZ1bmRzLiBCb3ggcGF5IGFtb3VudCBpcyBub3QgZW5vdWdoIHRvIGNvdmVyIGFwcGxpY2F0aW9uIE1CUi4KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvY29udHJhY3QucHk6MjQ0CiAgICAvLyBhc3NlcnQgc3Rha2VfcGF5LnNlbmRlciA9PSBUeG4uc2VuZGVyLCBlcnIuSU5WQUxJRF9TVEFLRV9QQVlfU0VOREVSCiAgICBmcmFtZV9kaWcgLTEKICAgIGd0eG5zIFNlbmRlcgogICAgdHhuIFNlbmRlcgogICAgPT0KICAgIGFzc2VydCAvLyBTdGFrZSBwYXltZW50IHNlbmRlciBhZGRyZXNzIG11c3QgbWF0Y2ggdHJhbnNhY3Rpb24gc2VuZGVyIGFkZHJlc3MuCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L2NvbnRyYWN0LnB5OjI0NQogICAgLy8gYXNzZXJ0IGJveF9zX3BheS5zZW5kZXIgPT0gVHhuLnNlbmRlciwgZXJyLklOVkFMSURfQk9YX1BBWV9TRU5ERVIKICAgIGZyYW1lX2RpZyAtMwogICAgZ3R4bnMgU2VuZGVyCiAgICB0eG4gU2VuZGVyCiAgICA9PQogICAgYXNzZXJ0IC8vIEJveCBwYXltZW50IHNlbmRlciBhZGRyZXNzIG11c3QgbWF0Y2ggdHJhbnNhY3Rpb24gc2VuZGVyIGFkZHJlc3MuCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L2NvbnRyYWN0LnB5OjI0NgogICAgLy8gYXNzZXJ0IGJveF9wX3BheS5zZW5kZXIgPT0gVHhuLnNlbmRlciwgZXJyLklOVkFMSURfQk9YX1BBWV9TRU5ERVIKICAgIGZyYW1lX2RpZyAtMgogICAgZ3R4bnMgU2VuZGVyCiAgICB0eG4gU2VuZGVyCiAgICA9PQogICAgYXNzZXJ0IC8vIEJveCBwYXltZW50IHNlbmRlciBhZGRyZXNzIG11c3QgbWF0Y2ggdHJhbnNhY3Rpb24gc2VuZGVyIGFkZHJlc3MuCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L2NvbnRyYWN0LnB5OjI0OQogICAgLy8gc3Rha2VfcGF5LnJlY2VpdmVyID09IEdsb2JhbC5jdXJyZW50X2FwcGxpY2F0aW9uX2FkZHJlc3MKICAgIGZyYW1lX2RpZyAtMQogICAgZ3R4bnMgUmVjZWl2ZXIKICAgIGdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCiAgICA9PQogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9jb250cmFjdC5weToyNDgtMjUwCiAgICAvLyBhc3NlcnQgKAogICAgLy8gICAgIHN0YWtlX3BheS5yZWNlaXZlciA9PSBHbG9iYWwuY3VycmVudF9hcHBsaWNhdGlvbl9hZGRyZXNzCiAgICAvLyApLCBlcnIuSU5WQUxJRF9TVEFLRV9QQVlfUkVDRUlWRVIKICAgIGFzc2VydCAvLyBTdGFrZSBwYXltZW50IHJlY2VpdmVyIGFkZHJlc3MgbXVzdCBtYXRjaCBhcHBsaWNhdGlvbiBhZGRyZXNzLgogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9jb250cmFjdC5weToyNTIKICAgIC8vIGJveF9zX3BheS5yZWNlaXZlciA9PSBHbG9iYWwuY3VycmVudF9hcHBsaWNhdGlvbl9hZGRyZXNzCiAgICBmcmFtZV9kaWcgLTMKICAgIGd0eG5zIFJlY2VpdmVyCiAgICBnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwogICAgPT0KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvY29udHJhY3QucHk6MjUxLTI1MwogICAgLy8gYXNzZXJ0ICgKICAgIC8vICAgICBib3hfc19wYXkucmVjZWl2ZXIgPT0gR2xvYmFsLmN1cnJlbnRfYXBwbGljYXRpb25fYWRkcmVzcwogICAgLy8gKSwgZXJyLklOVkFMSURfQk9YX1BBWV9SRUNFSVZFUgogICAgYXNzZXJ0IC8vIEJveCBwYXltZW50IHJlY2VpdmVyIGFkZHJlc3MgbXVzdCBtYXRjaCBhcHBsaWNhdGlvbiBhZGRyZXNzLgogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9jb250cmFjdC5weToyNTUKICAgIC8vIGJveF9wX3BheS5yZWNlaXZlciA9PSBHbG9iYWwuY3VycmVudF9hcHBsaWNhdGlvbl9hZGRyZXNzCiAgICBmcmFtZV9kaWcgLTIKICAgIGd0eG5zIFJlY2VpdmVyCiAgICBnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwogICAgPT0KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvY29udHJhY3QucHk6MjU0LTI1NgogICAgLy8gYXNzZXJ0ICgKICAgIC8vICAgICBib3hfcF9wYXkucmVjZWl2ZXIgPT0gR2xvYmFsLmN1cnJlbnRfYXBwbGljYXRpb25fYWRkcmVzcwogICAgLy8gKSwgZXJyLklOVkFMSURfQk9YX1BBWV9SRUNFSVZFUgogICAgYXNzZXJ0IC8vIEJveCBwYXltZW50IHJlY2VpdmVyIGFkZHJlc3MgbXVzdCBtYXRjaCBhcHBsaWNhdGlvbiBhZGRyZXNzLgogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9jb250cmFjdC5weToyNjEKICAgIC8vIG1heF9wbGF5ZXJzPWFyYzQuVUludDgobWF4X3BsYXllcnMpLAogICAgZnJhbWVfZGlnIC00CiAgICBpdG9iCiAgICBkdXAKICAgIGJpdGxlbgogICAgcHVzaGludCA4IC8vIDgKICAgIDw9CiAgICBhc3NlcnQgLy8gb3ZlcmZsb3cKICAgIGV4dHJhY3QgNyAxCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L2NvbnRyYWN0LnB5OjI2NwogICAgLy8gZXhwaXJ5X3RzPWFyYzQuVUludDY0KEdsb2JhbC5sYXRlc3RfdGltZXN0YW1wICsgY3N0LkVYUElSWV9JTlRFUlZBTCksCiAgICBnbG9iYWwgTGF0ZXN0VGltZXN0YW1wCiAgICBpbnRjIDUgLy8gMzYwMAogICAgKwogICAgaXRvYgogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9jb250cmFjdC5weToyNjgKICAgIC8vIHByaXplX3Bvb2w9YXJjNC5VSW50NjQoc3Rha2VfcGF5LmFtb3VudCksCiAgICB1bmNvdmVyIDMKICAgIGl0b2IKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvY29udHJhY3QucHk6MjY5CiAgICAvLyBhZG1pbl9hZGRyZXNzPWFyYzQuQWRkcmVzcyhUeG4uc2VuZGVyKSwKICAgIHR4biBTZW5kZXIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvY29udHJhY3QucHk6MjcwCiAgICAvLyBmaXJzdF9wbGFjZV9hZGRyZXNzPWFyYzQuQWRkcmVzcyhHbG9iYWwuemVyb19hZGRyZXNzKSwKICAgIGdsb2JhbCBaZXJvQWRkcmVzcwogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9jb250cmFjdC5weToyNzEtMjcyCiAgICAvLyBzZWNvbmRfcGxhY2VfYWRkcmVzcz1hcmM0LkFkZHJlc3MoR2xvYmFsLnplcm9fYWRkcmVzcyksCiAgICAvLyB0aGlyZF9wbGFjZV9hZGRyZXNzPWFyYzQuQWRkcmVzcyhHbG9iYWwuemVyb19hZGRyZXNzKSwKICAgIGR1cG4gMgogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9jb250cmFjdC5weToyNjAKICAgIC8vIHN0YWtpbmdfZmluYWxpemVkPWFyYzQuQm9vbChGYWxzZSksICAjIG5vcWE6IEZCVDAwMwogICAgYnl0ZWNfMSAvLyAweDAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L2NvbnRyYWN0LnB5OjI1OC0yNzMKICAgIC8vICMgSW5pdGlhbGl6ZSBhIG5ldyBnYW1lIHN0YXRlIGJveCB3aXRoIHVuaXF1ZSBnYW1lIElRIGFuZCB3cml0ZSB0aGUgZGVmYXVsdCBzdGFydGluZyB2YWx1ZXMgaW5zaWRlCiAgICAvLyBzZWxmLmJveF9nYW1lX3N0YXRlW3NlbGYuZ2FtZV9pZF0gPSBzdGMuR2FtZVN0YXRlKAogICAgLy8gICAgIHN0YWtpbmdfZmluYWxpemVkPWFyYzQuQm9vbChGYWxzZSksICAjIG5vcWE6IEZCVDAwMwogICAgLy8gICAgIG1heF9wbGF5ZXJzPWFyYzQuVUludDgobWF4X3BsYXllcnMpLAogICAgLy8gICAgIGFjdGl2ZV9wbGF5ZXJzPWFyYzQuVUludDgoMSksCiAgICAvLyAgICAgZmlyc3RfcGxhY2Vfc2NvcmU9YXJjNC5VSW50OCgwKSwKICAgIC8vICAgICBzZWNvbmRfcGxhY2Vfc2NvcmU9YXJjNC5VSW50OCgwKSwKICAgIC8vICAgICB0aGlyZF9wbGFjZV9zY29yZT1hcmM0LlVJbnQ4KDApLAogICAgLy8gICAgIGJveF9wX3N0YXJ0X3Bvcz1hcmM0LlVJbnQxNihjc3QuQUREUkVTU19TSVpFKSwKICAgIC8vICAgICBleHBpcnlfdHM9YXJjNC5VSW50NjQoR2xvYmFsLmxhdGVzdF90aW1lc3RhbXAgKyBjc3QuRVhQSVJZX0lOVEVSVkFMKSwKICAgIC8vICAgICBwcml6ZV9wb29sPWFyYzQuVUludDY0KHN0YWtlX3BheS5hbW91bnQpLAogICAgLy8gICAgIGFkbWluX2FkZHJlc3M9YXJjNC5BZGRyZXNzKFR4bi5zZW5kZXIpLAogICAgLy8gICAgIGZpcnN0X3BsYWNlX2FkZHJlc3M9YXJjNC5BZGRyZXNzKEdsb2JhbC56ZXJvX2FkZHJlc3MpLAogICAgLy8gICAgIHNlY29uZF9wbGFjZV9hZGRyZXNzPWFyYzQuQWRkcmVzcyhHbG9iYWwuemVyb19hZGRyZXNzKSwKICAgIC8vICAgICB0aGlyZF9wbGFjZV9hZGRyZXNzPWFyYzQuQWRkcmVzcyhHbG9iYWwuemVyb19hZGRyZXNzKSwKICAgIC8vICkKICAgIHVuY292ZXIgNwogICAgY29uY2F0CiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L2NvbnRyYWN0LnB5OjI2MgogICAgLy8gYWN0aXZlX3BsYXllcnM9YXJjNC5VSW50OCgxKSwKICAgIHB1c2hieXRlcyAweDAxCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L2NvbnRyYWN0LnB5OjI1OC0yNzMKICAgIC8vICMgSW5pdGlhbGl6ZSBhIG5ldyBnYW1lIHN0YXRlIGJveCB3aXRoIHVuaXF1ZSBnYW1lIElRIGFuZCB3cml0ZSB0aGUgZGVmYXVsdCBzdGFydGluZyB2YWx1ZXMgaW5zaWRlCiAgICAvLyBzZWxmLmJveF9nYW1lX3N0YXRlW3NlbGYuZ2FtZV9pZF0gPSBzdGMuR2FtZVN0YXRlKAogICAgLy8gICAgIHN0YWtpbmdfZmluYWxpemVkPWFyYzQuQm9vbChGYWxzZSksICAjIG5vcWE6IEZCVDAwMwogICAgLy8gICAgIG1heF9wbGF5ZXJzPWFyYzQuVUludDgobWF4X3BsYXllcnMpLAogICAgLy8gICAgIGFjdGl2ZV9wbGF5ZXJzPWFyYzQuVUludDgoMSksCiAgICAvLyAgICAgZmlyc3RfcGxhY2Vfc2NvcmU9YXJjNC5VSW50OCgwKSwKICAgIC8vICAgICBzZWNvbmRfcGxhY2Vfc2NvcmU9YXJjNC5VSW50OCgwKSwKICAgIC8vICAgICB0aGlyZF9wbGFjZV9zY29yZT1hcmM0LlVJbnQ4KDApLAogICAgLy8gICAgIGJveF9wX3N0YXJ0X3Bvcz1hcmM0LlVJbnQxNihjc3QuQUREUkVTU19TSVpFKSwKICAgIC8vICAgICBleHBpcnlfdHM9YXJjNC5VSW50NjQoR2xvYmFsLmxhdGVzdF90aW1lc3RhbXAgKyBjc3QuRVhQSVJZX0lOVEVSVkFMKSwKICAgIC8vICAgICBwcml6ZV9wb29sPWFyYzQuVUludDY0KHN0YWtlX3BheS5hbW91bnQpLAogICAgLy8gICAgIGFkbWluX2FkZHJlc3M9YXJjNC5BZGRyZXNzKFR4bi5zZW5kZXIpLAogICAgLy8gICAgIGZpcnN0X3BsYWNlX2FkZHJlc3M9YXJjNC5BZGRyZXNzKEdsb2JhbC56ZXJvX2FkZHJlc3MpLAogICAgLy8gICAgIHNlY29uZF9wbGFjZV9hZGRyZXNzPWFyYzQuQWRkcmVzcyhHbG9iYWwuemVyb19hZGRyZXNzKSwKICAgIC8vICAgICB0aGlyZF9wbGFjZV9hZGRyZXNzPWFyYzQuQWRkcmVzcyhHbG9iYWwuemVyb19hZGRyZXNzKSwKICAgIC8vICkKICAgIGNvbmNhdAogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9jb250cmFjdC5weToyNjMKICAgIC8vIGZpcnN0X3BsYWNlX3Njb3JlPWFyYzQuVUludDgoMCksCiAgICBieXRlY18xIC8vIDB4MDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvY29udHJhY3QucHk6MjU4LTI3MwogICAgLy8gIyBJbml0aWFsaXplIGEgbmV3IGdhbWUgc3RhdGUgYm94IHdpdGggdW5pcXVlIGdhbWUgSVEgYW5kIHdyaXRlIHRoZSBkZWZhdWx0IHN0YXJ0aW5nIHZhbHVlcyBpbnNpZGUKICAgIC8vIHNlbGYuYm94X2dhbWVfc3RhdGVbc2VsZi5nYW1lX2lkXSA9IHN0Yy5HYW1lU3RhdGUoCiAgICAvLyAgICAgc3Rha2luZ19maW5hbGl6ZWQ9YXJjNC5Cb29sKEZhbHNlKSwgICMgbm9xYTogRkJUMDAzCiAgICAvLyAgICAgbWF4X3BsYXllcnM9YXJjNC5VSW50OChtYXhfcGxheWVycyksCiAgICAvLyAgICAgYWN0aXZlX3BsYXllcnM9YXJjNC5VSW50OCgxKSwKICAgIC8vICAgICBmaXJzdF9wbGFjZV9zY29yZT1hcmM0LlVJbnQ4KDApLAogICAgLy8gICAgIHNlY29uZF9wbGFjZV9zY29yZT1hcmM0LlVJbnQ4KDApLAogICAgLy8gICAgIHRoaXJkX3BsYWNlX3Njb3JlPWFyYzQuVUludDgoMCksCiAgICAvLyAgICAgYm94X3Bfc3RhcnRfcG9zPWFyYzQuVUludDE2KGNzdC5BRERSRVNTX1NJWkUpLAogICAgLy8gICAgIGV4cGlyeV90cz1hcmM0LlVJbnQ2NChHbG9iYWwubGF0ZXN0X3RpbWVzdGFtcCArIGNzdC5FWFBJUllfSU5URVJWQUwpLAogICAgLy8gICAgIHByaXplX3Bvb2w9YXJjNC5VSW50NjQoc3Rha2VfcGF5LmFtb3VudCksCiAgICAvLyAgICAgYWRtaW5fYWRkcmVzcz1hcmM0LkFkZHJlc3MoVHhuLnNlbmRlciksCiAgICAvLyAgICAgZmlyc3RfcGxhY2VfYWRkcmVzcz1hcmM0LkFkZHJlc3MoR2xvYmFsLnplcm9fYWRkcmVzcyksCiAgICAvLyAgICAgc2Vjb25kX3BsYWNlX2FkZHJlc3M9YXJjNC5BZGRyZXNzKEdsb2JhbC56ZXJvX2FkZHJlc3MpLAogICAgLy8gICAgIHRoaXJkX3BsYWNlX2FkZHJlc3M9YXJjNC5BZGRyZXNzKEdsb2JhbC56ZXJvX2FkZHJlc3MpLAogICAgLy8gKQogICAgY29uY2F0CiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L2NvbnRyYWN0LnB5OjI2NAogICAgLy8gc2Vjb25kX3BsYWNlX3Njb3JlPWFyYzQuVUludDgoMCksCiAgICBieXRlY18xIC8vIDB4MDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvY29udHJhY3QucHk6MjU4LTI3MwogICAgLy8gIyBJbml0aWFsaXplIGEgbmV3IGdhbWUgc3RhdGUgYm94IHdpdGggdW5pcXVlIGdhbWUgSVEgYW5kIHdyaXRlIHRoZSBkZWZhdWx0IHN0YXJ0aW5nIHZhbHVlcyBpbnNpZGUKICAgIC8vIHNlbGYuYm94X2dhbWVfc3RhdGVbc2VsZi5nYW1lX2lkXSA9IHN0Yy5HYW1lU3RhdGUoCiAgICAvLyAgICAgc3Rha2luZ19maW5hbGl6ZWQ9YXJjNC5Cb29sKEZhbHNlKSwgICMgbm9xYTogRkJUMDAzCiAgICAvLyAgICAgbWF4X3BsYXllcnM9YXJjNC5VSW50OChtYXhfcGxheWVycyksCiAgICAvLyAgICAgYWN0aXZlX3BsYXllcnM9YXJjNC5VSW50OCgxKSwKICAgIC8vICAgICBmaXJzdF9wbGFjZV9zY29yZT1hcmM0LlVJbnQ4KDApLAogICAgLy8gICAgIHNlY29uZF9wbGFjZV9zY29yZT1hcmM0LlVJbnQ4KDApLAogICAgLy8gICAgIHRoaXJkX3BsYWNlX3Njb3JlPWFyYzQuVUludDgoMCksCiAgICAvLyAgICAgYm94X3Bfc3RhcnRfcG9zPWFyYzQuVUludDE2KGNzdC5BRERSRVNTX1NJWkUpLAogICAgLy8gICAgIGV4cGlyeV90cz1hcmM0LlVJbnQ2NChHbG9iYWwubGF0ZXN0X3RpbWVzdGFtcCArIGNzdC5FWFBJUllfSU5URVJWQUwpLAogICAgLy8gICAgIHByaXplX3Bvb2w9YXJjNC5VSW50NjQoc3Rha2VfcGF5LmFtb3VudCksCiAgICAvLyAgICAgYWRtaW5fYWRkcmVzcz1hcmM0LkFkZHJlc3MoVHhuLnNlbmRlciksCiAgICAvLyAgICAgZmlyc3RfcGxhY2VfYWRkcmVzcz1hcmM0LkFkZHJlc3MoR2xvYmFsLnplcm9fYWRkcmVzcyksCiAgICAvLyAgICAgc2Vjb25kX3BsYWNlX2FkZHJlc3M9YXJjNC5BZGRyZXNzKEdsb2JhbC56ZXJvX2FkZHJlc3MpLAogICAgLy8gICAgIHRoaXJkX3BsYWNlX2FkZHJlc3M9YXJjNC5BZGRyZXNzKEdsb2JhbC56ZXJvX2FkZHJlc3MpLAogICAgLy8gKQogICAgY29uY2F0CiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L2NvbnRyYWN0LnB5OjI2NQogICAgLy8gdGhpcmRfcGxhY2Vfc2NvcmU9YXJjNC5VSW50OCgwKSwKICAgIGJ5dGVjXzEgLy8gMHgwMAogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9jb250cmFjdC5weToyNTgtMjczCiAgICAvLyAjIEluaXRpYWxpemUgYSBuZXcgZ2FtZSBzdGF0ZSBib3ggd2l0aCB1bmlxdWUgZ2FtZSBJUSBhbmQgd3JpdGUgdGhlIGRlZmF1bHQgc3RhcnRpbmcgdmFsdWVzIGluc2lkZQogICAgLy8gc2VsZi5ib3hfZ2FtZV9zdGF0ZVtzZWxmLmdhbWVfaWRdID0gc3RjLkdhbWVTdGF0ZSgKICAgIC8vICAgICBzdGFraW5nX2ZpbmFsaXplZD1hcmM0LkJvb2woRmFsc2UpLCAgIyBub3FhOiBGQlQwMDMKICAgIC8vICAgICBtYXhfcGxheWVycz1hcmM0LlVJbnQ4KG1heF9wbGF5ZXJzKSwKICAgIC8vICAgICBhY3RpdmVfcGxheWVycz1hcmM0LlVJbnQ4KDEpLAogICAgLy8gICAgIGZpcnN0X3BsYWNlX3Njb3JlPWFyYzQuVUludDgoMCksCiAgICAvLyAgICAgc2Vjb25kX3BsYWNlX3Njb3JlPWFyYzQuVUludDgoMCksCiAgICAvLyAgICAgdGhpcmRfcGxhY2Vfc2NvcmU9YXJjNC5VSW50OCgwKSwKICAgIC8vICAgICBib3hfcF9zdGFydF9wb3M9YXJjNC5VSW50MTYoY3N0LkFERFJFU1NfU0laRSksCiAgICAvLyAgICAgZXhwaXJ5X3RzPWFyYzQuVUludDY0KEdsb2JhbC5sYXRlc3RfdGltZXN0YW1wICsgY3N0LkVYUElSWV9JTlRFUlZBTCksCiAgICAvLyAgICAgcHJpemVfcG9vbD1hcmM0LlVJbnQ2NChzdGFrZV9wYXkuYW1vdW50KSwKICAgIC8vICAgICBhZG1pbl9hZGRyZXNzPWFyYzQuQWRkcmVzcyhUeG4uc2VuZGVyKSwKICAgIC8vICAgICBmaXJzdF9wbGFjZV9hZGRyZXNzPWFyYzQuQWRkcmVzcyhHbG9iYWwuemVyb19hZGRyZXNzKSwKICAgIC8vICAgICBzZWNvbmRfcGxhY2VfYWRkcmVzcz1hcmM0LkFkZHJlc3MoR2xvYmFsLnplcm9fYWRkcmVzcyksCiAgICAvLyAgICAgdGhpcmRfcGxhY2VfYWRkcmVzcz1hcmM0LkFkZHJlc3MoR2xvYmFsLnplcm9fYWRkcmVzcyksCiAgICAvLyApCiAgICBjb25jYXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvY29udHJhY3QucHk6MjY2CiAgICAvLyBib3hfcF9zdGFydF9wb3M9YXJjNC5VSW50MTYoY3N0LkFERFJFU1NfU0laRSksCiAgICBieXRlYyAxMSAvLyAweDAwMjAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvY29udHJhY3QucHk6MjU4LTI3MwogICAgLy8gIyBJbml0aWFsaXplIGEgbmV3IGdhbWUgc3RhdGUgYm94IHdpdGggdW5pcXVlIGdhbWUgSVEgYW5kIHdyaXRlIHRoZSBkZWZhdWx0IHN0YXJ0aW5nIHZhbHVlcyBpbnNpZGUKICAgIC8vIHNlbGYuYm94X2dhbWVfc3RhdGVbc2VsZi5nYW1lX2lkXSA9IHN0Yy5HYW1lU3RhdGUoCiAgICAvLyAgICAgc3Rha2luZ19maW5hbGl6ZWQ9YXJjNC5Cb29sKEZhbHNlKSwgICMgbm9xYTogRkJUMDAzCiAgICAvLyAgICAgbWF4X3BsYXllcnM9YXJjNC5VSW50OChtYXhfcGxheWVycyksCiAgICAvLyAgICAgYWN0aXZlX3BsYXllcnM9YXJjNC5VSW50OCgxKSwKICAgIC8vICAgICBmaXJzdF9wbGFjZV9zY29yZT1hcmM0LlVJbnQ4KDApLAogICAgLy8gICAgIHNlY29uZF9wbGFjZV9zY29yZT1hcmM0LlVJbnQ4KDApLAogICAgLy8gICAgIHRoaXJkX3BsYWNlX3Njb3JlPWFyYzQuVUludDgoMCksCiAgICAvLyAgICAgYm94X3Bfc3RhcnRfcG9zPWFyYzQuVUludDE2KGNzdC5BRERSRVNTX1NJWkUpLAogICAgLy8gICAgIGV4cGlyeV90cz1hcmM0LlVJbnQ2NChHbG9iYWwubGF0ZXN0X3RpbWVzdGFtcCArIGNzdC5FWFBJUllfSU5URVJWQUwpLAogICAgLy8gICAgIHByaXplX3Bvb2w9YXJjNC5VSW50NjQoc3Rha2VfcGF5LmFtb3VudCksCiAgICAvLyAgICAgYWRtaW5fYWRkcmVzcz1hcmM0LkFkZHJlc3MoVHhuLnNlbmRlciksCiAgICAvLyAgICAgZmlyc3RfcGxhY2VfYWRkcmVzcz1hcmM0LkFkZHJlc3MoR2xvYmFsLnplcm9fYWRkcmVzcyksCiAgICAvLyAgICAgc2Vjb25kX3BsYWNlX2FkZHJlc3M9YXJjNC5BZGRyZXNzKEdsb2JhbC56ZXJvX2FkZHJlc3MpLAogICAgLy8gICAgIHRoaXJkX3BsYWNlX2FkZHJlc3M9YXJjNC5BZGRyZXNzKEdsb2JhbC56ZXJvX2FkZHJlc3MpLAogICAgLy8gKQogICAgY29uY2F0CiAgICB1bmNvdmVyIDYKICAgIGNvbmNhdAogICAgdW5jb3ZlciA1CiAgICBjb25jYXQKICAgIHVuY292ZXIgNAogICAgY29uY2F0CiAgICB1bmNvdmVyIDMKICAgIGNvbmNhdAogICAgdW5jb3ZlciAyCiAgICBjb25jYXQKICAgIHN3YXAKICAgIGNvbmNhdAogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9jb250cmFjdC5weToyNTgtMjU5CiAgICAvLyAjIEluaXRpYWxpemUgYSBuZXcgZ2FtZSBzdGF0ZSBib3ggd2l0aCB1bmlxdWUgZ2FtZSBJUSBhbmQgd3JpdGUgdGhlIGRlZmF1bHQgc3RhcnRpbmcgdmFsdWVzIGluc2lkZQogICAgLy8gc2VsZi5ib3hfZ2FtZV9zdGF0ZVtzZWxmLmdhbWVfaWRdID0gc3RjLkdhbWVTdGF0ZSgKICAgIGludGNfMSAvLyAwCiAgICBieXRlYyA5IC8vICJnYW1lX2lkIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmdhbWVfaWQgZXhpc3RzCiAgICBkdXAKICAgIGl0b2IKICAgIGJ5dGVjIDQgLy8gInNfIgogICAgZGlnIDEKICAgIGNvbmNhdAogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9jb250cmFjdC5weToyNTgtMjczCiAgICAvLyAjIEluaXRpYWxpemUgYSBuZXcgZ2FtZSBzdGF0ZSBib3ggd2l0aCB1bmlxdWUgZ2FtZSBJUSBhbmQgd3JpdGUgdGhlIGRlZmF1bHQgc3RhcnRpbmcgdmFsdWVzIGluc2lkZQogICAgLy8gc2VsZi5ib3hfZ2FtZV9zdGF0ZVtzZWxmLmdhbWVfaWRdID0gc3RjLkdhbWVTdGF0ZSgKICAgIC8vICAgICBzdGFraW5nX2ZpbmFsaXplZD1hcmM0LkJvb2woRmFsc2UpLCAgIyBub3FhOiBGQlQwMDMKICAgIC8vICAgICBtYXhfcGxheWVycz1hcmM0LlVJbnQ4KG1heF9wbGF5ZXJzKSwKICAgIC8vICAgICBhY3RpdmVfcGxheWVycz1hcmM0LlVJbnQ4KDEpLAogICAgLy8gICAgIGZpcnN0X3BsYWNlX3Njb3JlPWFyYzQuVUludDgoMCksCiAgICAvLyAgICAgc2Vjb25kX3BsYWNlX3Njb3JlPWFyYzQuVUludDgoMCksCiAgICAvLyAgICAgdGhpcmRfcGxhY2Vfc2NvcmU9YXJjNC5VSW50OCgwKSwKICAgIC8vICAgICBib3hfcF9zdGFydF9wb3M9YXJjNC5VSW50MTYoY3N0LkFERFJFU1NfU0laRSksCiAgICAvLyAgICAgZXhwaXJ5X3RzPWFyYzQuVUludDY0KEdsb2JhbC5sYXRlc3RfdGltZXN0YW1wICsgY3N0LkVYUElSWV9JTlRFUlZBTCksCiAgICAvLyAgICAgcHJpemVfcG9vbD1hcmM0LlVJbnQ2NChzdGFrZV9wYXkuYW1vdW50KSwKICAgIC8vICAgICBhZG1pbl9hZGRyZXNzPWFyYzQuQWRkcmVzcyhUeG4uc2VuZGVyKSwKICAgIC8vICAgICBmaXJzdF9wbGFjZV9hZGRyZXNzPWFyYzQuQWRkcmVzcyhHbG9iYWwuemVyb19hZGRyZXNzKSwKICAgIC8vICAgICBzZWNvbmRfcGxhY2VfYWRkcmVzcz1hcmM0LkFkZHJlc3MoR2xvYmFsLnplcm9fYWRkcmVzcyksCiAgICAvLyAgICAgdGhpcmRfcGxhY2VfYWRkcmVzcz1hcmM0LkFkZHJlc3MoR2xvYmFsLnplcm9fYWRkcmVzcyksCiAgICAvLyApCiAgICB1bmNvdmVyIDMKICAgIGJveF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvY29udHJhY3QucHk6Mjc1LTI3NgogICAgLy8gIyBJbml0aWFsaXplIGJveCBnYW1lIHBsYXllcnMgd2l0aCB6ZXJvZWQgYnl0ZXMgdG8gc3RvcmUgYWxsIHBsYXllciBhZGRyZXNzZXMgKDMyIGJ5dGVzIHBlciBwbGF5ZXIpCiAgICAvLyBzZWxmLmJveF9nYW1lX3BsYXllcnNbc2VsZi5nYW1lX2lkXSA9IG9wLmJ6ZXJvKGNzdC5BRERSRVNTX1NJWkUgKiBtYXhfcGxheWVycykKICAgIHVuY292ZXIgMgogICAgYnplcm8KICAgIGJ5dGVjXzMgLy8gInBfIgogICAgdW5jb3ZlciAyCiAgICBjb25jYXQKICAgIGR1cAogICAgYm94X2RlbAogICAgcG9wCiAgICBkdXAKICAgIHVuY292ZXIgMgogICAgYm94X3B1dAogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9jb250cmFjdC5weToyODIKICAgIC8vIGdhbWVfcGxheWVyc19icmVmLnJlcGxhY2UoMCwgVHhuLnNlbmRlci5ieXRlcykKICAgIGludGNfMSAvLyAwCiAgICB0eG4gU2VuZGVyCiAgICBib3hfcmVwbGFjZQogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9jb250cmFjdC5weToyODQtMjg1CiAgICAvLyAjIEluY3JlbWVudCBnYW1lIGlkIGJ5IDEgZm9yIG5leHQgbmV3IGdhbWUgaW5zdGFuY2UKICAgIC8vIHNlbGYuZ2FtZV9pZCArPSAxCiAgICBpbnRjXzAgLy8gMQogICAgKwogICAgYnl0ZWMgOSAvLyAiZ2FtZV9pZCIKICAgIHN3YXAKICAgIGFwcF9nbG9iYWxfcHV0CiAgICByZXRzdWIKCm5ld19nYW1lX2Jvb2xfZmFsc2VAMzoKICAgIGludGNfMSAvLyAwCiAgICBiIG5ld19nYW1lX2Jvb2xfbWVyZ2VANAoKCi8vIHNtYXJ0X2NvbnRyYWN0cy5waWVvdXQuY29udHJhY3QuUGllb3V0LmpvaW5fZ2FtZShnYW1lX2lkOiB1aW50NjQsIHN0YWtlX3BheTogdWludDY0KSAtPiB2b2lkOgpqb2luX2dhbWU6CiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L2NvbnRyYWN0LnB5OjI4Ny0yOTMKICAgIC8vICMgSm9pbiBleGlzdGluZyBnYW1lIGluc3RhbmNlCiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIC8vIGRlZiBqb2luX2dhbWUoCiAgICAvLyAgICAgc2VsZiwKICAgIC8vICAgICBnYW1lX2lkOiBVSW50NjQsCiAgICAvLyAgICAgc3Rha2VfcGF5OiBndHhuLlBheW1lbnRUcmFuc2FjdGlvbiwKICAgIC8vICkgLT4gTm9uZToKICAgIHByb3RvIDIgMAogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9jb250cmFjdC5weToyOTYKICAgIC8vIGdhbWVfaWQKICAgIGZyYW1lX2RpZyAtMgogICAgaXRvYgogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9jb250cmFjdC5weToyOTQtMjk1CiAgICAvLyAjIFJldHJpZXZlIGN1cnJlbnQgZ2FtZSBzdGF0ZSBmcm9tIGJveCB1c2luZyB0aGUgZ2FtZSBpZCBwYXJhbWV0ZXIKICAgIC8vIGdhbWVfc3RhdGUgPSBzZWxmLmJveF9nYW1lX3N0YXRlWwogICAgYnl0ZWMgNCAvLyAic18iCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L2NvbnRyYWN0LnB5OjI5NC0yOTcKICAgIC8vICMgUmV0cmlldmUgY3VycmVudCBnYW1lIHN0YXRlIGZyb20gYm94IHVzaW5nIHRoZSBnYW1lIGlkIHBhcmFtZXRlcgogICAgLy8gZ2FtZV9zdGF0ZSA9IHNlbGYuYm94X2dhbWVfc3RhdGVbCiAgICAvLyAgICAgZ2FtZV9pZAogICAgLy8gXS5jb3B5KCkgICMgTWFrZSBhIGNvcHkgb2YgdGhlIGdhbWUgc3RhdGUgZWxzZSBpbW11dGFibGUKICAgIGRpZyAxCiAgICBjb25jYXQKICAgIGR1cAogICAgYm94X2dldAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYuYm94X2dhbWVfc3RhdGUgZW50cnkgZXhpc3RzCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L2NvbnRyYWN0LnB5OjI5OS0zMDAKICAgIC8vICMgRmFpbCB0cmFuc2FjdGlvbiB1bmxlc3MgdGhlIGFzc2VydGlvbiBiZWxvdyBldmFsdWF0ZXMgVHJ1ZQogICAgLy8gYXNzZXJ0IEdsb2JhbC5ncm91cF9zaXplID09IDIsIGVyci5JTlZBTElEX0dST1VQX1NJWkUKICAgIGdsb2JhbCBHcm91cFNpemUKICAgIGludGNfMiAvLyAyCiAgICA9PQogICAgYXNzZXJ0IC8vIEludmFsaWQgZ3JvdXAgc2l6ZS4gRW5zdXJlIG51bWJlciBvZiB0cmFuc2FjdGlvbiBpbiBncm91cCBpcyB3aXRoaW4gdmFsaWQgYm91bmRzLgogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9jb250cmFjdC5weTozMDEKICAgIC8vIGFzc2VydCBnYW1lX2lkIGluIHNlbGYuYm94X2dhbWVfc3RhdGUsIGVyci5HQU1FX0lEX05PVF9GT1VORAogICAgZGlnIDEKICAgIGJveF9sZW4KICAgIGJ1cnkgMQogICAgYXNzZXJ0IC8vIEJveCBnYW1lIHN0YXRlIG5vdCBmb3VuZC4gQ2hlY2sgaWYgZ2FtZSBJRCBleGlzdHMuCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L2NvbnRyYWN0LnB5OjMwMgogICAgLy8gYXNzZXJ0IHNlbGYuYm94X2dhbWVfdHJvcGh5LCBlcnIuQk9YX05PVF9GT1VORAogICAgYnl0ZWNfMiAvLyAidF8iCiAgICBib3hfbGVuCiAgICBidXJ5IDEKICAgIGFzc2VydCAvLyBCb3ggbm90IGZvdW5kLiBFbnN1cmUgdGhlIGJveCB5b3UgYXJlIHRyeWluZyB0byBhY2Nlc3Mgd2FzIGNyZWF0ZWQgYW5kIHN0aWxsIGV4aXN0cy4KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvY29udHJhY3QucHk6MzA0CiAgICAvLyBhc3NlcnQgc3Rha2VfcGF5LmFtb3VudCA9PSBjc3QuU1RBS0VfQU1PVU5UX01BTkFHRVIsIGVyci5JTlZBTElEX1NUQUtFX1BBWV9GRUUKICAgIGZyYW1lX2RpZyAtMQogICAgZ3R4bnMgQW1vdW50CiAgICBkdXAKICAgIGludGMgNCAvLyAxMDAwCiAgICA9PQogICAgYXNzZXJ0IC8vIEluc3VmZmljaWVudCBmdW5kcy4gU3Rha2UgcGF5IGFtb3VudCBpcyBub3QgZW5vdWdoIHRvIGNvdmVyIHN0YWtpbmcgcmVxdWlyZW1lbnRzLgogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9jb250cmFjdC5weTozMDUKICAgIC8vIGFzc2VydCBzdGFrZV9wYXkuc2VuZGVyID09IFR4bi5zZW5kZXIsIGVyci5JTlZBTElEX1NUQUtFX1BBWV9TRU5ERVIKICAgIGZyYW1lX2RpZyAtMQogICAgZ3R4bnMgU2VuZGVyCiAgICB0eG4gU2VuZGVyCiAgICA9PQogICAgYXNzZXJ0IC8vIFN0YWtlIHBheW1lbnQgc2VuZGVyIGFkZHJlc3MgbXVzdCBtYXRjaCB0cmFuc2FjdGlvbiBzZW5kZXIgYWRkcmVzcy4KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvY29udHJhY3QucHk6MzA3CiAgICAvLyBzdGFrZV9wYXkucmVjZWl2ZXIgPT0gR2xvYmFsLmN1cnJlbnRfYXBwbGljYXRpb25fYWRkcmVzcwogICAgZnJhbWVfZGlnIC0xCiAgICBndHhucyBSZWNlaXZlcgogICAgZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKICAgID09CiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L2NvbnRyYWN0LnB5OjMwNi0zMDgKICAgIC8vIGFzc2VydCAoCiAgICAvLyAgICAgc3Rha2VfcGF5LnJlY2VpdmVyID09IEdsb2JhbC5jdXJyZW50X2FwcGxpY2F0aW9uX2FkZHJlc3MKICAgIC8vICksIGVyci5JTlZBTElEX1NUQUtFX1BBWV9SRUNFSVZFUgogICAgYXNzZXJ0IC8vIFN0YWtlIHBheW1lbnQgcmVjZWl2ZXIgYWRkcmVzcyBtdXN0IG1hdGNoIGFwcGxpY2F0aW9uIGFkZHJlc3MuCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L2NvbnRyYWN0LnB5OjMxMgogICAgLy8gYWNjb3VudD1UeG4uc2VuZGVyLAogICAgdHhuIFNlbmRlcgogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9jb250cmFjdC5weTozMTQKICAgIC8vIHBsYXllcl9jb3VudD1zZWxmLmJveF9nYW1lX3N0YXRlW2dhbWVfaWRdLmFjdGl2ZV9wbGF5ZXJzLm5hdGl2ZSwKICAgIGRpZyAyCiAgICBpbnRjXzIgLy8gMgogICAgZ2V0Ynl0ZQogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9jb250cmFjdC5weTozMTAtMzE2CiAgICAvLyBzcnQuY2hlY2tfYWNjX2luX2dhbWUoICAjIG5vcWE6IEU3MTIsIFJVRjEwMAogICAgLy8gICAgIGdhbWVfaWQ9Z2FtZV9pZCwKICAgIC8vICAgICBhY2NvdW50PVR4bi5zZW5kZXIsCiAgICAvLyAgICAgYm94X2dhbWVfcGxheWVycz1zZWxmLmJveF9nYW1lX3BsYXllcnMsCiAgICAvLyAgICAgcGxheWVyX2NvdW50PXNlbGYuYm94X2dhbWVfc3RhdGVbZ2FtZV9pZF0uYWN0aXZlX3BsYXllcnMubmF0aXZlLAogICAgLy8gICAgIGNsZWFyX3BsYXllcj1GYWxzZSwKICAgIC8vICkKICAgIGZyYW1lX2RpZyAtMgogICAgdW5jb3ZlciAyCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L2NvbnRyYWN0LnB5OjMxMwogICAgLy8gYm94X2dhbWVfcGxheWVycz1zZWxmLmJveF9nYW1lX3BsYXllcnMsCiAgICBieXRlY18zIC8vICJwXyIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvY29udHJhY3QucHk6MzEwLTMxNgogICAgLy8gc3J0LmNoZWNrX2FjY19pbl9nYW1lKCAgIyBub3FhOiBFNzEyLCBSVUYxMDAKICAgIC8vICAgICBnYW1lX2lkPWdhbWVfaWQsCiAgICAvLyAgICAgYWNjb3VudD1UeG4uc2VuZGVyLAogICAgLy8gICAgIGJveF9nYW1lX3BsYXllcnM9c2VsZi5ib3hfZ2FtZV9wbGF5ZXJzLAogICAgLy8gICAgIHBsYXllcl9jb3VudD1zZWxmLmJveF9nYW1lX3N0YXRlW2dhbWVfaWRdLmFjdGl2ZV9wbGF5ZXJzLm5hdGl2ZSwKICAgIC8vICAgICBjbGVhcl9wbGF5ZXI9RmFsc2UsCiAgICAvLyApCiAgICBkaWcgMwogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9jb250cmFjdC5weTozMTUKICAgIC8vIGNsZWFyX3BsYXllcj1GYWxzZSwKICAgIGludGNfMSAvLyAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L2NvbnRyYWN0LnB5OjMxMC0zMTYKICAgIC8vIHNydC5jaGVja19hY2NfaW5fZ2FtZSggICMgbm9xYTogRTcxMiwgUlVGMTAwCiAgICAvLyAgICAgZ2FtZV9pZD1nYW1lX2lkLAogICAgLy8gICAgIGFjY291bnQ9VHhuLnNlbmRlciwKICAgIC8vICAgICBib3hfZ2FtZV9wbGF5ZXJzPXNlbGYuYm94X2dhbWVfcGxheWVycywKICAgIC8vICAgICBwbGF5ZXJfY291bnQ9c2VsZi5ib3hfZ2FtZV9zdGF0ZVtnYW1lX2lkXS5hY3RpdmVfcGxheWVycy5uYXRpdmUsCiAgICAvLyAgICAgY2xlYXJfcGxheWVyPUZhbHNlLAogICAgLy8gKQogICAgY2FsbHN1YiBjaGVja19hY2NfaW5fZ2FtZQogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9jb250cmFjdC5weTozMTAtMzE3CiAgICAvLyBzcnQuY2hlY2tfYWNjX2luX2dhbWUoICAjIG5vcWE6IEU3MTIsIFJVRjEwMAogICAgLy8gICAgIGdhbWVfaWQ9Z2FtZV9pZCwKICAgIC8vICAgICBhY2NvdW50PVR4bi5zZW5kZXIsCiAgICAvLyAgICAgYm94X2dhbWVfcGxheWVycz1zZWxmLmJveF9nYW1lX3BsYXllcnMsCiAgICAvLyAgICAgcGxheWVyX2NvdW50PXNlbGYuYm94X2dhbWVfc3RhdGVbZ2FtZV9pZF0uYWN0aXZlX3BsYXllcnMubmF0aXZlLAogICAgLy8gICAgIGNsZWFyX3BsYXllcj1GYWxzZSwKICAgIC8vICkKICAgIC8vID09IEZhbHNlCiAgICAhCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L2NvbnRyYWN0LnB5OjMwOS0zMTgKICAgIC8vIGFzc2VydCAoCiAgICAvLyAgICAgc3J0LmNoZWNrX2FjY19pbl9nYW1lKCAgIyBub3FhOiBFNzEyLCBSVUYxMDAKICAgIC8vICAgICAgICAgZ2FtZV9pZD1nYW1lX2lkLAogICAgLy8gICAgICAgICBhY2NvdW50PVR4bi5zZW5kZXIsCiAgICAvLyAgICAgICAgIGJveF9nYW1lX3BsYXllcnM9c2VsZi5ib3hfZ2FtZV9wbGF5ZXJzLAogICAgLy8gICAgICAgICBwbGF5ZXJfY291bnQ9c2VsZi5ib3hfZ2FtZV9zdGF0ZVtnYW1lX2lkXS5hY3RpdmVfcGxheWVycy5uYXRpdmUsCiAgICAvLyAgICAgICAgIGNsZWFyX3BsYXllcj1GYWxzZSwKICAgIC8vICAgICApCiAgICAvLyAgICAgPT0gRmFsc2UKICAgIC8vICksIGVyci5QTEFZRVJfQUNUSVZFCiAgICBhc3NlcnQgLy8gUGxheWVyIHdpdGggdGhpcyBhZGRyZXNzIG11c3Qgbm90IGJlIGFuIGFjdGl2ZSBnYW1lIHBhcnRpY2lwYW50IGluIHRoZSBnYW1lLgogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9jb250cmFjdC5weTozMjAKICAgIC8vIGFzc2VydCBnYW1lX3N0YXRlLnN0YWtpbmdfZmluYWxpemVkID09IEZhbHNlLCBlcnIuU1RBS0lOR19GSU5BTCAgIyBub3FhOiBFNzEyCiAgICBkaWcgMgogICAgaW50Y18xIC8vIDAKICAgIGdldGJpdAogICAgYnl0ZWNfMSAvLyAweDAwCiAgICBpbnRjXzEgLy8gMAogICAgdW5jb3ZlciAyCiAgICBzZXRiaXQKICAgIGludGNfMSAvLyAwCiAgICBnZXRiaXQKICAgICEKICAgIGFzc2VydCAvLyBHYW1lIHN0YXRlIHN0YWtpbmcgZmluYWxpemVkIHZhbHVlIG1pc21hdGNoLgogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9jb250cmFjdC5weTozMjEKICAgIC8vIGFzc2VydCBnYW1lX3N0YXRlLmV4cGlyeV90cyA+PSBHbG9iYWwubGF0ZXN0X3RpbWVzdGFtcCwgZXJyLlRJTUVfQ09OU1RSQUlOVF9WSU9MQVRJT04KICAgIGRpZyAyCiAgICBleHRyYWN0IDggOCAvLyBvbiBlcnJvcjogSW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIGdsb2JhbCBMYXRlc3RUaW1lc3RhbXAKICAgIGl0b2IKICAgIGI+PQogICAgYXNzZXJ0IC8vIEludmFsaWQgdGltZSBmcmFtZS4gQ2FsbCBtYWRlIG91dHNpZGUgdGhlIHBlcm1pdHRlZCBibG9jayBvciB0aW1lc3RhbXAgcmFuZ2UuCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L2NvbnRyYWN0LnB5OjMyMgogICAgLy8gYXNzZXJ0IGdhbWVfc3RhdGUuYWN0aXZlX3BsYXllcnMgPD0gZ2FtZV9zdGF0ZS5tYXhfcGxheWVycywgZXJyLkZVTExfR0FNRV9MT0JCWQogICAgZGlnIDIKICAgIGV4dHJhY3QgMiAxIC8vIG9uIGVycm9yOiBJbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgZGlnIDMKICAgIGV4dHJhY3QgMSAxIC8vIG9uIGVycm9yOiBJbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgYjw9CiAgICBhc3NlcnQgLy8gTnVtYmVyIG9mIGFjdGl2ZSBwbGF5ZXJzIG11c3Qgbm90IGV4Y2VlZCBudW1iZXIgb2YgbWF4IHBsYXllcnMuCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L2NvbnRyYWN0LnB5OjMyNAogICAgLy8gZ2FtZV9zdGF0ZS5ib3hfcF9zdGFydF9wb3MubmF0aXZlCiAgICBkaWcgMgogICAgcHVzaGludCA2IC8vIDYKICAgIGV4dHJhY3RfdWludDE2CiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L2NvbnRyYWN0LnB5OjMyNQogICAgLy8gPCBjc3QuQUREUkVTU19TSVpFICogZ2FtZV9zdGF0ZS5tYXhfcGxheWVycy5uYXRpdmUKICAgIGRpZyAzCiAgICBpbnRjXzAgLy8gMQogICAgZ2V0Ynl0ZQogICAgaW50Y18zIC8vIDMyCiAgICAqCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L2NvbnRyYWN0LnB5OjMyNC0zMjUKICAgIC8vIGdhbWVfc3RhdGUuYm94X3Bfc3RhcnRfcG9zLm5hdGl2ZQogICAgLy8gPCBjc3QuQUREUkVTU19TSVpFICogZ2FtZV9zdGF0ZS5tYXhfcGxheWVycy5uYXRpdmUKICAgIGRpZyAxCiAgICA+CiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L2NvbnRyYWN0LnB5OjMyMy0zMjYKICAgIC8vIGFzc2VydCAoCiAgICAvLyAgICAgZ2FtZV9zdGF0ZS5ib3hfcF9zdGFydF9wb3MubmF0aXZlCiAgICAvLyAgICAgPCBjc3QuQUREUkVTU19TSVpFICogZ2FtZV9zdGF0ZS5tYXhfcGxheWVycy5uYXRpdmUKICAgIC8vICksIGVyci5CT1hfUF9TVEFSVF9QT1NfT1ZFUkZMT1cKICAgIGFzc2VydCAvLyBQbGF5ZXJzIGJveCBzdGFydCBwb3NpdGlvbiBpbmRleCBvdmVyZmxvdy4gQ2FuIG5vdCBzdG9yZSBtb3JlIGFkZHJlc3Nlcy4KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvY29udHJhY3QucHk6MzMwCiAgICAvLyBrZXk9c2VsZi5ib3hfZ2FtZV9wbGF5ZXJzLmtleV9wcmVmaXggKyBvcC5pdG9iKGdhbWVfaWQpCiAgICBieXRlY18zIC8vICJwXyIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvY29udHJhY3QucHk6MzI4LTMzMQogICAgLy8gIyBGb3IgZ2FtZSBwbGF5ZXJzIGJveCwgc3RvcmUgdGhlIHNlbmRlcidzIGFkZHJlc3MgYXQgdGhlIGN1cnJlbnQgZ2FtZSBzdGF0ZSBib3ggcF8gc3RhcnQgcG9zaXRpb24KICAgIC8vIGdhbWVfcGxheWVyc19icmVmID0gQm94UmVmKAogICAgLy8gICAgIGtleT1zZWxmLmJveF9nYW1lX3BsYXllcnMua2V5X3ByZWZpeCArIG9wLml0b2IoZ2FtZV9pZCkKICAgIC8vICkKICAgIHVuY292ZXIgNgogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9jb250cmFjdC5weTozMzAKICAgIC8vIGtleT1zZWxmLmJveF9nYW1lX3BsYXllcnMua2V5X3ByZWZpeCArIG9wLml0b2IoZ2FtZV9pZCkKICAgIGNvbmNhdAogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9jb250cmFjdC5weTozMzIKICAgIC8vIGdhbWVfcGxheWVyc19icmVmLnJlcGxhY2UoZ2FtZV9zdGF0ZS5ib3hfcF9zdGFydF9wb3MubmF0aXZlLCBUeG4uc2VuZGVyLmJ5dGVzKQogICAgdHhuIFNlbmRlcgogICAgc3dhcAogICAgY292ZXIgMgogICAgYm94X3JlcGxhY2UKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvY29udHJhY3QucHk6MzM0LTMzNQogICAgLy8gIyBJbmNyZW1lbnQgbnVtYmVyIG9mIGFjdGl2ZSBwbGF5ZXJzIGJ5IDEKICAgIC8vIGdhbWVfc3RhdGUuYWN0aXZlX3BsYXllcnMgPSBhcmM0LlVJbnQ4KGdhbWVfc3RhdGUuYWN0aXZlX3BsYXllcnMubmF0aXZlICsgMSkKICAgIGludGNfMCAvLyAxCiAgICArCiAgICBpdG9iCiAgICBkdXAKICAgIGJpdGxlbgogICAgcHVzaGludCA4IC8vIDgKICAgIDw9CiAgICBhc3NlcnQgLy8gb3ZlcmZsb3cKICAgIGV4dHJhY3QgNyAxCiAgICB1bmNvdmVyIDIKICAgIHN3YXAKICAgIHJlcGxhY2UyIDIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvY29udHJhY3QucHk6MzM5CiAgICAvLyBnYW1lX3N0YXRlLmJveF9wX3N0YXJ0X3Bvcy5uYXRpdmUgKyBjc3QuQUREUkVTU19TSVpFCiAgICBkdXAKICAgIHB1c2hpbnQgNiAvLyA2CiAgICBleHRyYWN0X3VpbnQxNgogICAgaW50Y18zIC8vIDMyCiAgICArCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L2NvbnRyYWN0LnB5OjMzNy0zNDAKICAgIC8vICMgSW5jcmVtZW50IGN1cnJlbnQgZ2FtZSBwbGF5ZXJzIGJveCBvZmZzZXQgYnkgMzIgc28gdGhhdCBuZXh0IHBsYXllciBhZGRyZXNzIGNhbiBiZSBzdG9yZWQKICAgIC8vIGdhbWVfc3RhdGUuYm94X3Bfc3RhcnRfcG9zID0gYXJjNC5VSW50MTYoCiAgICAvLyAgICAgZ2FtZV9zdGF0ZS5ib3hfcF9zdGFydF9wb3MubmF0aXZlICsgY3N0LkFERFJFU1NfU0laRQogICAgLy8gKQogICAgaXRvYgogICAgZHVwCiAgICBiaXRsZW4KICAgIHB1c2hpbnQgMTYgLy8gMTYKICAgIDw9CiAgICBhc3NlcnQgLy8gb3ZlcmZsb3cKICAgIGV4dHJhY3QgNiAyCiAgICByZXBsYWNlMiA2CiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L2NvbnRyYWN0LnB5OjM0NAogICAgLy8gZ2FtZV9zdGF0ZS5wcml6ZV9wb29sLm5hdGl2ZSArIHN0YWtlX3BheS5hbW91bnQKICAgIGR1cAogICAgcHVzaGludCAxNiAvLyAxNgogICAgZXh0cmFjdF91aW50NjQKICAgIHVuY292ZXIgMgogICAgKwogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9jb250cmFjdC5weTozNDItMzQ1CiAgICAvLyAjIEluY3JlbWVudCBwcml6ZSBwb29sIGJ5IHN0YWtlIHBheW1lbnQgYW1vdW50CiAgICAvLyBnYW1lX3N0YXRlLnByaXplX3Bvb2wgPSBhcmM0LlVJbnQ2NCgKICAgIC8vICAgICBnYW1lX3N0YXRlLnByaXplX3Bvb2wubmF0aXZlICsgc3Rha2VfcGF5LmFtb3VudAogICAgLy8gKQogICAgaXRvYgogICAgcmVwbGFjZTIgMTYKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvY29udHJhY3QucHk6MzQ3LTM0OAogICAgLy8gIyBDaGVjayBpZiBnYW1lIGlzIGxpdmUgb24gZXZlcnkgY2FsbAogICAgLy8gc3J0LmlzX2dhbWVfbGl2ZShnYW1lX3N0YXRlKQogICAgY2FsbHN1YiBpc19nYW1lX2xpdmUKICAgIGJ1cnkgMQogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9jb250cmFjdC5weTozNTAtMzUxCiAgICAvLyAjIENvcHkgdGhlIG1vZGlmaWVkIGdhbWUgc3RhdGUgYW5kIHN0b3JlIGl0IGFzIG5ldyB2YWx1ZSBvZiBib3gKICAgIC8vIHNlbGYuYm94X2dhbWVfc3RhdGVbZ2FtZV9pZF0gPSBnYW1lX3N0YXRlLmNvcHkoKQogICAgYm94X3B1dAogICAgcmV0c3ViCgoKLy8gc21hcnRfY29udHJhY3RzLnBpZW91dC5jb250cmFjdC5QaWVvdXQuZ2V0X2JveF9jb21taXRfcmFuZChib3hfY19wYXk6IHVpbnQ2NCkgLT4gdm9pZDoKZ2V0X2JveF9jb21taXRfcmFuZDoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvY29udHJhY3QucHk6MzUzLTM1NQogICAgLy8gIyBHZXQgYm94IGNvbW1pdCByYW5kIGNvbnRlbnRzIHdpdGggZGVmYXVsdCBzdGFydCB2YWx1ZXMKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgLy8gZGVmIGdldF9ib3hfY29tbWl0X3JhbmQoc2VsZiwgYm94X2NfcGF5OiBndHhuLlBheW1lbnRUcmFuc2FjdGlvbikgLT4gTm9uZToKICAgIHByb3RvIDEgMAogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9jb250cmFjdC5weTozNTYtMzU3CiAgICAvLyAjIEZhaWwgdHJhbnNhY3Rpb24gdW5sZXNzIHRoZSBhc3NlcnRpb24gYmVsb3cgZXZhbHVhdGVzIFRydWUKICAgIC8vIGFzc2VydCBHbG9iYWwuZ3JvdXBfc2l6ZSA9PSAyLCBlcnIuSU5WQUxJRF9HUk9VUF9TSVpFCiAgICBnbG9iYWwgR3JvdXBTaXplCiAgICBpbnRjXzIgLy8gMgogICAgPT0KICAgIGFzc2VydCAvLyBJbnZhbGlkIGdyb3VwIHNpemUuIEVuc3VyZSBudW1iZXIgb2YgdHJhbnNhY3Rpb24gaW4gZ3JvdXAgaXMgd2l0aGluIHZhbGlkIGJvdW5kcy4KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvY29udHJhY3QucHk6MzU4CiAgICAvLyBhc3NlcnQgVHhuLnNlbmRlciBub3QgaW4gc2VsZi5ib3hfY29tbWl0X3JhbmQsIGVyci5CT1hfRk9VTkQKICAgIGJ5dGVjXzAgLy8gImNfIgogICAgdHhuIFNlbmRlcgogICAgY29uY2F0CiAgICBib3hfbGVuCiAgICBidXJ5IDEKICAgICEKICAgIGFzc2VydCAvLyBCb3ggZm91bmQuIEVuc3VyZSB0aGUgYm94IHlvdSBhcmUgdHJ5aW5nIHRvIGFjY2VzcyBkb2VzIG5vdCBleGlzdCBhbHJlYWR5LgogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9jb250cmFjdC5weTozNTkKICAgIC8vIGFzc2VydCBzZWxmLmJveF9nYW1lX3Ryb3BoeSwgZXJyLkJPWF9OT1RfRk9VTkQKICAgIGJ5dGVjXzIgLy8gInRfIgogICAgYm94X2xlbgogICAgYnVyeSAxCiAgICBhc3NlcnQgLy8gQm94IG5vdCBmb3VuZC4gRW5zdXJlIHRoZSBib3ggeW91IGFyZSB0cnlpbmcgdG8gYWNjZXNzIHdhcyBjcmVhdGVkIGFuZCBzdGlsbCBleGlzdHMuCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L2NvbnRyYWN0LnB5OjM2MQogICAgLy8gYXNzZXJ0IGJveF9jX3BheS5hbW91bnQgPT0gY3N0LkJPWF9DX0NPU1QsIGVyci5JTlZBTElEX0JPWF9QQVlfRkVFCiAgICBmcmFtZV9kaWcgLTEKICAgIGd0eG5zIEFtb3VudAogICAgaW50YyA3IC8vIDI4OTAwCiAgICA9PQogICAgYXNzZXJ0IC8vIEluc3VmZmljaWVudCBmdW5kcy4gQm94IHBheSBhbW91bnQgaXMgbm90IGVub3VnaCB0byBjb3ZlciBhcHBsaWNhdGlvbiBNQlIuCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L2NvbnRyYWN0LnB5OjM2MgogICAgLy8gYXNzZXJ0IGJveF9jX3BheS5zZW5kZXIgPT0gVHhuLnNlbmRlciwgZXJyLklOVkFMSURfQk9YX1BBWV9TRU5ERVIKICAgIGZyYW1lX2RpZyAtMQogICAgZ3R4bnMgU2VuZGVyCiAgICB0eG4gU2VuZGVyCiAgICA9PQogICAgYXNzZXJ0IC8vIEJveCBwYXltZW50IHNlbmRlciBhZGRyZXNzIG11c3QgbWF0Y2ggdHJhbnNhY3Rpb24gc2VuZGVyIGFkZHJlc3MuCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L2NvbnRyYWN0LnB5OjM2NAogICAgLy8gYm94X2NfcGF5LnJlY2VpdmVyID09IEdsb2JhbC5jdXJyZW50X2FwcGxpY2F0aW9uX2FkZHJlc3MKICAgIGZyYW1lX2RpZyAtMQogICAgZ3R4bnMgUmVjZWl2ZXIKICAgIGdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCiAgICA9PQogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9jb250cmFjdC5weTozNjMtMzY1CiAgICAvLyBhc3NlcnQgKAogICAgLy8gICAgIGJveF9jX3BheS5yZWNlaXZlciA9PSBHbG9iYWwuY3VycmVudF9hcHBsaWNhdGlvbl9hZGRyZXNzCiAgICAvLyApLCBlcnIuSU5WQUxJRF9CT1hfUEFZX1JFQ0VJVkVSCiAgICBhc3NlcnQgLy8gQm94IHBheW1lbnQgcmVjZWl2ZXIgYWRkcmVzcyBtdXN0IG1hdGNoIGFwcGxpY2F0aW9uIGFkZHJlc3MuCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L2NvbnRyYWN0LnB5OjM2OQogICAgLy8gYm94X2NvbW1pdF9yYW5kPXNlbGYuYm94X2NvbW1pdF9yYW5kLAogICAgYnl0ZWNfMCAvLyAiY18iCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L2NvbnRyYWN0LnB5OjM3MAogICAgLy8gYWNjb3VudD1UeG4uc2VuZGVyLAogICAgdHhuIFNlbmRlcgogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9jb250cmFjdC5weTozNzEKICAgIC8vIHJvdW5kX2RlbHRhPVVJbnQ2NChjc3QuQk9YX0NfRVhQX1JPVU5EX0RFTFRBKSwKICAgIGludGMgNiAvLyAzMjAwMAogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9jb250cmFjdC5weTozNjctMzcyCiAgICAvLyAjIEluaXRpYWxpemUgYm94IGNvbW1pdCByYW5kIHcvIGRlZmF1bHQgc3RhcnQgdmFsdWUKICAgIC8vIHNydC5yZXNldF9ib3hfY29tbWl0X3JhbmQoCiAgICAvLyAgICAgYm94X2NvbW1pdF9yYW5kPXNlbGYuYm94X2NvbW1pdF9yYW5kLAogICAgLy8gICAgIGFjY291bnQ9VHhuLnNlbmRlciwKICAgIC8vICAgICByb3VuZF9kZWx0YT1VSW50NjQoY3N0LkJPWF9DX0VYUF9ST1VORF9ERUxUQSksCiAgICAvLyApCiAgICBjYWxsc3ViIHJlc2V0X2JveF9jb21taXRfcmFuZAogICAgcmV0c3ViCgoKLy8gc21hcnRfY29udHJhY3RzLnBpZW91dC5jb250cmFjdC5QaWVvdXQuc2V0X2JveF9jb21taXRfcmFuZChnYW1lX2lkOiB1aW50NjQpIC0+IHZvaWQ6CnNldF9ib3hfY29tbWl0X3JhbmQ6CiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L2NvbnRyYWN0LnB5OjM3NC0zNzkKICAgIC8vICMgU2V0IGJveCBjb21taXQgcmFuZCBjb250ZW50cyB1c2VkIGZvciBvYnRhaW5pbmcgb24tY2hhaW4gcmFuZG9tbmVzcyBhbmQgcGxheWluZyB0aGUgZ2FtZQogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICAvLyBkZWYgc2V0X2JveF9jb21taXRfcmFuZCgKICAgIC8vICAgICBzZWxmLAogICAgLy8gICAgIGdhbWVfaWQ6IFVJbnQ2NCwKICAgIC8vICkgLT4gTm9uZToKICAgIHByb3RvIDEgMAogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9jb250cmFjdC5weTozODAtMzgxCiAgICAvLyAjIEZhaWwgdHJhbnNhY3Rpb24gdW5sZXNzIHRoZSBhc3NlcnRpb24gYmVsb3cgZXZhbHVhdGVzIFRydWUKICAgIC8vIGFzc2VydCBHbG9iYWwuZ3JvdXBfc2l6ZSA9PSAxLCBlcnIuU1RBTkRBTE9ORV9UWE5fT05MWQogICAgZ2xvYmFsIEdyb3VwU2l6ZQogICAgaW50Y18wIC8vIDEKICAgID09CiAgICBhc3NlcnQgLy8gSW52YWxpZCBncm91cCBzaXplLiBUaGlzIGFwcCBjYWxsIGNhbiBvbmx5IHRha2Ugc3RhbmRhbG9uZSB0cmFuc2FjdGlvbnMuCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L2NvbnRyYWN0LnB5OjM4MgogICAgLy8gYXNzZXJ0IGdhbWVfaWQgaW4gc2VsZi5ib3hfZ2FtZV9zdGF0ZSwgZXJyLkdBTUVfSURfTk9UX0ZPVU5ECiAgICBmcmFtZV9kaWcgLTEKICAgIGl0b2IKICAgIGJ5dGVjIDQgLy8gInNfIgogICAgZGlnIDEKICAgIGNvbmNhdAogICAgZHVwCiAgICBib3hfbGVuCiAgICBidXJ5IDEKICAgIGFzc2VydCAvLyBCb3ggZ2FtZSBzdGF0ZSBub3QgZm91bmQuIENoZWNrIGlmIGdhbWUgSUQgZXhpc3RzLgogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9jb250cmFjdC5weTozODMKICAgIC8vIGFzc2VydCBUeG4uc2VuZGVyIGluIHNlbGYuYm94X2NvbW1pdF9yYW5kLCBlcnIuQk9YX05PVF9GT1VORAogICAgYnl0ZWNfMCAvLyAiY18iCiAgICB0eG4gU2VuZGVyCiAgICBjb25jYXQKICAgIGJveF9sZW4KICAgIGJ1cnkgMQogICAgYXNzZXJ0IC8vIEJveCBub3QgZm91bmQuIEVuc3VyZSB0aGUgYm94IHlvdSBhcmUgdHJ5aW5nIHRvIGFjY2VzcyB3YXMgY3JlYXRlZCBhbmQgc3RpbGwgZXhpc3RzLgogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9jb250cmFjdC5weTozODUKICAgIC8vIHNlbGYuYm94X2dhbWVfc3RhdGVbZ2FtZV9pZF0uc3Rha2luZ19maW5hbGl6ZWQgPT0gVHJ1ZSAgIyBub3FhOiBFNzEyCiAgICBib3hfZ2V0CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5ib3hfZ2FtZV9zdGF0ZSBlbnRyeSBleGlzdHMKICAgIGR1cAogICAgaW50Y18xIC8vIDAKICAgIGdldGJpdAogICAgYnl0ZWNfMSAvLyAweDAwCiAgICBpbnRjXzEgLy8gMAogICAgdW5jb3ZlciAyCiAgICBzZXRiaXQKICAgIGludGNfMSAvLyAwCiAgICBnZXRiaXQKICAgIGludGNfMCAvLyAxCiAgICA9PQogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9jb250cmFjdC5weTozODQtMzg2CiAgICAvLyBhc3NlcnQgKAogICAgLy8gICAgIHNlbGYuYm94X2dhbWVfc3RhdGVbZ2FtZV9pZF0uc3Rha2luZ19maW5hbGl6ZWQgPT0gVHJ1ZSAgIyBub3FhOiBFNzEyCiAgICAvLyApLCBlcnIuU1RBS0lOR19GSU5BTAogICAgYXNzZXJ0IC8vIEdhbWUgc3RhdGUgc3Rha2luZyBmaW5hbGl6ZWQgdmFsdWUgbWlzbWF0Y2guCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L2NvbnRyYWN0LnB5OjM5MAogICAgLy8gYWNjb3VudD1UeG4uc2VuZGVyLAogICAgdHhuIFNlbmRlcgogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9jb250cmFjdC5weTozOTIKICAgIC8vIHBsYXllcl9jb3VudD1zZWxmLmJveF9nYW1lX3N0YXRlW2dhbWVfaWRdLm1heF9wbGF5ZXJzLm5hdGl2ZSwKICAgIHN3YXAKICAgIGludGNfMCAvLyAxCiAgICBnZXRieXRlCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L2NvbnRyYWN0LnB5OjM4OC0zOTQKICAgIC8vIHNydC5jaGVja19hY2NfaW5fZ2FtZSggICMgbm9xYTogRTcxMiwgUlVGMTAwCiAgICAvLyAgICAgZ2FtZV9pZD1nYW1lX2lkLAogICAgLy8gICAgIGFjY291bnQ9VHhuLnNlbmRlciwKICAgIC8vICAgICBib3hfZ2FtZV9wbGF5ZXJzPXNlbGYuYm94X2dhbWVfcGxheWVycywKICAgIC8vICAgICBwbGF5ZXJfY291bnQ9c2VsZi5ib3hfZ2FtZV9zdGF0ZVtnYW1lX2lkXS5tYXhfcGxheWVycy5uYXRpdmUsCiAgICAvLyAgICAgY2xlYXJfcGxheWVyPUZhbHNlLAogICAgLy8gKQogICAgZnJhbWVfZGlnIC0xCiAgICB1bmNvdmVyIDIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvY29udHJhY3QucHk6MzkxCiAgICAvLyBib3hfZ2FtZV9wbGF5ZXJzPXNlbGYuYm94X2dhbWVfcGxheWVycywKICAgIGJ5dGVjXzMgLy8gInBfIgogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9jb250cmFjdC5weTozODgtMzk0CiAgICAvLyBzcnQuY2hlY2tfYWNjX2luX2dhbWUoICAjIG5vcWE6IEU3MTIsIFJVRjEwMAogICAgLy8gICAgIGdhbWVfaWQ9Z2FtZV9pZCwKICAgIC8vICAgICBhY2NvdW50PVR4bi5zZW5kZXIsCiAgICAvLyAgICAgYm94X2dhbWVfcGxheWVycz1zZWxmLmJveF9nYW1lX3BsYXllcnMsCiAgICAvLyAgICAgcGxheWVyX2NvdW50PXNlbGYuYm94X2dhbWVfc3RhdGVbZ2FtZV9pZF0ubWF4X3BsYXllcnMubmF0aXZlLAogICAgLy8gICAgIGNsZWFyX3BsYXllcj1GYWxzZSwKICAgIC8vICkKICAgIHVuY292ZXIgMwogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9jb250cmFjdC5weTozOTMKICAgIC8vIGNsZWFyX3BsYXllcj1GYWxzZSwKICAgIGludGNfMSAvLyAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L2NvbnRyYWN0LnB5OjM4OC0zOTQKICAgIC8vIHNydC5jaGVja19hY2NfaW5fZ2FtZSggICMgbm9xYTogRTcxMiwgUlVGMTAwCiAgICAvLyAgICAgZ2FtZV9pZD1nYW1lX2lkLAogICAgLy8gICAgIGFjY291bnQ9VHhuLnNlbmRlciwKICAgIC8vICAgICBib3hfZ2FtZV9wbGF5ZXJzPXNlbGYuYm94X2dhbWVfcGxheWVycywKICAgIC8vICAgICBwbGF5ZXJfY291bnQ9c2VsZi5ib3hfZ2FtZV9zdGF0ZVtnYW1lX2lkXS5tYXhfcGxheWVycy5uYXRpdmUsCiAgICAvLyAgICAgY2xlYXJfcGxheWVyPUZhbHNlLAogICAgLy8gKQogICAgY2FsbHN1YiBjaGVja19hY2NfaW5fZ2FtZQogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9jb250cmFjdC5weTozOTUKICAgIC8vID09IFRydWUKICAgIGludGNfMCAvLyAxCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L2NvbnRyYWN0LnB5OjM4OC0zOTUKICAgIC8vIHNydC5jaGVja19hY2NfaW5fZ2FtZSggICMgbm9xYTogRTcxMiwgUlVGMTAwCiAgICAvLyAgICAgZ2FtZV9pZD1nYW1lX2lkLAogICAgLy8gICAgIGFjY291bnQ9VHhuLnNlbmRlciwKICAgIC8vICAgICBib3hfZ2FtZV9wbGF5ZXJzPXNlbGYuYm94X2dhbWVfcGxheWVycywKICAgIC8vICAgICBwbGF5ZXJfY291bnQ9c2VsZi5ib3hfZ2FtZV9zdGF0ZVtnYW1lX2lkXS5tYXhfcGxheWVycy5uYXRpdmUsCiAgICAvLyAgICAgY2xlYXJfcGxheWVyPUZhbHNlLAogICAgLy8gKQogICAgLy8gPT0gVHJ1ZQogICAgPT0KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvY29udHJhY3QucHk6Mzg3LTM5NgogICAgLy8gYXNzZXJ0ICgKICAgIC8vICAgICBzcnQuY2hlY2tfYWNjX2luX2dhbWUoICAjIG5vcWE6IEU3MTIsIFJVRjEwMAogICAgLy8gICAgICAgICBnYW1lX2lkPWdhbWVfaWQsCiAgICAvLyAgICAgICAgIGFjY291bnQ9VHhuLnNlbmRlciwKICAgIC8vICAgICAgICAgYm94X2dhbWVfcGxheWVycz1zZWxmLmJveF9nYW1lX3BsYXllcnMsCiAgICAvLyAgICAgICAgIHBsYXllcl9jb3VudD1zZWxmLmJveF9nYW1lX3N0YXRlW2dhbWVfaWRdLm1heF9wbGF5ZXJzLm5hdGl2ZSwKICAgIC8vICAgICAgICAgY2xlYXJfcGxheWVyPUZhbHNlLAogICAgLy8gICAgICkKICAgIC8vICAgICA9PSBUcnVlCiAgICAvLyApLCBlcnIuUExBWUVSX05PVF9GT1VORAogICAgYXNzZXJ0IC8vIEFjY291bnQgaXMgbm90IHJlY29nbml6ZWQgYXMgYW4gYWN0aXZlIHBsYXllciBmb3IgdGhpcyBnYW1lLgogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9jb250cmFjdC5weTozOTgtMzk5CiAgICAvLyAjIEdldCBib3ggY29tbWl0IHJhbmQgdmFsdWVzCiAgICAvLyBjb21taXRfcmFuZCA9IHNlbGYuYm94X2NvbW1pdF9yYW5kWwogICAgYnl0ZWNfMCAvLyAiY18iCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L2NvbnRyYWN0LnB5OjQwMAogICAgLy8gVHhuLnNlbmRlcgogICAgdHhuIFNlbmRlcgogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9jb250cmFjdC5weTozOTgtNDAxCiAgICAvLyAjIEdldCBib3ggY29tbWl0IHJhbmQgdmFsdWVzCiAgICAvLyBjb21taXRfcmFuZCA9IHNlbGYuYm94X2NvbW1pdF9yYW5kWwogICAgLy8gICAgIFR4bi5zZW5kZXIKICAgIC8vIF0uY29weSgpICAjIE1ha2UgYSBjb3B5IG9mIHRoZSBnYW1lIHN0YXRlIGVsc2UgaW1tdXRhYmxlCiAgICBjb25jYXQKICAgIGJveF9nZXQKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmJveF9jb21taXRfcmFuZCBlbnRyeSBleGlzdHMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvY29udHJhY3QucHk6NDAzLTQwNAogICAgLy8gIyBGYWlsIHRyYW5zYWN0aW9uIHVubGVzcyB0aGUgYXNzZXJ0aW9uIGJlbG93IGV2YWx1YXRlcyBUcnVlCiAgICAvLyBhc3NlcnQgY29tbWl0X3JhbmQuY29tbWl0X3JvdW5kLm5hdGl2ZSA9PSAwLCBlcnIuTk9OX1pFUk9fQ09NTUlUX1JPVU5ECiAgICBkdXAKICAgIHB1c2hpbnQgOCAvLyA4CiAgICBleHRyYWN0X3VpbnQ2NAogICAgIQogICAgYXNzZXJ0IC8vIEJveCBDb21taXQgUmFuZCByb3VuZCBub3QgZW1wdHkuIFJvdW5kIHZhbHVlIG11c3QgYmUgemVybyB0byBvYnRhaW4gYSB2YWxpZCBvbmUuCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L2NvbnRyYWN0LnB5OjQwNi00MDcKICAgIC8vICMgVXBkYXRlIGNvbW1pdCByYW5kIGNvbW1pdCByb3VuZCBhbmQgZ2FtZSBpZCBmaWVsZHMgd2l0aCBuZXcgdmFsdWVzCiAgICAvLyBjb21taXRfcmFuZC5jb21taXRfcm91bmQgPSBhcmM0LlVJbnQ2NChHbG9iYWwucm91bmQgKyA0KQogICAgZ2xvYmFsIFJvdW5kCiAgICBwdXNoaW50IDQgLy8gNAogICAgKwogICAgaXRvYgogICAgcmVwbGFjZTIgOAogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9jb250cmFjdC5weTo0MDgKICAgIC8vIGNvbW1pdF9yYW5kLmdhbWVfaWQgPSBhcmM0LlVJbnQ2NChnYW1lX2lkKQogICAgc3dhcAogICAgcmVwbGFjZTIgMAogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9jb250cmFjdC5weTo0MTAtNDExCiAgICAvLyAjIENvcHkgdGhlIG1vZGlmaWVkIGdhbWUgc3RhdGUgYW5kIHN0b3JlIGl0IGFzIG5ldyB2YWx1ZSBvZiBib3gKICAgIC8vIHNlbGYuYm94X2NvbW1pdF9yYW5kW1R4bi5zZW5kZXJdID0gY29tbWl0X3JhbmQuY29weSgpCiAgICBieXRlY18wIC8vICJjXyIKICAgIHR4biBTZW5kZXIKICAgIGNvbmNhdAogICAgc3dhcAogICAgYm94X3B1dAogICAgcmV0c3ViCgoKLy8gc21hcnRfY29udHJhY3RzLnBpZW91dC5jb250cmFjdC5QaWVvdXQuZGVsX2JveF9jb21taXRfcmFuZF9mb3Jfc2VsZihnYW1lX2lkOiB1aW50NjQpIC0+IHZvaWQ6CmRlbF9ib3hfY29tbWl0X3JhbmRfZm9yX3NlbGY6CiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L2NvbnRyYWN0LnB5OjQxMy00MTgKICAgIC8vICMgQWxsb3cgY2FsbGVyIHRvIGRlbGV0ZSBib3ggY29tbWl0IHJhbmQgY29udGVudHMgZm9yIHRoZWlyIG93biBhY2NvdW50CiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIC8vIGRlZiBkZWxfYm94X2NvbW1pdF9yYW5kX2Zvcl9zZWxmKAogICAgLy8gICAgIHNlbGYsCiAgICAvLyAgICAgZ2FtZV9pZDogVUludDY0LAogICAgLy8gKSAtPiBOb25lOgogICAgcHJvdG8gMSAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L2NvbnRyYWN0LnB5OjQxOS00MjAKICAgIC8vICMgRmFpbCB0cmFuc2FjdGlvbiB1bmxlc3MgdGhlIGFzc2VydGlvbiBiZWxvdyBldmFsdWF0ZXMgVHJ1ZQogICAgLy8gYXNzZXJ0IEdsb2JhbC5ncm91cF9zaXplID09IDEsIGVyci5TVEFOREFMT05FX1RYTl9PTkxZCiAgICBnbG9iYWwgR3JvdXBTaXplCiAgICBpbnRjXzAgLy8gMQogICAgPT0KICAgIGFzc2VydCAvLyBJbnZhbGlkIGdyb3VwIHNpemUuIFRoaXMgYXBwIGNhbGwgY2FuIG9ubHkgdGFrZSBzdGFuZGFsb25lIHRyYW5zYWN0aW9ucy4KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvY29udHJhY3QucHk6NDIxCiAgICAvLyBhc3NlcnQgZ2FtZV9pZCBpbiBzZWxmLmJveF9nYW1lX3N0YXRlLCBlcnIuR0FNRV9JRF9OT1RfRk9VTkQKICAgIGZyYW1lX2RpZyAtMQogICAgaXRvYgogICAgYnl0ZWMgNCAvLyAic18iCiAgICBzd2FwCiAgICBjb25jYXQKICAgIGR1cAogICAgYm94X2xlbgogICAgYnVyeSAxCiAgICBhc3NlcnQgLy8gQm94IGdhbWUgc3RhdGUgbm90IGZvdW5kLiBDaGVjayBpZiBnYW1lIElEIGV4aXN0cy4KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvY29udHJhY3QucHk6NDIyCiAgICAvLyBhc3NlcnQgVHhuLnNlbmRlciBpbiBzZWxmLmJveF9jb21taXRfcmFuZCwgZXJyLkJPWF9OT1RfRk9VTkQKICAgIGJ5dGVjXzAgLy8gImNfIgogICAgdHhuIFNlbmRlcgogICAgY29uY2F0CiAgICBib3hfbGVuCiAgICBidXJ5IDEKICAgIGFzc2VydCAvLyBCb3ggbm90IGZvdW5kLiBFbnN1cmUgdGhlIGJveCB5b3UgYXJlIHRyeWluZyB0byBhY2Nlc3Mgd2FzIGNyZWF0ZWQgYW5kIHN0aWxsIGV4aXN0cy4KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvY29udHJhY3QucHk6NDI0CiAgICAvLyBhc3NlcnQgKHNlbGYuYm94X2NvbW1pdF9yYW5kW1R4bi5zZW5kZXJdLmdhbWVfaWQubmF0aXZlID09IDAgb3IKICAgIGJ5dGVjXzAgLy8gImNfIgogICAgdHhuIFNlbmRlcgogICAgY29uY2F0CiAgICBib3hfZ2V0CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5ib3hfY29tbWl0X3JhbmQgZW50cnkgZXhpc3RzCiAgICBpbnRjXzEgLy8gMAogICAgZXh0cmFjdF91aW50NjQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvY29udHJhY3QucHk6NDI0LTQyNQogICAgLy8gYXNzZXJ0IChzZWxmLmJveF9jb21taXRfcmFuZFtUeG4uc2VuZGVyXS5nYW1lX2lkLm5hdGl2ZSA9PSAwIG9yCiAgICAvLyAgICAgc2VsZi5ib3hfY29tbWl0X3JhbmRbVHhuLnNlbmRlcl0uZ2FtZV9pZC5uYXRpdmUgPT0gZ2FtZV9pZAogICAgYnogZGVsX2JveF9jb21taXRfcmFuZF9mb3Jfc2VsZl9ib29sX3RydWVAMgogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9jb250cmFjdC5weTo0MjUKICAgIC8vIHNlbGYuYm94X2NvbW1pdF9yYW5kW1R4bi5zZW5kZXJdLmdhbWVfaWQubmF0aXZlID09IGdhbWVfaWQKICAgIGJ5dGVjXzAgLy8gImNfIgogICAgdHhuIFNlbmRlcgogICAgY29uY2F0CiAgICBib3hfZ2V0CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5ib3hfY29tbWl0X3JhbmQgZW50cnkgZXhpc3RzCiAgICBpbnRjXzEgLy8gMAogICAgZXh0cmFjdF91aW50NjQKICAgIGZyYW1lX2RpZyAtMQogICAgPT0KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvY29udHJhY3QucHk6NDI0LTQyNQogICAgLy8gYXNzZXJ0IChzZWxmLmJveF9jb21taXRfcmFuZFtUeG4uc2VuZGVyXS5nYW1lX2lkLm5hdGl2ZSA9PSAwIG9yCiAgICAvLyAgICAgc2VsZi5ib3hfY29tbWl0X3JhbmRbVHhuLnNlbmRlcl0uZ2FtZV9pZC5uYXRpdmUgPT0gZ2FtZV9pZAogICAgYnogZGVsX2JveF9jb21taXRfcmFuZF9mb3Jfc2VsZl9ib29sX2ZhbHNlQDMKCmRlbF9ib3hfY29tbWl0X3JhbmRfZm9yX3NlbGZfYm9vbF90cnVlQDI6CiAgICBpbnRjXzAgLy8gMQoKZGVsX2JveF9jb21taXRfcmFuZF9mb3Jfc2VsZl9ib29sX21lcmdlQDQ6CiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L2NvbnRyYWN0LnB5OjQyNC00MjYKICAgIC8vIGFzc2VydCAoc2VsZi5ib3hfY29tbWl0X3JhbmRbVHhuLnNlbmRlcl0uZ2FtZV9pZC5uYXRpdmUgPT0gMCBvcgogICAgLy8gICAgIHNlbGYuYm94X2NvbW1pdF9yYW5kW1R4bi5zZW5kZXJdLmdhbWVfaWQubmF0aXZlID09IGdhbWVfaWQKICAgIC8vICksIGVyci5JTlZBTElEX0dBTUVfSUQKICAgIGFzc2VydCAvLyBJbnZhbGlkIEdhbWUgSUQuIEJveCBDb21taXQgUmFuZCBHYW1lIElEIG11c3QgYmUgYSBjZXJ0YWluIHZhbHVlIG9yIG1hdGNoIEdhbWUgSUQgYXJnLgogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9jb250cmFjdC5weTo0MjgtNDI5CiAgICAvLyAjIENoZWNrIGlmIGJveCBjb21taXQgcmFuZCBnYW1lIGlkIGlzIG5vdCBlcXVhbCB0byB6ZXJvCiAgICAvLyBpZiBzZWxmLmJveF9jb21taXRfcmFuZFtUeG4uc2VuZGVyXS5nYW1lX2lkLm5hdGl2ZSAhPSAwOgogICAgYnl0ZWNfMCAvLyAiY18iCiAgICB0eG4gU2VuZGVyCiAgICBjb25jYXQKICAgIGJveF9nZXQKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmJveF9jb21taXRfcmFuZCBlbnRyeSBleGlzdHMKICAgIGludGNfMSAvLyAwCiAgICBleHRyYWN0X3VpbnQ2NAogICAgYnogZGVsX2JveF9jb21taXRfcmFuZF9mb3Jfc2VsZl9hZnRlcl9pZl9lbHNlQDYKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvY29udHJhY3QucHk6NDM0CiAgICAvLyBhY2NvdW50PVR4bi5zZW5kZXIsCiAgICB0eG4gU2VuZGVyCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L2NvbnRyYWN0LnB5OjQzNgogICAgLy8gcGxheWVyX2NvdW50PXNlbGYuYm94X2dhbWVfc3RhdGVbZ2FtZV9pZF0ubWF4X3BsYXllcnMubmF0aXZlLAogICAgZnJhbWVfZGlnIDAKICAgIGJveF9nZXQKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmJveF9nYW1lX3N0YXRlIGVudHJ5IGV4aXN0cwogICAgaW50Y18wIC8vIDEKICAgIGdldGJ5dGUKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvY29udHJhY3QucHk6NDMyLTQzOAogICAgLy8gc3J0LmNoZWNrX2FjY19pbl9nYW1lKCAgIyBub3FhOiBFNzEyLCBSVUYxMDAKICAgIC8vICAgICBnYW1lX2lkPWdhbWVfaWQsCiAgICAvLyAgICAgYWNjb3VudD1UeG4uc2VuZGVyLAogICAgLy8gICAgIGJveF9nYW1lX3BsYXllcnM9c2VsZi5ib3hfZ2FtZV9wbGF5ZXJzLAogICAgLy8gICAgIHBsYXllcl9jb3VudD1zZWxmLmJveF9nYW1lX3N0YXRlW2dhbWVfaWRdLm1heF9wbGF5ZXJzLm5hdGl2ZSwKICAgIC8vICAgICBjbGVhcl9wbGF5ZXI9RmFsc2UsCiAgICAvLyApCiAgICBmcmFtZV9kaWcgLTEKICAgIHVuY292ZXIgMgogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9jb250cmFjdC5weTo0MzUKICAgIC8vIGJveF9nYW1lX3BsYXllcnM9c2VsZi5ib3hfZ2FtZV9wbGF5ZXJzLAogICAgYnl0ZWNfMyAvLyAicF8iCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L2NvbnRyYWN0LnB5OjQzMi00MzgKICAgIC8vIHNydC5jaGVja19hY2NfaW5fZ2FtZSggICMgbm9xYTogRTcxMiwgUlVGMTAwCiAgICAvLyAgICAgZ2FtZV9pZD1nYW1lX2lkLAogICAgLy8gICAgIGFjY291bnQ9VHhuLnNlbmRlciwKICAgIC8vICAgICBib3hfZ2FtZV9wbGF5ZXJzPXNlbGYuYm94X2dhbWVfcGxheWVycywKICAgIC8vICAgICBwbGF5ZXJfY291bnQ9c2VsZi5ib3hfZ2FtZV9zdGF0ZVtnYW1lX2lkXS5tYXhfcGxheWVycy5uYXRpdmUsCiAgICAvLyAgICAgY2xlYXJfcGxheWVyPUZhbHNlLAogICAgLy8gKQogICAgdW5jb3ZlciAzCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L2NvbnRyYWN0LnB5OjQzNwogICAgLy8gY2xlYXJfcGxheWVyPUZhbHNlLAogICAgaW50Y18xIC8vIDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvY29udHJhY3QucHk6NDMyLTQzOAogICAgLy8gc3J0LmNoZWNrX2FjY19pbl9nYW1lKCAgIyBub3FhOiBFNzEyLCBSVUYxMDAKICAgIC8vICAgICBnYW1lX2lkPWdhbWVfaWQsCiAgICAvLyAgICAgYWNjb3VudD1UeG4uc2VuZGVyLAogICAgLy8gICAgIGJveF9nYW1lX3BsYXllcnM9c2VsZi5ib3hfZ2FtZV9wbGF5ZXJzLAogICAgLy8gICAgIHBsYXllcl9jb3VudD1zZWxmLmJveF9nYW1lX3N0YXRlW2dhbWVfaWRdLm1heF9wbGF5ZXJzLm5hdGl2ZSwKICAgIC8vICAgICBjbGVhcl9wbGF5ZXI9RmFsc2UsCiAgICAvLyApCiAgICBjYWxsc3ViIGNoZWNrX2FjY19pbl9nYW1lCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L2NvbnRyYWN0LnB5OjQzMi00MzkKICAgIC8vIHNydC5jaGVja19hY2NfaW5fZ2FtZSggICMgbm9xYTogRTcxMiwgUlVGMTAwCiAgICAvLyAgICAgZ2FtZV9pZD1nYW1lX2lkLAogICAgLy8gICAgIGFjY291bnQ9VHhuLnNlbmRlciwKICAgIC8vICAgICBib3hfZ2FtZV9wbGF5ZXJzPXNlbGYuYm94X2dhbWVfcGxheWVycywKICAgIC8vICAgICBwbGF5ZXJfY291bnQ9c2VsZi5ib3hfZ2FtZV9zdGF0ZVtnYW1lX2lkXS5tYXhfcGxheWVycy5uYXRpdmUsCiAgICAvLyAgICAgY2xlYXJfcGxheWVyPUZhbHNlLAogICAgLy8gKQogICAgLy8gPT0gRmFsc2UKICAgICEKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvY29udHJhY3QucHk6NDMwLTQ0MAogICAgLy8gIyBGYWlsIHRyYW5zYWN0aW9uIHVubGVzcyB0aGUgYXNzZXJ0aW9uIGJlbG93IGV2YWx1YXRlcyBUcnVlCiAgICAvLyBhc3NlcnQgKAogICAgLy8gICAgIHNydC5jaGVja19hY2NfaW5fZ2FtZSggICMgbm9xYTogRTcxMiwgUlVGMTAwCiAgICAvLyAgICAgICAgIGdhbWVfaWQ9Z2FtZV9pZCwKICAgIC8vICAgICAgICAgYWNjb3VudD1UeG4uc2VuZGVyLAogICAgLy8gICAgICAgICBib3hfZ2FtZV9wbGF5ZXJzPXNlbGYuYm94X2dhbWVfcGxheWVycywKICAgIC8vICAgICAgICAgcGxheWVyX2NvdW50PXNlbGYuYm94X2dhbWVfc3RhdGVbZ2FtZV9pZF0ubWF4X3BsYXllcnMubmF0aXZlLAogICAgLy8gICAgICAgICBjbGVhcl9wbGF5ZXI9RmFsc2UsCiAgICAvLyAgICAgKQogICAgLy8gICAgID09IEZhbHNlCiAgICAvLyApLCBlcnIuUExBWUVSX0FDVElWRQogICAgYXNzZXJ0IC8vIFBsYXllciB3aXRoIHRoaXMgYWRkcmVzcyBtdXN0IG5vdCBiZSBhbiBhY3RpdmUgZ2FtZSBwYXJ0aWNpcGFudCBpbiB0aGUgZ2FtZS4KCmRlbF9ib3hfY29tbWl0X3JhbmRfZm9yX3NlbGZfYWZ0ZXJfaWZfZWxzZUA2OgogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9jb250cmFjdC5weTo0NDItNDQzCiAgICAvLyAjIERlbGV0ZSBzZW5kZXIgYm94IGNvbW1pdCByYW5kIGZyb20gdGhlIHNtYXJ0IGNvbnRyYWN0IHN0b3JhZ2UKICAgIC8vIGRlbCBzZWxmLmJveF9jb21taXRfcmFuZFtUeG4uc2VuZGVyXQogICAgYnl0ZWNfMCAvLyAiY18iCiAgICB0eG4gU2VuZGVyCiAgICBjb25jYXQKICAgIGJveF9kZWwKICAgIHBvcAogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9jb250cmFjdC5weTo0NDcKICAgIC8vIHJlY2VpdmVyPVR4bi5zZW5kZXIsCiAgICB0eG4gU2VuZGVyCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L2NvbnRyYWN0LnB5OjQ0OAogICAgLy8gYW1vdW50PVVJbnQ2NChjc3QuQk9YX0NfQ09TVCksCiAgICBpbnRjIDcgLy8gMjg5MDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvY29udHJhY3QucHk6NDQ5LTQ1MQogICAgLy8gbm90ZT1TdHJpbmcoCiAgICAvLyAgICAgJ3BpZW91dDpqeyJtZXRob2QiOiJkZWxfYm94X2NvbW1pdF9yYW5kX2Zvcl9zZWxmIiwiY29uY2VybiI6InR4bi5hcHBfYzttYnJfYm94X2NfcmVmdW5kIn0nCiAgICAvLyApLAogICAgcHVzaGJ5dGVzICJwaWVvdXQ6antcIm1ldGhvZFwiOlwiZGVsX2JveF9jb21taXRfcmFuZF9mb3Jfc2VsZlwiLFwiY29uY2VyblwiOlwidHhuLmFwcF9jO21icl9ib3hfY19yZWZ1bmRcIn0iCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L2NvbnRyYWN0LnB5OjQ0NS00NTIKICAgIC8vICMgSXNzdWUgTUJSIHJlZnVuZCBmb3IgYm94IGNvbW1pdCByYW5kIGRlbGV0aW9uIHZpYSBhIHBheW1lbnQgaW5uZXIgdHJhbnNhY3Rpb24KICAgIC8vIHNydC5wYXlvdXRfaXR4bigKICAgIC8vICAgICByZWNlaXZlcj1UeG4uc2VuZGVyLAogICAgLy8gICAgIGFtb3VudD1VSW50NjQoY3N0LkJPWF9DX0NPU1QpLAogICAgLy8gICAgIG5vdGU9U3RyaW5nKAogICAgLy8gICAgICAgICAncGllb3V0Omp7Im1ldGhvZCI6ImRlbF9ib3hfY29tbWl0X3JhbmRfZm9yX3NlbGYiLCJjb25jZXJuIjoidHhuLmFwcF9jO21icl9ib3hfY19yZWZ1bmQifScKICAgIC8vICAgICApLAogICAgLy8gKQogICAgY2FsbHN1YiBwYXlvdXRfaXR4bgogICAgcmV0c3ViCgpkZWxfYm94X2NvbW1pdF9yYW5kX2Zvcl9zZWxmX2Jvb2xfZmFsc2VAMzoKICAgIGludGNfMSAvLyAwCiAgICBiIGRlbF9ib3hfY29tbWl0X3JhbmRfZm9yX3NlbGZfYm9vbF9tZXJnZUA0CgoKLy8gc21hcnRfY29udHJhY3RzLnBpZW91dC5jb250cmFjdC5QaWVvdXQuZGVsX2JveF9jb21taXRfcmFuZF9mb3Jfb3RoZXIocGxheWVyOiBieXRlcykgLT4gdm9pZDoKZGVsX2JveF9jb21taXRfcmFuZF9mb3Jfb3RoZXI6CiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L2NvbnRyYWN0LnB5OjQ1NC00NTYKICAgIC8vICMgQWxsb3cgY2FsbGVyIHRvIGRlbGV0ZSBib3ggY29tbWl0IHJhbmQgY29udGVudHMgZm9yIGFub3RoZXIgYWNjb3VudAogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICAvLyBkZWYgZGVsX2JveF9jb21taXRfcmFuZF9mb3Jfb3RoZXIoc2VsZiwgcGxheWVyOiBBY2NvdW50KSAtPiBOb25lOgogICAgcHJvdG8gMSAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L2NvbnRyYWN0LnB5OjQ1Ny00NTgKICAgIC8vICMgRmFpbCB0cmFuc2FjdGlvbiB1bmxlc3MgdGhlIGFzc2VydGlvbiBiZWxvdyBldmFsdWF0ZXMgVHJ1ZQogICAgLy8gYXNzZXJ0IEdsb2JhbC5ncm91cF9zaXplID09IDEsIGVyci5TVEFOREFMT05FX1RYTl9PTkxZCiAgICBnbG9iYWwgR3JvdXBTaXplCiAgICBpbnRjXzAgLy8gMQogICAgPT0KICAgIGFzc2VydCAvLyBJbnZhbGlkIGdyb3VwIHNpemUuIFRoaXMgYXBwIGNhbGwgY2FuIG9ubHkgdGFrZSBzdGFuZGFsb25lIHRyYW5zYWN0aW9ucy4KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvY29udHJhY3QucHk6NDYwCiAgICAvLyBhc3NlcnQgcGxheWVyIGluIHNlbGYuYm94X2NvbW1pdF9yYW5kLCBlcnIuQk9YX05PVF9GT1VORAogICAgYnl0ZWNfMCAvLyAiY18iCiAgICBmcmFtZV9kaWcgLTEKICAgIGNvbmNhdAogICAgZHVwCiAgICBib3hfbGVuCiAgICBidXJ5IDEKICAgIGFzc2VydCAvLyBCb3ggbm90IGZvdW5kLiBFbnN1cmUgdGhlIGJveCB5b3UgYXJlIHRyeWluZyB0byBhY2Nlc3Mgd2FzIGNyZWF0ZWQgYW5kIHN0aWxsIGV4aXN0cy4KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvY29udHJhY3QucHk6NDYxCiAgICAvLyBhc3NlcnQgcGxheWVyICE9IFR4bi5zZW5kZXIsIGVyci5JTlZBTElEX0NBTExFUgogICAgZnJhbWVfZGlnIC0xCiAgICB0eG4gU2VuZGVyCiAgICAhPQogICAgYXNzZXJ0IC8vIEFjY291bnQgaXMgbm90IGF1dGhvcml6ZWQgdG8gbWFrZSB0aGlzIGNhbGwuCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L2NvbnRyYWN0LnB5OjQ2MwogICAgLy8gYXNzZXJ0IHNlbGYuYm94X2NvbW1pdF9yYW5kW3BsYXllcl0uY29tbWl0X3JvdW5kLm5hdGl2ZSA9PSAwLCBlcnIuTk9OX1pFUk9fQ09NTUlUX1JPVU5ECiAgICBkdXAKICAgIGJveF9nZXQKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmJveF9jb21taXRfcmFuZCBlbnRyeSBleGlzdHMKICAgIGR1cAogICAgcHVzaGludCA4IC8vIDgKICAgIGV4dHJhY3RfdWludDY0CiAgICAhCiAgICBhc3NlcnQgLy8gQm94IENvbW1pdCBSYW5kIHJvdW5kIG5vdCBlbXB0eS4gUm91bmQgdmFsdWUgbXVzdCBiZSB6ZXJvIHRvIG9idGFpbiBhIHZhbGlkIG9uZS4KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvY29udHJhY3QucHk6NDY0CiAgICAvLyBhc3NlcnQgc2VsZi5ib3hfY29tbWl0X3JhbmRbcGxheWVyXS5leHBpcnlfcm91bmQubmF0aXZlIDwgR2xvYmFsLnJvdW5kLCBlcnIuVElNRV9DT05TVFJBSU5UX1ZJT0xBVElPTgogICAgcHVzaGludCAxNiAvLyAxNgogICAgZXh0cmFjdF91aW50NjQKICAgIGdsb2JhbCBSb3VuZAogICAgPAogICAgYXNzZXJ0IC8vIEludmFsaWQgdGltZSBmcmFtZS4gQ2FsbCBtYWRlIG91dHNpZGUgdGhlIHBlcm1pdHRlZCBibG9jayBvciB0aW1lc3RhbXAgcmFuZ2UuCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L2NvbnRyYWN0LnB5OjQ2Ni00NjcKICAgIC8vICMgRGVsZXRlIHNlbmRlciBib3ggY29tbWl0IHJhbmQgYm94IGZyb20gY29udHJhY3Qgc3RvcmFnZQogICAgLy8gZGVsIHNlbGYuYm94X2NvbW1pdF9yYW5kW3BsYXllcl0KICAgIGJveF9kZWwKICAgIHBvcAogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9jb250cmFjdC5weTo0NjktNDc0CiAgICAvLyAjIFJlc29sdmUgYm94IGNvbW1pdCByYW5kIGRlbGV0aW9uIE1CUiByZWZ1bmQgcmVjZWl2ZXIgYnkgcHJpb3JpdHkKICAgIC8vIHJlY2VpdmVyID0gc3J0LnJlc29sdmVfcmVjZWl2ZXJfYnlfcHJpbygKICAgIC8vICAgICBhY2MxPXBsYXllciwKICAgIC8vICAgICBhY2MyPVR4bi5zZW5kZXIsCiAgICAvLyAgICAgYWNjMz1HbG9iYWwuY3JlYXRvcl9hZGRyZXNzLAogICAgLy8gKQogICAgZnJhbWVfZGlnIC0xCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L2NvbnRyYWN0LnB5OjQ3MgogICAgLy8gYWNjMj1UeG4uc2VuZGVyLAogICAgdHhuIFNlbmRlcgogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9jb250cmFjdC5weTo0NzMKICAgIC8vIGFjYzM9R2xvYmFsLmNyZWF0b3JfYWRkcmVzcywKICAgIGdsb2JhbCBDcmVhdG9yQWRkcmVzcwogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9jb250cmFjdC5weTo0NjktNDc0CiAgICAvLyAjIFJlc29sdmUgYm94IGNvbW1pdCByYW5kIGRlbGV0aW9uIE1CUiByZWZ1bmQgcmVjZWl2ZXIgYnkgcHJpb3JpdHkKICAgIC8vIHJlY2VpdmVyID0gc3J0LnJlc29sdmVfcmVjZWl2ZXJfYnlfcHJpbygKICAgIC8vICAgICBhY2MxPXBsYXllciwKICAgIC8vICAgICBhY2MyPVR4bi5zZW5kZXIsCiAgICAvLyAgICAgYWNjMz1HbG9iYWwuY3JlYXRvcl9hZGRyZXNzLAogICAgLy8gKQogICAgY2FsbHN1YiByZXNvbHZlX3JlY2VpdmVyX2J5X3ByaW8KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvY29udHJhY3QucHk6NDc5CiAgICAvLyBhbW91bnQ9VUludDY0KGNzdC5CT1hfQ19DT1NUKSwKICAgIGludGMgNyAvLyAyODkwMAogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9jb250cmFjdC5weTo0ODAtNDgyCiAgICAvLyBub3RlPVN0cmluZygKICAgIC8vICAgICAncGllb3V0Omp7Im1ldGhvZCI6ImRlbF9ib3hfY29tbWl0X3JhbmRfZm9yX290aGVyIiwiY29uY2VybiI6Iml0eG4ucGF5O21icl9ib3hfY19yZWZ1bmQifScKICAgIC8vICksCiAgICBwdXNoYnl0ZXMgInBpZW91dDpqe1wibWV0aG9kXCI6XCJkZWxfYm94X2NvbW1pdF9yYW5kX2Zvcl9vdGhlclwiLFwiY29uY2VyblwiOlwiaXR4bi5wYXk7bWJyX2JveF9jX3JlZnVuZFwifSIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvY29udHJhY3QucHk6NDc2LTQ4MwogICAgLy8gIyBJc3N1ZSBNQlIgcmVmdW5kIGZvciBib3ggY29tbWl0IHJhbmQgZGVsZXRpb24gdmlhIGEgcGF5bWVudCBpbm5lciB0cmFuc2FjdGlvbgogICAgLy8gc3J0LnBheW91dF9pdHhuKAogICAgLy8gICAgIHJlY2VpdmVyPXJlY2VpdmVyLAogICAgLy8gICAgIGFtb3VudD1VSW50NjQoY3N0LkJPWF9DX0NPU1QpLAogICAgLy8gICAgIG5vdGU9U3RyaW5nKAogICAgLy8gICAgICAgICAncGllb3V0Omp7Im1ldGhvZCI6ImRlbF9ib3hfY29tbWl0X3JhbmRfZm9yX290aGVyIiwiY29uY2VybiI6Iml0eG4ucGF5O21icl9ib3hfY19yZWZ1bmQifScKICAgIC8vICAgICApLAogICAgLy8gKQogICAgY2FsbHN1YiBwYXlvdXRfaXR4bgogICAgcmV0c3ViCgoKLy8gc21hcnRfY29udHJhY3RzLnBpZW91dC5jb250cmFjdC5QaWVvdXQucGxheV9nYW1lKGdhbWVfaWQ6IHVpbnQ2NCkgLT4gdm9pZDoKcGxheV9nYW1lOgogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9jb250cmFjdC5weTo0ODUtNDg3CiAgICAvLyAjIFJlc29sdmUgdGhlIHBsYXllcidzIHNjb3JlIGFzc29jaWF0ZWQgd2l0aCB0aGUgc3BlY2lmaWVkIGdhbWUgSUQsIHVwZGF0aW5nIGdhbWUgc3RhdGUgYWNjb3JkaW5nbHkKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgLy8gZGVmIHBsYXlfZ2FtZShzZWxmLCBnYW1lX2lkOiBVSW50NjQpIC0+IE5vbmU6CiAgICBwcm90byAxIDAKICAgIGludGNfMSAvLyAwCiAgICBkdXBuIDYKICAgIHB1c2hieXRlcyAiIgogICAgZHVwbiA4CgpwbGF5X2dhbWVfd2hpbGVfdG9wQDM3OgogICAgcHVzaGludCAxOTYxMCAvLyAxOTYxMAogICAgZ2xvYmFsIE9wY29kZUJ1ZGdldAogICAgPgogICAgYnogcGxheV9nYW1lX2FmdGVyX3doaWxlQDQyCiAgICBpdHhuX2JlZ2luCiAgICBwdXNoaW50IDYgLy8gYXBwbAogICAgaXR4bl9maWVsZCBUeXBlRW51bQogICAgcHVzaGludCA1IC8vIERlbGV0ZUFwcGxpY2F0aW9uCiAgICBpdHhuX2ZpZWxkIE9uQ29tcGxldGlvbgogICAgYnl0ZWMgMTQgLy8gMHgwNjgxMDEKICAgIGl0eG5fZmllbGQgQXBwcm92YWxQcm9ncmFtCiAgICBieXRlYyAxNCAvLyAweDA2ODEwMQogICAgaXR4bl9maWVsZCBDbGVhclN0YXRlUHJvZ3JhbQogICAgaW50Y18xIC8vIDAKICAgIGl0eG5fZmllbGQgRmVlCiAgICBpdHhuX3N1Ym1pdAogICAgYiBwbGF5X2dhbWVfd2hpbGVfdG9wQDM3CgpwbGF5X2dhbWVfYWZ0ZXJfd2hpbGVANDI6CiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L2NvbnRyYWN0LnB5OjQ5MS00OTIKICAgIC8vICMgR2V0IHRoZSBzZWNvbmQgdHJhbnNhY3Rpb24gaW4gdGhlIGdyb3VwCiAgICAvLyBzZWNvbmRfdHhuID0gZ3R4bi5BcHBsaWNhdGlvbkNhbGxUcmFuc2FjdGlvbihncm91cF9pbmRleD0xKQogICAgaW50Y18wIC8vIDEKICAgIGd0eG5zIFR5cGVFbnVtCiAgICBwdXNoaW50IDYgLy8gYXBwbAogICAgPT0KICAgIGFzc2VydCAvLyB0cmFuc2FjdGlvbiB0eXBlIGlzIGFwcGwKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvY29udHJhY3QucHk6NDk0LTQ5NQogICAgLy8gIyBGYWlsIHRyYW5zYWN0aW9uIHVubGVzcyB0aGUgYXNzZXJ0aW9uIGJlbG93IGV2YWx1YXRlcyBUcnVlCiAgICAvLyBhc3NlcnQgR2xvYmFsLmdyb3VwX3NpemUgPT0gMiwgZXJyLklOVkFMSURfR1JPVVBfU0laRQogICAgZ2xvYmFsIEdyb3VwU2l6ZQogICAgaW50Y18yIC8vIDIKICAgID09CiAgICBhc3NlcnQgLy8gSW52YWxpZCBncm91cCBzaXplLiBFbnN1cmUgbnVtYmVyIG9mIHRyYW5zYWN0aW9uIGluIGdyb3VwIGlzIHdpdGhpbiB2YWxpZCBib3VuZHMuCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L2NvbnRyYWN0LnB5OjQ5NgogICAgLy8gYXNzZXJ0IFR4bi5ncm91cF9pbmRleCA9PSAwLCBlcnIuSU5WQUxJRF9HUk9VUF9JRFgKICAgIHR4biBHcm91cEluZGV4CiAgICAhCiAgICBhc3NlcnQgLy8gSW52YWxpZCBncm91cCBpbmRleC4gRW5zdXJlIHRyYW5zYWN0aW9uIGdyb3VwIGluZGV4IG1hdGNoZXMgdGhlIGV4cGVjdGVkIHZhbHVlLiAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvY29udHJhY3QucHk6NDkxLTQ5MgogICAgLy8gIyBHZXQgdGhlIHNlY29uZCB0cmFuc2FjdGlvbiBpbiB0aGUgZ3JvdXAKICAgIC8vIHNlY29uZF90eG4gPSBndHhuLkFwcGxpY2F0aW9uQ2FsbFRyYW5zYWN0aW9uKGdyb3VwX2luZGV4PTEpCiAgICBpbnRjXzAgLy8gMQogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9jb250cmFjdC5weTo0OTgKICAgIC8vIGFzc2VydCBzZWNvbmRfdHhuLmFwcF9pZCA9PSBHbG9iYWwuY3VycmVudF9hcHBsaWNhdGlvbl9pZCwgZXJyLkFQUF9JRF9NSVNNQVRDSAogICAgZ3R4bnMgQXBwbGljYXRpb25JRAogICAgZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbklECiAgICA9PQogICAgYXNzZXJ0IC8vIEFwcGxpY2F0aW9uIElEIG1pc21hdGNoLiBBcHAgSUQgbXVzdCBiZSBzYW1lIGFjcm9zcyBhbGwgdHJhbnNhY3Rpb25zIGluIGdyb3VwLgogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9jb250cmFjdC5weTo0OTEtNDkyCiAgICAvLyAjIEdldCB0aGUgc2Vjb25kIHRyYW5zYWN0aW9uIGluIHRoZSBncm91cAogICAgLy8gc2Vjb25kX3R4biA9IGd0eG4uQXBwbGljYXRpb25DYWxsVHJhbnNhY3Rpb24oZ3JvdXBfaW5kZXg9MSkKICAgIGludGNfMCAvLyAxCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L2NvbnRyYWN0LnB5OjQ5OQogICAgLy8gYXNzZXJ0IHNlY29uZF90eG4uc2VuZGVyID09IFR4bi5zZW5kZXIsIGVyci5TRU5ERVJfTUlTTUFUQ0gKICAgIGd0eG5zIFNlbmRlcgogICAgdHhuIFNlbmRlcgogICAgPT0KICAgIGFzc2VydCAvLyBTZW5kZXIgbWlzbWF0Y2guIFNlbmRlciBtdXN0IGJlIHNhbWUgYWRkcmVzcyBhY3Jvc3MgYWxsIHRyYW5zYWN0aW9ucyBpbiBncm91cC4KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvY29udHJhY3QucHk6NDkxLTQ5MgogICAgLy8gIyBHZXQgdGhlIHNlY29uZCB0cmFuc2FjdGlvbiBpbiB0aGUgZ3JvdXAKICAgIC8vIHNlY29uZF90eG4gPSBndHhuLkFwcGxpY2F0aW9uQ2FsbFRyYW5zYWN0aW9uKGdyb3VwX2luZGV4PTEpCiAgICBpbnRjXzAgLy8gMQogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9jb250cmFjdC5weTo1MDAKICAgIC8vIGFzc2VydCBzZWNvbmRfdHhuLmFwcF9hcmdzKDApID09IGFyYzQuYXJjNF9zaWduYXR1cmUoCiAgICBpbnRjXzEgLy8gMAogICAgZ3R4bnNhcyBBcHBsaWNhdGlvbkFyZ3MKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvY29udHJhY3QucHk6NTAwLTUwMQogICAgLy8gYXNzZXJ0IHNlY29uZF90eG4uYXBwX2FyZ3MoMCkgPT0gYXJjNC5hcmM0X3NpZ25hdHVyZSgKICAgIC8vICAgICAiYWRkX3Jlc291cmNlX2J1ZGdldF9wbGF5X2dhbWUodWludDY0KXZvaWQiKSwgZXJyLklOVkFMSURfTUVUSE9EX1NFTEVDVE9SCiAgICBieXRlYyAxMiAvLyBtZXRob2QgImFkZF9yZXNvdXJjZV9idWRnZXRfcGxheV9nYW1lKHVpbnQ2NCl2b2lkIgogICAgPT0KICAgIGFzc2VydCAvLyBUcmFuc2FjdGlvbiBhdCB0aGlzIGdyb3VwIGluZGV4IG11c3QgaGF2ZSBleGFjdCByZXF1aXJlZCBtZXRob2Qgc2VsZWN0b3IuCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L2NvbnRyYWN0LnB5OjQ5MS00OTIKICAgIC8vICMgR2V0IHRoZSBzZWNvbmQgdHJhbnNhY3Rpb24gaW4gdGhlIGdyb3VwCiAgICAvLyBzZWNvbmRfdHhuID0gZ3R4bi5BcHBsaWNhdGlvbkNhbGxUcmFuc2FjdGlvbihncm91cF9pbmRleD0xKQogICAgaW50Y18wIC8vIDEKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvY29udHJhY3QucHk6NTAyCiAgICAvLyBhc3NlcnQgc2Vjb25kX3R4bi5hcHBfYXJncygxKSA9PSBUeG4uYXBwbGljYXRpb25fYXJncygxKSwgZXJyLklOVkFMSURfR0FNRV9JRAogICAgZHVwCiAgICBndHhuc2FzIEFwcGxpY2F0aW9uQXJncwogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgPT0KICAgIGFzc2VydCAvLyBJbnZhbGlkIEdhbWUgSUQuIEJveCBDb21taXQgUmFuZCBHYW1lIElEIG11c3QgYmUgYSBjZXJ0YWluIHZhbHVlIG9yIG1hdGNoIEdhbWUgSUQgYXJnLgogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9jb250cmFjdC5weTo1MDQKICAgIC8vIGFzc2VydCBnYW1lX2lkIGluIHNlbGYuYm94X2dhbWVfc3RhdGUsIGVyci5HQU1FX0lEX05PVF9GT1VORAogICAgZnJhbWVfZGlnIC0xCiAgICBpdG9iCiAgICBkdXAKICAgIGZyYW1lX2J1cnkgMQogICAgYnl0ZWMgNCAvLyAic18iCiAgICBzd2FwCiAgICBjb25jYXQKICAgIGR1cAogICAgZnJhbWVfYnVyeSAwCiAgICBkdXAKICAgIGJveF9sZW4KICAgIGJ1cnkgMQogICAgYXNzZXJ0IC8vIEJveCBnYW1lIHN0YXRlIG5vdCBmb3VuZC4gQ2hlY2sgaWYgZ2FtZSBJRCBleGlzdHMuCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L2NvbnRyYWN0LnB5OjUwNQogICAgLy8gYXNzZXJ0IFR4bi5zZW5kZXIgaW4gc2VsZi5ib3hfY29tbWl0X3JhbmQsIGVyci5CT1hfTk9UX0ZPVU5ECiAgICBieXRlY18wIC8vICJjXyIKICAgIHR4biBTZW5kZXIKICAgIGNvbmNhdAogICAgYm94X2xlbgogICAgYnVyeSAxCiAgICBhc3NlcnQgLy8gQm94IG5vdCBmb3VuZC4gRW5zdXJlIHRoZSBib3ggeW91IGFyZSB0cnlpbmcgdG8gYWNjZXNzIHdhcyBjcmVhdGVkIGFuZCBzdGlsbCBleGlzdHMuCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L2NvbnRyYWN0LnB5OjUwNgogICAgLy8gYXNzZXJ0IHNlbGYuYm94X2dhbWVfdHJvcGh5LCBlcnIuQk9YX05PVF9GT1VORAogICAgYnl0ZWNfMiAvLyAidF8iCiAgICBib3hfbGVuCiAgICBidXJ5IDEKICAgIGFzc2VydCAvLyBCb3ggbm90IGZvdW5kLiBFbnN1cmUgdGhlIGJveCB5b3UgYXJlIHRyeWluZyB0byBhY2Nlc3Mgd2FzIGNyZWF0ZWQgYW5kIHN0aWxsIGV4aXN0cy4KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvY29udHJhY3QucHk6NTEwCiAgICAvLyBhY2NvdW50PVR4bi5zZW5kZXIsCiAgICB0eG4gU2VuZGVyCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L2NvbnRyYWN0LnB5OjUxMgogICAgLy8gcGxheWVyX2NvdW50PXNlbGYuYm94X2dhbWVfc3RhdGVbZ2FtZV9pZF0ubWF4X3BsYXllcnMubmF0aXZlLAogICAgZGlnIDEKICAgIGJveF9nZXQKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmJveF9nYW1lX3N0YXRlIGVudHJ5IGV4aXN0cwogICAgaW50Y18wIC8vIDEKICAgIGdldGJ5dGUKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvY29udHJhY3QucHk6NTA4LTUxNAogICAgLy8gc3J0LmNoZWNrX2FjY19pbl9nYW1lKCAgIyBub3FhOiBFNzEyLCBSVUYxMDAKICAgIC8vICAgICBnYW1lX2lkPWdhbWVfaWQsCiAgICAvLyAgICAgYWNjb3VudD1UeG4uc2VuZGVyLAogICAgLy8gICAgIGJveF9nYW1lX3BsYXllcnM9c2VsZi5ib3hfZ2FtZV9wbGF5ZXJzLAogICAgLy8gICAgIHBsYXllcl9jb3VudD1zZWxmLmJveF9nYW1lX3N0YXRlW2dhbWVfaWRdLm1heF9wbGF5ZXJzLm5hdGl2ZSwKICAgIC8vICAgICBjbGVhcl9wbGF5ZXI9VHJ1ZSwKICAgIC8vICkKICAgIGZyYW1lX2RpZyAtMQogICAgdW5jb3ZlciAyCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L2NvbnRyYWN0LnB5OjUxMQogICAgLy8gYm94X2dhbWVfcGxheWVycz1zZWxmLmJveF9nYW1lX3BsYXllcnMsCiAgICBieXRlY18zIC8vICJwXyIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvY29udHJhY3QucHk6NTA4LTUxNAogICAgLy8gc3J0LmNoZWNrX2FjY19pbl9nYW1lKCAgIyBub3FhOiBFNzEyLCBSVUYxMDAKICAgIC8vICAgICBnYW1lX2lkPWdhbWVfaWQsCiAgICAvLyAgICAgYWNjb3VudD1UeG4uc2VuZGVyLAogICAgLy8gICAgIGJveF9nYW1lX3BsYXllcnM9c2VsZi5ib3hfZ2FtZV9wbGF5ZXJzLAogICAgLy8gICAgIHBsYXllcl9jb3VudD1zZWxmLmJveF9nYW1lX3N0YXRlW2dhbWVfaWRdLm1heF9wbGF5ZXJzLm5hdGl2ZSwKICAgIC8vICAgICBjbGVhcl9wbGF5ZXI9VHJ1ZSwKICAgIC8vICkKICAgIHVuY292ZXIgMwogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9jb250cmFjdC5weTo1MTMKICAgIC8vIGNsZWFyX3BsYXllcj1UcnVlLAogICAgaW50Y18wIC8vIDEKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvY29udHJhY3QucHk6NTA4LTUxNAogICAgLy8gc3J0LmNoZWNrX2FjY19pbl9nYW1lKCAgIyBub3FhOiBFNzEyLCBSVUYxMDAKICAgIC8vICAgICBnYW1lX2lkPWdhbWVfaWQsCiAgICAvLyAgICAgYWNjb3VudD1UeG4uc2VuZGVyLAogICAgLy8gICAgIGJveF9nYW1lX3BsYXllcnM9c2VsZi5ib3hfZ2FtZV9wbGF5ZXJzLAogICAgLy8gICAgIHBsYXllcl9jb3VudD1zZWxmLmJveF9nYW1lX3N0YXRlW2dhbWVfaWRdLm1heF9wbGF5ZXJzLm5hdGl2ZSwKICAgIC8vICAgICBjbGVhcl9wbGF5ZXI9VHJ1ZSwKICAgIC8vICkKICAgIGNhbGxzdWIgY2hlY2tfYWNjX2luX2dhbWUKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvY29udHJhY3QucHk6NTE1CiAgICAvLyA9PSBUcnVlCiAgICBpbnRjXzAgLy8gMQogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9jb250cmFjdC5weTo1MDgtNTE1CiAgICAvLyBzcnQuY2hlY2tfYWNjX2luX2dhbWUoICAjIG5vcWE6IEU3MTIsIFJVRjEwMAogICAgLy8gICAgIGdhbWVfaWQ9Z2FtZV9pZCwKICAgIC8vICAgICBhY2NvdW50PVR4bi5zZW5kZXIsCiAgICAvLyAgICAgYm94X2dhbWVfcGxheWVycz1zZWxmLmJveF9nYW1lX3BsYXllcnMsCiAgICAvLyAgICAgcGxheWVyX2NvdW50PXNlbGYuYm94X2dhbWVfc3RhdGVbZ2FtZV9pZF0ubWF4X3BsYXllcnMubmF0aXZlLAogICAgLy8gICAgIGNsZWFyX3BsYXllcj1UcnVlLAogICAgLy8gKQogICAgLy8gPT0gVHJ1ZQogICAgPT0KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvY29udHJhY3QucHk6NTA3LTUxNgogICAgLy8gYXNzZXJ0ICgKICAgIC8vICAgICBzcnQuY2hlY2tfYWNjX2luX2dhbWUoICAjIG5vcWE6IEU3MTIsIFJVRjEwMAogICAgLy8gICAgICAgICBnYW1lX2lkPWdhbWVfaWQsCiAgICAvLyAgICAgICAgIGFjY291bnQ9VHhuLnNlbmRlciwKICAgIC8vICAgICAgICAgYm94X2dhbWVfcGxheWVycz1zZWxmLmJveF9nYW1lX3BsYXllcnMsCiAgICAvLyAgICAgICAgIHBsYXllcl9jb3VudD1zZWxmLmJveF9nYW1lX3N0YXRlW2dhbWVfaWRdLm1heF9wbGF5ZXJzLm5hdGl2ZSwKICAgIC8vICAgICAgICAgY2xlYXJfcGxheWVyPVRydWUsCiAgICAvLyAgICAgKQogICAgLy8gICAgID09IFRydWUKICAgIC8vICksIGVyci5QTEFZRVJfTk9UX0ZPVU5ECiAgICBhc3NlcnQgLy8gQWNjb3VudCBpcyBub3QgcmVjb2duaXplZCBhcyBhbiBhY3RpdmUgcGxheWVyIGZvciB0aGlzIGdhbWUuCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L2NvbnRyYWN0LnB5OjUxOC01MjEKICAgIC8vICMgUmV0cmlldmUgdGhlIGdhbWUgc3RhdGUgdmFsdWUgZnJvbSBpdHMgY29ycmVzcG9uZGluZyBib3ggdXNpbmcgdGhlIGdhbWUgaWQgcGFyYW1ldGVyCiAgICAvLyBnYW1lX3N0YXRlID0gc2VsZi5ib3hfZ2FtZV9zdGF0ZVsKICAgIC8vICAgICBnYW1lX2lkCiAgICAvLyBdLmNvcHkoKSAgIyBNYWtlIGEgY29weSBvZiB0aGUgZ2FtZSBzdGF0ZSBlbHNlIGltbXV0YWJsZQogICAgYm94X2dldAogICAgc3dhcAogICAgZHVwCiAgICBjb3ZlciAyCiAgICBmcmFtZV9idXJ5IDIKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmJveF9nYW1lX3N0YXRlIGVudHJ5IGV4aXN0cwogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9jb250cmFjdC5weTo1MjMtNTI0CiAgICAvLyAjIEZhaWwgdHJhbnNhY3Rpb24gdW5sZXNzIHRoZSBhc3NlcnRpb25zIGJlbG93IGV2YWx1YXRlIFRydWUKICAgIC8vIGFzc2VydCBnYW1lX3N0YXRlLnN0YWtpbmdfZmluYWxpemVkID09IFRydWUsIGVyci5TVEFLSU5HX0ZJTkFMICAjIG5vcWE6IEU3MTIKICAgIGR1cAogICAgaW50Y18xIC8vIDAKICAgIGdldGJpdAogICAgYnl0ZWNfMSAvLyAweDAwCiAgICBpbnRjXzEgLy8gMAogICAgdW5jb3ZlciAyCiAgICBzZXRiaXQKICAgIGludGNfMSAvLyAwCiAgICBnZXRiaXQKICAgIGludGNfMCAvLyAxCiAgICA9PQogICAgYXNzZXJ0IC8vIEdhbWUgc3RhdGUgc3Rha2luZyBmaW5hbGl6ZWQgdmFsdWUgbWlzbWF0Y2guCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L2NvbnRyYWN0LnB5OjUyNQogICAgLy8gYXNzZXJ0IGdhbWVfc3RhdGUuZXhwaXJ5X3RzID49IEdsb2JhbC5sYXRlc3RfdGltZXN0YW1wLCBlcnIuVElNRV9DT05TVFJBSU5UX1ZJT0xBVElPTgogICAgZXh0cmFjdCA4IDggLy8gb24gZXJyb3I6IEluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICBnbG9iYWwgTGF0ZXN0VGltZXN0YW1wCiAgICBpdG9iCiAgICBiPj0KICAgIGFzc2VydCAvLyBJbnZhbGlkIHRpbWUgZnJhbWUuIENhbGwgbWFkZSBvdXRzaWRlIHRoZSBwZXJtaXR0ZWQgYmxvY2sgb3IgdGltZXN0YW1wIHJhbmdlLgogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9jb250cmFjdC5weTo1MjcKICAgIC8vIHNlbGYuYm94X2NvbW1pdF9yYW5kW1R4bi5zZW5kZXJdLmdhbWVfaWQubmF0aXZlID09IGdhbWVfaWQKICAgIGJ5dGVjXzAgLy8gImNfIgogICAgdHhuIFNlbmRlcgogICAgY29uY2F0CiAgICBib3hfZ2V0CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5ib3hfY29tbWl0X3JhbmQgZW50cnkgZXhpc3RzCiAgICBpbnRjXzEgLy8gMAogICAgZXh0cmFjdF91aW50NjQKICAgIGZyYW1lX2RpZyAtMQogICAgPT0KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvY29udHJhY3QucHk6NTI2LTUyOAogICAgLy8gYXNzZXJ0ICgKICAgIC8vICAgICBzZWxmLmJveF9jb21taXRfcmFuZFtUeG4uc2VuZGVyXS5nYW1lX2lkLm5hdGl2ZSA9PSBnYW1lX2lkCiAgICAvLyApLCBlcnIuSU5WQUxJRF9HQU1FX0lECiAgICBhc3NlcnQgLy8gSW52YWxpZCBHYW1lIElELiBCb3ggQ29tbWl0IFJhbmQgR2FtZSBJRCBtdXN0IGJlIGEgY2VydGFpbiB2YWx1ZSBvciBtYXRjaCBHYW1lIElEIGFyZy4KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvY29udHJhY3QucHk6NTMwCiAgICAvLyBHbG9iYWwucm91bmQgPj0gc2VsZi5ib3hfY29tbWl0X3JhbmRbVHhuLnNlbmRlcl0uY29tbWl0X3JvdW5kLm5hdGl2ZQogICAgZ2xvYmFsIFJvdW5kCiAgICBieXRlY18wIC8vICJjXyIKICAgIHR4biBTZW5kZXIKICAgIGNvbmNhdAogICAgYm94X2dldAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYuYm94X2NvbW1pdF9yYW5kIGVudHJ5IGV4aXN0cwogICAgcHVzaGludCA4IC8vIDgKICAgIGV4dHJhY3RfdWludDY0CiAgICA+PQogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9jb250cmFjdC5weTo1MjktNTMxCiAgICAvLyBhc3NlcnQgKAogICAgLy8gICAgIEdsb2JhbC5yb3VuZCA+PSBzZWxmLmJveF9jb21taXRfcmFuZFtUeG4uc2VuZGVyXS5jb21taXRfcm91bmQubmF0aXZlCiAgICAvLyApLCBlcnIuQ09NTUlUX1JPVU5EX05PVF9SRUFDSEVECiAgICBhc3NlcnQgLy8gUmFuZG9tbmVzcyBjb21taXQgcm91bmQgbm90IHJlYWNoZWQgeWV0LgogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9jb250cmFjdC5weTo1MzMtNTM5CiAgICAvLyAjIENhbGwgdGhlIFJhbmRvbW5lc3MgQmVhY29uIHNtYXJ0IGNvbnRyYWN0IHRoYXQgY29tcHV0ZXMgdGhlIFZSRiBhbmQgb3V0cHV0cyBhIHJhbmRvbW5lc3MgdmFsdWUKICAgIC8vIHNlZWQgPSBhcmM0LmFiaV9jYWxsW0J5dGVzXSgKICAgIC8vICAgICAibXVzdF9nZXQodWludDY0LGJ5dGVbXSlieXRlW10iLAogICAgLy8gICAgIHNlbGYuYm94X2NvbW1pdF9yYW5kW1R4bi5zZW5kZXJdLmNvbW1pdF9yb3VuZC5uYXRpdmUsCiAgICAvLyAgICAgVHhuLnNlbmRlci5ieXRlcywKICAgIC8vICAgICBhcHBfaWQ9NjAwMDExODg3LCAgIyBUZXN0TmV0IFZSRiBCZWFjb24gQXBwbGljYXRpb24gSUQKICAgIC8vIClbMF0KICAgIGl0eG5fYmVnaW4KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvY29udHJhY3QucHk6NTM2CiAgICAvLyBzZWxmLmJveF9jb21taXRfcmFuZFtUeG4uc2VuZGVyXS5jb21taXRfcm91bmQubmF0aXZlLAogICAgYnl0ZWNfMCAvLyAiY18iCiAgICB0eG4gU2VuZGVyCiAgICBjb25jYXQKICAgIGJveF9nZXQKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmJveF9jb21taXRfcmFuZCBlbnRyeSBleGlzdHMKICAgIHB1c2hpbnQgOCAvLyA4CiAgICBleHRyYWN0X3VpbnQ2NAogICAgaXRvYgogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9jb250cmFjdC5weTo1MzcKICAgIC8vIFR4bi5zZW5kZXIuYnl0ZXMsCiAgICBieXRlYyAxMSAvLyAweDAwMjAKICAgIHR4biBTZW5kZXIKICAgIGNvbmNhdAogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9jb250cmFjdC5weTo1MzgKICAgIC8vIGFwcF9pZD02MDAwMTE4ODcsICAjIFRlc3ROZXQgVlJGIEJlYWNvbiBBcHBsaWNhdGlvbiBJRAogICAgcHVzaGludCA2MDAwMTE4ODcgLy8gNjAwMDExODg3CiAgICBpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uSUQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvY29udHJhY3QucHk6NTMzLTUzOQogICAgLy8gIyBDYWxsIHRoZSBSYW5kb21uZXNzIEJlYWNvbiBzbWFydCBjb250cmFjdCB0aGF0IGNvbXB1dGVzIHRoZSBWUkYgYW5kIG91dHB1dHMgYSByYW5kb21uZXNzIHZhbHVlCiAgICAvLyBzZWVkID0gYXJjNC5hYmlfY2FsbFtCeXRlc10oCiAgICAvLyAgICAgIm11c3RfZ2V0KHVpbnQ2NCxieXRlW10pYnl0ZVtdIiwKICAgIC8vICAgICBzZWxmLmJveF9jb21taXRfcmFuZFtUeG4uc2VuZGVyXS5jb21taXRfcm91bmQubmF0aXZlLAogICAgLy8gICAgIFR4bi5zZW5kZXIuYnl0ZXMsCiAgICAvLyAgICAgYXBwX2lkPTYwMDAxMTg4NywgICMgVGVzdE5ldCBWUkYgQmVhY29uIEFwcGxpY2F0aW9uIElECiAgICAvLyApWzBdCiAgICBwdXNoYnl0ZXMgMHg0N2MyMGMyMyAvLyBtZXRob2QgIm11c3RfZ2V0KHVpbnQ2NCxieXRlW10pYnl0ZVtdIgogICAgaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKICAgIHN3YXAKICAgIGl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCiAgICBpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwogICAgcHVzaGludCA2IC8vIGFwcGwKICAgIGl0eG5fZmllbGQgVHlwZUVudW0KICAgIGludGNfMSAvLyAwCiAgICBpdHhuX2ZpZWxkIEZlZQogICAgaXR4bl9zdWJtaXQKICAgIGl0eG4gTGFzdExvZwogICAgZHVwCiAgICBleHRyYWN0IDAgNAogICAgYnl0ZWMgNSAvLyAweDE1MWY3Yzc1CiAgICA9PQogICAgYXNzZXJ0IC8vIGFwcGxpY2F0aW9uIGxvZyB2YWx1ZSBpcyBub3QgdGhlIHJlc3VsdCBvZiBhbiBBQkkgcmV0dXJuCiAgICBkdXAKICAgIGV4dHJhY3QgNiAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L2NvbnRyYWN0LnB5OjU0MwogICAgLy8gc2NvcmVfaWQ9c2VsZi5zY29yZV9pZCwKICAgIGludGNfMSAvLyAwCiAgICBieXRlYyA2IC8vICJzY29yZV9pZCIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBzd2FwCiAgICBmcmFtZV9idXJ5IDExCiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5zY29yZV9pZCBleGlzdHMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvY29udHJhY3QucHk6NTQ1CiAgICAvLyBwbGF5ZXI9VHhuLnNlbmRlciwKICAgIHR4biBTZW5kZXIKICAgIGZyYW1lX2J1cnkgNAogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9zdWJyb3V0aW5lcy5weToxMzctMTM4CiAgICAvLyAjIEluaXRpYWxpemUgdGhlIFBDRyBwc2V1ZG8tcmFuZG9tIGdlbmVyYXRvciBzdGF0ZSB1c2luZyA4IGJ5dGVzIGZyb20gdGhlIGdpdmVuIHNlZWQKICAgIC8vIHN0YXRlID0gcGNnMTZfaW5pdChzZWVkPW9wLmV4dHJhY3Qoc2VlZCwgMTYsIDgpKQogICAgc3dhcAogICAgZXh0cmFjdCAyMiA4CiAgICAvLyAudmVudi9MaWIvc2l0ZS1wYWNrYWdlcy9saWJfcGNnL3BjZzMyLnB5OjIxCiAgICAvLyBhc3NlcnQgc2VlZC5sZW5ndGggPT0gOAogICAgbGVuCiAgICBwdXNoaW50IDggLy8gOAogICAgPT0KICAgIGFzc2VydAogICAgcHVzaGludCAxNiAvLyAxNgogICAgLy8gLnZlbnYvTGliL3NpdGUtcGFja2FnZXMvbGliX3BjZy9wY2czMi5weToyMwogICAgLy8gcmV0dXJuIF9fcGNnMzJfaW5pdChvcC5idG9pKHNlZWQpLCBVSW50NjQoUENHX0ZJUlNUX0lOQ1JFTUVOVCkpCiAgICBleHRyYWN0X3VpbnQ2NAogICAgLy8gLnZlbnYvTGliL3NpdGUtcGFja2FnZXMvbGliX3BjZy9wY2czMi5weToxNTUKICAgIC8vIHN0YXRlID0gX19wY2czMl9zdGVwKFVJbnQ2NCgwKSwgaW5jcikKICAgIGludGNfMSAvLyAwCiAgICAvLyAudmVudi9MaWIvc2l0ZS1wYWNrYWdlcy9saWJfcGNnL3BjZzMyLnB5OjI2OQogICAgLy8gX2hpZ2hfbXVsLCBsb3dfbXVsID0gb3AubXVsdyhzdGF0ZSwgUENHX01VTFRJUExJRVIpCiAgICBpbnRjIDggLy8gNjM2NDEzNjIyMzg0Njc5MzAwNQogICAgbXVsdwogICAgYnVyeSAxCiAgICAvLyAudmVudi9MaWIvc2l0ZS1wYWNrYWdlcy9saWJfcGNnL3BjZzMyLnB5OjIzCiAgICAvLyByZXR1cm4gX19wY2czMl9pbml0KG9wLmJ0b2koc2VlZCksIFVJbnQ2NChQQ0dfRklSU1RfSU5DUkVNRU5UKSkKICAgIGludGMgOSAvLyAxNDQyNjk1MDQwODg4OTYzNDA3CiAgICAvLyAudmVudi9MaWIvc2l0ZS1wYWNrYWdlcy9saWJfcGNnL3BjZzMyLnB5OjI3MAogICAgLy8gX2hpZ2hfYWRkLCBsb3dfYWRkID0gb3AuYWRkdyhsb3dfbXVsLCBpbmNyKQogICAgYWRkdwogICAgYnVyeSAxCiAgICAvLyAudmVudi9MaWIvc2l0ZS1wYWNrYWdlcy9saWJfcGNnL3BjZzMyLnB5OjE1NgogICAgLy8gX2hpZ2hfYWRkdywgc3RhdGUgPSBvcC5hZGR3KHN0YXRlLCBpbml0aWFsX3N0YXRlKQogICAgYWRkdwogICAgYnVyeSAxCiAgICAvLyAudmVudi9MaWIvc2l0ZS1wYWNrYWdlcy9saWJfcGNnL3BjZzMyLnB5OjI2OQogICAgLy8gX2hpZ2hfbXVsLCBsb3dfbXVsID0gb3AubXVsdyhzdGF0ZSwgUENHX01VTFRJUExJRVIpCiAgICBpbnRjIDggLy8gNjM2NDEzNjIyMzg0Njc5MzAwNQogICAgbXVsdwogICAgYnVyeSAxCiAgICAvLyAudmVudi9MaWIvc2l0ZS1wYWNrYWdlcy9saWJfcGNnL3BjZzMyLnB5OjIzCiAgICAvLyByZXR1cm4gX19wY2czMl9pbml0KG9wLmJ0b2koc2VlZCksIFVJbnQ2NChQQ0dfRklSU1RfSU5DUkVNRU5UKSkKICAgIGludGMgOSAvLyAxNDQyNjk1MDQwODg4OTYzNDA3CiAgICAvLyAudmVudi9MaWIvc2l0ZS1wYWNrYWdlcy9saWJfcGNnL3BjZzMyLnB5OjI3MAogICAgLy8gX2hpZ2hfYWRkLCBsb3dfYWRkID0gb3AuYWRkdyhsb3dfbXVsLCBpbmNyKQogICAgYWRkdwogICAgYnVyeSAxCiAgICAvLyAudmVudi9MaWIvc2l0ZS1wYWNrYWdlcy9saWJfcGNnL3BjZzMyLnB5OjE5OAogICAgLy8gcmVzdWx0ICs9IGFyYzQuVUludDE2KGxlbmd0aCkuYnl0ZXMKICAgIHB1c2hieXRlcyAweDAwZmYKICAgIGZyYW1lX2J1cnkgNQogICAgLy8gLnZlbnYvTGliL3NpdGUtcGFja2FnZXMvbGliX3BjZy9wY2czMi5weToyOTIKICAgIC8vIF9hZGR3X2hpZ2gsIGFkZHdfbG93ID0gb3AuYWRkdyh+dmFsdWUsIDEpCiAgICBwdXNoaW50IDE4NDQ2NzQ0MDczNzA5NDg2MDgwIC8vIDE4NDQ2NzQ0MDczNzA5NDg2MDgwCiAgICBpbnRjXzAgLy8gMQogICAgYWRkdwogICAgYnVyeSAxCiAgICAvLyAudmVudi9MaWIvc2l0ZS1wYWNrYWdlcy9saWJfcGNnL3BjZzMyLnB5OjMwMAogICAgLy8gcmV0dXJuIHZhbHVlICYgKCgxIDw8IDMyKSAtIDEpCiAgICBpbnRjIDEwIC8vIDQyOTQ5NjcyOTUKICAgICYKICAgIC8vIC52ZW52L0xpYi9zaXRlLXBhY2thZ2VzL2xpYl9wY2cvcGNnMzIucHk6MjE5CiAgICAvLyBhYnNvbHV0ZV9ib3VuZCA9ICgxIDw8IGJpdF9zaXplKSAtIGxvd2VyX2JvdW5kCiAgICBpbnRjIDEyIC8vIDY1NTM1CiAgICAvLyAudmVudi9MaWIvc2l0ZS1wYWNrYWdlcy9saWJfcGNnL3BjZzMyLnB5OjIyMQogICAgLy8gdGhyZXNob2xkID0gX19tYXNrX3RvX3VpbnQzMihfX3VpbnQ2NF90d29zKGFic29sdXRlX2JvdW5kKSkgJSBhYnNvbHV0ZV9ib3VuZAogICAgJQogICAgZnJhbWVfYnVyeSAxMwogICAgLy8gLnZlbnYvTGliL3NpdGUtcGFja2FnZXMvbGliX3BjZy9wY2czMi5weToyMjMKICAgIC8vIGZvciBpIGluIHVyYW5nZShsZW5ndGgpOiAgIyBub3FhOiBCMDA3CiAgICBpbnRjXzEgLy8gMAogICAgZnJhbWVfYnVyeSA5CiAgICBmcmFtZV9idXJ5IDEyCgpwbGF5X2dhbWVfZm9yX2hlYWRlckAxMzoKICAgIC8vIC52ZW52L0xpYi9zaXRlLXBhY2thZ2VzL2xpYl9wY2cvcGNnMzIucHk6MjIzCiAgICAvLyBmb3IgaSBpbiB1cmFuZ2UobGVuZ3RoKTogICMgbm9xYTogQjAwNwogICAgZnJhbWVfZGlnIDkKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvc3Vicm91dGluZXMucHk6MTQ1CiAgICAvLyBsZW5ndGg9VUludDY0KDI1NSksICAjIE51bWJlciBvZiB2YWx1ZXMgZ2VuZXJhdGVkIGlzIDI1NQogICAgcHVzaGludCAyNTUgLy8gMjU1CiAgICAvLyAudmVudi9MaWIvc2l0ZS1wYWNrYWdlcy9saWJfcGNnL3BjZzMyLnB5OjIyMwogICAgLy8gZm9yIGkgaW4gdXJhbmdlKGxlbmd0aCk6ICAjIG5vcWE6IEIwMDcKICAgIDwKICAgIGJ6IHBsYXlfZ2FtZV9hZnRlcl9mb3JAMTgKCnBsYXlfZ2FtZV93aGlsZV90b3BAMTU6CiAgICAvLyAudmVudi9MaWIvc2l0ZS1wYWNrYWdlcy9saWJfcGNnL3BjZzMyLnB5OjI2OQogICAgLy8gX2hpZ2hfbXVsLCBsb3dfbXVsID0gb3AubXVsdyhzdGF0ZSwgUENHX01VTFRJUExJRVIpCiAgICBmcmFtZV9kaWcgMTIKICAgIGR1cAogICAgaW50YyA4IC8vIDYzNjQxMzYyMjM4NDY3OTMwMDUKICAgIG11bHcKICAgIGJ1cnkgMQogICAgLy8gLnZlbnYvTGliL3NpdGUtcGFja2FnZXMvbGliX3BjZy9wY2czMi5weToyNTQKICAgIC8vIHJldHVybiBfX3BjZzMyX3N0ZXAoc3RhdGUsIFVJbnQ2NChQQ0dfRklSU1RfSU5DUkVNRU5UKSksIF9fcGNnMzJfb3V0cHV0KHN0YXRlKQogICAgaW50YyA5IC8vIDE0NDI2OTUwNDA4ODg5NjM0MDcKICAgIC8vIC52ZW52L0xpYi9zaXRlLXBhY2thZ2VzL2xpYl9wY2cvcGNnMzIucHk6MjcwCiAgICAvLyBfaGlnaF9hZGQsIGxvd19hZGQgPSBvcC5hZGR3KGxvd19tdWwsIGluY3IpCiAgICBhZGR3CiAgICBjb3ZlciAyCiAgICBwb3AKICAgIC8vIC52ZW52L0xpYi9zaXRlLXBhY2thZ2VzL2xpYl9wY2cvcGNnMzIucHk6Mjc5CiAgICAvLyBfX21hc2tfdG9fdWludDMyKCgoc3RhdGUgPj4gMTgpIF4gc3RhdGUpID4+IDI3KSwgc3RhdGUgPj4gNTkKICAgIGR1cAogICAgcHVzaGludCAxOCAvLyAxOAogICAgc2hyCiAgICBkaWcgMQogICAgXgogICAgcHVzaGludCAyNyAvLyAyNwogICAgc2hyCiAgICAvLyAudmVudi9MaWIvc2l0ZS1wYWNrYWdlcy9saWJfcGNnL3BjZzMyLnB5OjMwMAogICAgLy8gcmV0dXJuIHZhbHVlICYgKCgxIDw8IDMyKSAtIDEpCiAgICBpbnRjIDEwIC8vIDQyOTQ5NjcyOTUKICAgICYKICAgIC8vIC52ZW52L0xpYi9zaXRlLXBhY2thZ2VzL2xpYl9wY2cvcGNnMzIucHk6Mjc5CiAgICAvLyBfX21hc2tfdG9fdWludDMyKCgoc3RhdGUgPj4gMTgpIF4gc3RhdGUpID4+IDI3KSwgc3RhdGUgPj4gNTkKICAgIHN3YXAKICAgIHB1c2hpbnQgNTkgLy8gNTkKICAgIHNocgogICAgLy8gLnZlbnYvTGliL3NpdGUtcGFja2FnZXMvbGliX3BjZy9wY2czMi5weToyODYKICAgIC8vIHJldHVybiAodmFsdWUgPj4gcm90KSB8IF9fbWFza190b191aW50MzIodmFsdWUgPDwgKF9fdWludDY0X3R3b3Mocm90KSAmIDMxKSkKICAgIGR1cDIKICAgIHNocgogICAgLy8gLnZlbnYvTGliL3NpdGUtcGFja2FnZXMvbGliX3BjZy9wY2czMi5weToyOTIKICAgIC8vIF9hZGR3X2hpZ2gsIGFkZHdfbG93ID0gb3AuYWRkdyh+dmFsdWUsIDEpCiAgICBzd2FwCiAgICB+CiAgICBpbnRjXzAgLy8gMQogICAgYWRkdwogICAgYnVyeSAxCiAgICAvLyAudmVudi9MaWIvc2l0ZS1wYWNrYWdlcy9saWJfcGNnL3BjZzMyLnB5OjI4NgogICAgLy8gcmV0dXJuICh2YWx1ZSA+PiByb3QpIHwgX19tYXNrX3RvX3VpbnQzMih2YWx1ZSA8PCAoX191aW50NjRfdHdvcyhyb3QpICYgMzEpKQogICAgcHVzaGludCAzMSAvLyAzMQogICAgJgogICAgdW5jb3ZlciAyCiAgICBzd2FwCiAgICBzaGwKICAgIC8vIC52ZW52L0xpYi9zaXRlLXBhY2thZ2VzL2xpYl9wY2cvcGNnMzIucHk6MzAwCiAgICAvLyByZXR1cm4gdmFsdWUgJiAoKDEgPDwgMzIpIC0gMSkKICAgIGludGMgMTAgLy8gNDI5NDk2NzI5NQogICAgJgogICAgLy8gLnZlbnYvTGliL3NpdGUtcGFja2FnZXMvbGliX3BjZy9wY2czMi5weToyODYKICAgIC8vIHJldHVybiAodmFsdWUgPj4gcm90KSB8IF9fbWFza190b191aW50MzIodmFsdWUgPDwgKF9fdWludDY0X3R3b3Mocm90KSAmIDMxKSkKICAgIHwKICAgIGR1cAogICAgZnJhbWVfYnVyeSA4CiAgICAvLyAudmVudi9MaWIvc2l0ZS1wYWNrYWdlcy9saWJfcGNnL3BjZzMyLnB5OjIyNgogICAgLy8gaWYgY2FuZGlkYXRlID49IHRocmVzaG9sZDoKICAgIGZyYW1lX2RpZyAxMwogICAgPj0KICAgIGJ6IHBsYXlfZ2FtZV9hZnRlcl9pZl9lbHNlQDE3CiAgICAvLyAudmVudi9MaWIvc2l0ZS1wYWNrYWdlcy9saWJfcGNnL3BjZzMyLnB5OjIyOAogICAgLy8gb3AuaXRvYigoY2FuZGlkYXRlICUgYWJzb2x1dGVfYm91bmQpICsgbG93ZXJfYm91bmQpLAogICAgZnJhbWVfZGlnIDgKICAgIC8vIC52ZW52L0xpYi9zaXRlLXBhY2thZ2VzL2xpYl9wY2cvcGNnMzIucHk6MjE5CiAgICAvLyBhYnNvbHV0ZV9ib3VuZCA9ICgxIDw8IGJpdF9zaXplKSAtIGxvd2VyX2JvdW5kCiAgICBpbnRjIDEyIC8vIDY1NTM1CiAgICAvLyAudmVudi9MaWIvc2l0ZS1wYWNrYWdlcy9saWJfcGNnL3BjZzMyLnB5OjIyOAogICAgLy8gb3AuaXRvYigoY2FuZGlkYXRlICUgYWJzb2x1dGVfYm91bmQpICsgbG93ZXJfYm91bmQpLAogICAgJQogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9zdWJyb3V0aW5lcy5weToxNDMKICAgIC8vIGxvd2VyX2JvdW5kPVVJbnQ2NCgxKSwgICMgTG93ZXIgYm91bmQgaXMgMSAodG8gZGlzYWxsb3cgMCBhcyBhIHZhbHVlKQogICAgaW50Y18wIC8vIDEKICAgIC8vIC52ZW52L0xpYi9zaXRlLXBhY2thZ2VzL2xpYl9wY2cvcGNnMzIucHk6MjI4CiAgICAvLyBvcC5pdG9iKChjYW5kaWRhdGUgJSBhYnNvbHV0ZV9ib3VuZCkgKyBsb3dlcl9ib3VuZCksCiAgICArCiAgICBpdG9iCiAgICAvLyAudmVudi9MaWIvc2l0ZS1wYWNrYWdlcy9saWJfcGNnL3BjZzMyLnB5OjIyNy0yMzEKICAgIC8vIHJlc3VsdCArPSBvcC5leHRyYWN0KAogICAgLy8gICAgIG9wLml0b2IoKGNhbmRpZGF0ZSAlIGFic29sdXRlX2JvdW5kKSArIGxvd2VyX2JvdW5kKSwKICAgIC8vICAgICB0cnVuY2F0ZV9zdGFydF9jYWNoZWQsCiAgICAvLyAgICAgYnl0ZV9zaXplLAogICAgLy8gKQogICAgZXh0cmFjdCA2IDIKICAgIGZyYW1lX2RpZyA1CiAgICBzd2FwCiAgICBjb25jYXQKICAgIGZyYW1lX2J1cnkgNQogICAgLy8gLnZlbnYvTGliL3NpdGUtcGFja2FnZXMvbGliX3BjZy9wY2czMi5weToyMjMKICAgIC8vIGZvciBpIGluIHVyYW5nZShsZW5ndGgpOiAgIyBub3FhOiBCMDA3CiAgICBmcmFtZV9kaWcgOQogICAgaW50Y18wIC8vIDEKICAgICsKICAgIGZyYW1lX2J1cnkgOQogICAgZnJhbWVfYnVyeSAxMgogICAgYiBwbGF5X2dhbWVfZm9yX2hlYWRlckAxMwoKcGxheV9nYW1lX2FmdGVyX2lmX2Vsc2VAMTc6CiAgICBmcmFtZV9idXJ5IDEyCiAgICBiIHBsYXlfZ2FtZV93aGlsZV90b3BAMTUKCnBsYXlfZ2FtZV9hZnRlcl9mb3JAMTg6CiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L3N1YnJvdXRpbmVzLnB5OjE0OC0xNDkKICAgIC8vICMgSW5pdGlhbGl6ZSB0aGUgcGxheWVyJ3Mgc2NvcmUKICAgIC8vIHNjb3JlID0gVUludDY0KDApCiAgICBpbnRjXzEgLy8gMAogICAgZnJhbWVfYnVyeSAxMAogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9zdWJyb3V0aW5lcy5weToxNTEtMTUyCiAgICAvLyAjIEl0ZXJhdGUgdGhyb3VnaCB0aGUgc2VxdWVuY2UgYXMgYSBieXRlIGFycmF5IHN0YXJ0aW5nIGF0IGJ5dGUgaW5kZXggMiAoc2tpcCBhcnJheSBoZWFkZXIgYnl0ZXMpCiAgICAvLyBmb3IgaSBpbiB1cmFuZ2UoMiwgc2VxdWVuY2UuYnl0ZXMubGVuZ3RoLCAyKToKICAgIGZyYW1lX2RpZyA1CiAgICBsZW4KICAgIGZyYW1lX2J1cnkgMTQKICAgIGludGNfMiAvLyAyCiAgICBmcmFtZV9idXJ5IDkKCnBsYXlfZ2FtZV9mb3JfaGVhZGVyQDIwOgogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9zdWJyb3V0aW5lcy5weToxNTEtMTUyCiAgICAvLyAjIEl0ZXJhdGUgdGhyb3VnaCB0aGUgc2VxdWVuY2UgYXMgYSBieXRlIGFycmF5IHN0YXJ0aW5nIGF0IGJ5dGUgaW5kZXggMiAoc2tpcCBhcnJheSBoZWFkZXIgYnl0ZXMpCiAgICAvLyBmb3IgaSBpbiB1cmFuZ2UoMiwgc2VxdWVuY2UuYnl0ZXMubGVuZ3RoLCAyKToKICAgIGZyYW1lX2RpZyA5CiAgICBmcmFtZV9kaWcgMTQKICAgIDwKICAgIGJ6IHBsYXlfZ2FtZV9hZnRlcl9mb3JAMjMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvc3Vicm91dGluZXMucHk6MTUzLTE1NAogICAgLy8gIyBFeHRyYWN0IGEgMTYtYml0IHVuc2lnbmVkIGludGVnZXIgZnJvbSB0aGUgYnl0ZSBzZXF1ZW5jZQogICAgLy8gcm9sbCA9IG9wLmV4dHJhY3RfdWludDE2KHNlcXVlbmNlLmJ5dGVzWzI6XSwgaSkKICAgIGludGNfMiAvLyAyCiAgICBmcmFtZV9kaWcgMTQKICAgIGR1cAogICAgY292ZXIgMgogICAgPj0KICAgIGludGNfMiAvLyAyCiAgICBkaWcgMgogICAgdW5jb3ZlciAyCiAgICBzZWxlY3QKICAgIGZyYW1lX2RpZyA1CiAgICBzd2FwCiAgICB1bmNvdmVyIDIKICAgIHN1YnN0cmluZzMKICAgIGZyYW1lX2RpZyA5CiAgICBleHRyYWN0X3VpbnQxNgogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9zdWJyb3V0aW5lcy5weToxNTYtMTU3CiAgICAvLyAjIFN0b3AgYWNjdW11bGF0aW5nIHNjb3JlIGlmIHRoZSByb2xsIGlzIGJlbG93IG9yIGVxdWFsIHRvIHRoZSBlbGltaW5hdGlvbiB0aHJlc2hvbGQKICAgIC8vIGlmIHJvbGwgPD0gY3N0LkVMSU1fVEhSRVNIT0xEOgogICAgcHVzaGludCAxMDk5MiAvLyAxMDk5MgogICAgPD0KICAgIGJueiBwbGF5X2dhbWVfYWZ0ZXJfZm9yQDIzCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L3N1YnJvdXRpbmVzLnB5OjE2MC0xNjEKICAgIC8vICMgSW5jcmVtZW50IHNjb3JlIGZvciBlYWNoIHJvbGwgYWJvdmUgdGhlIHRocmVzaG9sZAogICAgLy8gc2NvcmUgKz0gMQogICAgZnJhbWVfZGlnIDEwCiAgICBpbnRjXzAgLy8gMQogICAgKwogICAgZnJhbWVfYnVyeSAxMAogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9zdWJyb3V0aW5lcy5weToxNTEtMTUyCiAgICAvLyAjIEl0ZXJhdGUgdGhyb3VnaCB0aGUgc2VxdWVuY2UgYXMgYSBieXRlIGFycmF5IHN0YXJ0aW5nIGF0IGJ5dGUgaW5kZXggMiAoc2tpcCBhcnJheSBoZWFkZXIgYnl0ZXMpCiAgICAvLyBmb3IgaSBpbiB1cmFuZ2UoMiwgc2VxdWVuY2UuYnl0ZXMubGVuZ3RoLCAyKToKICAgIGZyYW1lX2RpZyA5CiAgICBpbnRjXzIgLy8gMgogICAgKwogICAgZnJhbWVfYnVyeSA5CiAgICBiIHBsYXlfZ2FtZV9mb3JfaGVhZGVyQDIwCgpwbGF5X2dhbWVfYWZ0ZXJfZm9yQDIzOgogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9zdWJyb3V0aW5lcy5weToxNjcKICAgIC8vIHNjb3JlX2lkLAogICAgZnJhbWVfZGlnIDExCiAgICBpdG9iCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L3N1YnJvdXRpbmVzLnB5OjE2OQogICAgLy8gYXJjNC5VSW50OChzY29yZSksCiAgICBmcmFtZV9kaWcgMTAKICAgIGl0b2IKICAgIGR1cAogICAgYml0bGVuCiAgICBwdXNoaW50IDggLy8gOAogICAgPD0KICAgIGFzc2VydCAvLyBvdmVyZmxvdwogICAgZXh0cmFjdCA3IDEKICAgIGR1cAogICAgZnJhbWVfYnVyeSA2CiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L3N1YnJvdXRpbmVzLnB5OjE2My0xNzAKICAgIC8vICMgRW1pdCBBUkMtMjggZXZlbnQgZm9yIG9mZi1jaGFpbiB0cmFja2luZwogICAgLy8gYXJjNC5lbWl0KAogICAgLy8gICAgICJwbGF5ZXJfc2NvcmUodWludDY0LHVpbnQ2NCxhZGRyZXNzLHVpbnQ4KSIsCiAgICAvLyAgICAgZ2FtZV9pZCwKICAgIC8vICAgICBzY29yZV9pZCwKICAgIC8vICAgICBwbGF5ZXIsCiAgICAvLyAgICAgYXJjNC5VSW50OChzY29yZSksCiAgICAvLyApCiAgICBmcmFtZV9kaWcgMQogICAgdW5jb3ZlciAyCiAgICBjb25jYXQKICAgIGZyYW1lX2RpZyA0CiAgICBjb25jYXQKICAgIHN3YXAKICAgIGNvbmNhdAogICAgcHVzaGJ5dGVzIDB4MWNjMmFmNTEgLy8gbWV0aG9kICJwbGF5ZXJfc2NvcmUodWludDY0LHVpbnQ2NCxhZGRyZXNzLHVpbnQ4KSIKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L3N1YnJvdXRpbmVzLnB5OjE3NC0xNzUKICAgIC8vICMgRmlyc3QgUGxhY2UKICAgIC8vIGdhbWVfc3RhdGUuZmlyc3RfcGxhY2VfYWRkcmVzcyA9PSBhcmM0LkFkZHJlc3MoR2xvYmFsLnplcm9fYWRkcmVzcykKICAgIGZyYW1lX2RpZyAyCiAgICBleHRyYWN0IDU2IDMyIC8vIG9uIGVycm9yOiBJbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgZ2xvYmFsIFplcm9BZGRyZXNzCiAgICA9PQogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9zdWJyb3V0aW5lcy5weToxNzQtMTc2CiAgICAvLyAjIEZpcnN0IFBsYWNlCiAgICAvLyBnYW1lX3N0YXRlLmZpcnN0X3BsYWNlX2FkZHJlc3MgPT0gYXJjNC5BZGRyZXNzKEdsb2JhbC56ZXJvX2FkZHJlc3MpCiAgICAvLyBvciBzY29yZSA+IGdhbWVfc3RhdGUuZmlyc3RfcGxhY2Vfc2NvcmUubmF0aXZlCiAgICBibnogcGxheV9nYW1lX2lmX2JvZHlAMjUKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvc3Vicm91dGluZXMucHk6MTc2CiAgICAvLyBvciBzY29yZSA+IGdhbWVfc3RhdGUuZmlyc3RfcGxhY2Vfc2NvcmUubmF0aXZlCiAgICBmcmFtZV9kaWcgMgogICAgcHVzaGludCAzIC8vIDMKICAgIGdldGJ5dGUKICAgIGZyYW1lX2RpZyAxMAogICAgPAogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9zdWJyb3V0aW5lcy5weToxNzQtMTc2CiAgICAvLyAjIEZpcnN0IFBsYWNlCiAgICAvLyBnYW1lX3N0YXRlLmZpcnN0X3BsYWNlX2FkZHJlc3MgPT0gYXJjNC5BZGRyZXNzKEdsb2JhbC56ZXJvX2FkZHJlc3MpCiAgICAvLyBvciBzY29yZSA+IGdhbWVfc3RhdGUuZmlyc3RfcGxhY2Vfc2NvcmUubmF0aXZlCiAgICBieiBwbGF5X2dhbWVfZWxzZV9ib2R5QDI2CgpwbGF5X2dhbWVfaWZfYm9keUAyNToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvc3Vicm91dGluZXMucHk6MTc4LTE3OQogICAgLy8gIyBBc3NpZ246IFNlY29uZCAtPiBUaGlyZAogICAgLy8gZ2FtZV9zdGF0ZS50aGlyZF9wbGFjZV9zY29yZSA9IGdhbWVfc3RhdGUuc2Vjb25kX3BsYWNlX3Njb3JlCiAgICBmcmFtZV9kaWcgMgogICAgZHVwCiAgICBleHRyYWN0IDQgMSAvLyBvbiBlcnJvcjogSW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIHJlcGxhY2UyIDUKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvc3Vicm91dGluZXMucHk6MTgwCiAgICAvLyBnYW1lX3N0YXRlLnRoaXJkX3BsYWNlX2FkZHJlc3MgPSBnYW1lX3N0YXRlLnNlY29uZF9wbGFjZV9hZGRyZXNzCiAgICBkdXAKICAgIGV4dHJhY3QgODggMzIgLy8gb24gZXJyb3I6IEluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICByZXBsYWNlMiAxMjAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvc3Vicm91dGluZXMucHk6MTgxLTE4MgogICAgLy8gIyBBc3NpZ246IEZpcnN0IC0+IFNlY29uZAogICAgLy8gZ2FtZV9zdGF0ZS5zZWNvbmRfcGxhY2Vfc2NvcmUgPSBnYW1lX3N0YXRlLmZpcnN0X3BsYWNlX3Njb3JlCiAgICBkdXAKICAgIGV4dHJhY3QgMyAxIC8vIG9uIGVycm9yOiBJbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgcmVwbGFjZTIgNAogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9zdWJyb3V0aW5lcy5weToxODMKICAgIC8vIGdhbWVfc3RhdGUuc2Vjb25kX3BsYWNlX2FkZHJlc3MgPSBnYW1lX3N0YXRlLmZpcnN0X3BsYWNlX2FkZHJlc3MKICAgIGR1cAogICAgZXh0cmFjdCA1NiAzMiAvLyBvbiBlcnJvcjogSW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIHJlcGxhY2UyIDg4CiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L3N1YnJvdXRpbmVzLnB5OjE4NC0xODUKICAgIC8vICMgQXNzaWduOiBTY29yZSAtPiBGaXJzdAogICAgLy8gZ2FtZV9zdGF0ZS5maXJzdF9wbGFjZV9zY29yZSA9IGFyYzQuVUludDgoc2NvcmUpCiAgICBmcmFtZV9kaWcgNgogICAgcmVwbGFjZTIgMwogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9zdWJyb3V0aW5lcy5weToxODYKICAgIC8vIGdhbWVfc3RhdGUuZmlyc3RfcGxhY2VfYWRkcmVzcyA9IGFyYzQuQWRkcmVzcyhwbGF5ZXIpCiAgICBmcmFtZV9kaWcgNAogICAgcmVwbGFjZTIgNTYKICAgIGZyYW1lX2J1cnkgMgoKcGxheV9nYW1lX2FmdGVyX2lmX2Vsc2VAMzQ6CiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L2NvbnRyYWN0LnB5OjU0OS01NTAKICAgIC8vICMgSW5jcmVtZW50IHNjb3JlIGlkIGJ5IDEKICAgIC8vIHNlbGYuc2NvcmVfaWQgKz0gMQogICAgaW50Y18xIC8vIDAKICAgIGJ5dGVjIDYgLy8gInNjb3JlX2lkIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLnNjb3JlX2lkIGV4aXN0cwogICAgaW50Y18wIC8vIDEKICAgICsKICAgIGJ5dGVjIDYgLy8gInNjb3JlX2lkIgogICAgc3dhcAogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvY29udHJhY3QucHk6NTUyLTU1MwogICAgLy8gIyBJZiBnYW1lIHN0YXRlIGZpcnN0IHBsYWNlIHNjb3JlIGlzIGhpZ2hlciB0aGFuIHRoZSBhdGggc2NvcmUKICAgIC8vIGlmIGdhbWVfc3RhdGUuZmlyc3RfcGxhY2Vfc2NvcmUubmF0aXZlID4gc2VsZi5hdGhfc2NvcmU6CiAgICBmcmFtZV9kaWcgMgogICAgcHVzaGludCAzIC8vIDMKICAgIGdldGJ5dGUKICAgIGR1cAogICAgZnJhbWVfYnVyeSAxNQogICAgaW50Y18xIC8vIDAKICAgIGJ5dGVjIDEwIC8vICJhdGhfc2NvcmUiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYuYXRoX3Njb3JlIGV4aXN0cwogICAgPgogICAgYnogcGxheV9nYW1lX2FmdGVyX2lmX2Vsc2VAOAogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9jb250cmFjdC5weTo1NTQtNTU1CiAgICAvLyAjIFVwZGF0ZSBhdGggc2NvcmUsIGdhbWUgc3RhdGUgZmlyc3QgcGxhY2Ugc2NvcmUgaXMgdGhlIG5ldyBhdGggc2NvcmUKICAgIC8vIHNlbGYuYXRoX3Njb3JlID0gZ2FtZV9zdGF0ZS5maXJzdF9wbGFjZV9zY29yZS5uYXRpdmUKICAgIGJ5dGVjIDEwIC8vICJhdGhfc2NvcmUiCiAgICBmcmFtZV9kaWcgMTUKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L2NvbnRyYWN0LnB5OjU1Ny01NTgKICAgIC8vICMgSWYgYXRoIGFkZHJlc3MgaXMgbm90IGVtcHR5CiAgICAvLyBpZiBzZWxmLmF0aF9hZGRyZXNzICE9IEdsb2JhbC56ZXJvX2FkZHJlc3M6CiAgICBpbnRjXzEgLy8gMAogICAgYnl0ZWMgNyAvLyAiYXRoX2FkZHJlc3MiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYuYXRoX2FkZHJlc3MgZXhpc3RzCiAgICBnbG9iYWwgWmVyb0FkZHJlc3MKICAgICE9CiAgICBieiBwbGF5X2dhbWVfYWZ0ZXJfaWZfZWxzZUA3CiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L2NvbnRyYWN0LnB5OjU2MQogICAgLy8gc2VsZi5ib3hfZ2FtZV90cm9waHkudmFsdWUub3duZXJfYWRkcmVzcy5uYXRpdmUsCiAgICBieXRlY18yIC8vICJ0XyIKICAgIGJveF9nZXQKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmJveF9nYW1lX3Ryb3BoeSBleGlzdHMKICAgIGR1cAogICAgZXh0cmFjdCA4IDMyIC8vIG9uIGVycm9yOiBJbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9jb250cmFjdC5weTo1NjIKICAgIC8vIHNlbGYuYm94X2dhbWVfdHJvcGh5LnZhbHVlLmFzc2V0X2lkLm5hdGl2ZSwKICAgIHN3YXAKICAgIGludGNfMSAvLyAwCiAgICBleHRyYWN0X3VpbnQ2NAogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9jb250cmFjdC5weTo1NTktNTYzCiAgICAvLyAjIFVzZSBib3ggZ2FtZSB0cm9waHkgY29udGVudHMgdG8gY2hlY2sgYWNjb3VudCBhc3NldCBiYWxhbmNlIGZvciB0cm9waHkKICAgIC8vIGFzc2V0X2JhbGFuY2UsIGFzc2V0X2V4aXN0cyA9IG9wLkFzc2V0SG9sZGluZ0dldC5hc3NldF9iYWxhbmNlKAogICAgLy8gICAgIHNlbGYuYm94X2dhbWVfdHJvcGh5LnZhbHVlLm93bmVyX2FkZHJlc3MubmF0aXZlLAogICAgLy8gICAgIHNlbGYuYm94X2dhbWVfdHJvcGh5LnZhbHVlLmFzc2V0X2lkLm5hdGl2ZSwKICAgIC8vICkKICAgIGFzc2V0X2hvbGRpbmdfZ2V0IEFzc2V0QmFsYW5jZQogICAgc3dhcAogICAgZnJhbWVfYnVyeSA3CiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L2NvbnRyYWN0LnB5OjU2NS01NjYKICAgIC8vICMgSWYgYXNzZXQgZXhpc3RzIGFuZCBpdHMgYmFsYW5jZSBpcyAxLCBwZXJmb3JtIGNsYXdiYWNrIHZpYSBhc3NldCB0cmFuc2ZlciBpbm5lciB0cmFuc2FjdGlvbgogICAgLy8gaWYgYXNzZXRfZXhpc3RzIGFuZCBhc3NldF9iYWxhbmNlID09IDE6CiAgICBieiBwbGF5X2dhbWVfYWZ0ZXJfaWZfZWxzZUA3CiAgICBmcmFtZV9kaWcgNwogICAgaW50Y18wIC8vIDEKICAgID09CiAgICBieiBwbGF5X2dhbWVfYWZ0ZXJfaWZfZWxzZUA3CiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L2NvbnRyYWN0LnB5OjU2OAogICAgLy8gYXNzZXRfaWQ9c2VsZi5ib3hfZ2FtZV90cm9waHkudmFsdWUuYXNzZXRfaWQubmF0aXZlLAogICAgYnl0ZWNfMiAvLyAidF8iCiAgICBib3hfZ2V0CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5ib3hfZ2FtZV90cm9waHkgZXhpc3RzCiAgICBkdXAKICAgIGludGNfMSAvLyAwCiAgICBleHRyYWN0X3VpbnQ2NAogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9jb250cmFjdC5weTo1NjkKICAgIC8vIGFzc2V0X3NlbmRlcj1zZWxmLmJveF9nYW1lX3Ryb3BoeS52YWx1ZS5vd25lcl9hZGRyZXNzLm5hdGl2ZSwKICAgIHN3YXAKICAgIGV4dHJhY3QgOCAzMiAvLyBvbiBlcnJvcjogSW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvY29udHJhY3QucHk6NTcwCiAgICAvLyBhc3NldF9yZWNlaXZlcj1HbG9iYWwuY3VycmVudF9hcHBsaWNhdGlvbl9hZGRyZXNzLAogICAgZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvc3Vicm91dGluZXMucHk6NDItNDgKICAgIC8vIGl0eG4uQXNzZXRUcmFuc2ZlcigKICAgIC8vICAgICBhc3NldF9yZWNlaXZlcj1hc3NldF9yZWNlaXZlciwKICAgIC8vICAgICB4ZmVyX2Fzc2V0PWFzc2V0X2lkLAogICAgLy8gICAgIGFzc2V0X3NlbmRlcj1hc3NldF9zZW5kZXIsCiAgICAvLyAgICAgYXNzZXRfYW1vdW50PTEsCiAgICAvLyAgICAgbm90ZT1ub3RlLAogICAgLy8gKS5zdWJtaXQoKQogICAgaXR4bl9iZWdpbgogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9jb250cmFjdC5weTo1NzEtNTczCiAgICAvLyBub3RlPVN0cmluZygKICAgIC8vICAgICAncGllb3V0Omp7Im1ldGhvZCI6InBsYXlfZ2FtZSIsInN1YnJvdXRpbmU6ImNsYXdiYWNrX2l0eG4iLCJjb25jZXJuIjoiaXR4bi5hc3NldF90cmFuc2ZlcjtjbGF3YmFja190cm9waHlfYXNzZXQifScKICAgIC8vICksCiAgICBwdXNoYnl0ZXMgInBpZW91dDpqe1wibWV0aG9kXCI6XCJwbGF5X2dhbWVcIixcInN1YnJvdXRpbmU6XCJjbGF3YmFja19pdHhuXCIsXCJjb25jZXJuXCI6XCJpdHhuLmFzc2V0X3RyYW5zZmVyO2NsYXdiYWNrX3Ryb3BoeV9hc3NldFwifSIKICAgIGl0eG5fZmllbGQgTm90ZQogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9zdWJyb3V0aW5lcy5weTo0NgogICAgLy8gYXNzZXRfYW1vdW50PTEsCiAgICBpbnRjXzAgLy8gMQogICAgaXR4bl9maWVsZCBBc3NldEFtb3VudAogICAgaXR4bl9maWVsZCBBc3NldFJlY2VpdmVyCiAgICBpdHhuX2ZpZWxkIEFzc2V0U2VuZGVyCiAgICBpdHhuX2ZpZWxkIFhmZXJBc3NldAogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9zdWJyb3V0aW5lcy5weTo0MgogICAgLy8gaXR4bi5Bc3NldFRyYW5zZmVyKAogICAgcHVzaGludCA0IC8vIGF4ZmVyCiAgICBpdHhuX2ZpZWxkIFR5cGVFbnVtCiAgICBpbnRjXzEgLy8gMAogICAgaXR4bl9maWVsZCBGZWUKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvc3Vicm91dGluZXMucHk6NDItNDgKICAgIC8vIGl0eG4uQXNzZXRUcmFuc2ZlcigKICAgIC8vICAgICBhc3NldF9yZWNlaXZlcj1hc3NldF9yZWNlaXZlciwKICAgIC8vICAgICB4ZmVyX2Fzc2V0PWFzc2V0X2lkLAogICAgLy8gICAgIGFzc2V0X3NlbmRlcj1hc3NldF9zZW5kZXIsCiAgICAvLyAgICAgYXNzZXRfYW1vdW50PTEsCiAgICAvLyAgICAgbm90ZT1ub3RlLAogICAgLy8gKS5zdWJtaXQoKQogICAgaXR4bl9zdWJtaXQKCnBsYXlfZ2FtZV9hZnRlcl9pZl9lbHNlQDc6CiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L2NvbnRyYWN0LnB5OjU3Ni01NzcKICAgIC8vICMgVXBkYXRlIGF0aCBhZGRyZXNzLCB0cmFuc2FjdGlvbiBzZW5kZXIgaXMgdGhlIG5ldyBhdGggYWRkcmVzcwogICAgLy8gc2VsZi5hdGhfYWRkcmVzcyA9IFR4bi5zZW5kZXIKICAgIHR4biBTZW5kZXIKICAgIGJ5dGVjIDcgLy8gImF0aF9hZGRyZXNzIgogICAgZGlnIDEKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L2NvbnRyYWN0LnB5OjU3OS01ODAKICAgIC8vICMgVXBkYXRlIHRyb3BoeSBvd25lciBhZGRyZXNzLCBhdGggYWRkcmVzcyBpcyB0aGUgbmV3IHRyb3BoeSBhc3NldCBvd25lciBhZGRyZXNzCiAgICAvLyBzZWxmLmJveF9nYW1lX3Ryb3BoeS52YWx1ZS5vd25lcl9hZGRyZXNzID0gYXJjNC5BZGRyZXNzKHNlbGYuYXRoX2FkZHJlc3MpCiAgICBieXRlY18yIC8vICJ0XyIKICAgIGJveF9nZXQKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmJveF9nYW1lX3Ryb3BoeSBleGlzdHMKICAgIHN3YXAKICAgIHJlcGxhY2UyIDgKICAgIGJ5dGVjXzIgLy8gInRfIgogICAgc3dhcAogICAgYm94X3B1dAoKcGxheV9nYW1lX2FmdGVyX2lmX2Vsc2VAODoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvY29udHJhY3QucHk6NTgyLTU4MwogICAgLy8gIyBEZWNyZW1lbnQgbnVtYmVyIG9mIGFjdGl2ZSBwbGF5ZXJzIGJ5IDEKICAgIC8vIGdhbWVfc3RhdGUuYWN0aXZlX3BsYXllcnMgPSBhcmM0LlVJbnQ4KGdhbWVfc3RhdGUuYWN0aXZlX3BsYXllcnMubmF0aXZlIC0gMSkKICAgIGZyYW1lX2RpZyAyCiAgICBkdXAKICAgIGludGNfMiAvLyAyCiAgICBnZXRieXRlCiAgICBpbnRjXzAgLy8gMQogICAgLQogICAgaXRvYgogICAgZHVwCiAgICBiaXRsZW4KICAgIHB1c2hpbnQgOCAvLyA4CiAgICA8PQogICAgYXNzZXJ0IC8vIG92ZXJmbG93CiAgICBleHRyYWN0IDcgMQogICAgcmVwbGFjZTIgMgogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9jb250cmFjdC5weTo1ODcKICAgIC8vIGJveF9jb21taXRfcmFuZD1zZWxmLmJveF9jb21taXRfcmFuZCwKICAgIGJ5dGVjXzAgLy8gImNfIgogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9jb250cmFjdC5weTo1ODgKICAgIC8vIGFjY291bnQ9VHhuLnNlbmRlciwKICAgIHR4biBTZW5kZXIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvY29udHJhY3QucHk6NTg5CiAgICAvLyByb3VuZF9kZWx0YT1VSW50NjQoY3N0LkJPWF9DX0VYUF9ST1VORF9ERUxUQSksCiAgICBpbnRjIDYgLy8gMzIwMDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvY29udHJhY3QucHk6NTg1LTU5MAogICAgLy8gIyBSZXNldCBib3ggY29tbWl0IHJhbmQgZm9yIHNlbmRlciBhZnRlciB0aGV5IGhhdmUgZG9uZSB0aGVpciBwbGF5CiAgICAvLyBzcnQucmVzZXRfYm94X2NvbW1pdF9yYW5kKAogICAgLy8gICAgIGJveF9jb21taXRfcmFuZD1zZWxmLmJveF9jb21taXRfcmFuZCwKICAgIC8vICAgICBhY2NvdW50PVR4bi5zZW5kZXIsCiAgICAvLyAgICAgcm91bmRfZGVsdGE9VUludDY0KGNzdC5CT1hfQ19FWFBfUk9VTkRfREVMVEEpLAogICAgLy8gKQogICAgY2FsbHN1YiByZXNldF9ib3hfY29tbWl0X3JhbmQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvY29udHJhY3QucHk6NTkyLTU5OAogICAgLy8gIyBDaGVjayBpZiBnYW1lIGlzIG92ZXIgb24gZXZlcnkgY2FsbAogICAgLy8gc3J0LmlzX2dhbWVfb3ZlcigKICAgIC8vICAgICBnYW1lX2lkPWdhbWVfaWQsCiAgICAvLyAgICAgZ2FtZV9zdGF0ZT1nYW1lX3N0YXRlLAogICAgLy8gICAgIGJveF9nYW1lX3BsYXllcnM9c2VsZi5ib3hfZ2FtZV9wbGF5ZXJzLAogICAgLy8gICAgIGJveF9jb21taXRfcmFuZD1zZWxmLmJveF9jb21taXRfcmFuZCwKICAgIC8vICkKICAgIGZyYW1lX2RpZyAtMQogICAgc3dhcAogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9jb250cmFjdC5weTo1OTYKICAgIC8vIGJveF9nYW1lX3BsYXllcnM9c2VsZi5ib3hfZ2FtZV9wbGF5ZXJzLAogICAgYnl0ZWNfMyAvLyAicF8iCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L2NvbnRyYWN0LnB5OjU5NwogICAgLy8gYm94X2NvbW1pdF9yYW5kPXNlbGYuYm94X2NvbW1pdF9yYW5kLAogICAgYnl0ZWNfMCAvLyAiY18iCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L2NvbnRyYWN0LnB5OjU5Mi01OTgKICAgIC8vICMgQ2hlY2sgaWYgZ2FtZSBpcyBvdmVyIG9uIGV2ZXJ5IGNhbGwKICAgIC8vIHNydC5pc19nYW1lX292ZXIoCiAgICAvLyAgICAgZ2FtZV9pZD1nYW1lX2lkLAogICAgLy8gICAgIGdhbWVfc3RhdGU9Z2FtZV9zdGF0ZSwKICAgIC8vICAgICBib3hfZ2FtZV9wbGF5ZXJzPXNlbGYuYm94X2dhbWVfcGxheWVycywKICAgIC8vICAgICBib3hfY29tbWl0X3JhbmQ9c2VsZi5ib3hfY29tbWl0X3JhbmQsCiAgICAvLyApCiAgICBjYWxsc3ViIGlzX2dhbWVfb3ZlcgogICAgYnVyeSAxCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L2NvbnRyYWN0LnB5OjYwMC02MDEKICAgIC8vICMgQ29weSB0aGUgbW9kaWZpZWQgZ2FtZSBzdGF0ZSBhbmQgc3RvcmUgaXQgYXMgbmV3IHZhbHVlIG9mIGJveAogICAgLy8gc2VsZi5ib3hfZ2FtZV9zdGF0ZVtnYW1lX2lkXSA9IGdhbWVfc3RhdGUuY29weSgpCiAgICBmcmFtZV9kaWcgMAogICAgc3dhcAogICAgYm94X3B1dAogICAgcmV0c3ViCgpwbGF5X2dhbWVfZWxzZV9ib2R5QDI2OgogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9zdWJyb3V0aW5lcy5weToxODgtMTg5CiAgICAvLyAjIFNlY29uZCBQbGFjZQogICAgLy8gZ2FtZV9zdGF0ZS5zZWNvbmRfcGxhY2VfYWRkcmVzcyA9PSBhcmM0LkFkZHJlc3MoR2xvYmFsLnplcm9fYWRkcmVzcykKICAgIGZyYW1lX2RpZyAyCiAgICBleHRyYWN0IDg4IDMyIC8vIG9uIGVycm9yOiBJbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgZ2xvYmFsIFplcm9BZGRyZXNzCiAgICA9PQogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9zdWJyb3V0aW5lcy5weToxODgtMTkwCiAgICAvLyAjIFNlY29uZCBQbGFjZQogICAgLy8gZ2FtZV9zdGF0ZS5zZWNvbmRfcGxhY2VfYWRkcmVzcyA9PSBhcmM0LkFkZHJlc3MoR2xvYmFsLnplcm9fYWRkcmVzcykKICAgIC8vIG9yIHNjb3JlID4gZ2FtZV9zdGF0ZS5zZWNvbmRfcGxhY2Vfc2NvcmUubmF0aXZlCiAgICBibnogcGxheV9nYW1lX2lmX2JvZHlAMjgKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvc3Vicm91dGluZXMucHk6MTkwCiAgICAvLyBvciBzY29yZSA+IGdhbWVfc3RhdGUuc2Vjb25kX3BsYWNlX3Njb3JlLm5hdGl2ZQogICAgZnJhbWVfZGlnIDIKICAgIHB1c2hpbnQgNCAvLyA0CiAgICBnZXRieXRlCiAgICBmcmFtZV9kaWcgMTAKICAgIDwKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvc3Vicm91dGluZXMucHk6MTg4LTE5MAogICAgLy8gIyBTZWNvbmQgUGxhY2UKICAgIC8vIGdhbWVfc3RhdGUuc2Vjb25kX3BsYWNlX2FkZHJlc3MgPT0gYXJjNC5BZGRyZXNzKEdsb2JhbC56ZXJvX2FkZHJlc3MpCiAgICAvLyBvciBzY29yZSA+IGdhbWVfc3RhdGUuc2Vjb25kX3BsYWNlX3Njb3JlLm5hdGl2ZQogICAgYnogcGxheV9nYW1lX2Vsc2VfYm9keUAyOQoKcGxheV9nYW1lX2lmX2JvZHlAMjg6CiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L3N1YnJvdXRpbmVzLnB5OjE5Mi0xOTMKICAgIC8vICMgQXNzaWduOiBTZWNvbmQgLT4gVGhpcmQKICAgIC8vIGdhbWVfc3RhdGUudGhpcmRfcGxhY2Vfc2NvcmUgPSBnYW1lX3N0YXRlLnNlY29uZF9wbGFjZV9zY29yZQogICAgZnJhbWVfZGlnIDIKICAgIGR1cAogICAgZXh0cmFjdCA0IDEgLy8gb24gZXJyb3I6IEluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICByZXBsYWNlMiA1CiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L3N1YnJvdXRpbmVzLnB5OjE5NAogICAgLy8gZ2FtZV9zdGF0ZS50aGlyZF9wbGFjZV9hZGRyZXNzID0gZ2FtZV9zdGF0ZS5zZWNvbmRfcGxhY2VfYWRkcmVzcwogICAgZHVwCiAgICBleHRyYWN0IDg4IDMyIC8vIG9uIGVycm9yOiBJbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgcmVwbGFjZTIgMTIwCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L3N1YnJvdXRpbmVzLnB5OjE5NS0xOTYKICAgIC8vICMgQXNzaWduOiBTY29yZSAtPiBTZWNvbmQKICAgIC8vIGdhbWVfc3RhdGUuc2Vjb25kX3BsYWNlX3Njb3JlID0gYXJjNC5VSW50OChzY29yZSkKICAgIGZyYW1lX2RpZyA2CiAgICByZXBsYWNlMiA0CiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L3N1YnJvdXRpbmVzLnB5OjE5NwogICAgLy8gZ2FtZV9zdGF0ZS5zZWNvbmRfcGxhY2VfYWRkcmVzcyA9IGFyYzQuQWRkcmVzcyhwbGF5ZXIpCiAgICBmcmFtZV9kaWcgNAogICAgcmVwbGFjZTIgODgKICAgIGZyYW1lX2J1cnkgMwoKcGxheV9nYW1lX2FmdGVyX2lmX2Vsc2VAMzM6CiAgICBmcmFtZV9kaWcgMwogICAgZnJhbWVfYnVyeSAyCiAgICBiIHBsYXlfZ2FtZV9hZnRlcl9pZl9lbHNlQDM0CgpwbGF5X2dhbWVfZWxzZV9ib2R5QDI5OgogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9zdWJyb3V0aW5lcy5weToxOTktMjAwCiAgICAvLyAjIFRoaXJkIFBsYWNlCiAgICAvLyBnYW1lX3N0YXRlLnRoaXJkX3BsYWNlX2FkZHJlc3MgPT0gYXJjNC5BZGRyZXNzKEdsb2JhbC56ZXJvX2FkZHJlc3MpCiAgICBmcmFtZV9kaWcgMgogICAgZXh0cmFjdCAxMjAgMzIgLy8gb24gZXJyb3I6IEluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICBnbG9iYWwgWmVyb0FkZHJlc3MKICAgID09CiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L3N1YnJvdXRpbmVzLnB5OjE5OS0yMDEKICAgIC8vICMgVGhpcmQgUGxhY2UKICAgIC8vIGdhbWVfc3RhdGUudGhpcmRfcGxhY2VfYWRkcmVzcyA9PSBhcmM0LkFkZHJlc3MoR2xvYmFsLnplcm9fYWRkcmVzcykKICAgIC8vIG9yIHNjb3JlID4gZ2FtZV9zdGF0ZS50aGlyZF9wbGFjZV9zY29yZS5uYXRpdmUKICAgIGJueiBwbGF5X2dhbWVfaWZfYm9keUAzMQogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9zdWJyb3V0aW5lcy5weToyMDEKICAgIC8vIG9yIHNjb3JlID4gZ2FtZV9zdGF0ZS50aGlyZF9wbGFjZV9zY29yZS5uYXRpdmUKICAgIGZyYW1lX2RpZyAyCiAgICBkdXAKICAgIHB1c2hpbnQgNSAvLyA1CiAgICBnZXRieXRlCiAgICBmcmFtZV9kaWcgMTAKICAgIDwKICAgIHN3YXAKICAgIGZyYW1lX2J1cnkgMwogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9zdWJyb3V0aW5lcy5weToxOTktMjAxCiAgICAvLyAjIFRoaXJkIFBsYWNlCiAgICAvLyBnYW1lX3N0YXRlLnRoaXJkX3BsYWNlX2FkZHJlc3MgPT0gYXJjNC5BZGRyZXNzKEdsb2JhbC56ZXJvX2FkZHJlc3MpCiAgICAvLyBvciBzY29yZSA+IGdhbWVfc3RhdGUudGhpcmRfcGxhY2Vfc2NvcmUubmF0aXZlCiAgICBieiBwbGF5X2dhbWVfYWZ0ZXJfaWZfZWxzZUAzMwoKcGxheV9nYW1lX2lmX2JvZHlAMzE6CiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L3N1YnJvdXRpbmVzLnB5OjIwMy0yMDQKICAgIC8vICMgQXNzaWduOiBTY29yZSAtPiBUaGlyZAogICAgLy8gZ2FtZV9zdGF0ZS50aGlyZF9wbGFjZV9zY29yZSA9IGFyYzQuVUludDgoc2NvcmUpCiAgICBmcmFtZV9kaWcgMgogICAgZnJhbWVfZGlnIDYKICAgIHJlcGxhY2UyIDUKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvc3Vicm91dGluZXMucHk6MjA1CiAgICAvLyBnYW1lX3N0YXRlLnRoaXJkX3BsYWNlX2FkZHJlc3MgPSBhcmM0LkFkZHJlc3MocGxheWVyKQogICAgZnJhbWVfZGlnIDQKICAgIHJlcGxhY2UyIDEyMAogICAgZnJhbWVfYnVyeSAzCiAgICBiIHBsYXlfZ2FtZV9hZnRlcl9pZl9lbHNlQDMzCgoKLy8gc21hcnRfY29udHJhY3RzLnBpZW91dC5jb250cmFjdC5QaWVvdXQudHJpZ2dlcl9nYW1lX3Byb2coZ2FtZV9pZDogdWludDY0LCB0cmlnZ2VyX2lkOiBieXRlcykgLT4gYnl0ZXM6CnRyaWdnZXJfZ2FtZV9wcm9nOgogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9jb250cmFjdC5weTo2MDMtNjA3CiAgICAvLyAjIEFsbG93IGFuIGFjdGl2ZSBwbGF5ZXIgdG8gY2hlY2sgZm9yIGEgZ2FtZSBldmVudCBhbmQgdHJpZ2dlciBpdHMgcHJvZ3Jlc3Npb24KICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgLy8gZGVmIHRyaWdnZXJfZ2FtZV9wcm9nKAogICAgLy8gICAgIHNlbGYsIGdhbWVfaWQ6IFVJbnQ2NCwgdHJpZ2dlcl9pZDogYXJjNC5VSW50OAogICAgLy8gKSAtPiBhcmM0LkJvb2w6CiAgICBwcm90byAyIDEKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvY29udHJhY3QucHk6NjEwCiAgICAvLyBnYW1lX2lkCiAgICBmcmFtZV9kaWcgLTIKICAgIGl0b2IKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvY29udHJhY3QucHk6NjA4LTYwOQogICAgLy8gIyBSZXRyaWV2ZSBjdXJyZW50IGdhbWUgc3RhdGUgZnJvbSBib3ggdXNpbmcgdGhlIGdhbWUgaWQgcGFyYW1ldGVyCiAgICAvLyBnYW1lX3N0YXRlID0gc2VsZi5ib3hfZ2FtZV9zdGF0ZVsKICAgIGJ5dGVjIDQgLy8gInNfIgogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9jb250cmFjdC5weTo2MDgtNjExCiAgICAvLyAjIFJldHJpZXZlIGN1cnJlbnQgZ2FtZSBzdGF0ZSBmcm9tIGJveCB1c2luZyB0aGUgZ2FtZSBpZCBwYXJhbWV0ZXIKICAgIC8vIGdhbWVfc3RhdGUgPSBzZWxmLmJveF9nYW1lX3N0YXRlWwogICAgLy8gICAgIGdhbWVfaWQKICAgIC8vIF0uY29weSgpICAjIE1ha2UgYSBjb3B5IG9mIHRoZSBnYW1lIHN0YXRlIGVsc2UgaW1tdXRhYmxlCiAgICBzd2FwCiAgICBjb25jYXQKICAgIGR1cAogICAgYm94X2dldAogICAgc3dhcAogICAgY292ZXIgMgogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYuYm94X2dhbWVfc3RhdGUgZW50cnkgZXhpc3RzCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L2NvbnRyYWN0LnB5OjYxMy02MTQKICAgIC8vICMgRmFpbCB0cmFuc2FjdGlvbiB1bmxlc3MgdGhlIGFzc2VydGlvbiBiZWxvdyBldmFsdWF0ZXMgVHJ1ZQogICAgLy8gYXNzZXJ0IEdsb2JhbC5ncm91cF9zaXplID09IDEsIGVyci5TVEFOREFMT05FX1RYTl9PTkxZCiAgICBnbG9iYWwgR3JvdXBTaXplCiAgICBpbnRjXzAgLy8gMQogICAgPT0KICAgIGFzc2VydCAvLyBJbnZhbGlkIGdyb3VwIHNpemUuIFRoaXMgYXBwIGNhbGwgY2FuIG9ubHkgdGFrZSBzdGFuZGFsb25lIHRyYW5zYWN0aW9ucy4KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvY29udHJhY3QucHk6NjE1CiAgICAvLyBhc3NlcnQgZ2FtZV9pZCBpbiBzZWxmLmJveF9nYW1lX3N0YXRlLCBlcnIuR0FNRV9JRF9OT1RfRk9VTkQKICAgIGJveF9sZW4KICAgIGJ1cnkgMQogICAgYXNzZXJ0IC8vIEJveCBnYW1lIHN0YXRlIG5vdCBmb3VuZC4gQ2hlY2sgaWYgZ2FtZSBJRCBleGlzdHMuCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L2NvbnRyYWN0LnB5OjYxNy02MTgKICAgIC8vICMgSWYgdHJpZ2dlciBpZCAwIGNvcnJlc3BvbmRzIHcvIGV2ZW50OiBHYW1lIExpdmUKICAgIC8vIGlmIHRyaWdnZXJfaWQubmF0aXZlID09IDA6CiAgICBmcmFtZV9kaWcgLTEKICAgIGJ0b2kKICAgIGR1cAogICAgY292ZXIgMgogICAgYm56IHRyaWdnZXJfZ2FtZV9wcm9nX2Vsc2VfYm9keUAyCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L2NvbnRyYWN0LnB5OjYxOQogICAgLy8gYXNzZXJ0IGdhbWVfc3RhdGUuZXhwaXJ5X3RzIDwgR2xvYmFsLmxhdGVzdF90aW1lc3RhbXAsIGVyci5USU1FX0NPTlNUUkFJTlRfVklPTEFUSU9OCiAgICBkdXAKICAgIGV4dHJhY3QgOCA4IC8vIG9uIGVycm9yOiBJbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgZ2xvYmFsIExhdGVzdFRpbWVzdGFtcAogICAgaXRvYgogICAgYjwKICAgIGFzc2VydCAvLyBJbnZhbGlkIHRpbWUgZnJhbWUuIENhbGwgbWFkZSBvdXRzaWRlIHRoZSBwZXJtaXR0ZWQgYmxvY2sgb3IgdGltZXN0YW1wIHJhbmdlLgogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9jb250cmFjdC5weTo2MjAKICAgIC8vIGlzX2dhbWVfbGl2ZSA9IHNydC5pc19nYW1lX2xpdmUoZ2FtZV9zdGF0ZSkKICAgIGNhbGxzdWIgaXNfZ2FtZV9saXZlCiAgICBwb3AKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvY29udHJhY3QucHk6NjIxCiAgICAvLyByZXR1cm4gaXNfZ2FtZV9saXZlCiAgICBzd2FwCiAgICByZXRzdWIKCnRyaWdnZXJfZ2FtZV9wcm9nX2Vsc2VfYm9keUAyOgogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9jb250cmFjdC5weTo2MjItNjIzCiAgICAvLyAjIElmIHRyaWdnZXIgaWQgMiBjb3JyZXNwb25kcyB3LyBldmVudDogR2FtZSBPdmVyCiAgICAvLyBlbGlmIHRyaWdnZXJfaWQubmF0aXZlID09IDI6CiAgICBmcmFtZV9kaWcgMAogICAgaW50Y18yIC8vIDIKICAgID09CiAgICBhc3NlcnQgLy8gR2FtZSBldmVudCBub3QgZm91bmQuIENoZWNrIGlmIGdhbWUgZXZlbnQgVHJpZ2dlciBJRCBleGlzdHMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvY29udHJhY3QucHk6NjI0CiAgICAvLyBhc3NlcnQgZ2FtZV9zdGF0ZS5zdGFraW5nX2ZpbmFsaXplZCA9PSBUcnVlLCBlcnIuU1RBS0lOR19GSU5BTCAgIyBub3FhOiBFNzEyCiAgICBkdXAKICAgIGludGNfMSAvLyAwCiAgICBnZXRiaXQKICAgIGJ5dGVjXzEgLy8gMHgwMAogICAgaW50Y18xIC8vIDAKICAgIHVuY292ZXIgMgogICAgc2V0Yml0CiAgICBpbnRjXzEgLy8gMAogICAgZ2V0Yml0CiAgICBpbnRjXzAgLy8gMQogICAgPT0KICAgIGFzc2VydCAvLyBHYW1lIHN0YXRlIHN0YWtpbmcgZmluYWxpemVkIHZhbHVlIG1pc21hdGNoLgogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9jb250cmFjdC5weTo2MjUKICAgIC8vIGFzc2VydCBnYW1lX3N0YXRlLmV4cGlyeV90cyA8IEdsb2JhbC5sYXRlc3RfdGltZXN0YW1wLCBlcnIuVElNRV9DT05TVFJBSU5UX1ZJT0xBVElPTgogICAgZHVwCiAgICBleHRyYWN0IDggOCAvLyBvbiBlcnJvcjogSW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIGdsb2JhbCBMYXRlc3RUaW1lc3RhbXAKICAgIGl0b2IKICAgIGI8CiAgICBhc3NlcnQgLy8gSW52YWxpZCB0aW1lIGZyYW1lLiBDYWxsIG1hZGUgb3V0c2lkZSB0aGUgcGVybWl0dGVkIGJsb2NrIG9yIHRpbWVzdGFtcCByYW5nZS4KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvY29udHJhY3QucHk6NjI2LTYzMQogICAgLy8gaXNfZ2FtZV9vdmVyID0gc3J0LmlzX2dhbWVfb3ZlcigKICAgIC8vICAgICBnYW1lX2lkPWdhbWVfaWQsCiAgICAvLyAgICAgZ2FtZV9zdGF0ZT1nYW1lX3N0YXRlLAogICAgLy8gICAgIGJveF9nYW1lX3BsYXllcnM9c2VsZi5ib3hfZ2FtZV9wbGF5ZXJzLAogICAgLy8gICAgIGJveF9jb21taXRfcmFuZD1zZWxmLmJveF9jb21taXRfcmFuZCwKICAgIC8vICkKICAgIGZyYW1lX2RpZyAtMgogICAgc3dhcAogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9jb250cmFjdC5weTo2MjkKICAgIC8vIGJveF9nYW1lX3BsYXllcnM9c2VsZi5ib3hfZ2FtZV9wbGF5ZXJzLAogICAgYnl0ZWNfMyAvLyAicF8iCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L2NvbnRyYWN0LnB5OjYzMAogICAgLy8gYm94X2NvbW1pdF9yYW5kPXNlbGYuYm94X2NvbW1pdF9yYW5kLAogICAgYnl0ZWNfMCAvLyAiY18iCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L2NvbnRyYWN0LnB5OjYyNi02MzEKICAgIC8vIGlzX2dhbWVfb3ZlciA9IHNydC5pc19nYW1lX292ZXIoCiAgICAvLyAgICAgZ2FtZV9pZD1nYW1lX2lkLAogICAgLy8gICAgIGdhbWVfc3RhdGU9Z2FtZV9zdGF0ZSwKICAgIC8vICAgICBib3hfZ2FtZV9wbGF5ZXJzPXNlbGYuYm94X2dhbWVfcGxheWVycywKICAgIC8vICAgICBib3hfY29tbWl0X3JhbmQ9c2VsZi5ib3hfY29tbWl0X3JhbmQsCiAgICAvLyApCiAgICBjYWxsc3ViIGlzX2dhbWVfb3ZlcgogICAgcG9wCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L2NvbnRyYWN0LnB5OjYzMgogICAgLy8gcmV0dXJuIGlzX2dhbWVfb3ZlcgogICAgc3dhcAogICAgcmV0c3ViCgoKLy8gc21hcnRfY29udHJhY3RzLnBpZW91dC5jb250cmFjdC5QaWVvdXQucmVzZXRfZ2FtZShnYW1lX2lkOiB1aW50NjQsIHN0YWtlX3BheTogdWludDY0KSAtPiB2b2lkOgpyZXNldF9nYW1lOgogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9jb250cmFjdC5weTo2MzctNjQzCiAgICAvLyAjIEFsbG93IGFkbWluIHRvIHJlc2V0IGV4aXN0aW5nIGdhbWUgaW5zdGFuY2UKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgLy8gZGVmIHJlc2V0X2dhbWUoCiAgICAvLyAgICAgc2VsZiwKICAgIC8vICAgICBnYW1lX2lkOiBVSW50NjQsCiAgICAvLyAgICAgc3Rha2VfcGF5OiBndHhuLlBheW1lbnRUcmFuc2FjdGlvbiwKICAgIC8vICkgLT4gTm9uZToKICAgIHByb3RvIDIgMAogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9jb250cmFjdC5weTo2NDQtNjQ1CiAgICAvLyAjIEZhaWwgdHJhbnNhY3Rpb24gdW5sZXNzIHRoZSBhc3NlcnRpb25zIGJlbG93IGV2YWx1YXRlIFRydWUKICAgIC8vIGFzc2VydCBHbG9iYWwuZ3JvdXBfc2l6ZSA9PSAyLCBlcnIuSU5WQUxJRF9HUk9VUF9TSVpFCiAgICBnbG9iYWwgR3JvdXBTaXplCiAgICBpbnRjXzIgLy8gMgogICAgPT0KICAgIGFzc2VydCAvLyBJbnZhbGlkIGdyb3VwIHNpemUuIEVuc3VyZSBudW1iZXIgb2YgdHJhbnNhY3Rpb24gaW4gZ3JvdXAgaXMgd2l0aGluIHZhbGlkIGJvdW5kcy4KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvY29udHJhY3QucHk6NjQ2CiAgICAvLyBhc3NlcnQgZ2FtZV9pZCBpbiBzZWxmLmJveF9nYW1lX3N0YXRlLCBlcnIuR0FNRV9JRF9OT1RfRk9VTkQKICAgIGZyYW1lX2RpZyAtMgogICAgaXRvYgogICAgYnl0ZWMgNCAvLyAic18iCiAgICBkaWcgMQogICAgY29uY2F0CiAgICBkdXAKICAgIGJveF9sZW4KICAgIGJ1cnkgMQogICAgYXNzZXJ0IC8vIEJveCBnYW1lIHN0YXRlIG5vdCBmb3VuZC4gQ2hlY2sgaWYgZ2FtZSBJRCBleGlzdHMuCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L2NvbnRyYWN0LnB5OjY0OAogICAgLy8gYXNzZXJ0IHN0YWtlX3BheS5zZW5kZXIgPT0gVHhuLnNlbmRlciwgZXJyLklOVkFMSURfU1RBS0VfUEFZX1NFTkRFUgogICAgZnJhbWVfZGlnIC0xCiAgICBndHhucyBTZW5kZXIKICAgIHR4biBTZW5kZXIKICAgID09CiAgICBhc3NlcnQgLy8gU3Rha2UgcGF5bWVudCBzZW5kZXIgYWRkcmVzcyBtdXN0IG1hdGNoIHRyYW5zYWN0aW9uIHNlbmRlciBhZGRyZXNzLgogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9jb250cmFjdC5weTo2NTAKICAgIC8vIHN0YWtlX3BheS5yZWNlaXZlciA9PSBHbG9iYWwuY3VycmVudF9hcHBsaWNhdGlvbl9hZGRyZXNzCiAgICBmcmFtZV9kaWcgLTEKICAgIGd0eG5zIFJlY2VpdmVyCiAgICBnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwogICAgPT0KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvY29udHJhY3QucHk6NjQ5LTY1MQogICAgLy8gYXNzZXJ0ICgKICAgIC8vICAgICBzdGFrZV9wYXkucmVjZWl2ZXIgPT0gR2xvYmFsLmN1cnJlbnRfYXBwbGljYXRpb25fYWRkcmVzcwogICAgLy8gKSwgZXJyLklOVkFMSURfU1RBS0VfUEFZX1JFQ0VJVkVSCiAgICBhc3NlcnQgLy8gU3Rha2UgcGF5bWVudCByZWNlaXZlciBhZGRyZXNzIG11c3QgbWF0Y2ggYXBwbGljYXRpb24gYWRkcmVzcy4KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvY29udHJhY3QucHk6NjUyCiAgICAvLyBhc3NlcnQgc3Rha2VfcGF5LmFtb3VudCA+PSBjc3QuU1RBS0VfQU1PVU5UX01BTkFHRVIsIGVyci5JTlZBTElEX1NUQUtFX1BBWV9GRUUKICAgIGZyYW1lX2RpZyAtMQogICAgZ3R4bnMgQW1vdW50CiAgICBpbnRjIDQgLy8gMTAwMAogICAgPj0KICAgIGFzc2VydCAvLyBJbnN1ZmZpY2llbnQgZnVuZHMuIFN0YWtlIHBheSBhbW91bnQgaXMgbm90IGVub3VnaCB0byBjb3ZlciBzdGFraW5nIHJlcXVpcmVtZW50cy4KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvY29udHJhY3QucHk6NjU0LTY1NwogICAgLy8gIyBSZXRyaWV2ZSBjdXJyZW50IGdhbWUgc3RhdGUgZnJvbSBib3ggdXNpbmcgdGhlIGdhbWUgaWQgcGFyYW1ldGVyCiAgICAvLyBnYW1lX3N0YXRlID0gc2VsZi5ib3hfZ2FtZV9zdGF0ZVsKICAgIC8vICAgICBnYW1lX2lkCiAgICAvLyBdLmNvcHkoKSAgIyBNYWtlIGEgY29weSBvZiB0aGUgZ2FtZSBzdGF0ZSBlbHNlIGltbXV0YWJsZQogICAgZHVwCiAgICBib3hfZ2V0CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5ib3hfZ2FtZV9zdGF0ZSBlbnRyeSBleGlzdHMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvY29udHJhY3QucHk6NjU5LTY2MAogICAgLy8gIyBGYWlsIHRyYW5zYWN0aW9uIHVubGVzcyB0aGUgYXNzZXJ0aW9uIGJlbG93IGV2YWx1YXRlcyBUcnVlCiAgICAvLyBhc3NlcnQgZ2FtZV9zdGF0ZS5zdGFraW5nX2ZpbmFsaXplZCA9PSBUcnVlLCBlcnIuU1RBS0lOR19GSU5BTCAgIyBub3FhOiBFNzEyCiAgICBkdXAKICAgIGludGNfMSAvLyAwCiAgICBnZXRiaXQKICAgIGJ5dGVjXzEgLy8gMHgwMAogICAgaW50Y18xIC8vIDAKICAgIHVuY292ZXIgMgogICAgc2V0Yml0CiAgICBpbnRjXzEgLy8gMAogICAgZ2V0Yml0CiAgICBpbnRjXzAgLy8gMQogICAgPT0KICAgIGFzc2VydCAvLyBHYW1lIHN0YXRlIHN0YWtpbmcgZmluYWxpemVkIHZhbHVlIG1pc21hdGNoLgogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9jb250cmFjdC5weTo2NjEKICAgIC8vIGFzc2VydCBnYW1lX3N0YXRlLmFkbWluX2FkZHJlc3MgPT0gVHhuLnNlbmRlciwgZXJyLklOVkFMSURfQURNSU4KICAgIGR1cAogICAgZXh0cmFjdCAyNCAzMiAvLyBvbiBlcnJvcjogSW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIHR4biBTZW5kZXIKICAgID09CiAgICBhc3NlcnQgLy8gQWNjb3VudCBpcyBub3QgcmVjb2duaXplZCBhcyB0aGUgYWRtaW4gYWRkcmVzcyBmb3IgdGhpcyBnYW1lLgogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9jb250cmFjdC5weTo2NjIKICAgIC8vIGFzc2VydCBnYW1lX3N0YXRlLnByaXplX3Bvb2wubmF0aXZlID09IDAsIGVyci5OT05fWkVST19QUklaRV9QT09MCiAgICBkdXAKICAgIHB1c2hpbnQgMTYgLy8gMTYKICAgIGV4dHJhY3RfdWludDY0CiAgICAhCiAgICBhc3NlcnQgLy8gUHJpemUgcG9vbCBub3QgZW1wdHkuIEFtb3VudCBpbiBwcml6ZSBwb29sIG11c3QgYmUgemVyby4KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvY29udHJhY3QucHk6NjYzCiAgICAvLyBhc3NlcnQgZ2FtZV9zdGF0ZS5hY3RpdmVfcGxheWVycy5uYXRpdmUgPT0gMCwgZXJyLk5PTl9aRVJPX0FDVElWRV9QTEFZRVJTCiAgICBkdXAKICAgIGludGNfMiAvLyAyCiAgICBnZXRieXRlCiAgICAhCiAgICBhc3NlcnQgLy8gR2FtZSBsb2JieSBub3QgZW1wdHkuIE51bWJlciBvZiBhY3RpdmUgcGxheWVycyBtdXN0IGJlIHplcm8uCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L2NvbnRyYWN0LnB5OjY2NwogICAgLy8ga2V5PXNlbGYuYm94X2dhbWVfcGxheWVycy5rZXlfcHJlZml4ICsgb3AuaXRvYihnYW1lX2lkKQogICAgYnl0ZWNfMyAvLyAicF8iCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L2NvbnRyYWN0LnB5OjY2NS02NjgKICAgIC8vICMgRm9yIGdhbWUgcGxheWVycyBib3gsIHJlcGxhY2UgdGhlIHNlbmRlcidzIGFkZHJlc3MgYXQgc3RhcnQgaW5kZXggMAogICAgLy8gZ2FtZV9wbGF5ZXJzX2JyZWYgPSBCb3hSZWYoCiAgICAvLyAgICAga2V5PXNlbGYuYm94X2dhbWVfcGxheWVycy5rZXlfcHJlZml4ICsgb3AuaXRvYihnYW1lX2lkKQogICAgLy8gKQogICAgdW5jb3ZlciAzCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L2NvbnRyYWN0LnB5OjY2NwogICAgLy8ga2V5PXNlbGYuYm94X2dhbWVfcGxheWVycy5rZXlfcHJlZml4ICsgb3AuaXRvYihnYW1lX2lkKQogICAgY29uY2F0CiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L2NvbnRyYWN0LnB5OjY2OQogICAgLy8gZ2FtZV9wbGF5ZXJzX2JyZWYucmVwbGFjZSgwLCBUeG4uc2VuZGVyLmJ5dGVzKQogICAgaW50Y18xIC8vIDAKICAgIHR4biBTZW5kZXIKICAgIGJveF9yZXBsYWNlCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L2NvbnRyYWN0LnB5OjY3MS02NzIKICAgIC8vICMgUmVzZXQgZ2FtZSBzdGF0ZSBmaWVsZHMgYmFjayB0byB0aGVpciBuZXcgZ2FtZSB2YWx1ZXMKICAgIC8vIGdhbWVfc3RhdGUuc3Rha2luZ19maW5hbGl6ZWQgPSBhcmM0LkJvb2woRmFsc2UpICAjIG5vcWE6IEZCVDAwMwogICAgaW50Y18xIC8vIDAKICAgIGR1cAogICAgc2V0Yml0CiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L2NvbnRyYWN0LnB5OjY3MwogICAgLy8gZ2FtZV9zdGF0ZS5hY3RpdmVfcGxheWVycyA9IGFyYzQuVUludDgoMSkKICAgIHB1c2hieXRlcyAweDAxCiAgICByZXBsYWNlMiAyCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L2NvbnRyYWN0LnB5OjY3NAogICAgLy8gZ2FtZV9zdGF0ZS5maXJzdF9wbGFjZV9zY29yZSA9IGFyYzQuVUludDgoMCkKICAgIGJ5dGVjXzEgLy8gMHgwMAogICAgcmVwbGFjZTIgMwogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9jb250cmFjdC5weTo2NzUKICAgIC8vIGdhbWVfc3RhdGUuc2Vjb25kX3BsYWNlX3Njb3JlID0gYXJjNC5VSW50OCgwKQogICAgYnl0ZWNfMSAvLyAweDAwCiAgICByZXBsYWNlMiA0CiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L2NvbnRyYWN0LnB5OjY3NgogICAgLy8gZ2FtZV9zdGF0ZS50aGlyZF9wbGFjZV9zY29yZSA9IGFyYzQuVUludDgoMCkKICAgIGJ5dGVjXzEgLy8gMHgwMAogICAgcmVwbGFjZTIgNQogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9jb250cmFjdC5weTo2NzcKICAgIC8vIGdhbWVfc3RhdGUuYm94X3Bfc3RhcnRfcG9zID0gYXJjNC5VSW50MTYoY3N0LkFERFJFU1NfU0laRSkKICAgIGJ5dGVjIDExIC8vIDB4MDAyMAogICAgcmVwbGFjZTIgNgogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9jb250cmFjdC5weTo2NzkKICAgIC8vIEdsb2JhbC5sYXRlc3RfdGltZXN0YW1wICsgY3N0LkVYUElSWV9JTlRFUlZBTAogICAgZ2xvYmFsIExhdGVzdFRpbWVzdGFtcAogICAgaW50YyA1IC8vIDM2MDAKICAgICsKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvY29udHJhY3QucHk6Njc4LTY4MAogICAgLy8gZ2FtZV9zdGF0ZS5leHBpcnlfdHMgPSBhcmM0LlVJbnQ2NCgKICAgIC8vICAgICBHbG9iYWwubGF0ZXN0X3RpbWVzdGFtcCArIGNzdC5FWFBJUllfSU5URVJWQUwKICAgIC8vICkKICAgIGl0b2IKICAgIHJlcGxhY2UyIDgKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvY29udHJhY3QucHk6NjgyCiAgICAvLyBnYW1lX3N0YXRlLnByaXplX3Bvb2wubmF0aXZlICsgY3N0LlNUQUtFX0FNT1VOVF9NQU5BR0VSCiAgICBkdXAKICAgIHB1c2hpbnQgMTYgLy8gMTYKICAgIGV4dHJhY3RfdWludDY0CiAgICBpbnRjIDQgLy8gMTAwMAogICAgKwogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9jb250cmFjdC5weTo2ODEtNjgzCiAgICAvLyBnYW1lX3N0YXRlLnByaXplX3Bvb2wgPSBhcmM0LlVJbnQ2NCgKICAgIC8vICAgICBnYW1lX3N0YXRlLnByaXplX3Bvb2wubmF0aXZlICsgY3N0LlNUQUtFX0FNT1VOVF9NQU5BR0VSCiAgICAvLyApCiAgICBpdG9iCiAgICByZXBsYWNlMiAxNgogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9jb250cmFjdC5weTo2ODQKICAgIC8vIGdhbWVfc3RhdGUuZmlyc3RfcGxhY2VfYWRkcmVzcyA9IGFyYzQuQWRkcmVzcyhHbG9iYWwuemVyb19hZGRyZXNzKQogICAgZ2xvYmFsIFplcm9BZGRyZXNzCiAgICByZXBsYWNlMiA1NgogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9jb250cmFjdC5weTo2ODUKICAgIC8vIGdhbWVfc3RhdGUuc2Vjb25kX3BsYWNlX2FkZHJlc3MgPSBhcmM0LkFkZHJlc3MoR2xvYmFsLnplcm9fYWRkcmVzcykKICAgIGdsb2JhbCBaZXJvQWRkcmVzcwogICAgcmVwbGFjZTIgODgKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvY29udHJhY3QucHk6Njg2CiAgICAvLyBnYW1lX3N0YXRlLnRoaXJkX3BsYWNlX2FkZHJlc3MgPSBhcmM0LkFkZHJlc3MoR2xvYmFsLnplcm9fYWRkcmVzcykKICAgIGdsb2JhbCBaZXJvQWRkcmVzcwogICAgcmVwbGFjZTIgMTIwCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L2NvbnRyYWN0LnB5OjY4OC02ODkKICAgIC8vICMgQ29weSB0aGUgbW9kaWZpZWQgZ2FtZSBzdGF0ZSBhbmQgc3RvcmUgaXQgYXMgbmV3IHZhbHVlIG9mIGJveAogICAgLy8gc2VsZi5ib3hfZ2FtZV9zdGF0ZVtnYW1lX2lkXSA9IGdhbWVfc3RhdGUuY29weSgpCiAgICBib3hfcHV0CiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMucGllb3V0LmNvbnRyYWN0LlBpZW91dC5kZWxldGVfZ2FtZShnYW1lX2lkOiB1aW50NjQpIC0+IHZvaWQ6CmRlbGV0ZV9nYW1lOgogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9jb250cmFjdC5weTo2OTEtNjk2CiAgICAvLyAjIEFsbG93IGFwcGxpY2F0aW9uIGNyZWF0b3Igb3IgYWRtaW4gdG8gZGVsZXRlIGV4aXN0aW5nIGdhbWUgaW5zdGFuY2UKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgLy8gZGVmIGRlbGV0ZV9nYW1lKAogICAgLy8gICAgIHNlbGYsCiAgICAvLyAgICAgZ2FtZV9pZDogVUludDY0LAogICAgLy8gKSAtPiBOb25lOgogICAgcHJvdG8gMSAwCiAgICBwdXNoYnl0ZXMgIiIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvY29udHJhY3QucHk6Njk5CiAgICAvLyBnYW1lX2lkCiAgICBmcmFtZV9kaWcgLTEKICAgIGl0b2IKICAgIGR1cAogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9jb250cmFjdC5weTo2OTctNjk4CiAgICAvLyAjIFJldHJpZXZlIGN1cnJlbnQgZ2FtZSBzdGF0ZSBmcm9tIGJveCB1c2luZyB0aGUgZ2FtZSBpZCBwYXJhbWV0ZXIKICAgIC8vIGdhbWVfc3RhdGUgPSBzZWxmLmJveF9nYW1lX3N0YXRlWwogICAgYnl0ZWMgNCAvLyAic18iCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L2NvbnRyYWN0LnB5OjY5Ny03MDAKICAgIC8vICMgUmV0cmlldmUgY3VycmVudCBnYW1lIHN0YXRlIGZyb20gYm94IHVzaW5nIHRoZSBnYW1lIGlkIHBhcmFtZXRlcgogICAgLy8gZ2FtZV9zdGF0ZSA9IHNlbGYuYm94X2dhbWVfc3RhdGVbCiAgICAvLyAgICAgZ2FtZV9pZAogICAgLy8gXS5jb3B5KCkgICMgTWFrZSBhIGNvcHkgb2YgdGhlIGdhbWUgc3RhdGUgZWxzZSBpbW11dGFibGUKICAgIHN3YXAKICAgIGNvbmNhdAogICAgZHVwbiAyCiAgICBib3hfZ2V0CiAgICBzd2FwCiAgICBkdXAKICAgIGNvdmVyIDMKICAgIGNvdmVyIDMKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmJveF9nYW1lX3N0YXRlIGVudHJ5IGV4aXN0cwogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9jb250cmFjdC5weTo3MDItNzAzCiAgICAvLyAjIEZhaWwgdHJhbnNhY3Rpb24gdW5sZXNzIHRoZSBhc3NlcnRpb25zIGJlbG93IGV2YWx1YXRlIFRydWUKICAgIC8vIGFzc2VydCBHbG9iYWwuZ3JvdXBfc2l6ZSA9PSAxLCBlcnIuU1RBTkRBTE9ORV9UWE5fT05MWQogICAgZ2xvYmFsIEdyb3VwU2l6ZQogICAgaW50Y18wIC8vIDEKICAgID09CiAgICBhc3NlcnQgLy8gSW52YWxpZCBncm91cCBzaXplLiBUaGlzIGFwcCBjYWxsIGNhbiBvbmx5IHRha2Ugc3RhbmRhbG9uZSB0cmFuc2FjdGlvbnMuCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L2NvbnRyYWN0LnB5OjcwNAogICAgLy8gYXNzZXJ0IGdhbWVfaWQgaW4gc2VsZi5ib3hfZ2FtZV9zdGF0ZSwgZXJyLkdBTUVfSURfTk9UX0ZPVU5ECiAgICBib3hfbGVuCiAgICBidXJ5IDEKICAgIGFzc2VydCAvLyBCb3ggZ2FtZSBzdGF0ZSBub3QgZm91bmQuIENoZWNrIGlmIGdhbWUgSUQgZXhpc3RzLgogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9jb250cmFjdC5weTo3MDYKICAgIC8vIFR4bi5zZW5kZXIgPT0gc2VsZi5ib3hfZ2FtZV9zdGF0ZVtnYW1lX2lkXS5hZG1pbl9hZGRyZXNzLm5hdGl2ZQogICAgdHhuIFNlbmRlcgogICAgc3dhcAogICAgZXh0cmFjdCAyNCAzMiAvLyBvbiBlcnJvcjogSW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgID09CiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L2NvbnRyYWN0LnB5OjcwNi03MDcKICAgIC8vIFR4bi5zZW5kZXIgPT0gc2VsZi5ib3hfZ2FtZV9zdGF0ZVtnYW1lX2lkXS5hZG1pbl9hZGRyZXNzLm5hdGl2ZQogICAgLy8gb3IgVHhuLnNlbmRlciA9PSBHbG9iYWwuY3JlYXRvcl9hZGRyZXNzCiAgICBibnogZGVsZXRlX2dhbWVfYm9vbF90cnVlQDIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvY29udHJhY3QucHk6NzA3CiAgICAvLyBvciBUeG4uc2VuZGVyID09IEdsb2JhbC5jcmVhdG9yX2FkZHJlc3MKICAgIHR4biBTZW5kZXIKICAgIGdsb2JhbCBDcmVhdG9yQWRkcmVzcwogICAgPT0KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvY29udHJhY3QucHk6NzA2LTcwNwogICAgLy8gVHhuLnNlbmRlciA9PSBzZWxmLmJveF9nYW1lX3N0YXRlW2dhbWVfaWRdLmFkbWluX2FkZHJlc3MubmF0aXZlCiAgICAvLyBvciBUeG4uc2VuZGVyID09IEdsb2JhbC5jcmVhdG9yX2FkZHJlc3MKICAgIGJ6IGRlbGV0ZV9nYW1lX2Jvb2xfZmFsc2VAMwoKZGVsZXRlX2dhbWVfYm9vbF90cnVlQDI6CiAgICBpbnRjXzAgLy8gMQoKZGVsZXRlX2dhbWVfYm9vbF9tZXJnZUA0OgogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9jb250cmFjdC5weTo3MDUtNzA4CiAgICAvLyBhc3NlcnQgKAogICAgLy8gICAgIFR4bi5zZW5kZXIgPT0gc2VsZi5ib3hfZ2FtZV9zdGF0ZVtnYW1lX2lkXS5hZG1pbl9hZGRyZXNzLm5hdGl2ZQogICAgLy8gICAgIG9yIFR4bi5zZW5kZXIgPT0gR2xvYmFsLmNyZWF0b3JfYWRkcmVzcwogICAgLy8gKSwgZXJyLklOVkFMSURfQ0FMTEVSCiAgICBhc3NlcnQgLy8gQWNjb3VudCBpcyBub3QgYXV0aG9yaXplZCB0byBtYWtlIHRoaXMgY2FsbC4KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvY29udHJhY3QucHk6NzEyCiAgICAvLyBpZiBnYW1lX3N0YXRlLmFjdGl2ZV9wbGF5ZXJzLm5hdGl2ZSA9PSAxOgogICAgZnJhbWVfZGlnIDMKICAgIGludGNfMiAvLyAyCiAgICBnZXRieXRlCiAgICBkdXAKICAgIGZyYW1lX2J1cnkgMAogICAgaW50Y18wIC8vIDEKICAgID09CiAgICBieiBkZWxldGVfZ2FtZV9lbHNlX2JvZHlANgogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9jb250cmFjdC5weTo3MTUKICAgIC8vIGFjY291bnQ9c2VsZi5ib3hfZ2FtZV9zdGF0ZVtnYW1lX2lkXS5hZG1pbl9hZGRyZXNzLm5hdGl2ZSwKICAgIGZyYW1lX2RpZyAyCiAgICBib3hfZ2V0CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5ib3hfZ2FtZV9zdGF0ZSBlbnRyeSBleGlzdHMKICAgIGV4dHJhY3QgMjQgMzIgLy8gb24gZXJyb3I6IEluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L2NvbnRyYWN0LnB5OjcxMy03MTkKICAgIC8vIGFjY19pbl9nYW1lID0gc3J0LmNoZWNrX2FjY19pbl9nYW1lKAogICAgLy8gICAgIGdhbWVfaWQ9Z2FtZV9pZCwKICAgIC8vICAgICBhY2NvdW50PXNlbGYuYm94X2dhbWVfc3RhdGVbZ2FtZV9pZF0uYWRtaW5fYWRkcmVzcy5uYXRpdmUsCiAgICAvLyAgICAgYm94X2dhbWVfcGxheWVycz1zZWxmLmJveF9nYW1lX3BsYXllcnMsCiAgICAvLyAgICAgcGxheWVyX2NvdW50PVVJbnQ2NCgxKSwKICAgIC8vICAgICBjbGVhcl9wbGF5ZXI9RmFsc2UsCiAgICAvLyApCiAgICBmcmFtZV9kaWcgLTEKICAgIHN3YXAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvY29udHJhY3QucHk6NzE2CiAgICAvLyBib3hfZ2FtZV9wbGF5ZXJzPXNlbGYuYm94X2dhbWVfcGxheWVycywKICAgIGJ5dGVjXzMgLy8gInBfIgogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9jb250cmFjdC5weTo3MTcKICAgIC8vIHBsYXllcl9jb3VudD1VSW50NjQoMSksCiAgICBpbnRjXzAgLy8gMQogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9jb250cmFjdC5weTo3MTgKICAgIC8vIGNsZWFyX3BsYXllcj1GYWxzZSwKICAgIGludGNfMSAvLyAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L2NvbnRyYWN0LnB5OjcxMy03MTkKICAgIC8vIGFjY19pbl9nYW1lID0gc3J0LmNoZWNrX2FjY19pbl9nYW1lKAogICAgLy8gICAgIGdhbWVfaWQ9Z2FtZV9pZCwKICAgIC8vICAgICBhY2NvdW50PXNlbGYuYm94X2dhbWVfc3RhdGVbZ2FtZV9pZF0uYWRtaW5fYWRkcmVzcy5uYXRpdmUsCiAgICAvLyAgICAgYm94X2dhbWVfcGxheWVycz1zZWxmLmJveF9nYW1lX3BsYXllcnMsCiAgICAvLyAgICAgcGxheWVyX2NvdW50PVVJbnQ2NCgxKSwKICAgIC8vICAgICBjbGVhcl9wbGF5ZXI9RmFsc2UsCiAgICAvLyApCiAgICBjYWxsc3ViIGNoZWNrX2FjY19pbl9nYW1lCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L2NvbnRyYWN0LnB5OjcyMS03MjIKICAgIC8vICMgRmFpbCB0cmFuc2FjdGlvbiB1bmxlc3MgdGhlIGFzc2VydGlvbiBiZWxvdyBldmFsdWF0ZXMgVHJ1ZQogICAgLy8gYXNzZXJ0IGFjY19pbl9nYW1lID09IFRydWUsIGVyci5BRE1JTl9TT0xFX1BMQVlFUiAgIyBub3FhOiBFNzEyCiAgICBpbnRjXzAgLy8gMQogICAgPT0KICAgIGFzc2VydCAvLyBHYW1lIGFkbWluIGFkZHJlc3MgbXVzdCBiZSBzb2xlIHJlbWFpbmluZyBhY3RpdmUgcGxheWVyIGluIHRoZSBnYW1lLgogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9jb250cmFjdC5weTo3MjYKICAgIC8vIHJlY2VpdmVyPVR4bi5zZW5kZXIsCiAgICB0eG4gU2VuZGVyCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L2NvbnRyYWN0LnB5OjcyNwogICAgLy8gYW1vdW50PWdhbWVfc3RhdGUucHJpemVfcG9vbC5uYXRpdmUsCiAgICBmcmFtZV9kaWcgMwogICAgcHVzaGludCAxNiAvLyAxNgogICAgZXh0cmFjdF91aW50NjQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvY29udHJhY3QucHk6NzI4LTczMAogICAgLy8gbm90ZT1TdHJpbmcoCiAgICAvLyAgICAgJ3BpZW91dDpqeyJtZXRob2QiOiJkZWxldGVfZ2FtZSIsImNvbmNlcm4iOiJpdHhuLnBheTtwcml6ZV9wb29sX2FkbWluX3N0YWtlIn0nCiAgICAvLyApLAogICAgcHVzaGJ5dGVzICJwaWVvdXQ6antcIm1ldGhvZFwiOlwiZGVsZXRlX2dhbWVcIixcImNvbmNlcm5cIjpcIml0eG4ucGF5O3ByaXplX3Bvb2xfYWRtaW5fc3Rha2VcIn0iCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L2NvbnRyYWN0LnB5OjcyNC03MzEKICAgIC8vICMgSXNzdWUgcHJpemUgcG9vbCBwYXlvdXRzIG9mIGFkbWluIHN0YWtlIGlmIHRoZXkgZGVsZXRlIGEgZ2FtZSB3aGVyZSB0aGV5IHRoZSBzb2xlIHBsYXllcgogICAgLy8gc3J0LnBheW91dF9pdHhuKAogICAgLy8gICAgIHJlY2VpdmVyPVR4bi5zZW5kZXIsCiAgICAvLyAgICAgYW1vdW50PWdhbWVfc3RhdGUucHJpemVfcG9vbC5uYXRpdmUsCiAgICAvLyAgICAgbm90ZT1TdHJpbmcoCiAgICAvLyAgICAgICAgICdwaWVvdXQ6ansibWV0aG9kIjoiZGVsZXRlX2dhbWUiLCJjb25jZXJuIjoiaXR4bi5wYXk7cHJpemVfcG9vbF9hZG1pbl9zdGFrZSJ9JwogICAgLy8gICAgICksCiAgICAvLyApCiAgICBjYWxsc3ViIHBheW91dF9pdHhuCgpkZWxldGVfZ2FtZV9hZnRlcl9pZl9lbHNlQDc6CiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L2NvbnRyYWN0LnB5OjczOC03MzkKICAgIC8vICMgRGVsZXRlIGJveCBnYW1lIHN0YXRlIGFuZCBib3ggZ2FtZSBwbGF5ZXJzIGZyb20gY29udHJhY3Qgc3RvcmFnZQogICAgLy8gZGVsIHNlbGYuYm94X2dhbWVfc3RhdGVbZ2FtZV9pZF0KICAgIGZyYW1lX2RpZyAyCiAgICBib3hfZGVsCiAgICBwb3AKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvY29udHJhY3QucHk6NzQwCiAgICAvLyBkZWwgc2VsZi5ib3hfZ2FtZV9wbGF5ZXJzW2dhbWVfaWRdCiAgICBieXRlY18zIC8vICJwXyIKICAgIGZyYW1lX2RpZyAxCiAgICBjb25jYXQKICAgIGJveF9kZWwKICAgIHBvcAogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9jb250cmFjdC5weTo3NDUKICAgIC8vIHZhbHVlX3NpemU9YXJjNC5VSW50MTYoY3N0LkFERFJFU1NfU0laRSAqIGdhbWVfc3RhdGUubWF4X3BsYXllcnMubmF0aXZlKSwKICAgIGZyYW1lX2RpZyAzCiAgICBpbnRjXzAgLy8gMQogICAgZ2V0Ynl0ZQogICAgaW50Y18zIC8vIDMyCiAgICAqCiAgICBpdG9iCiAgICBkdXAKICAgIGJpdGxlbgogICAgcHVzaGludCAxNiAvLyAxNgogICAgPD0KICAgIGFzc2VydCAvLyBvdmVyZmxvdwogICAgZXh0cmFjdCA2IDIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvY29udHJhY3QucHk6NzQ0CiAgICAvLyBrZXlfc2l6ZT1hcmM0LlVJbnQ4KDEwKSwKICAgIHB1c2hieXRlcyAweDBhCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L2NvbnRyYWN0LnB5Ojc0Mi03NDYKICAgIC8vICMgQ2FsY3VsYXRlIGJveCBnYW1lIHBsYXllcnMgZmVlCiAgICAvLyBib3hfcF9jb3N0ID0gc2VsZi5jYWxjX3NpbmdsZV9ib3hfY29zdCgKICAgIC8vICAgICBrZXlfc2l6ZT1hcmM0LlVJbnQ4KDEwKSwKICAgIC8vICAgICB2YWx1ZV9zaXplPWFyYzQuVUludDE2KGNzdC5BRERSRVNTX1NJWkUgKiBnYW1lX3N0YXRlLm1heF9wbGF5ZXJzLm5hdGl2ZSksCiAgICAvLyApCiAgICBzd2FwCiAgICBjYWxsc3ViIGNhbGNfc2luZ2xlX2JveF9jb3N0CiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L2NvbnRyYWN0LnB5Ojc1MAogICAgLy8gcmVjZWl2ZXI9VHhuLnNlbmRlciwKICAgIHR4biBTZW5kZXIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvY29udHJhY3QucHk6NzUxCiAgICAvLyBhbW91bnQ9Y3N0LkJPWF9TX0NPU1QgKyBib3hfcF9jb3N0LAogICAgaW50YyAxMSAvLyA2NzMwMAogICAgdW5jb3ZlciAyCiAgICArCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L2NvbnRyYWN0LnB5Ojc1Mi03NTQKICAgIC8vIG5vdGU9U3RyaW5nKAogICAgLy8gICAgICdwaWVvdXQ6ansibWV0aG9kIjoiZGVsZXRlX2dhbWUiLCJjb25jZXJuIjoiaXR4bi5wYXk7Ym94X3NfbWJyX3JlZnVuZCtib3hfcF9tYnJfcmVmdW5kIn0nCiAgICAvLyApLAogICAgcHVzaGJ5dGVzICJwaWVvdXQ6antcIm1ldGhvZFwiOlwiZGVsZXRlX2dhbWVcIixcImNvbmNlcm5cIjpcIml0eG4ucGF5O2JveF9zX21icl9yZWZ1bmQrYm94X3BfbWJyX3JlZnVuZFwifSIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvY29udHJhY3QucHk6NzQ4LTc1NQogICAgLy8gIyBJc3N1ZSBNQlIgcmVmdW5kIGZvciBib3ggZ2FtZSBzdGF0ZSBhbmQgYm94IGdhbWUgcGxheWVycyBkZWxldGlvbiB2aWEgYSBwYXltZW50IGlubmVyIHRyYW5zYWN0aW9uCiAgICAvLyBzcnQucGF5b3V0X2l0eG4oCiAgICAvLyAgICAgcmVjZWl2ZXI9VHhuLnNlbmRlciwKICAgIC8vICAgICBhbW91bnQ9Y3N0LkJPWF9TX0NPU1QgKyBib3hfcF9jb3N0LAogICAgLy8gICAgIG5vdGU9U3RyaW5nKAogICAgLy8gICAgICAgICAncGllb3V0Omp7Im1ldGhvZCI6ImRlbGV0ZV9nYW1lIiwiY29uY2VybiI6Iml0eG4ucGF5O2JveF9zX21icl9yZWZ1bmQrYm94X3BfbWJyX3JlZnVuZCJ9JwogICAgLy8gICAgICksCiAgICAvLyApCiAgICBjYWxsc3ViIHBheW91dF9pdHhuCiAgICByZXRzdWIKCmRlbGV0ZV9nYW1lX2Vsc2VfYm9keUA2OgogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9jb250cmFjdC5weTo3MzQtNzM1CiAgICAvLyAjIEZhaWwgdHJhbnNhY3Rpb24gdW5sZXNzIHRoZSBhc3NlcnRpb24gYmVsb3cgZXZhbHVhdGVzIFRydWUKICAgIC8vIGFzc2VydCBnYW1lX3N0YXRlLmFjdGl2ZV9wbGF5ZXJzLm5hdGl2ZSA9PSAwLCBlcnIuTk9OX1pFUk9fQUNUSVZFX1BMQVlFUlMKICAgIGZyYW1lX2RpZyAwCiAgICAhCiAgICBhc3NlcnQgLy8gR2FtZSBsb2JieSBub3QgZW1wdHkuIE51bWJlciBvZiBhY3RpdmUgcGxheWVycyBtdXN0IGJlIHplcm8uCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L2NvbnRyYWN0LnB5OjczNgogICAgLy8gYXNzZXJ0IGdhbWVfc3RhdGUucHJpemVfcG9vbC5uYXRpdmUgPT0gMCwgZXJyLk5PTl9aRVJPX1BSSVpFX1BPT0wKICAgIGZyYW1lX2RpZyAzCiAgICBwdXNoaW50IDE2IC8vIDE2CiAgICBleHRyYWN0X3VpbnQ2NAogICAgIQogICAgYXNzZXJ0IC8vIFByaXplIHBvb2wgbm90IGVtcHR5LiBBbW91bnQgaW4gcHJpemUgcG9vbCBtdXN0IGJlIHplcm8uCiAgICBiIGRlbGV0ZV9nYW1lX2FmdGVyX2lmX2Vsc2VANwoKZGVsZXRlX2dhbWVfYm9vbF9mYWxzZUAzOgogICAgaW50Y18xIC8vIDAKICAgIGIgZGVsZXRlX2dhbWVfYm9vbF9tZXJnZUA0CgoKLy8gc21hcnRfY29udHJhY3RzLnBpZW91dC5jb250cmFjdC5QaWVvdXQudGVybWluYXRlKCkgLT4gdm9pZDoKdGVybWluYXRlOgogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9jb250cmFjdC5weTo3NTctNzU5CiAgICAvLyAjIEFsbG93IGFwcGxpY2F0aW9uIGNyZWF0b3IgdG8gZGVsZXRlIHRoZSBzbWFydCBjb250cmFjdCBhcHBsaWNhdGlvbgogICAgLy8gQGFyYzQuYWJpbWV0aG9kKGFsbG93X2FjdGlvbnM9WyJEZWxldGVBcHBsaWNhdGlvbiJdKQogICAgLy8gZGVmIHRlcm1pbmF0ZShzZWxmKSAtPiBOb25lOgogICAgcHJvdG8gMCAwCiAgICBwdXNoYnl0ZXMgIiIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvY29udHJhY3QucHk6NzYwLTc2MQogICAgLy8gIyBGYWlsIHRyYW5zYWN0aW9uIHVubGVzcyB0aGUgYXNzZXJ0aW9ucyBiZWxvdyBldmFsdWF0ZSBUcnVlCiAgICAvLyBhc3NlcnQgVGVtcGxhdGVWYXJbYm9vbF0oIkRFTEVUQUJMRSIpLCBlcnIuREVMRVRFQUJMRV9OT1RfVFJVRQogICAgaW50YyAxNCAvLyBUTVBMX0RFTEVUQUJMRQogICAgYXNzZXJ0IC8vIFRlbXBsYXRlIHZhcmlhYmxlICdERUxFVEFCTEUnIG5lZWRzIHRvIGJlICdUcnVlJyBhdCBkZXBsb3ktdGltZS4KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvY29udHJhY3QucHk6NzYyCiAgICAvLyBhc3NlcnQgVHhuLnNlbmRlciA9PSBHbG9iYWwuY3JlYXRvcl9hZGRyZXNzLCBlcnIuSU5WQUxJRF9DUkVBVE9SCiAgICB0eG4gU2VuZGVyCiAgICBnbG9iYWwgQ3JlYXRvckFkZHJlc3MKICAgID09CiAgICBhc3NlcnQgLy8gQWNjb3VudCBtdXN0IG1hdGNoIGFwcGxpY2F0aW9uIGNyZWF0b3IgYWRkcmVzcy4KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvY29udHJhY3QucHk6NzY0LTc2NQogICAgLy8gIyBDaGVjayBpZiBib3ggZ2FtZSB0cm9waHkgZXhpc3RzCiAgICAvLyBpZiBzZWxmLmJveF9nYW1lX3Ryb3BoeToKICAgIGJ5dGVjXzIgLy8gInRfIgogICAgYm94X2xlbgogICAgYnVyeSAxCiAgICBieiB0ZXJtaW5hdGVfYWZ0ZXJfaWZfZWxzZUA1CiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L2NvbnRyYWN0LnB5Ojc2OAogICAgLy8gR2xvYmFsLmN1cnJlbnRfYXBwbGljYXRpb25fYWRkcmVzcywKICAgIGdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L2NvbnRyYWN0LnB5Ojc2OQogICAgLy8gc2VsZi5ib3hfZ2FtZV90cm9waHkudmFsdWUuYXNzZXRfaWQubmF0aXZlLAogICAgYnl0ZWNfMiAvLyAidF8iCiAgICBib3hfZ2V0CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5ib3hfZ2FtZV90cm9waHkgZXhpc3RzCiAgICBpbnRjXzEgLy8gMAogICAgZXh0cmFjdF91aW50NjQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvY29udHJhY3QucHk6NzY2LTc3MAogICAgLy8gIyBVc2UgYm94IGdhbWUgdHJvcGh5IGNvbnRlbnRzIHRvIGNoZWNrIGFwcCBhY2NvdW50IGFzc2V0IGJhbGFuY2UgZm9yIHRyb3BoeQogICAgLy8gYXNzZXRfYmFsYW5jZSwgYXNzZXRfZXhpc3RzID0gb3AuQXNzZXRIb2xkaW5nR2V0LmFzc2V0X2JhbGFuY2UoCiAgICAvLyAgICAgR2xvYmFsLmN1cnJlbnRfYXBwbGljYXRpb25fYWRkcmVzcywKICAgIC8vICAgICBzZWxmLmJveF9nYW1lX3Ryb3BoeS52YWx1ZS5hc3NldF9pZC5uYXRpdmUsCiAgICAvLyApCiAgICBhc3NldF9ob2xkaW5nX2dldCBBc3NldEJhbGFuY2UKICAgIHN3YXAKICAgIGZyYW1lX2J1cnkgMAogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9jb250cmFjdC5weTo3NzEtNzcyCiAgICAvLyAjIElmIGFzc2V0IGV4aXN0cyBhbmQgaXRzIGJhbGFuY2UgaXMgMSwgcGVyZm9ybSBidXJuIHZpYSBhc3NldCBjb25maWcgaW5uZXIgdHJhbnNhY3Rpb24KICAgIC8vIGlmIGFzc2V0X2V4aXN0cyBhbmQgYXNzZXRfYmFsYW5jZSA9PSAxOgogICAgYnogdGVybWluYXRlX2FmdGVyX2lmX2Vsc2VANAogICAgZnJhbWVfZGlnIDAKICAgIGludGNfMCAvLyAxCiAgICA9PQogICAgYnogdGVybWluYXRlX2FmdGVyX2lmX2Vsc2VANAogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9jb250cmFjdC5weTo3NzQKICAgIC8vIGFzc2V0X2lkPXNlbGYuYm94X2dhbWVfdHJvcGh5LnZhbHVlLmFzc2V0X2lkLm5hdGl2ZSwKICAgIGJ5dGVjXzIgLy8gInRfIgogICAgYm94X2dldAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYuYm94X2dhbWVfdHJvcGh5IGV4aXN0cwogICAgaW50Y18xIC8vIDAKICAgIGV4dHJhY3RfdWludDY0CiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L3N1YnJvdXRpbmVzLnB5OjI5LTMyCiAgICAvLyBpdHhuLkFzc2V0Q29uZmlnKAogICAgLy8gICAgIGNvbmZpZ19hc3NldD1hc3NldF9pZCwKICAgIC8vICAgICBub3RlPW5vdGUsCiAgICAvLyApLnN1Ym1pdCgpCiAgICBpdHhuX2JlZ2luCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L2NvbnRyYWN0LnB5Ojc3NS03NzYKICAgIC8vIG5vdGU9U3RyaW5nKAogICAgLy8gICAgICdwaWVvdXQ6ansibWV0aG9kIjoidGVybWluYXRlIiwiY29uY2VybiI6Iml0eG4uYXNzZXRfY29uZmlnO2J1cm5fdHJvcGh5X2Fzc2V0In0nKSwKICAgIHB1c2hieXRlcyAicGllb3V0Omp7XCJtZXRob2RcIjpcInRlcm1pbmF0ZVwiLFwiY29uY2VyblwiOlwiaXR4bi5hc3NldF9jb25maWc7YnVybl90cm9waHlfYXNzZXRcIn0iCiAgICBpdHhuX2ZpZWxkIE5vdGUKICAgIGl0eG5fZmllbGQgQ29uZmlnQXNzZXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvc3Vicm91dGluZXMucHk6MjkKICAgIC8vIGl0eG4uQXNzZXRDb25maWcoCiAgICBwdXNoaW50IDMgLy8gYWNmZwogICAgaXR4bl9maWVsZCBUeXBlRW51bQogICAgaW50Y18xIC8vIDAKICAgIGl0eG5fZmllbGQgRmVlCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L3N1YnJvdXRpbmVzLnB5OjI5LTMyCiAgICAvLyBpdHhuLkFzc2V0Q29uZmlnKAogICAgLy8gICAgIGNvbmZpZ19hc3NldD1hc3NldF9pZCwKICAgIC8vICAgICBub3RlPW5vdGUsCiAgICAvLyApLnN1Ym1pdCgpCiAgICBpdHhuX3N1Ym1pdAoKdGVybWluYXRlX2FmdGVyX2lmX2Vsc2VANDoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvY29udHJhY3QucHk6Nzc4LTc3OQogICAgLy8gIyBEZWxldGUgYm94IGdhbWUgdHJvcGh5IGZyb20gY29udHJhY3Qgc3RvcmFnZSBpZiBpdCBleHNpc3RzCiAgICAvLyBkZWwgc2VsZi5ib3hfZ2FtZV90cm9waHkudmFsdWUKICAgIGJ5dGVjXzIgLy8gInRfIgogICAgYm94X2RlbAogICAgcG9wCgp0ZXJtaW5hdGVfYWZ0ZXJfaWZfZWxzZUA1OgogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9jb250cmFjdC5weTo3ODEtNzg3CiAgICAvLyAjIElzc3VlIHBheW1lbnQgaW5uZXIgdHJhbnNhY3Rpb24gY2xvc2luZyBhbGwgcmVtYWluaW5nIGZ1bmRzIGluIGFwcGxpY2F0aW9uIGFjY291bnQgYmFsYW5jZQogICAgLy8gaXR4bi5QYXltZW50KAogICAgLy8gICAgIHJlY2VpdmVyPVR4bi5zZW5kZXIsCiAgICAvLyAgICAgYW1vdW50PTAsCiAgICAvLyAgICAgY2xvc2VfcmVtYWluZGVyX3RvPVR4bi5zZW5kZXIsCiAgICAvLyAgICAgbm90ZT1iJ3BpZW91dDpqeyJtZXRob2QiOiJ0ZXJtaW5hdGUiLCJjb25jZXJuIjoiaXR4bi5wYXk7Y2xvc2VfcmVtYWluZGVyX3RvIn0nLAogICAgLy8gKS5zdWJtaXQoKQogICAgaXR4bl9iZWdpbgogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9jb250cmFjdC5weTo3ODMKICAgIC8vIHJlY2VpdmVyPVR4bi5zZW5kZXIsCiAgICB0eG4gU2VuZGVyCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L2NvbnRyYWN0LnB5Ojc4NQogICAgLy8gY2xvc2VfcmVtYWluZGVyX3RvPVR4bi5zZW5kZXIsCiAgICBkdXAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvY29udHJhY3QucHk6Nzg2CiAgICAvLyBub3RlPWIncGllb3V0Omp7Im1ldGhvZCI6InRlcm1pbmF0ZSIsImNvbmNlcm4iOiJpdHhuLnBheTtjbG9zZV9yZW1haW5kZXJfdG8ifScsCiAgICBwdXNoYnl0ZXMgMHg3MDY5NjU2Zjc1NzQzYTZhN2IyMjZkNjU3NDY4NmY2NDIyM2EyMjc0NjU3MjZkNjk2ZTYxNzQ2NTIyMmMyMjYzNmY2ZTYzNjU3MjZlMjIzYTIyNjk3NDc4NmUyZTcwNjE3OTNiNjM2YzZmNzM2NTVmNzI2NTZkNjE2OTZlNjQ2NTcyNWY3NDZmMjI3ZAogICAgaXR4bl9maWVsZCBOb3RlCiAgICBpdHhuX2ZpZWxkIENsb3NlUmVtYWluZGVyVG8KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9waWVvdXQvY29udHJhY3QucHk6Nzg0CiAgICAvLyBhbW91bnQ9MCwKICAgIGludGNfMSAvLyAwCiAgICBpdHhuX2ZpZWxkIEFtb3VudAogICAgaXR4bl9maWVsZCBSZWNlaXZlcgogICAgLy8gc21hcnRfY29udHJhY3RzL3BpZW91dC9jb250cmFjdC5weTo3ODEtNzgyCiAgICAvLyAjIElzc3VlIHBheW1lbnQgaW5uZXIgdHJhbnNhY3Rpb24gY2xvc2luZyBhbGwgcmVtYWluaW5nIGZ1bmRzIGluIGFwcGxpY2F0aW9uIGFjY291bnQgYmFsYW5jZQogICAgLy8gaXR4bi5QYXltZW50KAogICAgaW50Y18wIC8vIHBheQogICAgaXR4bl9maWVsZCBUeXBlRW51bQogICAgaW50Y18xIC8vIDAKICAgIGl0eG5fZmllbGQgRmVlCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGllb3V0L2NvbnRyYWN0LnB5Ojc4MS03ODcKICAgIC8vICMgSXNzdWUgcGF5bWVudCBpbm5lciB0cmFuc2FjdGlvbiBjbG9zaW5nIGFsbCByZW1haW5pbmcgZnVuZHMgaW4gYXBwbGljYXRpb24gYWNjb3VudCBiYWxhbmNlCiAgICAvLyBpdHhuLlBheW1lbnQoCiAgICAvLyAgICAgcmVjZWl2ZXI9VHhuLnNlbmRlciwKICAgIC8vICAgICBhbW91bnQ9MCwKICAgIC8vICAgICBjbG9zZV9yZW1haW5kZXJfdG89VHhuLnNlbmRlciwKICAgIC8vICAgICBub3RlPWIncGllb3V0Omp7Im1ldGhvZCI6InRlcm1pbmF0ZSIsImNvbmNlcm4iOiJpdHhuLnBheTtjbG9zZV9yZW1haW5kZXJfdG8ifScsCiAgICAvLyApLnN1Ym1pdCgpCiAgICBpdHhuX3N1Ym1pdAogICAgcmV0c3ViCg==", "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"}, "sourceInfo": {"approval": {"pcOffsetMethod": "cblocks", "sourceInfo": [{"pc": [3021, 4389], "errorMessage": "Account is not authorized to make this call."}, {"pc": [2773, 3288], "errorMessage": "Account is not recognized as an active player for this game."}, {"pc": [4265], "errorMessage": "Account is not recognized as the admin address for this game."}, {"pc": [2127], "errorMessage": "Account must be opted in to asset in order to perform this action."}, {"pc": [1853, 4673], "errorMessage": "Account must match application creator address."}, {"pc": [1558, 3211], "errorMessage": "Application ID mismatch. App ID must be same across all transactions in group."}, {"pc": [2112], "errorMessage": "Asset trophy receiver must match application ATH address."}, {"pc": [2785, 3030], "errorMessage": "Box Commit Rand round not empty. Round value must be zero to obtain a valid one."}, {"pc": [1886, 2672], "errorMessage": "Box found. Ensure the box you are trying to access does not exist already."}, {"pc": [2494, 2731, 2823, 3253, 4134, 4217, 4369], "errorMessage": "Box game state not found. Check if game ID exists."}, {"pc": [1825, 2251, 2499, 2677, 2739, 2831, 3015, 3261, 3266], "errorMessage": "Box not found. Ensure the box you are trying to access was created and still exists."}, {"pc": [1912, 2356, 2364, 2701], "errorMessage": "Box payment receiver address must match application address."}, {"pc": [1904, 2332, 2340, 2693], "errorMessage": "Box payment sender address must match transaction sender address."}, {"pc": [4420], "errorMessage": "Game admin address must be sole remaining active player in the game."}, {"pc": [4163], "errorMessage": "Game event not found. Check if game event Trigger ID exists"}, {"pc": [4276, 4645], "errorMessage": "Game lobby not empty. Number of active players must be zero."}, {"pc": [2556, 2754, 3309, 4176, 4257], "errorMessage": "Game state staking finalized value mismatch."}, {"pc": [801, 813, 818, 855, 890, 988, 993, 1001, 1011, 1060, 1626, 1631, 1636, 1641, 1646, 1651, 1656, 1661, 1666, 1671, 1676, 1681, 1829, 1834, 1839, 2559, 2569, 2574, 3310, 3687, 3710, 3716, 3722, 3728, 3791, 3819, 4018, 4041, 4047, 4071, 4145, 4178, 4259, 4373, 4406], "errorMessage": "Index access is out of bounds"}, {"pc": [1896, 2286, 2316, 2685], "errorMessage": "Insufficient funds. Box pay amount is not enough to cover application MBR."}, {"pc": [1920], "errorMessage": "Insufficient funds. Mint pay amount is not enough to cover asset creation cost."}, {"pc": [2278, 2508, 4241], "errorMessage": "Insufficient funds. Stake pay amount is not enough to cover staking requirements."}, {"pc": [1582, 2858, 3235, 3329], "errorMessage": "Invalid Game ID. Box Commit Rand Game ID must be a certain value or match Game ID arg."}, {"pc": [1551, 3204], "errorMessage": "Invalid group index. Ensure transaction group index matches the expected value. "}, {"pc": [1546, 1880, 2246, 2488, 2663, 3200, 4204], "errorMessage": "Invalid group size. Ensure number of transaction in group is within valid bounds."}, {"pc": [2103, 2718, 2811, 3006, 4130, 4365], "errorMessage": "Invalid group size. This app call can only take standalone transactions."}, {"pc": [2566, 3037, 3317, 4152, 4185], "errorMessage": "Invalid time frame. Call made outside the permitted block or timestamp range."}, {"pc": [1936], "errorMessage": "Mint payment receiver address must match application address."}, {"pc": [1928], "errorMessage": "Mint payment sender address must match transaction sender address."}, {"pc": [2578], "errorMessage": "Number of active players must not exceed number of max players."}, {"pc": [155], "errorMessage": "OnCompletion is not DeleteApplication"}, {"pc": [167, 183, 209, 233, 249, 267, 283, 299, 321, 347, 394, 406, 438, 451, 474, 495, 516, 533, 557], "errorMessage": "OnCompletion is not NoOp"}, {"pc": [2543, 2890], "errorMessage": "Player with this address must not be an active game participant in the game."}, {"pc": [2593], "errorMessage": "Players box start position index overflow. Can not store more addresses."}, {"pc": [4271, 4652], "errorMessage": "Prize pool not empty. Amount in prize pool must be zero."}, {"pc": [3342], "errorMessage": "Randomness commit round not reached yet."}, {"pc": [1565, 3218], "errorMessage": "Sender mismatch. Sender must be same address across all transactions in group."}, {"pc": [2348, 2524, 4233], "errorMessage": "Stake payment receiver address must match application address."}, {"pc": [2324, 2516, 4225], "errorMessage": "Stake payment sender address must match transaction sender address."}, {"pc": [4667], "errorMessage": "Template variable 'DELETABLE' needs to be 'True' at deploy-time."}, {"pc": [2269], "errorMessage": "The number of max players must be within bounds."}, {"pc": [1573, 3226], "errorMessage": "Transaction at this group index must have exact required method selector."}, {"pc": [3397], "errorMessage": "application log value is not the result of an ABI return"}, {"pc": [442], "errorMessage": "can only call when creating"}, {"pc": [158, 170, 186, 212, 236, 252, 270, 286, 302, 324, 350, 397, 409, 454, 477, 498, 519, 536, 560], "errorMessage": "can only call when not creating"}, {"pc": [752], "errorMessage": "check BoxMap entry exists"}, {"pc": [921], "errorMessage": "check BoxRef exists"}, {"pc": [2110, 3780], "errorMessage": "check self.ath_address exists"}, {"pc": [3766], "errorMessage": "check self.ath_score exists"}, {"pc": [1827, 2779, 2837, 2848, 2864, 3024, 3323, 3337, 3349], "errorMessage": "check self.box_commit_rand entry exists"}, {"pc": [1741], "errorMessage": "check self.box_game_players entry exists"}, {"pc": [1615, 2483, 2741, 2875, 3272, 3296, 4125, 4244, 4360, 4405], "errorMessage": "check self.box_game_state entry exists"}, {"pc": [2117, 3789, 3814, 3967, 4685, 4705], "errorMessage": "check self.box_game_trophy exists"}, {"pc": [2430], "errorMessage": "check self.game_id exists"}, {"pc": [3409, 3747], "errorMessage": "check self.score_id exists"}, {"pc": [2302, 2373, 2612, 2633, 3659, 3987, 4531], "errorMessage": "overflow"}, {"pc": [1541, 3195], "errorMessage": "transaction type is appl"}, {"pc": [200, 312, 338, 365, 375, 385, 419, 429], "errorMessage": "transaction type is pay"}]}, "clear": {"pcOffsetMethod": "none", "sourceInfo": []}}, "templateVariables": {"GEN_UNIX": {"type": "AVMUint64"}, "DELETABLE": {"type": "AVMUint64"}}}"""
APP_SPEC = algokit_utils.Arc56Contract.from_json(_APP_SPEC_JSON)

def _parse_abi_args(args: object | None = None) -> list[object] | None:
    """Helper to parse ABI args into the format expected by underlying client"""
    if args is None:
        return None

    def convert_dataclass(value: object) -> object:
        if dataclasses.is_dataclass(value):
            return tuple(convert_dataclass(getattr(value, field.name)) for field in dataclasses.fields(value))
        elif isinstance(value, (list, tuple)):
            return type(value)(convert_dataclass(item) for item in value)
        return value

    match args:
        case tuple():
            method_args = list(args)
        case _ if dataclasses.is_dataclass(args):
            method_args = [getattr(args, field.name) for field in dataclasses.fields(args)]
        case _:
            raise ValueError("Invalid 'args' type. Expected 'tuple' or 'TypedDict' for respective typed arguments.")

    return [
        convert_dataclass(arg) if not isinstance(arg, algokit_utils.AppMethodCallTransactionArgument) else arg
        for arg in method_args
    ] if method_args else None

def _init_dataclass(cls: type, data: dict) -> object:
    """
    Recursively instantiate a dataclass of type `cls` from `data`.

    For each field on the dataclass, if the field type is also a dataclass
    and the corresponding data is a dict, instantiate that field recursively.
    """
    field_values = {}
    for field in dataclasses.fields(cls):
        field_value = data.get(field.name)
        # Check if the field expects another dataclass and the value is a dict.
        if dataclasses.is_dataclass(field.type) and isinstance(field_value, dict):
            field_values[field.name] = _init_dataclass(typing.cast(type, field.type), field_value)
        else:
            field_values[field.name] = field_value
    return cls(**field_values)

@dataclasses.dataclass(frozen=True)
class CommitRand:
    """Struct for CommitRand"""
    game_id: int
    commit_round: int
    expiry_round: int

@dataclasses.dataclass(frozen=True)
class GameState:
    """Struct for GameState"""
    staking_finalized: bool
    max_players: int
    active_players: int
    first_place_score: int
    second_place_score: int
    third_place_score: int
    box_p_start_pos: int
    expiry_ts: int
    prize_pool: int
    admin_address: str
    first_place_address: str
    second_place_address: str
    third_place_address: str

@dataclasses.dataclass(frozen=True)
class GameTrophy:
    """Struct for GameTrophy"""
    asset_id: int
    owner_address: str


@dataclasses.dataclass(frozen=True, kw_only=True)
class AddResourceBudgetPlayGameArgs:
    """Dataclass for add_resource_budget_play_game arguments"""
    game_id: int

    @property
    def abi_method_signature(self) -> str:
        return "add_resource_budget_play_game(uint64)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class CalcSingleBoxCostArgs:
    """Dataclass for calc_single_box_cost arguments"""
    key_size: int
    value_size: int

    @property
    def abi_method_signature(self) -> str:
        return "calc_single_box_cost(uint8,uint16)uint64"

@dataclasses.dataclass(frozen=True, kw_only=True)
class ReadGameStateArgs:
    """Dataclass for read_game_state arguments"""
    game_id: int

    @property
    def abi_method_signature(self) -> str:
        return "read_game_state(uint64)(uint64,bool,uint8,uint8,uint8,uint8,uint8,uint16,uint64,uint64,address,address,address,address)"

@dataclasses.dataclass(frozen=True, kw_only=True)
class ReadGamePlayersArgs:
    """Dataclass for read_game_players arguments"""
    game_id: int

    @property
    def abi_method_signature(self) -> str:
        return "read_game_players(uint64)address[]"

@dataclasses.dataclass(frozen=True, kw_only=True)
class ReadCommitRandArgs:
    """Dataclass for read_commit_rand arguments"""
    owner: str | bytes

    @property
    def abi_method_signature(self) -> str:
        return "read_commit_rand(account)(uint64,uint64,uint64)"

@dataclasses.dataclass(frozen=True, kw_only=True)
class MintTrophyArgs:
    """Dataclass for mint_trophy arguments"""
    box_t_pay: algokit_utils.AppMethodCallTransactionArgument
    mint_pay: algokit_utils.AppMethodCallTransactionArgument

    @property
    def abi_method_signature(self) -> str:
        return "mint_trophy(pay,pay)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class NewGameArgs:
    """Dataclass for new_game arguments"""
    max_players: int
    box_s_pay: algokit_utils.AppMethodCallTransactionArgument
    box_p_pay: algokit_utils.AppMethodCallTransactionArgument
    stake_pay: algokit_utils.AppMethodCallTransactionArgument

    @property
    def abi_method_signature(self) -> str:
        return "new_game(uint64,pay,pay,pay)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class JoinGameArgs:
    """Dataclass for join_game arguments"""
    game_id: int
    stake_pay: algokit_utils.AppMethodCallTransactionArgument

    @property
    def abi_method_signature(self) -> str:
        return "join_game(uint64,pay)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class GetBoxCommitRandArgs:
    """Dataclass for get_box_commit_rand arguments"""
    box_c_pay: algokit_utils.AppMethodCallTransactionArgument

    @property
    def abi_method_signature(self) -> str:
        return "get_box_commit_rand(pay)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class SetBoxCommitRandArgs:
    """Dataclass for set_box_commit_rand arguments"""
    game_id: int

    @property
    def abi_method_signature(self) -> str:
        return "set_box_commit_rand(uint64)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class DelBoxCommitRandForSelfArgs:
    """Dataclass for del_box_commit_rand_for_self arguments"""
    game_id: int

    @property
    def abi_method_signature(self) -> str:
        return "del_box_commit_rand_for_self(uint64)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class DelBoxCommitRandForOtherArgs:
    """Dataclass for del_box_commit_rand_for_other arguments"""
    player: str | bytes

    @property
    def abi_method_signature(self) -> str:
        return "del_box_commit_rand_for_other(account)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class PlayGameArgs:
    """Dataclass for play_game arguments"""
    game_id: int

    @property
    def abi_method_signature(self) -> str:
        return "play_game(uint64)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class TriggerGameProgArgs:
    """Dataclass for trigger_game_prog arguments"""
    game_id: int
    trigger_id: int

    @property
    def abi_method_signature(self) -> str:
        return "trigger_game_prog(uint64,uint8)bool"

@dataclasses.dataclass(frozen=True, kw_only=True)
class ResetGameArgs:
    """Dataclass for reset_game arguments"""
    game_id: int
    stake_pay: algokit_utils.AppMethodCallTransactionArgument

    @property
    def abi_method_signature(self) -> str:
        return "reset_game(uint64,pay)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class DeleteGameArgs:
    """Dataclass for delete_game arguments"""
    game_id: int

    @property
    def abi_method_signature(self) -> str:
        return "delete_game(uint64)void"


class _PieoutDelete:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def terminate(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppDeleteMethodCallParams:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.delete(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "terminate()void",
        }))


class PieoutParams:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    @property
    def delete(self) -> "_PieoutDelete":
        return _PieoutDelete(self.app_client)

    def add_resource_budget_play_game(
        self,
        args: tuple[int] | AddResourceBudgetPlayGameArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "add_resource_budget_play_game(uint64)void",
            "args": method_args,
        }))

    def calc_single_box_cost(
        self,
        args: tuple[int, int] | CalcSingleBoxCostArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "calc_single_box_cost(uint8,uint16)uint64",
            "args": method_args,
        }))

    def read_gen_unix(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "read_gen_unix()uint64",
        }))

    def read_game_state(
        self,
        args: tuple[int] | ReadGameStateArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "read_game_state(uint64)(uint64,bool,uint8,uint8,uint8,uint8,uint8,uint16,uint64,uint64,address,address,address,address)",
            "args": method_args,
        }))

    def read_game_players(
        self,
        args: tuple[int] | ReadGamePlayersArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "read_game_players(uint64)address[]",
            "args": method_args,
        }))

    def read_commit_rand(
        self,
        args: tuple[str | bytes] | ReadCommitRandArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "read_commit_rand(account)(uint64,uint64,uint64)",
            "args": method_args,
        }))

    def mint_trophy(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument, algokit_utils.AppMethodCallTransactionArgument] | MintTrophyArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "mint_trophy(pay,pay)void",
            "args": method_args,
        }))

    def claim_trophy(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "claim_trophy()void",
        }))

    def new_game(
        self,
        args: tuple[int, algokit_utils.AppMethodCallTransactionArgument, algokit_utils.AppMethodCallTransactionArgument, algokit_utils.AppMethodCallTransactionArgument] | NewGameArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "new_game(uint64,pay,pay,pay)void",
            "args": method_args,
        }))

    def join_game(
        self,
        args: tuple[int, algokit_utils.AppMethodCallTransactionArgument] | JoinGameArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "join_game(uint64,pay)void",
            "args": method_args,
        }))

    def get_box_commit_rand(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument] | GetBoxCommitRandArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_box_commit_rand(pay)void",
            "args": method_args,
        }))

    def set_box_commit_rand(
        self,
        args: tuple[int] | SetBoxCommitRandArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "set_box_commit_rand(uint64)void",
            "args": method_args,
        }))

    def del_box_commit_rand_for_self(
        self,
        args: tuple[int] | DelBoxCommitRandForSelfArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "del_box_commit_rand_for_self(uint64)void",
            "args": method_args,
        }))

    def del_box_commit_rand_for_other(
        self,
        args: tuple[str | bytes] | DelBoxCommitRandForOtherArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "del_box_commit_rand_for_other(account)void",
            "args": method_args,
        }))

    def play_game(
        self,
        args: tuple[int] | PlayGameArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "play_game(uint64)void",
            "args": method_args,
        }))

    def trigger_game_prog(
        self,
        args: tuple[int, int] | TriggerGameProgArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "trigger_game_prog(uint64,uint8)bool",
            "args": method_args,
        }))

    def reset_game(
        self,
        args: tuple[int, algokit_utils.AppMethodCallTransactionArgument] | ResetGameArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "reset_game(uint64,pay)void",
            "args": method_args,
        }))

    def delete_game(
        self,
        args: tuple[int] | DeleteGameArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "delete_game(uint64)void",
            "args": method_args,
        }))

    def generate(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "generate()void",
        }))

    def clear_state(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        
    ) -> algokit_utils.AppCallParams:
        return self.app_client.params.bare.clear_state(
            params,
            
        )


class _PieoutDeleteTransaction:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def terminate(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.delete(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "terminate()void",
        }))


class PieoutCreateTransactionParams:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    @property
    def delete(self) -> "_PieoutDeleteTransaction":
        return _PieoutDeleteTransaction(self.app_client)

    def add_resource_budget_play_game(
        self,
        args: tuple[int] | AddResourceBudgetPlayGameArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "add_resource_budget_play_game(uint64)void",
            "args": method_args,
        }))

    def calc_single_box_cost(
        self,
        args: tuple[int, int] | CalcSingleBoxCostArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "calc_single_box_cost(uint8,uint16)uint64",
            "args": method_args,
        }))

    def read_gen_unix(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "read_gen_unix()uint64",
        }))

    def read_game_state(
        self,
        args: tuple[int] | ReadGameStateArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "read_game_state(uint64)(uint64,bool,uint8,uint8,uint8,uint8,uint8,uint16,uint64,uint64,address,address,address,address)",
            "args": method_args,
        }))

    def read_game_players(
        self,
        args: tuple[int] | ReadGamePlayersArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "read_game_players(uint64)address[]",
            "args": method_args,
        }))

    def read_commit_rand(
        self,
        args: tuple[str | bytes] | ReadCommitRandArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "read_commit_rand(account)(uint64,uint64,uint64)",
            "args": method_args,
        }))

    def mint_trophy(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument, algokit_utils.AppMethodCallTransactionArgument] | MintTrophyArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "mint_trophy(pay,pay)void",
            "args": method_args,
        }))

    def claim_trophy(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "claim_trophy()void",
        }))

    def new_game(
        self,
        args: tuple[int, algokit_utils.AppMethodCallTransactionArgument, algokit_utils.AppMethodCallTransactionArgument, algokit_utils.AppMethodCallTransactionArgument] | NewGameArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "new_game(uint64,pay,pay,pay)void",
            "args": method_args,
        }))

    def join_game(
        self,
        args: tuple[int, algokit_utils.AppMethodCallTransactionArgument] | JoinGameArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "join_game(uint64,pay)void",
            "args": method_args,
        }))

    def get_box_commit_rand(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument] | GetBoxCommitRandArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_box_commit_rand(pay)void",
            "args": method_args,
        }))

    def set_box_commit_rand(
        self,
        args: tuple[int] | SetBoxCommitRandArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "set_box_commit_rand(uint64)void",
            "args": method_args,
        }))

    def del_box_commit_rand_for_self(
        self,
        args: tuple[int] | DelBoxCommitRandForSelfArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "del_box_commit_rand_for_self(uint64)void",
            "args": method_args,
        }))

    def del_box_commit_rand_for_other(
        self,
        args: tuple[str | bytes] | DelBoxCommitRandForOtherArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "del_box_commit_rand_for_other(account)void",
            "args": method_args,
        }))

    def play_game(
        self,
        args: tuple[int] | PlayGameArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "play_game(uint64)void",
            "args": method_args,
        }))

    def trigger_game_prog(
        self,
        args: tuple[int, int] | TriggerGameProgArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "trigger_game_prog(uint64,uint8)bool",
            "args": method_args,
        }))

    def reset_game(
        self,
        args: tuple[int, algokit_utils.AppMethodCallTransactionArgument] | ResetGameArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "reset_game(uint64,pay)void",
            "args": method_args,
        }))

    def delete_game(
        self,
        args: tuple[int] | DeleteGameArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "delete_game(uint64)void",
            "args": method_args,
        }))

    def generate(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "generate()void",
        }))

    def clear_state(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        
    ) -> Transaction:
        return self.app_client.create_transaction.bare.clear_state(
            params,
            
        )


class _PieoutDeleteSend:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def terminate(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
    
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.delete(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "terminate()void",
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)


class PieoutSend:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    @property
    def delete(self) -> "_PieoutDeleteSend":
        return _PieoutDeleteSend(self.app_client)

    def add_resource_budget_play_game(
        self,
        args: tuple[int] | AddResourceBudgetPlayGameArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "add_resource_budget_play_game(uint64)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def calc_single_box_cost(
        self,
        args: tuple[int, int] | CalcSingleBoxCostArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[int]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "calc_single_box_cost(uint8,uint16)uint64",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[int], parsed_response)

    def read_gen_unix(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[int]:
    
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "read_gen_unix()uint64",
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[int], parsed_response)

    def read_game_state(
        self,
        args: tuple[int] | ReadGameStateArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[tuple[int, bool, int, int, int, int, int, int, int, int, str, str, str, str]]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "read_game_state(uint64)(uint64,bool,uint8,uint8,uint8,uint8,uint8,uint16,uint64,uint64,address,address,address,address)",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[tuple[int, bool, int, int, int, int, int, int, int, int, str, str, str, str]], parsed_response)

    def read_game_players(
        self,
        args: tuple[int] | ReadGamePlayersArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[list[str]]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "read_game_players(uint64)address[]",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[list[str]], parsed_response)

    def read_commit_rand(
        self,
        args: tuple[str | bytes] | ReadCommitRandArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[tuple[int, int, int]]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "read_commit_rand(account)(uint64,uint64,uint64)",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[tuple[int, int, int]], parsed_response)

    def mint_trophy(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument, algokit_utils.AppMethodCallTransactionArgument] | MintTrophyArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "mint_trophy(pay,pay)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def claim_trophy(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
    
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "claim_trophy()void",
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def new_game(
        self,
        args: tuple[int, algokit_utils.AppMethodCallTransactionArgument, algokit_utils.AppMethodCallTransactionArgument, algokit_utils.AppMethodCallTransactionArgument] | NewGameArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "new_game(uint64,pay,pay,pay)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def join_game(
        self,
        args: tuple[int, algokit_utils.AppMethodCallTransactionArgument] | JoinGameArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "join_game(uint64,pay)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def get_box_commit_rand(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument] | GetBoxCommitRandArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_box_commit_rand(pay)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def set_box_commit_rand(
        self,
        args: tuple[int] | SetBoxCommitRandArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "set_box_commit_rand(uint64)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def del_box_commit_rand_for_self(
        self,
        args: tuple[int] | DelBoxCommitRandForSelfArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "del_box_commit_rand_for_self(uint64)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def del_box_commit_rand_for_other(
        self,
        args: tuple[str | bytes] | DelBoxCommitRandForOtherArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "del_box_commit_rand_for_other(account)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def play_game(
        self,
        args: tuple[int] | PlayGameArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "play_game(uint64)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def trigger_game_prog(
        self,
        args: tuple[int, int] | TriggerGameProgArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[bool]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "trigger_game_prog(uint64,uint8)bool",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[bool], parsed_response)

    def reset_game(
        self,
        args: tuple[int, algokit_utils.AppMethodCallTransactionArgument] | ResetGameArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "reset_game(uint64,pay)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def delete_game(
        self,
        args: tuple[int] | DeleteGameArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "delete_game(uint64)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def generate(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
    
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "generate()void",
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def clear_state(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[algokit_utils.ABIReturn]:
        return self.app_client.send.bare.clear_state(
            params,
            send_params=send_params,
        )


class GlobalStateValue(typing.TypedDict):
    """Shape of global_state state key values"""
    game_id: int
    score_id: int
    ath_score: int
    ath_address: str

class BoxStateValue(typing.TypedDict):
    """Shape of box state key values"""
    box_game_trophy: GameTrophy

class PieoutState:
    """Methods to access state for the current Pieout app"""

    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    @property
    def global_state(
        self
    ) -> "_GlobalState":
            """Methods to access global_state for the current app"""
            return _GlobalState(self.app_client)

    @property
    def box(
        self
    ) -> "_BoxState":
            """Methods to access box for the current app"""
            return _BoxState(self.app_client)

class _GlobalState:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client
        
        # Pre-generated mapping of value types to their struct classes
        self._struct_classes: dict[str, typing.Type[typing.Any]] = {}

    def get_all(self) -> GlobalStateValue:
        """Get all current keyed values from global_state state"""
        result = self.app_client.state.global_state.get_all()
        if not result:
            return typing.cast(GlobalStateValue, {})

        converted = {}
        for key, value in result.items():
            key_info = self.app_client.app_spec.state.keys.global_state.get(key)
            struct_class = self._struct_classes.get(key_info.value_type) if key_info else None
            converted[key] = (
                _init_dataclass(struct_class, value) if struct_class and isinstance(value, dict)
                else value
            )
        return typing.cast(GlobalStateValue, converted)

    @property
    def game_id(self) -> int:
        """Get the current value of the game_id key in global_state state"""
        value = self.app_client.state.global_state.get_value("game_id")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def score_id(self) -> int:
        """Get the current value of the score_id key in global_state state"""
        value = self.app_client.state.global_state.get_value("score_id")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def ath_score(self) -> int:
        """Get the current value of the ath_score key in global_state state"""
        value = self.app_client.state.global_state.get_value("ath_score")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def ath_address(self) -> str:
        """Get the current value of the ath_address key in global_state state"""
        value = self.app_client.state.global_state.get_value("ath_address")
        if isinstance(value, dict) and "address" in self._struct_classes:
            return _init_dataclass(self._struct_classes["address"], value)  # type: ignore
        return typing.cast(str, value)

class _BoxState:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client
        
        # Pre-generated mapping of value types to their struct classes
        self._struct_classes: dict[str, typing.Type[typing.Any]] = {
            "GameTrophy": GameTrophy,
            "GameState": GameState,
            "CommitRand": CommitRand
        }

    def get_all(self) -> BoxStateValue:
        """Get all current keyed values from box state"""
        result = self.app_client.state.box.get_all()
        if not result:
            return typing.cast(BoxStateValue, {})

        converted = {}
        for key, value in result.items():
            key_info = self.app_client.app_spec.state.keys.box.get(key)
            struct_class = self._struct_classes.get(key_info.value_type) if key_info else None
            converted[key] = (
                _init_dataclass(struct_class, value) if struct_class and isinstance(value, dict)
                else value
            )
        return typing.cast(BoxStateValue, converted)

    @property
    def box_game_trophy(self) -> GameTrophy:
        """Get the current value of the box_game_trophy key in box state"""
        value = self.app_client.state.box.get_value("box_game_trophy")
        if isinstance(value, dict) and "GameTrophy" in self._struct_classes:
            return _init_dataclass(self._struct_classes["GameTrophy"], value)  # type: ignore
        return typing.cast(GameTrophy, value)

    @property
    def box_game_state(self) -> "_MapState[int, GameState]":
        """Get values from the box_game_state map in box state"""
        return _MapState(
            self.app_client.state.box,
            "box_game_state",
            self._struct_classes.get("GameState")
        )

    @property
    def box_game_players(self) -> "_MapState[int, bytes]":
        """Get values from the box_game_players map in box state"""
        return _MapState(
            self.app_client.state.box,
            "box_game_players",
            None
        )

    @property
    def box_commit_rand(self) -> "_MapState[str, CommitRand]":
        """Get values from the box_commit_rand map in box state"""
        return _MapState(
            self.app_client.state.box,
            "box_commit_rand",
            self._struct_classes.get("CommitRand")
        )

_KeyType = typing.TypeVar("_KeyType")
_ValueType = typing.TypeVar("_ValueType")

class _AppClientStateMethodsProtocol(typing.Protocol):
    def get_map(self, map_name: str) -> dict[typing.Any, typing.Any]:
        ...
    def get_map_value(self, map_name: str, key: typing.Any) -> typing.Any | None:
        ...

class _MapState(typing.Generic[_KeyType, _ValueType]):
    """Generic class for accessing state maps with strongly typed keys and values"""

    def __init__(self, state_accessor: _AppClientStateMethodsProtocol, map_name: str,
                struct_class: typing.Type[_ValueType] | None = None):
        self._state_accessor = state_accessor
        self._map_name = map_name
        self._struct_class = struct_class

    def get_map(self) -> dict[_KeyType, _ValueType]:
        """Get all current values in the map"""
        result = self._state_accessor.get_map(self._map_name)
        if self._struct_class and result:
            return {k: _init_dataclass(self._struct_class, v) if isinstance(v, dict) else v
                    for k, v in result.items()}  # type: ignore
        return typing.cast(dict[_KeyType, _ValueType], result or {})

    def get_value(self, key: _KeyType) -> _ValueType | None:
        """Get a value from the map by key"""
        key_value = dataclasses.asdict(key) if dataclasses.is_dataclass(key) else key  # type: ignore
        value = self._state_accessor.get_map_value(self._map_name, key_value)
        if value is not None and self._struct_class and isinstance(value, dict):
            return _init_dataclass(self._struct_class, value)  # type: ignore
        return typing.cast(_ValueType | None, value)


class PieoutClient:
    """Client for interacting with Pieout smart contract"""

    @typing.overload
    def __init__(self, app_client: algokit_utils.AppClient) -> None: ...
    
    @typing.overload
    def __init__(
        self,
        *,
        algorand: _AlgoKitAlgorandClient,
        app_id: int,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> None: ...

    def __init__(
        self,
        app_client: algokit_utils.AppClient | None = None,
        *,
        algorand: _AlgoKitAlgorandClient | None = None,
        app_id: int | None = None,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> None:
        if app_client:
            self.app_client = app_client
        elif algorand and app_id:
            self.app_client = algokit_utils.AppClient(
                algokit_utils.AppClientParams(
                    algorand=algorand,
                    app_spec=APP_SPEC,
                    app_id=app_id,
                    app_name=app_name,
                    default_sender=default_sender,
                    default_signer=default_signer,
                    approval_source_map=approval_source_map,
                    clear_source_map=clear_source_map,
                )
            )
        else:
            raise ValueError("Either app_client or algorand and app_id must be provided")
    
        self.params = PieoutParams(self.app_client)
        self.create_transaction = PieoutCreateTransactionParams(self.app_client)
        self.send = PieoutSend(self.app_client)
        self.state = PieoutState(self.app_client)

    @staticmethod
    def from_creator_and_name(
        creator_address: str,
        app_name: str,
        algorand: _AlgoKitAlgorandClient,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
        ignore_cache: bool | None = None,
        app_lookup_cache: algokit_utils.ApplicationLookup | None = None,
    ) -> "PieoutClient":
        return PieoutClient(
            algokit_utils.AppClient.from_creator_and_name(
                creator_address=creator_address,
                app_name=app_name,
                app_spec=APP_SPEC,
                algorand=algorand,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
                ignore_cache=ignore_cache,
                app_lookup_cache=app_lookup_cache,
            )
        )
    
    @staticmethod
    def from_network(
        algorand: _AlgoKitAlgorandClient,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> "PieoutClient":
        return PieoutClient(
            algokit_utils.AppClient.from_network(
                app_spec=APP_SPEC,
                algorand=algorand,
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
            )
        )

    @property
    def app_id(self) -> int:
        return self.app_client.app_id
    
    @property
    def app_address(self) -> str:
        return self.app_client.app_address
    
    @property
    def app_name(self) -> str:
        return self.app_client.app_name
    
    @property
    def app_spec(self) -> algokit_utils.Arc56Contract:
        return self.app_client.app_spec
    
    @property
    def algorand(self) -> _AlgoKitAlgorandClient:
        return self.app_client.algorand

    def clone(
        self,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> "PieoutClient":
        return PieoutClient(
            self.app_client.clone(
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
            )
        )

    def new_group(self) -> "PieoutComposer":
        return PieoutComposer(self)

    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["add_resource_budget_play_game(uint64)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["calc_single_box_cost(uint8,uint16)uint64"],
        return_value: algokit_utils.ABIReturn | None
    ) -> int | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["read_gen_unix()uint64"],
        return_value: algokit_utils.ABIReturn | None
    ) -> int | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["read_game_state(uint64)(uint64,bool,uint8,uint8,uint8,uint8,uint8,uint16,uint64,uint64,address,address,address,address)"],
        return_value: algokit_utils.ABIReturn | None
    ) -> tuple[int, bool, int, int, int, int, int, int, int, int, str, str, str, str] | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["read_game_players(uint64)address[]"],
        return_value: algokit_utils.ABIReturn | None
    ) -> list[str] | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["read_commit_rand(account)(uint64,uint64,uint64)"],
        return_value: algokit_utils.ABIReturn | None
    ) -> tuple[int, int, int] | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["mint_trophy(pay,pay)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["claim_trophy()void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["new_game(uint64,pay,pay,pay)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["join_game(uint64,pay)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["get_box_commit_rand(pay)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["set_box_commit_rand(uint64)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["del_box_commit_rand_for_self(uint64)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["del_box_commit_rand_for_other(account)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["play_game(uint64)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["trigger_game_prog(uint64,uint8)bool"],
        return_value: algokit_utils.ABIReturn | None
    ) -> bool | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["reset_game(uint64,pay)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["delete_game(uint64)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["generate()void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["terminate()void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: str,
        return_value: algokit_utils.ABIReturn | None
    ) -> algokit_utils.ABIValue | algokit_utils.ABIStruct | None: ...

    def decode_return_value(
        self,
        method: str,
        return_value: algokit_utils.ABIReturn | None
    ) -> algokit_utils.ABIValue | algokit_utils.ABIStruct | None | bool | int | list[str] | tuple[int, bool, int, int, int, int, int, int, int, int, str, str, str, str] | tuple[int, int, int]:
        """Decode ABI return value for the given method."""
        if return_value is None:
            return None
    
        arc56_method = self.app_spec.get_arc56_method(method)
        decoded = return_value.get_arc56_value(arc56_method, self.app_spec.structs)
    
        # If method returns a struct, convert the dict to appropriate dataclass
        if (arc56_method and
            arc56_method.returns and
            arc56_method.returns.struct and
            isinstance(decoded, dict)):
            struct_class = globals().get(arc56_method.returns.struct)
            if struct_class:
                return struct_class(**typing.cast(dict, decoded))
        return decoded


@dataclasses.dataclass(frozen=True)
class PieoutMethodCallCreateParams(
    algokit_utils.AppClientCreateSchema, algokit_utils.BaseAppClientMethodCallParams[
        typing.Any,
        str | None,
    ]
):
    """Parameters for creating Pieout contract using ABI"""
    on_complete: typing.Literal[OnComplete.NoOpOC] | None = None
    method: str | None = None

    def to_algokit_utils_params(self) -> algokit_utils.AppClientMethodCallCreateParams:
        method_args = _parse_abi_args(self.args)
        return algokit_utils.AppClientMethodCallCreateParams(
            **{
                **self.__dict__,
                "method": self.method or getattr(self.args, "abi_method_signature", None),
                "args": method_args,
            }
        )

@dataclasses.dataclass(frozen=True)
class PieoutMethodCallDeleteParams(
    algokit_utils.BaseAppClientMethodCallParams[
        typing.Any,
        str | None,
    ]
):
    """Parameters for calling Pieout contract using ABI"""
    on_complete: typing.Literal[OnComplete.DeleteApplicationOC] | None = None
    method: str | None = None

    def to_algokit_utils_params(self) -> algokit_utils.AppClientMethodCallParams:
        method_args = _parse_abi_args(self.args)
        return algokit_utils.AppClientMethodCallParams(
            **{
                **self.__dict__,
                "method": self.method or getattr(self.args, "abi_method_signature", None),
                "args": method_args,
            }
        )

class PieoutFactory(algokit_utils.TypedAppFactoryProtocol[PieoutMethodCallCreateParams, None, PieoutMethodCallDeleteParams]):
    """Factory for deploying and managing PieoutClient smart contracts"""

    def __init__(
        self,
        algorand: _AlgoKitAlgorandClient,
        *,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        version: str | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None,
    ):
        self.app_factory = algokit_utils.AppFactory(
            params=algokit_utils.AppFactoryParams(
                algorand=algorand,
                app_spec=APP_SPEC,
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                version=version,
                compilation_params=compilation_params,
            )
        )
        self.params = PieoutFactoryParams(self.app_factory)
        self.create_transaction = PieoutFactoryCreateTransaction(self.app_factory)
        self.send = PieoutFactorySend(self.app_factory)

    @property
    def app_name(self) -> str:
        return self.app_factory.app_name
    
    @property
    def app_spec(self) -> algokit_utils.Arc56Contract:
        return self.app_factory.app_spec
    
    @property
    def algorand(self) -> _AlgoKitAlgorandClient:
        return self.app_factory.algorand

    def deploy(
        self,
        *,
        on_update: algokit_utils.OnUpdate | None = None,
        on_schema_break: algokit_utils.OnSchemaBreak | None = None,
        create_params: PieoutMethodCallCreateParams | None = None,
        update_params: None = None,
        delete_params: PieoutMethodCallDeleteParams | None = None,
        existing_deployments: algokit_utils.ApplicationLookup | None = None,
        ignore_cache: bool = False,
        app_name: str | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None,
        send_params: algokit_utils.SendParams | None = None,
    ) -> tuple[PieoutClient, algokit_utils.AppFactoryDeployResult]:
        """Deploy the application"""
        deploy_response = self.app_factory.deploy(
            on_update=on_update,
            on_schema_break=on_schema_break,
            create_params=create_params.to_algokit_utils_params() if create_params else None,
            update_params=update_params,
            delete_params=delete_params.to_algokit_utils_params() if delete_params else None,
            existing_deployments=existing_deployments,
            ignore_cache=ignore_cache,
            app_name=app_name,
            compilation_params=compilation_params,
            send_params=send_params,
        )

        return PieoutClient(deploy_response[0]), deploy_response[1]

    def get_app_client_by_creator_and_name(
        self,
        creator_address: str,
        app_name: str,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        ignore_cache: bool | None = None,
        app_lookup_cache: algokit_utils.ApplicationLookup | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> PieoutClient:
        """Get an app client by creator address and name"""
        return PieoutClient(
            self.app_factory.get_app_client_by_creator_and_name(
                creator_address,
                app_name,
                default_sender,
                default_signer,
                ignore_cache,
                app_lookup_cache,
                approval_source_map,
                clear_source_map,
            )
        )

    def get_app_client_by_id(
        self,
        app_id: int,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> PieoutClient:
        """Get an app client by app ID"""
        return PieoutClient(
            self.app_factory.get_app_client_by_id(
                app_id,
                app_name,
                default_sender,
                default_signer,
                approval_source_map,
                clear_source_map,
            )
        )


class PieoutFactoryParams:
    """Parameters for creating transactions for Pieout contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory
        self.create = PieoutFactoryCreateParams(app_factory)
        self.update = PieoutFactoryUpdateParams(app_factory)
        self.delete = PieoutFactoryDeleteParams(app_factory)

class PieoutFactoryCreateParams:
    """Parameters for 'create' operations of Pieout contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateParams:
        """Creates an instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.bare.create(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
            compilation_params=compilation_params)

    def add_resource_budget_play_game(
        self,
        args: tuple[int] | AddResourceBudgetPlayGameArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the add_resource_budget_play_game(uint64)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "add_resource_budget_play_game(uint64)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def calc_single_box_cost(
        self,
        args: tuple[int, int] | CalcSingleBoxCostArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the calc_single_box_cost(uint8,uint16)uint64 ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "calc_single_box_cost(uint8,uint16)uint64",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def read_gen_unix(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the read_gen_unix()uint64 ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "read_gen_unix()uint64",
                "args": None,
                }
            ),
            compilation_params=compilation_params
        )

    def read_game_state(
        self,
        args: tuple[int] | ReadGameStateArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the read_game_state(uint64)(uint64,bool,uint8,uint8,uint8,uint8,uint8,uint16,uint64,uint64,address,address,address,address) ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "read_game_state(uint64)(uint64,bool,uint8,uint8,uint8,uint8,uint8,uint16,uint64,uint64,address,address,address,address)",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def read_game_players(
        self,
        args: tuple[int] | ReadGamePlayersArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the read_game_players(uint64)address[] ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "read_game_players(uint64)address[]",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def read_commit_rand(
        self,
        args: tuple[str | bytes] | ReadCommitRandArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the read_commit_rand(account)(uint64,uint64,uint64) ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "read_commit_rand(account)(uint64,uint64,uint64)",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def mint_trophy(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument, algokit_utils.AppMethodCallTransactionArgument] | MintTrophyArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the mint_trophy(pay,pay)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "mint_trophy(pay,pay)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def claim_trophy(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the claim_trophy()void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "claim_trophy()void",
                "args": None,
                }
            ),
            compilation_params=compilation_params
        )

    def new_game(
        self,
        args: tuple[int, algokit_utils.AppMethodCallTransactionArgument, algokit_utils.AppMethodCallTransactionArgument, algokit_utils.AppMethodCallTransactionArgument] | NewGameArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the new_game(uint64,pay,pay,pay)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "new_game(uint64,pay,pay,pay)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def join_game(
        self,
        args: tuple[int, algokit_utils.AppMethodCallTransactionArgument] | JoinGameArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the join_game(uint64,pay)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "join_game(uint64,pay)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def get_box_commit_rand(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument] | GetBoxCommitRandArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the get_box_commit_rand(pay)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "get_box_commit_rand(pay)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def set_box_commit_rand(
        self,
        args: tuple[int] | SetBoxCommitRandArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the set_box_commit_rand(uint64)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "set_box_commit_rand(uint64)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def del_box_commit_rand_for_self(
        self,
        args: tuple[int] | DelBoxCommitRandForSelfArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the del_box_commit_rand_for_self(uint64)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "del_box_commit_rand_for_self(uint64)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def del_box_commit_rand_for_other(
        self,
        args: tuple[str | bytes] | DelBoxCommitRandForOtherArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the del_box_commit_rand_for_other(account)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "del_box_commit_rand_for_other(account)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def play_game(
        self,
        args: tuple[int] | PlayGameArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the play_game(uint64)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "play_game(uint64)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def trigger_game_prog(
        self,
        args: tuple[int, int] | TriggerGameProgArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the trigger_game_prog(uint64,uint8)bool ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "trigger_game_prog(uint64,uint8)bool",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def reset_game(
        self,
        args: tuple[int, algokit_utils.AppMethodCallTransactionArgument] | ResetGameArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the reset_game(uint64,pay)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "reset_game(uint64,pay)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def delete_game(
        self,
        args: tuple[int] | DeleteGameArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the delete_game(uint64)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "delete_game(uint64)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def generate(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the generate()void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "generate()void",
                "args": None,
                }
            ),
            compilation_params=compilation_params
        )

    def terminate(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the terminate()void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "terminate()void",
                "args": None,
                }
            ),
            compilation_params=compilation_params
        )

class PieoutFactoryUpdateParams:
    """Parameters for 'update' operations of Pieout contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        
    ) -> algokit_utils.AppUpdateParams:
        """Updates an instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.bare.deploy_update(
            algokit_utils.AppClientBareCallParams(**dataclasses.asdict(params)),
            )

class PieoutFactoryDeleteParams:
    """Parameters for 'delete' operations of Pieout contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        
    ) -> algokit_utils.AppDeleteParams:
        """Deletes an instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.bare.deploy_delete(
            algokit_utils.AppClientBareCallParams(**dataclasses.asdict(params)),
            )


class PieoutFactoryCreateTransaction:
    """Create transactions for Pieout contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory
        self.create = PieoutFactoryCreateTransactionCreate(app_factory)


class PieoutFactoryCreateTransactionCreate:
    """Create new instances of Pieout contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
    ) -> Transaction:
        """Creates a new instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.create_transaction.bare.create(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
        )


class PieoutFactorySend:
    """Send calls to Pieout contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory
        self.create = PieoutFactorySendCreate(app_factory)


class PieoutFactorySendCreate:
    """Send create calls to Pieout contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        send_params: algokit_utils.SendParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None,
    ) -> tuple[PieoutClient, algokit_utils.SendAppCreateTransactionResult]:
        """Creates a new instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        result = self.app_factory.send.bare.create(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
            send_params=send_params,
            compilation_params=compilation_params
        )
        return PieoutClient(result[0]), result[1]

    def generate(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        send_params: algokit_utils.SendParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> tuple[PieoutClient, algokit_utils.AppFactoryCreateMethodCallResult[None]]:
            """Creates and sends a transaction using the generate()void ABI method"""
            params = params or algokit_utils.CommonAppCallCreateParams()
            client, result = self.app_factory.send.create(
                algokit_utils.AppFactoryCreateMethodCallParams(
                    **{
                    **dataclasses.asdict(params),
                    "method": "generate()void",
                    "args": None,
                    }
                ),
                send_params=send_params,
                compilation_params=compilation_params
            )
            return_value = None if result.abi_return is None else typing.cast(None, result.abi_return)
    
            return PieoutClient(client), algokit_utils.AppFactoryCreateMethodCallResult[None](
                **{
                    **result.__dict__,
                    "app_id": result.app_id,
                    "abi_return": return_value,
                    "transaction": result.transaction,
                    "confirmation": result.confirmation,
                    "group_id": result.group_id,
                    "tx_ids": result.tx_ids,
                    "transactions": result.transactions,
                    "confirmations": result.confirmations,
                    "app_address": result.app_address,
                }
            )


class _PieoutDeleteComposer:
    def __init__(self, composer: "PieoutComposer"):
        self.composer = composer
    def terminate(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "PieoutComposer":
        self.composer._composer.add_app_delete_method_call(
            self.composer.client.params.delete.terminate(
                
                params=params,
                
            )
        )
        self.composer._result_mappers.append(
            lambda v: self.composer.client.decode_return_value(
                "terminate()void", v
            )
        )
        return self.composer


class PieoutComposer:
    """Composer for creating transaction groups for Pieout contract calls"""

    def __init__(self, client: "PieoutClient"):
        self.client = client
        self._composer = client.algorand.new_group()
        self._result_mappers: list[typing.Callable[[algokit_utils.ABIReturn | None], object] | None] = []

    @property
    def delete(self) -> "_PieoutDeleteComposer":
        return _PieoutDeleteComposer(self)

    def add_resource_budget_play_game(
        self,
        args: tuple[int] | AddResourceBudgetPlayGameArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "PieoutComposer":
        self._composer.add_app_call_method_call(
            self.client.params.add_resource_budget_play_game(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "add_resource_budget_play_game(uint64)void", v
            )
        )
        return self

    def calc_single_box_cost(
        self,
        args: tuple[int, int] | CalcSingleBoxCostArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "PieoutComposer":
        self._composer.add_app_call_method_call(
            self.client.params.calc_single_box_cost(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "calc_single_box_cost(uint8,uint16)uint64", v
            )
        )
        return self

    def read_gen_unix(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "PieoutComposer":
        self._composer.add_app_call_method_call(
            self.client.params.read_gen_unix(
                
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "read_gen_unix()uint64", v
            )
        )
        return self

    def read_game_state(
        self,
        args: tuple[int] | ReadGameStateArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "PieoutComposer":
        self._composer.add_app_call_method_call(
            self.client.params.read_game_state(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "read_game_state(uint64)(uint64,bool,uint8,uint8,uint8,uint8,uint8,uint16,uint64,uint64,address,address,address,address)", v
            )
        )
        return self

    def read_game_players(
        self,
        args: tuple[int] | ReadGamePlayersArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "PieoutComposer":
        self._composer.add_app_call_method_call(
            self.client.params.read_game_players(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "read_game_players(uint64)address[]", v
            )
        )
        return self

    def read_commit_rand(
        self,
        args: tuple[str | bytes] | ReadCommitRandArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "PieoutComposer":
        self._composer.add_app_call_method_call(
            self.client.params.read_commit_rand(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "read_commit_rand(account)(uint64,uint64,uint64)", v
            )
        )
        return self

    def mint_trophy(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument, algokit_utils.AppMethodCallTransactionArgument] | MintTrophyArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "PieoutComposer":
        self._composer.add_app_call_method_call(
            self.client.params.mint_trophy(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "mint_trophy(pay,pay)void", v
            )
        )
        return self

    def claim_trophy(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "PieoutComposer":
        self._composer.add_app_call_method_call(
            self.client.params.claim_trophy(
                
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "claim_trophy()void", v
            )
        )
        return self

    def new_game(
        self,
        args: tuple[int, algokit_utils.AppMethodCallTransactionArgument, algokit_utils.AppMethodCallTransactionArgument, algokit_utils.AppMethodCallTransactionArgument] | NewGameArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "PieoutComposer":
        self._composer.add_app_call_method_call(
            self.client.params.new_game(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "new_game(uint64,pay,pay,pay)void", v
            )
        )
        return self

    def join_game(
        self,
        args: tuple[int, algokit_utils.AppMethodCallTransactionArgument] | JoinGameArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "PieoutComposer":
        self._composer.add_app_call_method_call(
            self.client.params.join_game(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "join_game(uint64,pay)void", v
            )
        )
        return self

    def get_box_commit_rand(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument] | GetBoxCommitRandArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "PieoutComposer":
        self._composer.add_app_call_method_call(
            self.client.params.get_box_commit_rand(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "get_box_commit_rand(pay)void", v
            )
        )
        return self

    def set_box_commit_rand(
        self,
        args: tuple[int] | SetBoxCommitRandArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "PieoutComposer":
        self._composer.add_app_call_method_call(
            self.client.params.set_box_commit_rand(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "set_box_commit_rand(uint64)void", v
            )
        )
        return self

    def del_box_commit_rand_for_self(
        self,
        args: tuple[int] | DelBoxCommitRandForSelfArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "PieoutComposer":
        self._composer.add_app_call_method_call(
            self.client.params.del_box_commit_rand_for_self(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "del_box_commit_rand_for_self(uint64)void", v
            )
        )
        return self

    def del_box_commit_rand_for_other(
        self,
        args: tuple[str | bytes] | DelBoxCommitRandForOtherArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "PieoutComposer":
        self._composer.add_app_call_method_call(
            self.client.params.del_box_commit_rand_for_other(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "del_box_commit_rand_for_other(account)void", v
            )
        )
        return self

    def play_game(
        self,
        args: tuple[int] | PlayGameArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "PieoutComposer":
        self._composer.add_app_call_method_call(
            self.client.params.play_game(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "play_game(uint64)void", v
            )
        )
        return self

    def trigger_game_prog(
        self,
        args: tuple[int, int] | TriggerGameProgArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "PieoutComposer":
        self._composer.add_app_call_method_call(
            self.client.params.trigger_game_prog(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "trigger_game_prog(uint64,uint8)bool", v
            )
        )
        return self

    def reset_game(
        self,
        args: tuple[int, algokit_utils.AppMethodCallTransactionArgument] | ResetGameArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "PieoutComposer":
        self._composer.add_app_call_method_call(
            self.client.params.reset_game(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "reset_game(uint64,pay)void", v
            )
        )
        return self

    def delete_game(
        self,
        args: tuple[int] | DeleteGameArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "PieoutComposer":
        self._composer.add_app_call_method_call(
            self.client.params.delete_game(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "delete_game(uint64)void", v
            )
        )
        return self

    def generate(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "PieoutComposer":
        self._composer.add_app_call_method_call(
            self.client.params.generate(
                
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "generate()void", v
            )
        )
        return self

    def clear_state(
        self,
        *,
        args: list[bytes] | None = None,
        params: algokit_utils.CommonAppCallParams | None = None,
    ) -> "PieoutComposer":
        params=params or algokit_utils.CommonAppCallParams()
        self._composer.add_app_call(
            self.client.params.clear_state(
                algokit_utils.AppClientBareCallParams(
                    **{
                        **dataclasses.asdict(params),
                        "args": args
                    }
                )
            )
        )
        return self
    
    def add_transaction(
        self, txn: Transaction, signer: TransactionSigner | None = None
    ) -> "PieoutComposer":
        self._composer.add_transaction(txn, signer)
        return self
    
    def composer(self) -> algokit_utils.TransactionComposer:
        return self._composer
    
    def simulate(
        self,
        allow_more_logs: bool | None = None,
        allow_empty_signatures: bool | None = None,
        allow_unnamed_resources: bool | None = None,
        extra_opcode_budget: int | None = None,
        exec_trace_config: SimulateTraceConfig | None = None,
        simulation_round: int | None = None,
        skip_signatures: bool | None = None,
    ) -> algokit_utils.SendAtomicTransactionComposerResults:
        return self._composer.simulate(
            allow_more_logs=allow_more_logs,
            allow_empty_signatures=allow_empty_signatures,
            allow_unnamed_resources=allow_unnamed_resources,
            extra_opcode_budget=extra_opcode_budget,
            exec_trace_config=exec_trace_config,
            simulation_round=simulation_round,
            skip_signatures=skip_signatures,
        )
    
    def send(
        self,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAtomicTransactionComposerResults:
        return self._composer.send(send_params)
