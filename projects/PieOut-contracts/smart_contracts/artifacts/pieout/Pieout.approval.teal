#pragma version 10
#pragma typetrack false

// smart_contracts.pieout.contract.Pieout.__algopy_entrypoint_with_init() -> uint64:
main:
    intcblock 1 0 2 32 1000 3600 32000 28900 6364136223846793005 1442695040888963407 4294967295 67300 65535 TMPL_GEN_UNIX TMPL_DELETABLE
    bytecblock "c_" 0x00 "t_" "p_" "s_" 0x151f7c75 "score_id" "ath_address" 0x0000000000000000000000000000000000000000000000000000000000000000 "game_id" "ath_score" 0x0020 0x068101
    // smart_contracts/pieout/contract.py:31-32
    // # Smart contract class
    // class Pieout(ARC4Contract):
    txn NumAppArgs
    bz main_after_if_else@24
    pushbytess 0x6333cd9d 0xb66d2f56 0x627a73af 0x7401ca83 0x17c32986 0x5be219f0 0xb2460ef6 0x3ae74f74 0xda7b6785 0x71af966e 0x74c7e053 0x9650d5ce 0x32e16398 0xa0ecbe13 0x1a789ed0 0x2c3a2192 0x102875e7 0x1898a02e 0x5ff16da4 // method "calc_single_box_cost(uint8,uint16)uint64", method "read_gen_unix()uint64", method "read_game_state(uint64)(uint64,bool,uint8,uint8,uint8,uint8,uint8,uint16,uint64,uint64,address,address,address,address)", method "read_game_players(uint64)address[]", method "read_commit_rand(account)(uint64,uint64,uint64)", method "generate()void", method "mint_trophy(pay,pay)void", method "claim_trophy()void", method "new_game(uint64,pay,pay,pay)void", method "join_game(uint64,pay)void", method "get_box_commit_rand(pay)void", method "set_box_commit_rand(uint64)void", method "del_box_commit_rand_for_self(uint64)void", method "del_box_commit_rand_for_other(account)void", method "play_game(uint64)void", method "trigger_game_prog(uint64,uint8)bool", method "reset_game(uint64,pay)void", method "delete_game(uint64)void", method "terminate()void"
    txna ApplicationArgs 0
    match main_calc_single_box_cost_route@5 main_read_gen_unix_route@6 main_read_game_state_route@7 main_read_game_players_route@8 main_read_commit_rand_route@9 main_generate_route@10 main_mint_trophy_route@11 main_claim_trophy_route@12 main_new_game_route@13 main_join_game_route@14 main_get_box_commit_rand_route@15 main_set_box_commit_rand_route@16 main_del_box_commit_rand_for_self_route@17 main_del_box_commit_rand_for_other_route@18 main_play_game_route@19 main_trigger_game_prog_route@20 main_reset_game_route@21 main_delete_game_route@22 main_terminate_route@23

main_after_if_else@24:
    // smart_contracts/pieout/contract.py:31-32
    // # Smart contract class
    // class Pieout(ARC4Contract):
    intc_1 // 0
    return

main_terminate_route@23:
    // smart_contracts/pieout/contract.py:738-739
    // # Allow application creator to delete the smart contract client
    // @arc4.abimethod(allow_actions=["DeleteApplication"])
    txn OnCompletion
    pushint 5 // DeleteApplication
    ==
    assert // OnCompletion is not DeleteApplication
    txn ApplicationID
    assert // can only call when not creating
    callsub terminate
    intc_0 // 1
    return

main_delete_game_route@22:
    // smart_contracts/pieout/contract.py:670-671
    // # Delete existing game instance
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/pieout/contract.py:31-32
    // # Smart contract class
    // class Pieout(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    // smart_contracts/pieout/contract.py:670-671
    // # Delete existing game instance
    // @arc4.abimethod
    callsub delete_game
    intc_0 // 1
    return

main_reset_game_route@21:
    // smart_contracts/pieout/contract.py:616-617
    // # Reset existing game instance
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/pieout/contract.py:31-32
    // # Smart contract class
    // class Pieout(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txn GroupIndex
    intc_0 // 1
    -
    dup
    gtxns TypeEnum
    intc_0 // pay
    ==
    assert // transaction type is pay
    // smart_contracts/pieout/contract.py:616-617
    // # Reset existing game instance
    // @arc4.abimethod
    callsub reset_game
    intc_0 // 1
    return

main_trigger_game_prog_route@20:
    // smart_contracts/pieout/contract.py:581-582
    // # Allow an active player to check for a game event and trigger its progression
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/pieout/contract.py:31-32
    // # Smart contract class
    // class Pieout(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    // smart_contracts/pieout/contract.py:581-582
    // # Allow an active player to check for a game event and trigger its progression
    // @arc4.abimethod
    callsub trigger_game_prog
    bytec 5 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_play_game_route@19:
    // smart_contracts/pieout/contract.py:472-473
    // # Resolve the player's score associated with the specified game ID, updating game state accordingly
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/pieout/contract.py:31-32
    // # Smart contract class
    // class Pieout(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    // smart_contracts/pieout/contract.py:472-473
    // # Resolve the player's score associated with the specified game ID, updating game state accordingly
    // @arc4.abimethod
    callsub play_game
    intc_0 // 1
    return

main_del_box_commit_rand_for_other_route@18:
    // smart_contracts/pieout/contract.py:441-442
    // # Allow caller to delete box commit rand contents for another account
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/pieout/contract.py:31-32
    // # Smart contract class
    // class Pieout(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txnas Accounts
    // smart_contracts/pieout/contract.py:441-442
    // # Allow caller to delete box commit rand contents for another account
    // @arc4.abimethod
    callsub del_box_commit_rand_for_other
    intc_0 // 1
    return

main_del_box_commit_rand_for_self_route@17:
    // smart_contracts/pieout/contract.py:399-400
    // # Allow caller to delete box commit rand contents for their own account
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/pieout/contract.py:31-32
    // # Smart contract class
    // class Pieout(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    // smart_contracts/pieout/contract.py:399-400
    // # Allow caller to delete box commit rand contents for their own account
    // @arc4.abimethod
    callsub del_box_commit_rand_for_self
    intc_0 // 1
    return

main_set_box_commit_rand_route@16:
    // smart_contracts/pieout/contract.py:358-359
    // # Set box commit rand contents used for obtaining on-chain randomness and playing the game
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/pieout/contract.py:31-32
    // # Smart contract class
    // class Pieout(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    // smart_contracts/pieout/contract.py:358-359
    // # Set box commit rand contents used for obtaining on-chain randomness and playing the game
    // @arc4.abimethod
    callsub set_box_commit_rand
    intc_0 // 1
    return

main_get_box_commit_rand_route@15:
    // smart_contracts/pieout/contract.py:337-338
    // # Get box commit rand contents with default start values
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/pieout/contract.py:31-32
    // # Smart contract class
    // class Pieout(ARC4Contract):
    txn GroupIndex
    intc_0 // 1
    -
    dup
    gtxns TypeEnum
    intc_0 // pay
    ==
    assert // transaction type is pay
    // smart_contracts/pieout/contract.py:337-338
    // # Get box commit rand contents with default start values
    // @arc4.abimethod
    callsub get_box_commit_rand
    intc_0 // 1
    return

main_join_game_route@14:
    // smart_contracts/pieout/contract.py:270-271
    // # Join existing game instance
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/pieout/contract.py:31-32
    // # Smart contract class
    // class Pieout(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txn GroupIndex
    intc_0 // 1
    -
    dup
    gtxns TypeEnum
    intc_0 // pay
    ==
    assert // transaction type is pay
    // smart_contracts/pieout/contract.py:270-271
    // # Join existing game instance
    // @arc4.abimethod
    callsub join_game
    intc_0 // 1
    return

main_new_game_route@13:
    // smart_contracts/pieout/contract.py:203-204
    // # Create new game instance with a unique ID
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/pieout/contract.py:31-32
    // # Smart contract class
    // class Pieout(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txn GroupIndex
    pushint 3 // 3
    -
    dup
    gtxns TypeEnum
    intc_0 // pay
    ==
    assert // transaction type is pay
    txn GroupIndex
    intc_2 // 2
    -
    dup
    gtxns TypeEnum
    intc_0 // pay
    ==
    assert // transaction type is pay
    txn GroupIndex
    intc_0 // 1
    -
    dup
    gtxns TypeEnum
    intc_0 // pay
    ==
    assert // transaction type is pay
    // smart_contracts/pieout/contract.py:203-204
    // # Create new game instance with a unique ID
    // @arc4.abimethod
    callsub new_game
    intc_0 // 1
    return

main_claim_trophy_route@12:
    // smart_contracts/pieout/contract.py:185-186
    // # Allow the ATH address to add the trophy to their asset balance via an asset transfer inner transaction
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub claim_trophy
    intc_0 // 1
    return

main_mint_trophy_route@11:
    // smart_contracts/pieout/contract.py:139-140
    // # Allow application creator to mint a one-time NFT asset used as trophy token to honor the ATH address
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/pieout/contract.py:31-32
    // # Smart contract class
    // class Pieout(ARC4Contract):
    txn GroupIndex
    intc_2 // 2
    -
    dup
    gtxns TypeEnum
    intc_0 // pay
    ==
    assert // transaction type is pay
    txn GroupIndex
    intc_0 // 1
    -
    dup
    gtxns TypeEnum
    intc_0 // pay
    ==
    assert // transaction type is pay
    // smart_contracts/pieout/contract.py:139-140
    // # Allow application creator to mint a one-time NFT asset used as trophy token to honor the ATH address
    // @arc4.abimethod
    callsub mint_trophy
    intc_0 // 1
    return

main_generate_route@10:
    // smart_contracts/pieout/contract.py:125-126
    // # Generate the smart contract application client with default values
    // @arc4.abimethod(create="require")
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    !
    assert // can only call when creating
    callsub generate
    intc_0 // 1
    return

main_read_commit_rand_route@9:
    // smart_contracts/pieout/contract.py:115-116
    // # Read the smart contract application commit round box for given account
    // @arc4.abimethod(readonly=True)
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/pieout/contract.py:31-32
    // # Smart contract class
    // class Pieout(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txnas Accounts
    // smart_contracts/pieout/contract.py:115-116
    // # Read the smart contract application commit round box for given account
    // @arc4.abimethod(readonly=True)
    callsub read_commit_rand
    bytec 5 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_read_game_players_route@8:
    // smart_contracts/pieout/contract.py:94-95
    // # Read the smart contract application game players box for given game id
    // @arc4.abimethod(readonly=True)
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/pieout/contract.py:31-32
    // # Smart contract class
    // class Pieout(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    // smart_contracts/pieout/contract.py:94-95
    // # Read the smart contract application game players box for given game id
    // @arc4.abimethod(readonly=True)
    callsub read_game_players
    bytec 5 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_read_game_state_route@7:
    // smart_contracts/pieout/contract.py:66-67
    // # Read the smart contract application game state box for given game id
    // @arc4.abimethod(readonly=True)
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/pieout/contract.py:31-32
    // # Smart contract class
    // class Pieout(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    // smart_contracts/pieout/contract.py:66-67
    // # Read the smart contract application game state box for given game id
    // @arc4.abimethod(readonly=True)
    callsub read_game_state
    bytec 5 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_read_gen_unix_route@6:
    // smart_contracts/pieout/contract.py:61-62
    // # Read the smart contract application genesis timestamp in Unix format
    // @arc4.abimethod(readonly=True)
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/pieout/contract.py:64
    // return TemplateVar[UInt64]("GEN_UNIX")
    intc 13 // TMPL_GEN_UNIX
    // smart_contracts/pieout/contract.py:61-62
    // # Read the smart contract application genesis timestamp in Unix format
    // @arc4.abimethod(readonly=True)
    itob
    bytec 5 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_calc_single_box_cost_route@5:
    // smart_contracts/pieout/contract.py:47-48
    // # Calculate the minimum balance requirement (MBR) cost for storing a single box unit
    // @arc4.abimethod(readonly=True)
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/pieout/contract.py:31-32
    // # Smart contract class
    // class Pieout(ARC4Contract):
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    // smart_contracts/pieout/contract.py:47-48
    // # Calculate the minimum balance requirement (MBR) cost for storing a single box unit
    // @arc4.abimethod(readonly=True)
    callsub calc_single_box_cost
    itob
    bytec 5 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return


// smart_contracts.pieout.subroutines.payout_itxn(receiver: bytes, amount: uint64, note: bytes) -> void:
payout_itxn:
    // smart_contracts/pieout/subroutines.py:50-52
    // # Execute a payout payment inner transaction
    // @subroutine
    // def payout_itxn(receiver: Account, amount: UInt64, note: String) -> None:
    proto 3 0
    // smart_contracts/pieout/subroutines.py:53-57
    // itxn.Payment(
    //     receiver=receiver,
    //     amount=amount,
    //     note=note,
    // ).submit()
    itxn_begin
    frame_dig -1
    itxn_field Note
    frame_dig -2
    itxn_field Amount
    frame_dig -3
    itxn_field Receiver
    // smart_contracts/pieout/subroutines.py:53
    // itxn.Payment(
    intc_0 // pay
    itxn_field TypeEnum
    intc_1 // 0
    itxn_field Fee
    // smart_contracts/pieout/subroutines.py:53-57
    // itxn.Payment(
    //     receiver=receiver,
    //     amount=amount,
    //     note=note,
    // ).submit()
    itxn_submit
    retsub


// smart_contracts.pieout.subroutines.resolve_receiver_by_prio(acc1: bytes, acc2: bytes, acc3: bytes) -> bytes:
resolve_receiver_by_prio:
    // smart_contracts/pieout/subroutines.py:59-65
    // # Resolve reciever account address by priority
    // @subroutine
    // def resolve_receiver_by_prio(
    //     acc1: Account,
    //     acc2: Account,
    //     acc3: Account,
    // ) -> Account:
    proto 3 1
    // smart_contracts/pieout/subroutines.py:66
    // if acc1 != Global.zero_address and op.AcctParamsGet.acct_balance(acc1)[1]:
    frame_dig -3
    global ZeroAddress
    !=
    bz resolve_receiver_by_prio_else_body@3
    frame_dig -3
    acct_params_get AcctBalance
    bury 1
    bz resolve_receiver_by_prio_else_body@3
    // smart_contracts/pieout/subroutines.py:67
    // return acc1
    frame_dig -3
    retsub

resolve_receiver_by_prio_else_body@3:
    // smart_contracts/pieout/subroutines.py:68
    // elif acc2 != Global.zero_address and op.AcctParamsGet.acct_balance(acc2)[1]:
    frame_dig -2
    global ZeroAddress
    !=
    bz resolve_receiver_by_prio_else_body@6
    frame_dig -2
    acct_params_get AcctBalance
    bury 1
    bz resolve_receiver_by_prio_else_body@6
    // smart_contracts/pieout/subroutines.py:69
    // return acc2
    frame_dig -2
    retsub

resolve_receiver_by_prio_else_body@6:
    // smart_contracts/pieout/subroutines.py:70
    // elif acc3 != Global.zero_address and op.AcctParamsGet.acct_balance(acc3)[1]:
    frame_dig -1
    global ZeroAddress
    !=
    bz resolve_receiver_by_prio_else_body@9
    frame_dig -1
    acct_params_get AcctBalance
    bury 1
    bz resolve_receiver_by_prio_else_body@9
    // smart_contracts/pieout/subroutines.py:71
    // return acc3
    frame_dig -1
    retsub

resolve_receiver_by_prio_else_body@9:
    // smart_contracts/pieout/subroutines.py:73
    // Txn.sender != Global.zero_address
    txn Sender
    global ZeroAddress
    !=
    // smart_contracts/pieout/subroutines.py:73-74
    // Txn.sender != Global.zero_address
    // and op.AcctParamsGet.acct_balance(Txn.sender)[1]
    bz resolve_receiver_by_prio_else_body@12
    // smart_contracts/pieout/subroutines.py:74
    // and op.AcctParamsGet.acct_balance(Txn.sender)[1]
    txn Sender
    acct_params_get AcctBalance
    bury 1
    // smart_contracts/pieout/subroutines.py:73-74
    // Txn.sender != Global.zero_address
    // and op.AcctParamsGet.acct_balance(Txn.sender)[1]
    bz resolve_receiver_by_prio_else_body@12
    // smart_contracts/pieout/subroutines.py:76
    // return Txn.sender
    txn Sender
    retsub

resolve_receiver_by_prio_else_body@12:
    // smart_contracts/pieout/subroutines.py:78
    // return Global.current_application_address
    global CurrentApplicationAddress
    retsub


// smart_contracts.pieout.subroutines.reset_box_commit_rand(box_commit_rand: bytes, account: bytes, round_delta: uint64) -> void:
reset_box_commit_rand:
    // smart_contracts/pieout/subroutines.py:80-86
    // # Reset box commit rand values back to its initial default state
    // @subroutine
    // def reset_box_commit_rand(
    //     box_commit_rand: BoxMap[Account, stc.CommitRand],
    //     account: Account,
    //     round_delta: UInt64
    //     ) -> None:
    proto 3 0
    // smart_contracts/pieout/subroutines.py:90
    // expiry_round=arc4.UInt64(Global.round + round_delta),
    global Round
    frame_dig -1
    +
    itob
    // smart_contracts/pieout/subroutines.py:87-91
    // box_commit_rand[account] = stc.CommitRand(
    //     game_id=arc4.UInt64(0),
    //     commit_round=arc4.UInt64(0),
    //     expiry_round=arc4.UInt64(Global.round + round_delta),
    // )
    pushbytes 0x00000000000000000000000000000000
    swap
    concat
    // smart_contracts/pieout/subroutines.py:87
    // box_commit_rand[account] = stc.CommitRand(
    frame_dig -3
    frame_dig -2
    concat
    // smart_contracts/pieout/subroutines.py:87-91
    // box_commit_rand[account] = stc.CommitRand(
    //     game_id=arc4.UInt64(0),
    //     commit_round=arc4.UInt64(0),
    //     expiry_round=arc4.UInt64(Global.round + round_delta),
    // )
    swap
    box_put
    retsub


// smart_contracts.pieout.subroutines.check_acc_in_game(game_id: uint64, account: bytes, box_game_players: bytes, player_count: uint64, clear_player: uint64) -> uint64:
check_acc_in_game:
    // smart_contracts/pieout/subroutines.py:93-101
    // # Check if account is an active player of a valid game instance
    // @subroutine
    // def check_acc_in_game(
    //     game_id: UInt64,
    //     account: Account,
    //     box_game_players: BoxMap[UInt64, Bytes],
    //     player_count: UInt64,
    //     clear_player: bool,  # noqa: FBT001
    // ) -> bool:
    proto 5 1
    intc_1 // 0
    pushbytes ""
    // smart_contracts/pieout/subroutines.py:102-103
    // # Calculate total byte length to iterate over based on player count and address size
    // game_players_length = player_count * cst.ADDRESS_SIZE
    frame_dig -2
    intc_3 // 32
    *
    // smart_contracts/pieout/subroutines.py:105-106
    // # Initialize flag to track if account is found in game
    // acc_in_game = False
    intc_1 // 0
    // smart_contracts/pieout/subroutines.py:108-109
    // # Iterate through the player byte array in 32-byte chunks (one address per chunk)
    // for i in urange(0, game_players_length, cst.ADDRESS_SIZE):
    dup

check_acc_in_game_for_header@1:
    // smart_contracts/pieout/subroutines.py:108-109
    // # Iterate through the player byte array in 32-byte chunks (one address per chunk)
    // for i in urange(0, game_players_length, cst.ADDRESS_SIZE):
    frame_dig 4
    frame_dig 2
    <
    frame_dig 3
    frame_bury 1
    bz check_acc_in_game_after_for@8
    // smart_contracts/pieout/subroutines.py:110-111
    // # Extract the 32-byte player address at start index i
    // player_addr_bytes = op.extract(box_game_players[game_id], i, cst.ADDRESS_SIZE)
    frame_dig -5
    itob
    frame_dig -3
    swap
    concat
    dup
    frame_bury 0
    box_get
    assert // check BoxMap entry exists
    frame_dig 4
    intc_3 // 32
    extract3
    // smart_contracts/pieout/subroutines.py:113-114
    // # Check if the extracted player address bytes match up with the account bytes
    // if account.bytes == player_addr_bytes:
    frame_dig -4
    ==
    bz check_acc_in_game_after_if_else@6
    // smart_contracts/pieout/subroutines.py:115
    // acc_in_game = True
    intc_0 // 1
    frame_bury 3
    // smart_contracts/pieout/subroutines.py:117-118
    // # Optionally clear this player from the box by replacing their address with zero bytes
    // if clear_player:
    frame_dig -1
    bz check_acc_in_game_after_if_else@5
    // smart_contracts/pieout/subroutines.py:120
    // game_players_bref.replace(i, cst.ZERO_ADDR_BYTES)
    frame_dig 0
    frame_dig 4
    bytec 8 // 0x0000000000000000000000000000000000000000000000000000000000000000
    box_replace

check_acc_in_game_after_if_else@5:
    frame_dig 3
    frame_bury 1

check_acc_in_game_after_for@8:
    frame_dig 1
    // smart_contracts/pieout/subroutines.py:125-126
    // # Return True if account was found in the game, else False
    // return acc_in_game
    frame_bury 0
    retsub

check_acc_in_game_after_if_else@6:
    // smart_contracts/pieout/subroutines.py:108-109
    // # Iterate through the player byte array in 32-byte chunks (one address per chunk)
    // for i in urange(0, game_players_length, cst.ADDRESS_SIZE):
    frame_dig 4
    intc_3 // 32
    +
    frame_bury 4
    b check_acc_in_game_for_header@1


// smart_contracts.pieout.subroutines.is_game_live(game_state: bytes) -> bytes, bytes:
is_game_live:
    // smart_contracts/pieout/subroutines.py:207-209
    // # Check if game is live and execute its conditional logic
    // @subroutine
    // def is_game_live(game_state: stc.GameState) -> arc4.Bool:
    proto 1 2
    // smart_contracts/pieout/subroutines.py:212
    // game_state.expiry_ts < Global.latest_timestamp  # If deadline expired
    frame_dig -1
    extract 8 8 // on error: Index access is out of bounds
    global LatestTimestamp
    itob
    b<
    // smart_contracts/pieout/subroutines.py:212-213
    // game_state.expiry_ts < Global.latest_timestamp  # If deadline expired
    // or game_state.active_players == game_state.max_players  # If lobby full
    bnz is_game_live_if_body@2
    // smart_contracts/pieout/subroutines.py:213
    // or game_state.active_players == game_state.max_players  # If lobby full
    frame_dig -1
    extract 2 1 // on error: Index access is out of bounds
    frame_dig -1
    extract 1 1 // on error: Index access is out of bounds
    b==
    // smart_contracts/pieout/subroutines.py:212-213
    // game_state.expiry_ts < Global.latest_timestamp  # If deadline expired
    // or game_state.active_players == game_state.max_players  # If lobby full
    bz is_game_live_else_body@7

is_game_live_if_body@2:
    // smart_contracts/pieout/subroutines.py:215-216
    // # Mark join phase as complete when staking finalized evaluates True
    // game_state.staking_finalized = arc4.Bool(True)  # noqa: FBT003
    frame_dig -1
    intc_1 // 0
    intc_0 // 1
    setbit
    frame_bury -1
    // smart_contracts/pieout/subroutines.py:220
    // Global.latest_timestamp + UInt64(cst.EXPIRY_INTERVAL)
    global LatestTimestamp
    intc 5 // 3600
    +
    // smart_contracts/pieout/subroutines.py:218-221
    // # Establish game play window by setting expiry timestamp
    // game_state.expiry_ts = arc4.UInt64(
    //     Global.latest_timestamp + UInt64(cst.EXPIRY_INTERVAL)
    // )
    itob
    frame_dig -1
    swap
    replace2 8
    dup
    frame_bury -1
    // smart_contracts/pieout/subroutines.py:226
    // game_state.staking_finalized,
    intc_1 // 0
    getbit
    bytec_1 // 0x00
    intc_1 // 0
    uncover 2
    setbit
    // smart_contracts/pieout/subroutines.py:227
    // game_state.expiry_ts,
    frame_dig -1
    extract 8 8 // on error: Index access is out of bounds
    // smart_contracts/pieout/subroutines.py:223-228
    // # Emit ARC-28 event for off-chain tracking
    // arc4.emit(
    //     "game_live(bool,uint64)",
    //     game_state.staking_finalized,
    //     game_state.expiry_ts,
    // )
    concat
    pushbytes 0xf1f3294a // method "game_live(bool,uint64)"
    swap
    concat
    log
    // smart_contracts/pieout/subroutines.py:230
    // return arc4.Bool(True)  # noqa: FBT003
    pushbytes 0x80
    frame_dig -1
    retsub

is_game_live_else_body@7:
    // smart_contracts/pieout/subroutines.py:232
    // return arc4.Bool(False)  # noqa: FBT003
    bytec_1 // 0x00
    frame_dig -1
    retsub


// smart_contracts.pieout.subroutines.is_game_over(game_id: uint64, game_state: bytes, box_game_players: bytes, box_commit_rand: bytes) -> bytes, bytes:
is_game_over:
    // smart_contracts/pieout/subroutines.py:234-241
    // # Check if game is over and execute its conditional logic
    // @subroutine
    // def is_game_over(
    //     game_id: UInt64,
    //     game_state: stc.GameState,
    //     box_game_players: BoxMap[UInt64, Bytes],
    //     box_commit_rand: BoxMap[Account, stc.CommitRand],
    // ) -> arc4.Bool:
    proto 4 2
    intc_1 // 0
    dupn 7
    pushbytes ""
    dupn 4
    // smart_contracts/pieout/subroutines.py:244
    // game_state.expiry_ts < Global.latest_timestamp  # If deadline expired
    frame_dig -3
    extract 8 8 // on error: Index access is out of bounds
    global LatestTimestamp
    itob
    b<
    // smart_contracts/pieout/subroutines.py:244-245
    // game_state.expiry_ts < Global.latest_timestamp  # If deadline expired
    // or game_state.active_players.native == 0  # If no more active players
    bnz is_game_over_if_body@2
    // smart_contracts/pieout/subroutines.py:245
    // or game_state.active_players.native == 0  # If no more active players
    frame_dig -3
    intc_2 // 2
    getbyte
    // smart_contracts/pieout/subroutines.py:244-245
    // game_state.expiry_ts < Global.latest_timestamp  # If deadline expired
    // or game_state.active_players.native == 0  # If no more active players
    bnz is_game_over_else_body@25

is_game_over_if_body@2:
    // smart_contracts/pieout/subroutines.py:247-248
    // # Reset box commit rand fields to default start values for any remaining players
    // game_players_bref = BoxRef(key=box_game_players.key_prefix + op.itob(game_id))
    frame_dig -4
    itob
    frame_dig -2
    swap
    concat
    dup
    frame_bury 1
    // smart_contracts/pieout/subroutines.py:249
    // for i in urange(0, game_players_bref.length, 32):
    box_len
    swap
    frame_bury 12
    assert // check BoxRef exists
    intc_1 // 0
    frame_bury 9

is_game_over_for_header@3:
    // smart_contracts/pieout/subroutines.py:249
    // for i in urange(0, game_players_bref.length, 32):
    frame_dig 9
    frame_dig 12
    <
    bz is_game_over_after_for@8
    // smart_contracts/pieout/subroutines.py:250
    // player_addr_bytes = game_players_bref.extract(i, 32)
    frame_dig 1
    frame_dig 9
    intc_3 // 32
    box_extract
    dup
    frame_bury 2
    // smart_contracts/pieout/subroutines.py:251
    // if player_addr_bytes != Bytes(cst.ZERO_ADDR_BYTES):
    bytec 8 // 0x0000000000000000000000000000000000000000000000000000000000000000
    !=
    bz is_game_over_after_if_else@6
    // smart_contracts/pieout/subroutines.py:253-258
    // # Reset box commit rand fields back to their original start values
    // reset_box_commit_rand(
    //     box_commit_rand=box_commit_rand,
    //     account=player,
    //     round_delta=UInt64(cst.BOX_C_EXP_ROUND_DELTA)
    // )
    frame_dig -1
    frame_dig 2
    // smart_contracts/pieout/subroutines.py:257
    // round_delta=UInt64(cst.BOX_C_EXP_ROUND_DELTA)
    intc 6 // 32000
    // smart_contracts/pieout/subroutines.py:253-258
    // # Reset box commit rand fields back to their original start values
    // reset_box_commit_rand(
    //     box_commit_rand=box_commit_rand,
    //     account=player,
    //     round_delta=UInt64(cst.BOX_C_EXP_ROUND_DELTA)
    // )
    callsub reset_box_commit_rand

is_game_over_after_if_else@6:
    // smart_contracts/pieout/subroutines.py:249
    // for i in urange(0, game_players_bref.length, 32):
    frame_dig 9
    intc_3 // 32
    +
    frame_bury 9
    b is_game_over_for_header@3

is_game_over_after_for@8:
    // smart_contracts/pieout/subroutines.py:263
    // cst.ADDRESS_SIZE * game_state.max_players.native
    frame_dig -3
    intc_0 // 1
    getbyte
    intc_3 // 32
    *
    // smart_contracts/pieout/subroutines.py:261-264
    // # Clear box game players data by setting its value to all zeroes
    // box_game_players[game_id] = op.bzero(
    //     cst.ADDRESS_SIZE * game_state.max_players.native
    // )
    bzero
    frame_dig 1
    dup
    box_del
    pop
    swap
    box_put
    // smart_contracts/pieout/subroutines.py:266-267
    // # Mark game as over by setting active players to zero
    // game_state.active_players = arc4.UInt8(0)
    frame_dig -3
    bytec_1 // 0x00
    replace2 2
    dup
    frame_bury -3
    // smart_contracts/pieout/subroutines.py:272
    // game_state.first_place_score,
    extract 3 1 // on error: Index access is out of bounds
    // smart_contracts/pieout/subroutines.py:273
    // game_state.first_place_address,
    frame_dig -3
    extract 56 32 // on error: Index access is out of bounds
    dup
    frame_bury 5
    // smart_contracts/pieout/subroutines.py:274
    // game_state.second_place_address,
    frame_dig -3
    extract 88 32 // on error: Index access is out of bounds
    dup
    cover 2
    frame_bury 6
    // smart_contracts/pieout/subroutines.py:275
    // game_state.third_place_address,
    frame_dig -3
    extract 120 32 // on error: Index access is out of bounds
    dup
    cover 4
    frame_bury 7
    // smart_contracts/pieout/subroutines.py:269-276
    // # Emit ARC-28 event for off-chain tracking
    // arc4.emit(
    //     "game_over(uint8,address,address,address)",
    //     game_state.first_place_score,
    //     game_state.first_place_address,
    //     game_state.second_place_address,
    //     game_state.third_place_address,
    // )
    uncover 2
    swap
    concat
    swap
    concat
    swap
    concat
    pushbytes 0x410b2150 // method "game_over(uint8,address,address,address)"
    swap
    concat
    log
    // smart_contracts/pieout/subroutines.py:278-279
    // # If only 1 player in lobby after game goes live, they get entire prize pool
    // if game_state.prize_pool.native == cst.STAKE_AMOUNT_OTHER:
    frame_dig -3
    pushint 16 // 16
    extract_uint64
    dup
    frame_bury 8
    pushint 258400 // 258400
    ==
    bz is_game_over_else_body@12
    // smart_contracts/pieout/subroutines.py:281
    // second_prize_share = UInt64(0)
    intc_1 // 0
    frame_bury 10
    // smart_contracts/pieout/subroutines.py:282
    // third_prize_share = UInt64(0)
    intc_1 // 0
    frame_bury 11

is_game_over_after_if_else@16:
    // smart_contracts/pieout/subroutines.py:301
    // acc2=game_state.admin_address.native,
    frame_dig -3
    extract 24 32 // on error: Index access is out of bounds
    // smart_contracts/pieout/subroutines.py:302
    // acc3=Global.creator_address,
    global CreatorAddress
    // smart_contracts/pieout/subroutines.py:298-303
    // # Resolve prize pool win share receivers by priority
    // first_place_receiver = resolve_receiver_by_prio(
    //     acc1=game_state.first_place_address.native,
    //     acc2=game_state.admin_address.native,
    //     acc3=Global.creator_address,
    // )
    frame_dig 5
    dig 2
    uncover 2
    callsub resolve_receiver_by_prio
    frame_bury 0
    // smart_contracts/pieout/subroutines.py:307
    // acc3=Global.creator_address,
    global CreatorAddress
    // smart_contracts/pieout/subroutines.py:304-308
    // second_place_receiver = resolve_receiver_by_prio(
    //     acc1=game_state.second_place_address.native,
    //     acc2=game_state.admin_address.native,
    //     acc3=Global.creator_address,
    // )
    frame_dig 6
    dig 2
    uncover 2
    callsub resolve_receiver_by_prio
    frame_bury 3
    // smart_contracts/pieout/subroutines.py:312
    // acc3=Global.creator_address,
    global CreatorAddress
    // smart_contracts/pieout/subroutines.py:309-313
    // third_place_receiver = resolve_receiver_by_prio(
    //     acc1=game_state.third_place_address.native,
    //     acc2=game_state.admin_address.native,
    //     acc3=Global.creator_address,
    // )
    frame_dig 7
    cover 2
    callsub resolve_receiver_by_prio
    frame_bury 4
    // smart_contracts/pieout/subroutines.py:315-316
    // # Issue prize pool share payouts to first, second and third place accounts if their share is non-zero amount
    // if first_prize_share > UInt64(0):
    frame_dig 8
    bz is_game_over_after_if_else@18
    // smart_contracts/pieout/subroutines.py:317-323
    // payout_itxn(
    //     receiver=first_place_receiver,
    //     amount=first_prize_share,
    //     note=String(
    //         'pieout:j{"method":"play_game","subroutine:"is_game_over","concern":"itxn.pay;first_prize_share"}'
    //     ),
    // )
    frame_dig 0
    frame_dig 8
    // smart_contracts/pieout/subroutines.py:320-322
    // note=String(
    //     'pieout:j{"method":"play_game","subroutine:"is_game_over","concern":"itxn.pay;first_prize_share"}'
    // ),
    pushbytes "pieout:j{\"method\":\"play_game\",\"subroutine:\"is_game_over\",\"concern\":\"itxn.pay;first_prize_share\"}"
    // smart_contracts/pieout/subroutines.py:317-323
    // payout_itxn(
    //     receiver=first_place_receiver,
    //     amount=first_prize_share,
    //     note=String(
    //         'pieout:j{"method":"play_game","subroutine:"is_game_over","concern":"itxn.pay;first_prize_share"}'
    //     ),
    // )
    callsub payout_itxn

is_game_over_after_if_else@18:
    // smart_contracts/pieout/subroutines.py:324
    // if second_prize_share > UInt64(0):
    frame_dig 10
    bz is_game_over_after_if_else@20
    // smart_contracts/pieout/subroutines.py:325-331
    // payout_itxn(
    //     receiver=second_place_receiver,
    //     amount=second_prize_share,
    //     note=String(
    //         'pieout:j{"method":"play_game","subroutine:"is_game_over","concern":"itxn.pay;second_prize_share"}'
    //     ),
    // )
    frame_dig 3
    frame_dig 10
    // smart_contracts/pieout/subroutines.py:328-330
    // note=String(
    //     'pieout:j{"method":"play_game","subroutine:"is_game_over","concern":"itxn.pay;second_prize_share"}'
    // ),
    pushbytes "pieout:j{\"method\":\"play_game\",\"subroutine:\"is_game_over\",\"concern\":\"itxn.pay;second_prize_share\"}"
    // smart_contracts/pieout/subroutines.py:325-331
    // payout_itxn(
    //     receiver=second_place_receiver,
    //     amount=second_prize_share,
    //     note=String(
    //         'pieout:j{"method":"play_game","subroutine:"is_game_over","concern":"itxn.pay;second_prize_share"}'
    //     ),
    // )
    callsub payout_itxn

is_game_over_after_if_else@20:
    // smart_contracts/pieout/subroutines.py:332
    // if third_prize_share > UInt64(0):
    frame_dig 11
    bz is_game_over_after_if_else@22
    // smart_contracts/pieout/subroutines.py:333-339
    // payout_itxn(
    //     receiver=third_place_receiver,
    //     amount=third_prize_share,
    //     note=String(
    //         'pieout:j{"method":"play_game","subroutine:"is_game_over","concern":"itxn.pay;third_prize_share"}'
    //     ),
    // )
    frame_dig 4
    frame_dig 11
    // smart_contracts/pieout/subroutines.py:336-338
    // note=String(
    //     'pieout:j{"method":"play_game","subroutine:"is_game_over","concern":"itxn.pay;third_prize_share"}'
    // ),
    pushbytes "pieout:j{\"method\":\"play_game\",\"subroutine:\"is_game_over\",\"concern\":\"itxn.pay;third_prize_share\"}"
    // smart_contracts/pieout/subroutines.py:333-339
    // payout_itxn(
    //     receiver=third_place_receiver,
    //     amount=third_prize_share,
    //     note=String(
    //         'pieout:j{"method":"play_game","subroutine:"is_game_over","concern":"itxn.pay;third_prize_share"}'
    //     ),
    // )
    callsub payout_itxn

is_game_over_after_if_else@22:
    // smart_contracts/pieout/subroutines.py:341-342
    // # Set prize pool amount to zero after making payouts
    // game_state.prize_pool = arc4.UInt64(0)
    frame_dig -3
    pushbytes 0x0000000000000000
    replace2 16
    frame_bury -3
    // smart_contracts/pieout/subroutines.py:344
    // return arc4.Bool(True)  # noqa: FBT003
    pushbytes 0x80
    frame_dig -3
    frame_bury 1
    frame_bury 0
    retsub

is_game_over_else_body@12:
    // smart_contracts/pieout/subroutines.py:283-284
    // # Elif, only 2 players in lobby after game goes live, split prize pool: 60% / remainder / 0
    // elif game_state.prize_pool.native == 2 * cst.STAKE_AMOUNT_OTHER:
    frame_dig 8
    pushint 516800 // 516800
    ==
    bz is_game_over_else_body@14
    // smart_contracts/pieout/subroutines.py:285
    // first_prize_share = game_state.prize_pool.native * UInt64(60) // UInt64(100)
    frame_dig 8
    dup
    pushint 60 // 60
    *
    pushint 100 // 100
    /
    // smart_contracts/pieout/subroutines.py:286
    // second_prize_share = game_state.prize_pool.native - first_prize_share
    swap
    dig 1
    -
    frame_bury 10
    // smart_contracts/pieout/subroutines.py:287
    // third_prize_share = UInt64(0)  # No third player
    intc_1 // 0
    frame_bury 11
    frame_bury 8
    b is_game_over_after_if_else@16

is_game_over_else_body@14:
    // smart_contracts/pieout/subroutines.py:290
    // first_prize_share = game_state.prize_pool.native * UInt64(50) // UInt64(100)
    frame_dig 8
    dup
    pushint 50 // 50
    *
    pushint 100 // 100
    /
    // smart_contracts/pieout/subroutines.py:292
    // game_state.prize_pool.native * UInt64(30) // UInt64(100)
    dig 1
    pushint 30 // 30
    *
    pushint 100 // 100
    /
    // smart_contracts/pieout/subroutines.py:291-293
    // second_prize_share = (
    //     game_state.prize_pool.native * UInt64(30) // UInt64(100)
    // )
    dup
    frame_bury 10
    // smart_contracts/pieout/subroutines.py:295
    // game_state.prize_pool.native - first_prize_share - second_prize_share
    uncover 2
    dig 2
    -
    // smart_contracts/pieout/subroutines.py:294-296
    // third_prize_share = (
    //     game_state.prize_pool.native - first_prize_share - second_prize_share
    // )
    swap
    // smart_contracts/pieout/subroutines.py:295
    // game_state.prize_pool.native - first_prize_share - second_prize_share
    -
    // smart_contracts/pieout/subroutines.py:294-296
    // third_prize_share = (
    //     game_state.prize_pool.native - first_prize_share - second_prize_share
    // )
    frame_bury 11
    frame_bury 8
    b is_game_over_after_if_else@16

is_game_over_else_body@25:
    // smart_contracts/pieout/subroutines.py:346
    // return arc4.Bool(False)  # noqa: FBT003
    bytec_1 // 0x00
    frame_dig -3
    frame_bury 1
    frame_bury 0
    retsub


// smart_contracts.pieout.contract.Pieout.calc_single_box_cost(key_size: bytes, value_size: bytes) -> uint64:
calc_single_box_cost:
    // smart_contracts/pieout/contract.py:47-51
    // # Calculate the minimum balance requirement (MBR) cost for storing a single box unit
    // @arc4.abimethod(readonly=True)
    // def calc_single_box_cost(
    //     self, key_size: arc4.UInt8, value_size: arc4.UInt16
    // ) -> UInt64:
    proto 2 1
    // smart_contracts/pieout/contract.py:55
    // key_size.native + value_size.native
    frame_dig -2
    btoi
    frame_dig -1
    btoi
    +
    // smart_contracts/pieout/contract.py:54
    // size_cost = arc4.UInt16(400).native * (
    pushint 400 // 400
    // smart_contracts/pieout/contract.py:54-56
    // size_cost = arc4.UInt16(400).native * (
    //     key_size.native + value_size.native
    // )  # Size fee (400 per byte * (len(key)+len(value)))
    *
    // smart_contracts/pieout/contract.py:58-59
    // # Return single box total cost amount
    // return base_cost.native + size_cost
    pushint 2500 // 2500
    +
    retsub


// smart_contracts.pieout.contract.Pieout.read_game_state(game_id: uint64) -> bytes:
read_game_state:
    // smart_contracts/pieout/contract.py:66-68
    // # Read the smart contract application game state box for given game id
    // @arc4.abimethod(readonly=True)
    // def read_game_state(self, game_id: UInt64) -> ta.GameStateTuple:
    proto 1 1
    // smart_contracts/pieout/contract.py:71
    // game_id
    frame_dig -1
    itob
    // smart_contracts/pieout/contract.py:69-70
    // # Retrieve current game state from box using the game id parameter
    // game_state = self.box_game_state[
    bytec 4 // "s_"
    // smart_contracts/pieout/contract.py:69-72
    // # Retrieve current game state from box using the game id parameter
    // game_state = self.box_game_state[
    //     game_id
    // ].copy()  # Make a copy of the game state data else immutable
    dig 1
    concat
    box_get
    assert // check self.box_game_state entry exists
    // smart_contracts/pieout/contract.py:78
    // game_state.staking_finalized,
    dup
    intc_1 // 0
    getbit
    bytec_1 // 0x00
    intc_1 // 0
    uncover 2
    setbit
    // smart_contracts/pieout/contract.py:79
    // game_state.max_players,
    dig 1
    extract 1 1 // on error: Index access is out of bounds
    // smart_contracts/pieout/contract.py:80
    // game_state.active_players,
    dig 2
    extract 2 1 // on error: Index access is out of bounds
    // smart_contracts/pieout/contract.py:81
    // game_state.first_place_score,
    dig 3
    extract 3 1 // on error: Index access is out of bounds
    // smart_contracts/pieout/contract.py:82
    // game_state.second_place_score,
    dig 4
    extract 4 1 // on error: Index access is out of bounds
    // smart_contracts/pieout/contract.py:83
    // game_state.third_place_score,
    dig 5
    extract 5 1 // on error: Index access is out of bounds
    // smart_contracts/pieout/contract.py:84
    // game_state.box_p_start_pos,
    dig 6
    extract 6 2 // on error: Index access is out of bounds
    // smart_contracts/pieout/contract.py:85
    // game_state.expiry_ts,
    dig 7
    extract 8 8 // on error: Index access is out of bounds
    // smart_contracts/pieout/contract.py:86
    // game_state.prize_pool,
    dig 8
    extract 16 8 // on error: Index access is out of bounds
    // smart_contracts/pieout/contract.py:87
    // game_state.admin_address,
    dig 9
    extract 24 32 // on error: Index access is out of bounds
    // smart_contracts/pieout/contract.py:88
    // game_state.first_place_address,
    dig 10
    extract 56 32 // on error: Index access is out of bounds
    // smart_contracts/pieout/contract.py:89
    // game_state.second_place_address,
    dig 11
    extract 88 32 // on error: Index access is out of bounds
    // smart_contracts/pieout/contract.py:90
    // game_state.third_place_address,
    uncover 12
    extract 120 32 // on error: Index access is out of bounds
    // smart_contracts/pieout/contract.py:74-92
    // # Return the game state as a tuple
    // return ta.GameStateTuple(
    //     (
    //         arc4.UInt64(game_id),
    //         game_state.staking_finalized,
    //         game_state.max_players,
    //         game_state.active_players,
    //         game_state.first_place_score,
    //         game_state.second_place_score,
    //         game_state.third_place_score,
    //         game_state.box_p_start_pos,
    //         game_state.expiry_ts,
    //         game_state.prize_pool,
    //         game_state.admin_address,
    //         game_state.first_place_address,
    //         game_state.second_place_address,
    //         game_state.third_place_address,
    //     )
    // )
    uncover 13
    uncover 13
    concat
    uncover 12
    concat
    uncover 11
    concat
    uncover 10
    concat
    uncover 9
    concat
    uncover 8
    concat
    uncover 7
    concat
    uncover 6
    concat
    uncover 5
    concat
    uncover 4
    concat
    uncover 3
    concat
    uncover 2
    concat
    swap
    concat
    retsub


// smart_contracts.pieout.contract.Pieout.read_game_players(game_id: uint64) -> bytes:
read_game_players:
    // smart_contracts/pieout/contract.py:94-96
    // # Read the smart contract application game players box for given game id
    // @arc4.abimethod(readonly=True)
    // def read_game_players(self, game_id: UInt64) -> ta.GamePlayersArr:
    proto 1 1
    intc_1 // 0
    dup
    // smart_contracts/pieout/contract.py:97-98
    // # Retrieve current game players from box using the game id parameter
    // game_players = self.box_game_players[game_id]
    frame_dig -1
    itob
    bytec_3 // "p_"
    swap
    concat
    box_get
    swap
    dup
    uncover 2
    assert // check self.box_game_players entry exists
    // smart_contracts/pieout/contract.py:100-101
    // # Define a dynamic array to append all remaining players
    // players = ta.GamePlayersArr()
    pushbytes 0x0000
    swap
    // smart_contracts/pieout/contract.py:103-104
    // # Iterate through the game players byte array
    // for i in urange(0, game_players.length, cst.ADDRESS_SIZE):
    len
    intc_1 // 0

read_game_players_for_header@1:
    // smart_contracts/pieout/contract.py:103-104
    // # Iterate through the game players byte array
    // for i in urange(0, game_players.length, cst.ADDRESS_SIZE):
    frame_dig 5
    frame_dig 4
    <
    bz read_game_players_after_for@6
    // smart_contracts/pieout/contract.py:105-106
    // # Extract the bytes representing the player address
    // player_addr_bytes = op.extract(game_players, i, cst.ADDRESS_SIZE)
    frame_dig 2
    frame_dig 5
    intc_3 // 32
    extract3
    dup
    frame_bury 0
    // smart_contracts/pieout/contract.py:107-108
    // # Only append address if its bytes do NOT equal to a zeroed byte array of size 32
    // if player_addr_bytes != Bytes(cst.ZERO_ADDR_BYTES):
    bytec 8 // 0x0000000000000000000000000000000000000000000000000000000000000000
    !=
    frame_dig 3
    frame_bury 1
    bz read_game_players_after_if_else@4
    // smart_contracts/pieout/contract.py:110
    // players.append(arc4.Address(player_account))
    frame_dig 3
    extract 2 0
    frame_dig 0
    concat
    dup
    len
    intc_3 // 32
    /
    itob
    extract 6 2
    swap
    concat
    frame_bury 1

read_game_players_after_if_else@4:
    frame_dig 1
    frame_bury 3
    // smart_contracts/pieout/contract.py:103-104
    // # Iterate through the game players byte array
    // for i in urange(0, game_players.length, cst.ADDRESS_SIZE):
    frame_dig 5
    intc_3 // 32
    +
    frame_bury 5
    b read_game_players_for_header@1

read_game_players_after_for@6:
    // smart_contracts/pieout/contract.py:112-113
    // # Return the array containing the remaining players
    // return players
    frame_dig 3
    frame_bury 0
    retsub


// smart_contracts.pieout.contract.Pieout.read_commit_rand(owner: bytes) -> bytes:
read_commit_rand:
    // smart_contracts/pieout/contract.py:115-117
    // # Read the smart contract application commit round box for given account
    // @arc4.abimethod(readonly=True)
    // def read_commit_rand(self, owner: Account) -> ta.CommitRandTuple:
    proto 1 1
    // smart_contracts/pieout/contract.py:118-119
    // # Fail transaction unless the assertion below evaluates True
    // assert owner in self.box_commit_rand, err.BOX_NOT_FOUND
    bytec_0 // "c_"
    frame_dig -1
    concat
    dup
    box_len
    bury 1
    assert // Box not found. Ensure the box you are trying to access was created and still exists.
    // smart_contracts/pieout/contract.py:120-121
    // # Create a copy of the box commit rand contents
    // commit_rand = self.box_commit_rand[owner].copy()
    box_get
    assert // check self.box_commit_rand entry exists
    // smart_contracts/pieout/contract.py:122-123
    // # Return a tuple containing commit rand game id, commit round and expiry round
    // return ta.CommitRandTuple((commit_rand.game_id, commit_rand.commit_round, commit_rand.expiry_round))
    dup
    extract 0 8 // on error: Index access is out of bounds
    dig 1
    extract 8 8 // on error: Index access is out of bounds
    uncover 2
    extract 16 8 // on error: Index access is out of bounds
    cover 2
    concat
    swap
    concat
    retsub


// smart_contracts.pieout.contract.Pieout.generate() -> void:
generate:
    // smart_contracts/pieout/contract.py:130-131
    // # Fail transaction unless the assertion below evaluates True
    // assert Txn.sender == Global.creator_address, err.INVALID_CREATOR
    txn Sender
    global CreatorAddress
    ==
    assert // Account must match application creator address.
    // smart_contracts/pieout/contract.py:133-134
    // # Assign Global State variables with their default starting value
    // self.game_id = UInt64(1)
    bytec 9 // "game_id"
    intc_0 // 1
    app_global_put
    // smart_contracts/pieout/contract.py:135
    // self.score_id = UInt64(1)
    bytec 6 // "score_id"
    intc_0 // 1
    app_global_put
    // smart_contracts/pieout/contract.py:136
    // self.ath_score = UInt64(0)
    bytec 10 // "ath_score"
    intc_1 // 0
    app_global_put
    // smart_contracts/pieout/contract.py:137
    // self.ath_address = Global.zero_address
    bytec 7 // "ath_address"
    global ZeroAddress
    app_global_put
    retsub


// smart_contracts.pieout.contract.Pieout.mint_trophy(box_t_pay: uint64, mint_pay: uint64) -> void:
mint_trophy:
    // smart_contracts/pieout/contract.py:139-145
    // # Allow application creator to mint a one-time NFT asset used as trophy token to honor the ATH address
    // @arc4.abimethod
    // def mint_trophy(
    //     self,
    //     box_t_pay: gtxn.PaymentTransaction,
    //     mint_pay: gtxn.PaymentTransaction,
    // ) -> None:
    proto 2 0
    // smart_contracts/pieout/contract.py:146-147
    // # Fail transaction unless the assertion below evaluates True
    // assert Global.group_size == 3, err.INVALID_GROUP_SIZE
    global GroupSize
    pushint 3 // 3
    ==
    assert // Invalid group size. Ensure number of transaction in group is within valid bounds.
    // smart_contracts/pieout/contract.py:148
    // assert not self.box_game_trophy, err.BOX_FOUND
    bytec_2 // "t_"
    box_len
    bury 1
    !
    assert // Box found. Ensure the box you are trying to access does not exist already.
    // smart_contracts/pieout/contract.py:150
    // assert box_t_pay.amount >= cst.BOX_T_COST, err.INVALID_BOX_PAY_FEE
    frame_dig -2
    gtxns Amount
    pushint 19300 // 19300
    >=
    assert // Insufficient funds. Box pay amount is not enough to cover application MBR.
    // smart_contracts/pieout/contract.py:151
    // assert box_t_pay.sender == Global.creator_address, err.INVALID_BOX_PAY_SENDER
    frame_dig -2
    gtxns Sender
    global CreatorAddress
    ==
    assert // Box payment sender address must match transaction sender address.
    // smart_contracts/pieout/contract.py:153
    // box_t_pay.receiver == Global.current_application_address
    frame_dig -2
    gtxns Receiver
    global CurrentApplicationAddress
    ==
    // smart_contracts/pieout/contract.py:152-154
    // assert (
    //     box_t_pay.receiver == Global.current_application_address
    // ), err.INVALID_BOX_PAY_RECEIVER
    assert // Box payment receiver address must match application address.
    // smart_contracts/pieout/contract.py:157
    // mint_pay.amount >= Global.asset_create_min_balance
    frame_dig -1
    gtxns Amount
    global AssetCreateMinBalance
    >=
    // smart_contracts/pieout/contract.py:156-158
    // assert (
    //     mint_pay.amount >= Global.asset_create_min_balance
    // ), err.INVALID_MINT_PAY_FEE
    assert // Insufficient funds. Mint pay amount is not enough to cover asset creation cost.
    // smart_contracts/pieout/contract.py:159
    // assert mint_pay.sender == Global.creator_address, err.INVALID_MINT_PAY_SENDER
    frame_dig -1
    gtxns Sender
    global CreatorAddress
    ==
    assert // Mint payment sender address must match transaction sender address.
    // smart_contracts/pieout/contract.py:161
    // mint_pay.receiver == Global.current_application_address
    frame_dig -1
    gtxns Receiver
    global CurrentApplicationAddress
    ==
    // smart_contracts/pieout/contract.py:160-162
    // assert (
    //     mint_pay.receiver == Global.current_application_address
    // ), err.INVALID_MINT_PAY_RECEIVER
    assert // Mint payment receiver address must match application address.
    // smart_contracts/pieout/contract.py:164-176
    // # Mint a new unique asset representing the game trophy by making an asset config inner transaction
    // acfg_itxn = itxn.AssetConfig(
    //     total=1,
    //     unit_name="TRFY",
    //     asset_name="Gamename-ATH-Trophy",
    //     decimals=0,
    //     default_frozen=False,
    //     manager=Global.current_application_address,
    //     reserve=Global.current_application_address,
    //     freeze=Global.current_application_address,
    //     clawback=Global.current_application_address,
    //     note=b'pieout:j{"method":"mint_trophy","concern":"itxn.asset_config;create_trophy_asset"}',
    // ).submit()
    itxn_begin
    // smart_contracts/pieout/contract.py:171
    // manager=Global.current_application_address,
    global CurrentApplicationAddress
    // smart_contracts/pieout/contract.py:172-174
    // reserve=Global.current_application_address,
    // freeze=Global.current_application_address,
    // clawback=Global.current_application_address,
    dupn 3
    // smart_contracts/pieout/contract.py:175
    // note=b'pieout:j{"method":"mint_trophy","concern":"itxn.asset_config;create_trophy_asset"}',
    pushbytes 0x7069656f75743a6a7b226d6574686f64223a226d696e745f74726f706879222c22636f6e6365726e223a226974786e2e61737365745f636f6e6669673b6372656174655f74726f7068795f6173736574227d
    itxn_field Note
    itxn_field ConfigAssetClawback
    itxn_field ConfigAssetFreeze
    itxn_field ConfigAssetReserve
    itxn_field ConfigAssetManager
    // smart_contracts/pieout/contract.py:170
    // default_frozen=False,
    intc_1 // 0
    itxn_field ConfigAssetDefaultFrozen
    // smart_contracts/pieout/contract.py:169
    // decimals=0,
    intc_1 // 0
    itxn_field ConfigAssetDecimals
    // smart_contracts/pieout/contract.py:168
    // asset_name="Gamename-ATH-Trophy",
    pushbytes "Gamename-ATH-Trophy"
    itxn_field ConfigAssetName
    // smart_contracts/pieout/contract.py:167
    // unit_name="TRFY",
    pushbytes "TRFY"
    itxn_field ConfigAssetUnitName
    // smart_contracts/pieout/contract.py:166
    // total=1,
    intc_0 // 1
    itxn_field ConfigAssetTotal
    // smart_contracts/pieout/contract.py:164-165
    // # Mint a new unique asset representing the game trophy by making an asset config inner transaction
    // acfg_itxn = itxn.AssetConfig(
    pushint 3 // acfg
    itxn_field TypeEnum
    intc_1 // 0
    itxn_field Fee
    // smart_contracts/pieout/contract.py:164-176
    // # Mint a new unique asset representing the game trophy by making an asset config inner transaction
    // acfg_itxn = itxn.AssetConfig(
    //     total=1,
    //     unit_name="TRFY",
    //     asset_name="Gamename-ATH-Trophy",
    //     decimals=0,
    //     default_frozen=False,
    //     manager=Global.current_application_address,
    //     reserve=Global.current_application_address,
    //     freeze=Global.current_application_address,
    //     clawback=Global.current_application_address,
    //     note=b'pieout:j{"method":"mint_trophy","concern":"itxn.asset_config;create_trophy_asset"}',
    // ).submit()
    itxn_submit
    itxn CreatedAssetID
    // smart_contracts/pieout/contract.py:178-179
    // # Create the box game trophy and assign its default starting values
    // self.box_game_trophy.create()
    bytec_2 // "t_"
    pushint 40 // 40
    box_create
    pop
    // smart_contracts/pieout/contract.py:181
    // asset_id=arc4.UInt64(acfg_itxn.created_asset.id),
    itob
    // smart_contracts/pieout/contract.py:182
    // owner_address=arc4.Address(Global.zero_address),
    global ZeroAddress
    // smart_contracts/pieout/contract.py:180-183
    // self.box_game_trophy.value = stc.GameTrophy(
    //     asset_id=arc4.UInt64(acfg_itxn.created_asset.id),
    //     owner_address=arc4.Address(Global.zero_address),
    // )
    concat
    // smart_contracts/pieout/contract.py:180
    // self.box_game_trophy.value = stc.GameTrophy(
    bytec_2 // "t_"
    // smart_contracts/pieout/contract.py:180-183
    // self.box_game_trophy.value = stc.GameTrophy(
    //     asset_id=arc4.UInt64(acfg_itxn.created_asset.id),
    //     owner_address=arc4.Address(Global.zero_address),
    // )
    swap
    box_put
    retsub


// smart_contracts.pieout.contract.Pieout.claim_trophy() -> void:
claim_trophy:
    // smart_contracts/pieout/contract.py:188-189
    // # Fail transaction unless the assertion below evaluates True
    // assert Global.group_size == 1, err.STANDALONE_TXN_ONLY
    global GroupSize
    intc_0 // 1
    ==
    assert // Invalid group size. This app call can only take standalone transactions.
    // smart_contracts/pieout/contract.py:190
    // assert Txn.sender == self.ath_address, err.INVALID_TROPHY_RECEIVER
    txn Sender
    intc_1 // 0
    bytec 7 // "ath_address"
    app_global_get_ex
    assert // check self.ath_address exists
    ==
    assert // Asset trophy receiver must match application ATH address.
    // smart_contracts/pieout/contract.py:191
    // assert Txn.sender.is_opted_in(
    txn Sender
    // smart_contracts/pieout/contract.py:192
    // Asset(self.box_game_trophy.value.asset_id.native)
    bytec_2 // "t_"
    box_get
    assert // check self.box_game_trophy exists
    intc_1 // 0
    extract_uint64
    // smart_contracts/pieout/contract.py:191-193
    // assert Txn.sender.is_opted_in(
    //     Asset(self.box_game_trophy.value.asset_id.native)
    // ), err.ASSET_OPT_IN_REQUIRED
    swap
    dig 1
    asset_holding_get AssetBalance
    bury 1
    assert // Account must be opted in to asset in order to perform this action.
    // smart_contracts/pieout/contract.py:195-201
    // # Transfer game trophy to sender by making an asset transfer inner transaction
    // itxn.AssetTransfer(
    //     xfer_asset=self.box_game_trophy.value.asset_id.native,
    //     asset_receiver=Txn.sender,
    //     asset_amount=1,
    //     note=b'pieout:j{"method":"claim_trophy","concern":"itxn.asset_transfer;transfer_trophy_asset"}',
    // ).submit()
    itxn_begin
    // smart_contracts/pieout/contract.py:198
    // asset_receiver=Txn.sender,
    txn Sender
    // smart_contracts/pieout/contract.py:200
    // note=b'pieout:j{"method":"claim_trophy","concern":"itxn.asset_transfer;transfer_trophy_asset"}',
    pushbytes 0x7069656f75743a6a7b226d6574686f64223a22636c61696d5f74726f706879222c22636f6e6365726e223a226974786e2e61737365745f7472616e736665723b7472616e736665725f74726f7068795f6173736574227d
    itxn_field Note
    // smart_contracts/pieout/contract.py:199
    // asset_amount=1,
    intc_0 // 1
    itxn_field AssetAmount
    itxn_field AssetReceiver
    itxn_field XferAsset
    // smart_contracts/pieout/contract.py:195-196
    // # Transfer game trophy to sender by making an asset transfer inner transaction
    // itxn.AssetTransfer(
    pushint 4 // axfer
    itxn_field TypeEnum
    intc_1 // 0
    itxn_field Fee
    // smart_contracts/pieout/contract.py:195-201
    // # Transfer game trophy to sender by making an asset transfer inner transaction
    // itxn.AssetTransfer(
    //     xfer_asset=self.box_game_trophy.value.asset_id.native,
    //     asset_receiver=Txn.sender,
    //     asset_amount=1,
    //     note=b'pieout:j{"method":"claim_trophy","concern":"itxn.asset_transfer;transfer_trophy_asset"}',
    // ).submit()
    itxn_submit
    retsub


// smart_contracts.pieout.contract.Pieout.new_game(max_players: uint64, box_s_pay: uint64, box_p_pay: uint64, stake_pay: uint64) -> void:
new_game:
    // smart_contracts/pieout/contract.py:203-211
    // # Create new game instance with a unique ID
    // @arc4.abimethod
    // def new_game(
    //     self,
    //     max_players: UInt64,
    //     box_s_pay: gtxn.PaymentTransaction,
    //     box_p_pay: gtxn.PaymentTransaction,
    //     stake_pay: gtxn.PaymentTransaction,
    // ) -> None:
    proto 4 0
    // smart_contracts/pieout/contract.py:212-213
    // # Fail transaction unless the assertion below evaluates True
    // assert Global.group_size == 4, err.INVALID_GROUP_SIZE
    global GroupSize
    pushint 4 // 4
    ==
    assert // Invalid group size. Ensure number of transaction in group is within valid bounds.
    // smart_contracts/pieout/contract.py:214
    // assert self.box_game_trophy, err.BOX_NOT_FOUND
    bytec_2 // "t_"
    box_len
    bury 1
    assert // Box not found. Ensure the box you are trying to access was created and still exists.
    // smart_contracts/pieout/contract.py:216
    // max_players >= cst.MAX_PLAYERS_BOT_BOUND
    frame_dig -4
    pushint 4 // 4
    >=
    // smart_contracts/pieout/contract.py:216-217
    // max_players >= cst.MAX_PLAYERS_BOT_BOUND
    // and max_players <= cst.MAX_PLAYERS_TOP_BOUND
    bz new_game_bool_false@3
    // smart_contracts/pieout/contract.py:217
    // and max_players <= cst.MAX_PLAYERS_TOP_BOUND
    frame_dig -4
    pushint 16 // 16
    <=
    // smart_contracts/pieout/contract.py:216-217
    // max_players >= cst.MAX_PLAYERS_BOT_BOUND
    // and max_players <= cst.MAX_PLAYERS_TOP_BOUND
    bz new_game_bool_false@3
    intc_0 // 1

new_game_bool_merge@4:
    // smart_contracts/pieout/contract.py:215-218
    // assert (
    //     max_players >= cst.MAX_PLAYERS_BOT_BOUND
    //     and max_players <= cst.MAX_PLAYERS_TOP_BOUND
    // ), err.INVALID_MAX_PLAYERS
    assert // The number of max players must be within bounds.
    // smart_contracts/pieout/contract.py:220
    // assert stake_pay.amount == cst.STAKE_AMOUNT_MANAGER, err.INVALID_STAKE_PAY_FEE
    frame_dig -1
    gtxns Amount
    dup
    intc 4 // 1000
    ==
    assert // Insufficient funds. Stake pay amount is not enough to cover staking requirements.
    // smart_contracts/pieout/contract.py:221
    // assert box_s_pay.amount == cst.BOX_S_COST, err.INVALID_BOX_PAY_FEE
    frame_dig -3
    gtxns Amount
    intc 11 // 67300
    ==
    assert // Insufficient funds. Box pay amount is not enough to cover application MBR.
    // smart_contracts/pieout/contract.py:222
    // assert box_p_pay.amount == self.calc_single_box_cost(
    frame_dig -2
    gtxns Amount
    // smart_contracts/pieout/contract.py:224
    // value_size=arc4.UInt16(cst.ADDRESS_SIZE * max_players),
    intc_3 // 32
    frame_dig -4
    *
    dup
    itob
    dup
    bitlen
    pushint 16 // 16
    <=
    assert // overflow
    extract 6 2
    // smart_contracts/pieout/contract.py:223
    // key_size=arc4.UInt8(10),
    pushbytes 0x0a
    // smart_contracts/pieout/contract.py:222-225
    // assert box_p_pay.amount == self.calc_single_box_cost(
    //     key_size=arc4.UInt8(10),
    //     value_size=arc4.UInt16(cst.ADDRESS_SIZE * max_players),
    // ), err.INVALID_BOX_PAY_FEE
    swap
    callsub calc_single_box_cost
    uncover 2
    ==
    assert // Insufficient funds. Box pay amount is not enough to cover application MBR.
    // smart_contracts/pieout/contract.py:227
    // assert stake_pay.sender == Txn.sender, err.INVALID_STAKE_PAY_SENDER
    frame_dig -1
    gtxns Sender
    txn Sender
    ==
    assert // Stake payment sender address must match transaction sender address.
    // smart_contracts/pieout/contract.py:228
    // assert box_s_pay.sender == Txn.sender, err.INVALID_BOX_PAY_SENDER
    frame_dig -3
    gtxns Sender
    txn Sender
    ==
    assert // Box payment sender address must match transaction sender address.
    // smart_contracts/pieout/contract.py:229
    // assert box_p_pay.sender == Txn.sender, err.INVALID_BOX_PAY_SENDER
    frame_dig -2
    gtxns Sender
    txn Sender
    ==
    assert // Box payment sender address must match transaction sender address.
    // smart_contracts/pieout/contract.py:232
    // stake_pay.receiver == Global.current_application_address
    frame_dig -1
    gtxns Receiver
    global CurrentApplicationAddress
    ==
    // smart_contracts/pieout/contract.py:231-233
    // assert (
    //     stake_pay.receiver == Global.current_application_address
    // ), err.INVALID_STAKE_PAY_RECEIVER
    assert // Stake payment receiver address must match application address.
    // smart_contracts/pieout/contract.py:235
    // box_s_pay.receiver == Global.current_application_address
    frame_dig -3
    gtxns Receiver
    global CurrentApplicationAddress
    ==
    // smart_contracts/pieout/contract.py:234-236
    // assert (
    //     box_s_pay.receiver == Global.current_application_address
    // ), err.INVALID_BOX_PAY_RECEIVER
    assert // Box payment receiver address must match application address.
    // smart_contracts/pieout/contract.py:238
    // box_p_pay.receiver == Global.current_application_address
    frame_dig -2
    gtxns Receiver
    global CurrentApplicationAddress
    ==
    // smart_contracts/pieout/contract.py:237-239
    // assert (
    //     box_p_pay.receiver == Global.current_application_address
    // ), err.INVALID_BOX_PAY_RECEIVER
    assert // Box payment receiver address must match application address.
    // smart_contracts/pieout/contract.py:244
    // max_players=arc4.UInt8(max_players),
    frame_dig -4
    itob
    dup
    bitlen
    pushint 8 // 8
    <=
    assert // overflow
    extract 7 1
    // smart_contracts/pieout/contract.py:250
    // expiry_ts=arc4.UInt64(Global.latest_timestamp + cst.EXPIRY_INTERVAL),
    global LatestTimestamp
    intc 5 // 3600
    +
    itob
    // smart_contracts/pieout/contract.py:251
    // prize_pool=arc4.UInt64(stake_pay.amount),
    uncover 3
    itob
    // smart_contracts/pieout/contract.py:252
    // admin_address=arc4.Address(Txn.sender),
    txn Sender
    // smart_contracts/pieout/contract.py:253
    // first_place_address=arc4.Address(Global.zero_address),
    global ZeroAddress
    // smart_contracts/pieout/contract.py:254-255
    // second_place_address=arc4.Address(Global.zero_address),
    // third_place_address=arc4.Address(Global.zero_address),
    dupn 2
    // smart_contracts/pieout/contract.py:243
    // staking_finalized=arc4.Bool(False),  # noqa: FBT003
    bytec_1 // 0x00
    // smart_contracts/pieout/contract.py:241-256
    // # Initialize a new game state box with unique game IQ and write the default starting values inside
    // self.box_game_state[self.game_id] = stc.GameState(
    //     staking_finalized=arc4.Bool(False),  # noqa: FBT003
    //     max_players=arc4.UInt8(max_players),
    //     active_players=arc4.UInt8(1),
    //     first_place_score=arc4.UInt8(0),
    //     second_place_score=arc4.UInt8(0),
    //     third_place_score=arc4.UInt8(0),
    //     box_p_start_pos=arc4.UInt16(cst.ADDRESS_SIZE),
    //     expiry_ts=arc4.UInt64(Global.latest_timestamp + cst.EXPIRY_INTERVAL),
    //     prize_pool=arc4.UInt64(stake_pay.amount),
    //     admin_address=arc4.Address(Txn.sender),
    //     first_place_address=arc4.Address(Global.zero_address),
    //     second_place_address=arc4.Address(Global.zero_address),
    //     third_place_address=arc4.Address(Global.zero_address),
    // )
    uncover 7
    concat
    // smart_contracts/pieout/contract.py:245
    // active_players=arc4.UInt8(1),
    pushbytes 0x01
    // smart_contracts/pieout/contract.py:241-256
    // # Initialize a new game state box with unique game IQ and write the default starting values inside
    // self.box_game_state[self.game_id] = stc.GameState(
    //     staking_finalized=arc4.Bool(False),  # noqa: FBT003
    //     max_players=arc4.UInt8(max_players),
    //     active_players=arc4.UInt8(1),
    //     first_place_score=arc4.UInt8(0),
    //     second_place_score=arc4.UInt8(0),
    //     third_place_score=arc4.UInt8(0),
    //     box_p_start_pos=arc4.UInt16(cst.ADDRESS_SIZE),
    //     expiry_ts=arc4.UInt64(Global.latest_timestamp + cst.EXPIRY_INTERVAL),
    //     prize_pool=arc4.UInt64(stake_pay.amount),
    //     admin_address=arc4.Address(Txn.sender),
    //     first_place_address=arc4.Address(Global.zero_address),
    //     second_place_address=arc4.Address(Global.zero_address),
    //     third_place_address=arc4.Address(Global.zero_address),
    // )
    concat
    // smart_contracts/pieout/contract.py:246
    // first_place_score=arc4.UInt8(0),
    bytec_1 // 0x00
    // smart_contracts/pieout/contract.py:241-256
    // # Initialize a new game state box with unique game IQ and write the default starting values inside
    // self.box_game_state[self.game_id] = stc.GameState(
    //     staking_finalized=arc4.Bool(False),  # noqa: FBT003
    //     max_players=arc4.UInt8(max_players),
    //     active_players=arc4.UInt8(1),
    //     first_place_score=arc4.UInt8(0),
    //     second_place_score=arc4.UInt8(0),
    //     third_place_score=arc4.UInt8(0),
    //     box_p_start_pos=arc4.UInt16(cst.ADDRESS_SIZE),
    //     expiry_ts=arc4.UInt64(Global.latest_timestamp + cst.EXPIRY_INTERVAL),
    //     prize_pool=arc4.UInt64(stake_pay.amount),
    //     admin_address=arc4.Address(Txn.sender),
    //     first_place_address=arc4.Address(Global.zero_address),
    //     second_place_address=arc4.Address(Global.zero_address),
    //     third_place_address=arc4.Address(Global.zero_address),
    // )
    concat
    // smart_contracts/pieout/contract.py:247
    // second_place_score=arc4.UInt8(0),
    bytec_1 // 0x00
    // smart_contracts/pieout/contract.py:241-256
    // # Initialize a new game state box with unique game IQ and write the default starting values inside
    // self.box_game_state[self.game_id] = stc.GameState(
    //     staking_finalized=arc4.Bool(False),  # noqa: FBT003
    //     max_players=arc4.UInt8(max_players),
    //     active_players=arc4.UInt8(1),
    //     first_place_score=arc4.UInt8(0),
    //     second_place_score=arc4.UInt8(0),
    //     third_place_score=arc4.UInt8(0),
    //     box_p_start_pos=arc4.UInt16(cst.ADDRESS_SIZE),
    //     expiry_ts=arc4.UInt64(Global.latest_timestamp + cst.EXPIRY_INTERVAL),
    //     prize_pool=arc4.UInt64(stake_pay.amount),
    //     admin_address=arc4.Address(Txn.sender),
    //     first_place_address=arc4.Address(Global.zero_address),
    //     second_place_address=arc4.Address(Global.zero_address),
    //     third_place_address=arc4.Address(Global.zero_address),
    // )
    concat
    // smart_contracts/pieout/contract.py:248
    // third_place_score=arc4.UInt8(0),
    bytec_1 // 0x00
    // smart_contracts/pieout/contract.py:241-256
    // # Initialize a new game state box with unique game IQ and write the default starting values inside
    // self.box_game_state[self.game_id] = stc.GameState(
    //     staking_finalized=arc4.Bool(False),  # noqa: FBT003
    //     max_players=arc4.UInt8(max_players),
    //     active_players=arc4.UInt8(1),
    //     first_place_score=arc4.UInt8(0),
    //     second_place_score=arc4.UInt8(0),
    //     third_place_score=arc4.UInt8(0),
    //     box_p_start_pos=arc4.UInt16(cst.ADDRESS_SIZE),
    //     expiry_ts=arc4.UInt64(Global.latest_timestamp + cst.EXPIRY_INTERVAL),
    //     prize_pool=arc4.UInt64(stake_pay.amount),
    //     admin_address=arc4.Address(Txn.sender),
    //     first_place_address=arc4.Address(Global.zero_address),
    //     second_place_address=arc4.Address(Global.zero_address),
    //     third_place_address=arc4.Address(Global.zero_address),
    // )
    concat
    // smart_contracts/pieout/contract.py:249
    // box_p_start_pos=arc4.UInt16(cst.ADDRESS_SIZE),
    bytec 11 // 0x0020
    // smart_contracts/pieout/contract.py:241-256
    // # Initialize a new game state box with unique game IQ and write the default starting values inside
    // self.box_game_state[self.game_id] = stc.GameState(
    //     staking_finalized=arc4.Bool(False),  # noqa: FBT003
    //     max_players=arc4.UInt8(max_players),
    //     active_players=arc4.UInt8(1),
    //     first_place_score=arc4.UInt8(0),
    //     second_place_score=arc4.UInt8(0),
    //     third_place_score=arc4.UInt8(0),
    //     box_p_start_pos=arc4.UInt16(cst.ADDRESS_SIZE),
    //     expiry_ts=arc4.UInt64(Global.latest_timestamp + cst.EXPIRY_INTERVAL),
    //     prize_pool=arc4.UInt64(stake_pay.amount),
    //     admin_address=arc4.Address(Txn.sender),
    //     first_place_address=arc4.Address(Global.zero_address),
    //     second_place_address=arc4.Address(Global.zero_address),
    //     third_place_address=arc4.Address(Global.zero_address),
    // )
    concat
    uncover 6
    concat
    uncover 5
    concat
    uncover 4
    concat
    uncover 3
    concat
    uncover 2
    concat
    swap
    concat
    // smart_contracts/pieout/contract.py:241-242
    // # Initialize a new game state box with unique game IQ and write the default starting values inside
    // self.box_game_state[self.game_id] = stc.GameState(
    intc_1 // 0
    bytec 9 // "game_id"
    app_global_get_ex
    assert // check self.game_id exists
    dup
    itob
    bytec 4 // "s_"
    dig 1
    concat
    // smart_contracts/pieout/contract.py:241-256
    // # Initialize a new game state box with unique game IQ and write the default starting values inside
    // self.box_game_state[self.game_id] = stc.GameState(
    //     staking_finalized=arc4.Bool(False),  # noqa: FBT003
    //     max_players=arc4.UInt8(max_players),
    //     active_players=arc4.UInt8(1),
    //     first_place_score=arc4.UInt8(0),
    //     second_place_score=arc4.UInt8(0),
    //     third_place_score=arc4.UInt8(0),
    //     box_p_start_pos=arc4.UInt16(cst.ADDRESS_SIZE),
    //     expiry_ts=arc4.UInt64(Global.latest_timestamp + cst.EXPIRY_INTERVAL),
    //     prize_pool=arc4.UInt64(stake_pay.amount),
    //     admin_address=arc4.Address(Txn.sender),
    //     first_place_address=arc4.Address(Global.zero_address),
    //     second_place_address=arc4.Address(Global.zero_address),
    //     third_place_address=arc4.Address(Global.zero_address),
    // )
    uncover 3
    box_put
    // smart_contracts/pieout/contract.py:258-259
    // # Initialize box game players with zeroed bytes to store all player addresses (32 bytes per player)
    // self.box_game_players[self.game_id] = op.bzero(cst.ADDRESS_SIZE * max_players)
    uncover 2
    bzero
    bytec_3 // "p_"
    uncover 2
    concat
    dup
    box_del
    pop
    dup
    uncover 2
    box_put
    // smart_contracts/pieout/contract.py:265
    // game_players_bref.replace(0, Txn.sender.bytes)
    intc_1 // 0
    txn Sender
    box_replace
    // smart_contracts/pieout/contract.py:267-268
    // # Increment game id by 1 for next new game instance
    // self.game_id += 1
    intc_0 // 1
    +
    bytec 9 // "game_id"
    swap
    app_global_put
    retsub

new_game_bool_false@3:
    intc_1 // 0
    b new_game_bool_merge@4


// smart_contracts.pieout.contract.Pieout.join_game(game_id: uint64, stake_pay: uint64) -> void:
join_game:
    // smart_contracts/pieout/contract.py:270-276
    // # Join existing game instance
    // @arc4.abimethod
    // def join_game(
    //     self,
    //     game_id: UInt64,
    //     stake_pay: gtxn.PaymentTransaction,
    // ) -> None:
    proto 2 0
    // smart_contracts/pieout/contract.py:277-278
    // # Fail transaction unless the assertion below evaluates True
    // assert Global.group_size == 2, err.INVALID_GROUP_SIZE
    global GroupSize
    intc_2 // 2
    ==
    assert // Invalid group size. Ensure number of transaction in group is within valid bounds.
    // smart_contracts/pieout/contract.py:279
    // assert game_id in self.box_game_state, err.GAME_ID_NOT_FOUND
    frame_dig -2
    itob
    bytec 4 // "s_"
    dig 1
    concat
    dup
    box_len
    bury 1
    assert // Box game state not found. Check if game ID exists.
    // smart_contracts/pieout/contract.py:280
    // assert self.box_game_trophy, err.BOX_NOT_FOUND
    bytec_2 // "t_"
    box_len
    bury 1
    assert // Box not found. Ensure the box you are trying to access was created and still exists.
    // smart_contracts/pieout/contract.py:282
    // assert stake_pay.amount == cst.STAKE_AMOUNT_MANAGER, err.INVALID_STAKE_PAY_FEE
    frame_dig -1
    gtxns Amount
    dup
    intc 4 // 1000
    ==
    assert // Insufficient funds. Stake pay amount is not enough to cover staking requirements.
    // smart_contracts/pieout/contract.py:283
    // assert stake_pay.sender == Txn.sender, err.INVALID_STAKE_PAY_SENDER
    frame_dig -1
    gtxns Sender
    txn Sender
    ==
    assert // Stake payment sender address must match transaction sender address.
    // smart_contracts/pieout/contract.py:285
    // stake_pay.receiver == Global.current_application_address
    frame_dig -1
    gtxns Receiver
    global CurrentApplicationAddress
    ==
    // smart_contracts/pieout/contract.py:284-286
    // assert (
    //     stake_pay.receiver == Global.current_application_address
    // ), err.INVALID_STAKE_PAY_RECEIVER
    assert // Stake payment receiver address must match application address.
    // smart_contracts/pieout/contract.py:288-291
    // # Retrieve current game state from box using the game id parameter
    // game_state = self.box_game_state[
    //     game_id
    // ].copy()  # Make a copy of the game state else immutable
    dig 1
    box_get
    assert // check self.box_game_state entry exists
    // smart_contracts/pieout/contract.py:296
    // account=Txn.sender,
    txn Sender
    // smart_contracts/pieout/contract.py:298
    // player_count=self.box_game_state[game_id].active_players.native,
    dig 1
    intc_2 // 2
    getbyte
    // smart_contracts/pieout/contract.py:294-300
    // srt.check_acc_in_game(  # noqa: E712, RUF100
    //     game_id=game_id,
    //     account=Txn.sender,
    //     box_game_players=self.box_game_players,
    //     player_count=self.box_game_state[game_id].active_players.native,
    //     clear_player=False,
    // )
    frame_dig -2
    uncover 2
    // smart_contracts/pieout/contract.py:297
    // box_game_players=self.box_game_players,
    bytec_3 // "p_"
    // smart_contracts/pieout/contract.py:294-300
    // srt.check_acc_in_game(  # noqa: E712, RUF100
    //     game_id=game_id,
    //     account=Txn.sender,
    //     box_game_players=self.box_game_players,
    //     player_count=self.box_game_state[game_id].active_players.native,
    //     clear_player=False,
    // )
    dig 3
    // smart_contracts/pieout/contract.py:299
    // clear_player=False,
    intc_1 // 0
    // smart_contracts/pieout/contract.py:294-300
    // srt.check_acc_in_game(  # noqa: E712, RUF100
    //     game_id=game_id,
    //     account=Txn.sender,
    //     box_game_players=self.box_game_players,
    //     player_count=self.box_game_state[game_id].active_players.native,
    //     clear_player=False,
    // )
    callsub check_acc_in_game
    // smart_contracts/pieout/contract.py:294-301
    // srt.check_acc_in_game(  # noqa: E712, RUF100
    //     game_id=game_id,
    //     account=Txn.sender,
    //     box_game_players=self.box_game_players,
    //     player_count=self.box_game_state[game_id].active_players.native,
    //     clear_player=False,
    // )
    // == False
    !
    // smart_contracts/pieout/contract.py:293-302
    // assert (
    //     srt.check_acc_in_game(  # noqa: E712, RUF100
    //         game_id=game_id,
    //         account=Txn.sender,
    //         box_game_players=self.box_game_players,
    //         player_count=self.box_game_state[game_id].active_players.native,
    //         clear_player=False,
    //     )
    //     == False
    // ), err.PLAYER_ACTIVE
    assert // Player with this address must not be an active game participant in the game.
    // smart_contracts/pieout/contract.py:304
    // assert game_state.staking_finalized == False, err.STAKING_FINAL  # noqa: E712
    dig 1
    intc_1 // 0
    getbit
    bytec_1 // 0x00
    intc_1 // 0
    uncover 2
    setbit
    intc_1 // 0
    getbit
    !
    assert // Game state staking finalized value mismatch.
    // smart_contracts/pieout/contract.py:305
    // assert game_state.expiry_ts >= Global.latest_timestamp, err.TIME_CONSTRAINT_VIOLATION
    dig 1
    extract 8 8 // on error: Index access is out of bounds
    global LatestTimestamp
    itob
    b>=
    assert // Invalid time frame. Call made outside the permitted block or timestamp range.
    // smart_contracts/pieout/contract.py:306
    // assert game_state.active_players <= game_state.max_players, err.FULL_GAME_LOBBY
    dig 1
    extract 2 1 // on error: Index access is out of bounds
    dig 2
    extract 1 1 // on error: Index access is out of bounds
    b<=
    assert // Number of active players must not exceed number of max players.
    // smart_contracts/pieout/contract.py:308
    // game_state.box_p_start_pos.native
    dig 1
    pushint 6 // 6
    extract_uint16
    // smart_contracts/pieout/contract.py:309
    // < cst.ADDRESS_SIZE * game_state.max_players.native
    dig 2
    intc_0 // 1
    getbyte
    intc_3 // 32
    *
    // smart_contracts/pieout/contract.py:308-309
    // game_state.box_p_start_pos.native
    // < cst.ADDRESS_SIZE * game_state.max_players.native
    dig 1
    >
    // smart_contracts/pieout/contract.py:307-310
    // assert (
    //     game_state.box_p_start_pos.native
    //     < cst.ADDRESS_SIZE * game_state.max_players.native
    // ), err.BOX_P_START_POS_OVERFLOW
    assert // Players box start position index overflow. Can not store more addresses.
    // smart_contracts/pieout/contract.py:314
    // key=self.box_game_players.key_prefix + op.itob(game_id)
    bytec_3 // "p_"
    // smart_contracts/pieout/contract.py:312-315
    // # For game players box, store the sender's address at the current game state box p_ start position
    // game_players_bref = BoxRef(
    //     key=self.box_game_players.key_prefix + op.itob(game_id)
    // )
    uncover 6
    // smart_contracts/pieout/contract.py:314
    // key=self.box_game_players.key_prefix + op.itob(game_id)
    concat
    // smart_contracts/pieout/contract.py:316
    // game_players_bref.replace(game_state.box_p_start_pos.native, Txn.sender.bytes)
    txn Sender
    swap
    cover 2
    box_replace
    // smart_contracts/pieout/contract.py:318-319
    // # Increment number of active players by 1
    // game_state.active_players = arc4.UInt8(game_state.active_players.native + 1)
    intc_0 // 1
    +
    itob
    dup
    bitlen
    pushint 8 // 8
    <=
    assert // overflow
    extract 7 1
    replace2 2
    // smart_contracts/pieout/contract.py:323
    // game_state.box_p_start_pos.native + cst.ADDRESS_SIZE
    dup
    pushint 6 // 6
    extract_uint16
    intc_3 // 32
    +
    // smart_contracts/pieout/contract.py:321-324
    // # Increment current game players box offset by 32 so that next player address can be stored
    // game_state.box_p_start_pos = arc4.UInt16(
    //     game_state.box_p_start_pos.native + cst.ADDRESS_SIZE
    // )
    itob
    dup
    bitlen
    pushint 16 // 16
    <=
    assert // overflow
    extract 6 2
    replace2 6
    // smart_contracts/pieout/contract.py:328
    // game_state.prize_pool.native + stake_pay.amount
    dup
    pushint 16 // 16
    extract_uint64
    uncover 2
    +
    // smart_contracts/pieout/contract.py:326-329
    // # Increment prize pool by stake payment amount
    // game_state.prize_pool = arc4.UInt64(
    //     game_state.prize_pool.native + stake_pay.amount
    // )
    itob
    replace2 16
    // smart_contracts/pieout/contract.py:331-332
    // # Check if game is live on every call
    // srt.is_game_live(game_state)
    callsub is_game_live
    bury 1
    // smart_contracts/pieout/contract.py:334-335
    // # Copy the modified game state and store it as new value of box
    // self.box_game_state[game_id] = game_state.copy()
    box_put
    retsub


// smart_contracts.pieout.contract.Pieout.get_box_commit_rand(box_c_pay: uint64) -> void:
get_box_commit_rand:
    // smart_contracts/pieout/contract.py:337-339
    // # Get box commit rand contents with default start values
    // @arc4.abimethod
    // def get_box_commit_rand(self, box_c_pay: gtxn.PaymentTransaction) -> None:
    proto 1 0
    // smart_contracts/pieout/contract.py:340-341
    // # Fail transaction unless the assertion below evaluates True
    // assert Global.group_size == 2, err.INVALID_GROUP_SIZE
    global GroupSize
    intc_2 // 2
    ==
    assert // Invalid group size. Ensure number of transaction in group is within valid bounds.
    // smart_contracts/pieout/contract.py:342
    // assert Txn.sender not in self.box_commit_rand, err.BOX_FOUND
    bytec_0 // "c_"
    txn Sender
    concat
    box_len
    bury 1
    !
    assert // Box found. Ensure the box you are trying to access does not exist already.
    // smart_contracts/pieout/contract.py:343
    // assert self.box_game_trophy, err.BOX_NOT_FOUND
    bytec_2 // "t_"
    box_len
    bury 1
    assert // Box not found. Ensure the box you are trying to access was created and still exists.
    // smart_contracts/pieout/contract.py:345
    // assert box_c_pay.amount == cst.BOX_C_COST, err.INVALID_BOX_PAY_FEE
    frame_dig -1
    gtxns Amount
    intc 7 // 28900
    ==
    assert // Insufficient funds. Box pay amount is not enough to cover application MBR.
    // smart_contracts/pieout/contract.py:346
    // assert box_c_pay.sender == Txn.sender, err.INVALID_BOX_PAY_SENDER
    frame_dig -1
    gtxns Sender
    txn Sender
    ==
    assert // Box payment sender address must match transaction sender address.
    // smart_contracts/pieout/contract.py:348
    // box_c_pay.receiver == Global.current_application_address
    frame_dig -1
    gtxns Receiver
    global CurrentApplicationAddress
    ==
    // smart_contracts/pieout/contract.py:347-349
    // assert (
    //     box_c_pay.receiver == Global.current_application_address
    // ), err.INVALID_BOX_PAY_RECEIVER
    assert // Box payment receiver address must match application address.
    // smart_contracts/pieout/contract.py:353
    // box_commit_rand=self.box_commit_rand,
    bytec_0 // "c_"
    // smart_contracts/pieout/contract.py:354
    // account=Txn.sender,
    txn Sender
    // smart_contracts/pieout/contract.py:355
    // round_delta=UInt64(cst.BOX_C_EXP_ROUND_DELTA),
    intc 6 // 32000
    // smart_contracts/pieout/contract.py:351-356
    // # Initialize box commit rand w/ default start value
    // srt.reset_box_commit_rand(
    //     box_commit_rand=self.box_commit_rand,
    //     account=Txn.sender,
    //     round_delta=UInt64(cst.BOX_C_EXP_ROUND_DELTA),
    // )
    callsub reset_box_commit_rand
    retsub


// smart_contracts.pieout.contract.Pieout.set_box_commit_rand(game_id: uint64) -> void:
set_box_commit_rand:
    // smart_contracts/pieout/contract.py:358-363
    // # Set box commit rand contents used for obtaining on-chain randomness and playing the game
    // @arc4.abimethod
    // def set_box_commit_rand(
    //     self,
    //     game_id: UInt64,
    // ) -> None:
    proto 1 0
    // smart_contracts/pieout/contract.py:364-365
    // # Fail transaction unless the assertion below evaluates True
    // assert Global.group_size == 1, err.STANDALONE_TXN_ONLY
    global GroupSize
    intc_0 // 1
    ==
    assert // Invalid group size. This app call can only take standalone transactions.
    // smart_contracts/pieout/contract.py:366
    // assert game_id in self.box_game_state, err.GAME_ID_NOT_FOUND
    frame_dig -1
    itob
    bytec 4 // "s_"
    dig 1
    concat
    dup
    box_len
    bury 1
    assert // Box game state not found. Check if game ID exists.
    // smart_contracts/pieout/contract.py:367
    // assert Txn.sender in self.box_commit_rand, err.BOX_NOT_FOUND
    bytec_0 // "c_"
    txn Sender
    concat
    box_len
    bury 1
    assert // Box not found. Ensure the box you are trying to access was created and still exists.
    // smart_contracts/pieout/contract.py:370
    // self.box_game_state[game_id].staking_finalized == True  # noqa: E712
    box_get
    assert // check self.box_game_state entry exists
    dup
    intc_1 // 0
    getbit
    bytec_1 // 0x00
    intc_1 // 0
    uncover 2
    setbit
    intc_1 // 0
    getbit
    intc_0 // 1
    ==
    // smart_contracts/pieout/contract.py:369-371
    // assert (
    //     self.box_game_state[game_id].staking_finalized == True  # noqa: E712
    // ), err.STAKING_FINAL
    assert // Game state staking finalized value mismatch.
    // smart_contracts/pieout/contract.py:376
    // account=Txn.sender,
    txn Sender
    // smart_contracts/pieout/contract.py:378
    // player_count=self.box_game_state[game_id].max_players.native,
    swap
    intc_0 // 1
    getbyte
    // smart_contracts/pieout/contract.py:374-380
    // srt.check_acc_in_game(  # noqa: E712, RUF100
    //     game_id=game_id,
    //     account=Txn.sender,
    //     box_game_players=self.box_game_players,
    //     player_count=self.box_game_state[game_id].max_players.native,
    //     clear_player=False,
    // )
    frame_dig -1
    uncover 2
    // smart_contracts/pieout/contract.py:377
    // box_game_players=self.box_game_players,
    bytec_3 // "p_"
    // smart_contracts/pieout/contract.py:374-380
    // srt.check_acc_in_game(  # noqa: E712, RUF100
    //     game_id=game_id,
    //     account=Txn.sender,
    //     box_game_players=self.box_game_players,
    //     player_count=self.box_game_state[game_id].max_players.native,
    //     clear_player=False,
    // )
    uncover 3
    // smart_contracts/pieout/contract.py:379
    // clear_player=False,
    intc_1 // 0
    // smart_contracts/pieout/contract.py:374-380
    // srt.check_acc_in_game(  # noqa: E712, RUF100
    //     game_id=game_id,
    //     account=Txn.sender,
    //     box_game_players=self.box_game_players,
    //     player_count=self.box_game_state[game_id].max_players.native,
    //     clear_player=False,
    // )
    callsub check_acc_in_game
    // smart_contracts/pieout/contract.py:381
    // == True
    intc_0 // 1
    // smart_contracts/pieout/contract.py:374-381
    // srt.check_acc_in_game(  # noqa: E712, RUF100
    //     game_id=game_id,
    //     account=Txn.sender,
    //     box_game_players=self.box_game_players,
    //     player_count=self.box_game_state[game_id].max_players.native,
    //     clear_player=False,
    // )
    // == True
    ==
    // smart_contracts/pieout/contract.py:373-382
    // assert (
    //     srt.check_acc_in_game(  # noqa: E712, RUF100
    //         game_id=game_id,
    //         account=Txn.sender,
    //         box_game_players=self.box_game_players,
    //         player_count=self.box_game_state[game_id].max_players.native,
    //         clear_player=False,
    //     )
    //     == True
    // ), err.PLAYER_NOT_FOUND
    assert // Account is not recognized as an active player for this game.
    // smart_contracts/pieout/contract.py:384-385
    // # Get box commit rand values
    // commit_rand = self.box_commit_rand[
    bytec_0 // "c_"
    // smart_contracts/pieout/contract.py:386
    // Txn.sender
    txn Sender
    // smart_contracts/pieout/contract.py:384-387
    // # Get box commit rand values
    // commit_rand = self.box_commit_rand[
    //     Txn.sender
    // ].copy()  # Make a copy of the game state else immutable
    concat
    box_get
    assert // check self.box_commit_rand entry exists
    // smart_contracts/pieout/contract.py:389-390
    // # Fail transaction unless the assertion below evaluates True
    // assert commit_rand.commit_round.native == 0, err.NON_ZERO_COMMIT_ROUND
    dup
    pushint 8 // 8
    extract_uint64
    !
    assert // Box Commit Rand round not empty. Round value must be zero to obtain a valid one.
    // smart_contracts/pieout/contract.py:392-393
    // # Update commit rand commit round and game id fields with new values
    // commit_rand.commit_round = arc4.UInt64(Global.round + 4)
    global Round
    pushint 4 // 4
    +
    itob
    replace2 8
    // smart_contracts/pieout/contract.py:394
    // commit_rand.game_id = arc4.UInt64(game_id)
    swap
    replace2 0
    // smart_contracts/pieout/contract.py:396-397
    // # Copy the modified game state and store it as new value of box
    // self.box_commit_rand[Txn.sender] = commit_rand.copy()
    bytec_0 // "c_"
    txn Sender
    concat
    swap
    box_put
    retsub


// smart_contracts.pieout.contract.Pieout.del_box_commit_rand_for_self(game_id: uint64) -> void:
del_box_commit_rand_for_self:
    // smart_contracts/pieout/contract.py:399-404
    // # Allow caller to delete box commit rand contents for their own account
    // @arc4.abimethod
    // def del_box_commit_rand_for_self(
    //     self,
    //     game_id: UInt64,
    // ) -> None:
    proto 1 0
    // smart_contracts/pieout/contract.py:405-406
    // # Fail transaction unless the assertion below evaluates True
    // assert Global.group_size == 1, err.STANDALONE_TXN_ONLY
    global GroupSize
    intc_0 // 1
    ==
    assert // Invalid group size. This app call can only take standalone transactions.
    // smart_contracts/pieout/contract.py:408
    // assert game_id in self.box_game_state, err.GAME_ID_NOT_FOUND
    frame_dig -1
    itob
    bytec 4 // "s_"
    swap
    concat
    dup
    box_len
    bury 1
    assert // Box game state not found. Check if game ID exists.
    // smart_contracts/pieout/contract.py:410
    // assert Txn.sender in self.box_commit_rand, err.BOX_NOT_FOUND
    bytec_0 // "c_"
    txn Sender
    concat
    box_len
    bury 1
    assert // Box not found. Ensure the box you are trying to access was created and still exists.
    // smart_contracts/pieout/contract.py:411
    // assert (self.box_commit_rand[Txn.sender].game_id.native == 0 or
    bytec_0 // "c_"
    txn Sender
    concat
    box_get
    assert // check self.box_commit_rand entry exists
    intc_1 // 0
    extract_uint64
    // smart_contracts/pieout/contract.py:411-412
    // assert (self.box_commit_rand[Txn.sender].game_id.native == 0 or
    //     self.box_commit_rand[Txn.sender].game_id.native == game_id
    bz del_box_commit_rand_for_self_bool_true@2
    // smart_contracts/pieout/contract.py:412
    // self.box_commit_rand[Txn.sender].game_id.native == game_id
    bytec_0 // "c_"
    txn Sender
    concat
    box_get
    assert // check self.box_commit_rand entry exists
    intc_1 // 0
    extract_uint64
    frame_dig -1
    ==
    // smart_contracts/pieout/contract.py:411-412
    // assert (self.box_commit_rand[Txn.sender].game_id.native == 0 or
    //     self.box_commit_rand[Txn.sender].game_id.native == game_id
    bz del_box_commit_rand_for_self_bool_false@3

del_box_commit_rand_for_self_bool_true@2:
    intc_0 // 1

del_box_commit_rand_for_self_bool_merge@4:
    // smart_contracts/pieout/contract.py:411-413
    // assert (self.box_commit_rand[Txn.sender].game_id.native == 0 or
    //     self.box_commit_rand[Txn.sender].game_id.native == game_id
    // ), err.GAME_ID_MISMATCH
    assert // Game ID mismatch. Box Commit Rand Game ID must be a certain value or match Game ID arg.
    // smart_contracts/pieout/contract.py:415-416
    // # Check if box commit rand game id is not equal to zero
    // if self.box_commit_rand[Txn.sender].game_id.native != 0:
    bytec_0 // "c_"
    txn Sender
    concat
    box_get
    assert // check self.box_commit_rand entry exists
    intc_1 // 0
    extract_uint64
    bz del_box_commit_rand_for_self_after_if_else@6
    // smart_contracts/pieout/contract.py:421
    // account=Txn.sender,
    txn Sender
    // smart_contracts/pieout/contract.py:423
    // player_count=self.box_game_state[game_id].max_players.native,
    frame_dig 0
    box_get
    assert // check self.box_game_state entry exists
    intc_0 // 1
    getbyte
    // smart_contracts/pieout/contract.py:419-425
    // srt.check_acc_in_game(  # noqa: E712, RUF100
    //     game_id=game_id,
    //     account=Txn.sender,
    //     box_game_players=self.box_game_players,
    //     player_count=self.box_game_state[game_id].max_players.native,
    //     clear_player=False,
    // )
    frame_dig -1
    uncover 2
    // smart_contracts/pieout/contract.py:422
    // box_game_players=self.box_game_players,
    bytec_3 // "p_"
    // smart_contracts/pieout/contract.py:419-425
    // srt.check_acc_in_game(  # noqa: E712, RUF100
    //     game_id=game_id,
    //     account=Txn.sender,
    //     box_game_players=self.box_game_players,
    //     player_count=self.box_game_state[game_id].max_players.native,
    //     clear_player=False,
    // )
    uncover 3
    // smart_contracts/pieout/contract.py:424
    // clear_player=False,
    intc_1 // 0
    // smart_contracts/pieout/contract.py:419-425
    // srt.check_acc_in_game(  # noqa: E712, RUF100
    //     game_id=game_id,
    //     account=Txn.sender,
    //     box_game_players=self.box_game_players,
    //     player_count=self.box_game_state[game_id].max_players.native,
    //     clear_player=False,
    // )
    callsub check_acc_in_game
    // smart_contracts/pieout/contract.py:419-426
    // srt.check_acc_in_game(  # noqa: E712, RUF100
    //     game_id=game_id,
    //     account=Txn.sender,
    //     box_game_players=self.box_game_players,
    //     player_count=self.box_game_state[game_id].max_players.native,
    //     clear_player=False,
    // )
    // == False
    !
    // smart_contracts/pieout/contract.py:417-427
    // # Fail transaction unless the assertion below evaluates True
    // assert (
    //     srt.check_acc_in_game(  # noqa: E712, RUF100
    //         game_id=game_id,
    //         account=Txn.sender,
    //         box_game_players=self.box_game_players,
    //         player_count=self.box_game_state[game_id].max_players.native,
    //         clear_player=False,
    //     )
    //     == False
    // ), err.PLAYER_ACTIVE
    assert // Player with this address must not be an active game participant in the game.

del_box_commit_rand_for_self_after_if_else@6:
    // smart_contracts/pieout/contract.py:429-430
    // # Delete sender box commit rand from the smart contract storage
    // del self.box_commit_rand[Txn.sender]
    bytec_0 // "c_"
    txn Sender
    concat
    box_del
    pop
    // smart_contracts/pieout/contract.py:434
    // receiver=Txn.sender,
    txn Sender
    // smart_contracts/pieout/contract.py:435
    // amount=UInt64(cst.BOX_C_COST),
    intc 7 // 28900
    // smart_contracts/pieout/contract.py:436-438
    // note=String(
    //     'pieout:j{"method":"del_box_commit_rand_for_self","concern":"txn.app_c;mbr_box_c_refund"}'
    // ),
    pushbytes "pieout:j{\"method\":\"del_box_commit_rand_for_self\",\"concern\":\"txn.app_c;mbr_box_c_refund\"}"
    // smart_contracts/pieout/contract.py:432-439
    // # Issue MBR refund for box commit rand deletion via a payment inner transaction
    // srt.payout_itxn(
    //     receiver=Txn.sender,
    //     amount=UInt64(cst.BOX_C_COST),
    //     note=String(
    //         'pieout:j{"method":"del_box_commit_rand_for_self","concern":"txn.app_c;mbr_box_c_refund"}'
    //     ),
    // )
    callsub payout_itxn
    retsub

del_box_commit_rand_for_self_bool_false@3:
    intc_1 // 0
    b del_box_commit_rand_for_self_bool_merge@4


// smart_contracts.pieout.contract.Pieout.del_box_commit_rand_for_other(owner: bytes) -> void:
del_box_commit_rand_for_other:
    // smart_contracts/pieout/contract.py:441-443
    // # Allow caller to delete box commit rand contents for another account
    // @arc4.abimethod
    // def del_box_commit_rand_for_other(self, owner: Account) -> None:
    proto 1 0
    // smart_contracts/pieout/contract.py:444-445
    // # Fail transaction unless the assertion below evaluates True
    // assert Global.group_size == 1, err.STANDALONE_TXN_ONLY
    global GroupSize
    intc_0 // 1
    ==
    assert // Invalid group size. This app call can only take standalone transactions.
    // smart_contracts/pieout/contract.py:447
    // assert owner in self.box_commit_rand, err.BOX_NOT_FOUND
    bytec_0 // "c_"
    frame_dig -1
    concat
    dup
    box_len
    bury 1
    assert // Box not found. Ensure the box you are trying to access was created and still exists.
    // smart_contracts/pieout/contract.py:448
    // assert owner != Txn.sender, err.INVALID_CALLER
    frame_dig -1
    txn Sender
    !=
    assert // Account is not authorized to make this call.
    // smart_contracts/pieout/contract.py:450
    // assert self.box_commit_rand[owner].commit_round.native == 0, err.NON_ZERO_COMMIT_ROUND
    dup
    box_get
    assert // check self.box_commit_rand entry exists
    dup
    pushint 8 // 8
    extract_uint64
    !
    assert // Box Commit Rand round not empty. Round value must be zero to obtain a valid one.
    // smart_contracts/pieout/contract.py:451
    // assert self.box_commit_rand[owner].expiry_round.native < Global.round, err.TIME_CONSTRAINT_VIOLATION
    pushint 16 // 16
    extract_uint64
    global Round
    <
    assert // Invalid time frame. Call made outside the permitted block or timestamp range.
    // smart_contracts/pieout/contract.py:453-454
    // # Delete sender box commit rand box from contract storage
    // del self.box_commit_rand[owner]
    box_del
    pop
    // smart_contracts/pieout/contract.py:456-461
    // # Resolve box commit rand deletion MBR refund receiver by priority
    // receiver = srt.resolve_receiver_by_prio(
    //     acc1=owner,
    //     acc2=Txn.sender,
    //     acc3=Global.creator_address,
    // )
    frame_dig -1
    // smart_contracts/pieout/contract.py:459
    // acc2=Txn.sender,
    txn Sender
    // smart_contracts/pieout/contract.py:460
    // acc3=Global.creator_address,
    global CreatorAddress
    // smart_contracts/pieout/contract.py:456-461
    // # Resolve box commit rand deletion MBR refund receiver by priority
    // receiver = srt.resolve_receiver_by_prio(
    //     acc1=owner,
    //     acc2=Txn.sender,
    //     acc3=Global.creator_address,
    // )
    callsub resolve_receiver_by_prio
    // smart_contracts/pieout/contract.py:466
    // amount=UInt64(cst.BOX_C_COST),
    intc 7 // 28900
    // smart_contracts/pieout/contract.py:467-469
    // note=String(
    //     'pieout:j{"method":"del_box_commit_rand_for_other","concern":"itxn.pay;mbr_box_c_refund"}'
    // ),
    pushbytes "pieout:j{\"method\":\"del_box_commit_rand_for_other\",\"concern\":\"itxn.pay;mbr_box_c_refund\"}"
    // smart_contracts/pieout/contract.py:463-470
    // # Issue MBR refund for box commit rand deletion via a payment inner transaction
    // srt.payout_itxn(
    //     receiver=receiver,
    //     amount=UInt64(cst.BOX_C_COST),
    //     note=String(
    //         'pieout:j{"method":"del_box_commit_rand_for_other","concern":"itxn.pay;mbr_box_c_refund"}'
    //     ),
    // )
    callsub payout_itxn
    retsub


// smart_contracts.pieout.contract.Pieout.play_game(game_id: uint64) -> void:
play_game:
    // smart_contracts/pieout/contract.py:472-474
    // # Resolve the player's score associated with the specified game ID, updating game state accordingly
    // @arc4.abimethod
    // def play_game(self, game_id: UInt64) -> None:
    proto 1 0
    intc_1 // 0
    dupn 6
    pushbytes ""
    dupn 8

play_game_while_top@37:
    pushint 19610 // 19610
    global OpcodeBudget
    >
    bz play_game_after_while@42
    itxn_begin
    pushint 6 // appl
    itxn_field TypeEnum
    pushint 5 // DeleteApplication
    itxn_field OnCompletion
    bytec 12 // 0x068101
    itxn_field ApprovalProgram
    bytec 12 // 0x068101
    itxn_field ClearStateProgram
    intc_1 // 0
    itxn_field Fee
    itxn_submit
    b play_game_while_top@37

play_game_after_while@42:
    // smart_contracts/pieout/contract.py:478-479
    // # Fail transaction unless the assertion below evaluate True
    // assert game_id in self.box_game_state, err.GAME_ID_NOT_FOUND
    frame_dig -1
    itob
    dup
    frame_bury 1
    bytec 4 // "s_"
    swap
    concat
    dup
    frame_bury 0
    dup
    box_len
    bury 1
    assert // Box game state not found. Check if game ID exists.
    // smart_contracts/pieout/contract.py:480
    // assert Txn.sender in self.box_commit_rand, err.BOX_NOT_FOUND
    bytec_0 // "c_"
    txn Sender
    concat
    box_len
    bury 1
    assert // Box not found. Ensure the box you are trying to access was created and still exists.
    // smart_contracts/pieout/contract.py:481
    // assert self.box_game_trophy, err.BOX_NOT_FOUND
    bytec_2 // "t_"
    box_len
    bury 1
    assert // Box not found. Ensure the box you are trying to access was created and still exists.
    // smart_contracts/pieout/contract.py:486
    // account=Txn.sender,
    txn Sender
    // smart_contracts/pieout/contract.py:488
    // player_count=self.box_game_state[game_id].max_players.native,
    dig 1
    box_get
    assert // check self.box_game_state entry exists
    intc_0 // 1
    getbyte
    // smart_contracts/pieout/contract.py:484-490
    // srt.check_acc_in_game(  # noqa: E712, RUF100
    //     game_id=game_id,
    //     account=Txn.sender,
    //     box_game_players=self.box_game_players,
    //     player_count=self.box_game_state[game_id].max_players.native,
    //     clear_player=True,
    // )
    frame_dig -1
    uncover 2
    // smart_contracts/pieout/contract.py:487
    // box_game_players=self.box_game_players,
    bytec_3 // "p_"
    // smart_contracts/pieout/contract.py:484-490
    // srt.check_acc_in_game(  # noqa: E712, RUF100
    //     game_id=game_id,
    //     account=Txn.sender,
    //     box_game_players=self.box_game_players,
    //     player_count=self.box_game_state[game_id].max_players.native,
    //     clear_player=True,
    // )
    uncover 3
    // smart_contracts/pieout/contract.py:489
    // clear_player=True,
    intc_0 // 1
    // smart_contracts/pieout/contract.py:484-490
    // srt.check_acc_in_game(  # noqa: E712, RUF100
    //     game_id=game_id,
    //     account=Txn.sender,
    //     box_game_players=self.box_game_players,
    //     player_count=self.box_game_state[game_id].max_players.native,
    //     clear_player=True,
    // )
    callsub check_acc_in_game
    // smart_contracts/pieout/contract.py:491
    // == True
    intc_0 // 1
    // smart_contracts/pieout/contract.py:484-491
    // srt.check_acc_in_game(  # noqa: E712, RUF100
    //     game_id=game_id,
    //     account=Txn.sender,
    //     box_game_players=self.box_game_players,
    //     player_count=self.box_game_state[game_id].max_players.native,
    //     clear_player=True,
    // )
    // == True
    ==
    // smart_contracts/pieout/contract.py:483-492
    // assert (
    //     srt.check_acc_in_game(  # noqa: E712, RUF100
    //         game_id=game_id,
    //         account=Txn.sender,
    //         box_game_players=self.box_game_players,
    //         player_count=self.box_game_state[game_id].max_players.native,
    //         clear_player=True,
    //     )
    //     == True
    // ), err.PLAYER_NOT_FOUND
    assert // Account is not recognized as an active player for this game.
    // smart_contracts/pieout/contract.py:494-497
    // # Retrieve the game state value from its corresponding box using the game id parameter
    // game_state = self.box_game_state[
    //     game_id
    // ].copy()  # Make a copy of the game state else immutable
    box_get
    swap
    dup
    cover 2
    frame_bury 2
    assert // check self.box_game_state entry exists
    // smart_contracts/pieout/contract.py:499-500
    // # Fail transaction unless the assertions below evaluate True
    // assert game_state.staking_finalized == True, err.STAKING_FINAL  # noqa: E712
    dup
    intc_1 // 0
    getbit
    bytec_1 // 0x00
    intc_1 // 0
    uncover 2
    setbit
    intc_1 // 0
    getbit
    intc_0 // 1
    ==
    assert // Game state staking finalized value mismatch.
    // smart_contracts/pieout/contract.py:501
    // assert game_state.expiry_ts >= Global.latest_timestamp, err.TIME_CONSTRAINT_VIOLATION
    extract 8 8 // on error: Index access is out of bounds
    global LatestTimestamp
    itob
    b>=
    assert // Invalid time frame. Call made outside the permitted block or timestamp range.
    // smart_contracts/pieout/contract.py:504
    // self.box_commit_rand[Txn.sender].game_id.native == game_id
    bytec_0 // "c_"
    txn Sender
    concat
    box_get
    assert // check self.box_commit_rand entry exists
    intc_1 // 0
    extract_uint64
    frame_dig -1
    ==
    // smart_contracts/pieout/contract.py:503-505
    // assert (
    //     self.box_commit_rand[Txn.sender].game_id.native == game_id
    // ), err.GAME_ID_MISMATCH
    assert // Game ID mismatch. Box Commit Rand Game ID must be a certain value or match Game ID arg.
    // smart_contracts/pieout/contract.py:508
    // Global.round >= self.box_commit_rand[Txn.sender].commit_round.native
    global Round
    bytec_0 // "c_"
    txn Sender
    concat
    box_get
    assert // check self.box_commit_rand entry exists
    pushint 8 // 8
    extract_uint64
    >=
    // smart_contracts/pieout/contract.py:507-509
    // assert (
    //     Global.round >= self.box_commit_rand[Txn.sender].commit_round.native
    // ), err.COMMIT_ROUND_NOT_REACHED
    assert // Randomness commit round not reached yet.
    // smart_contracts/pieout/contract.py:511-517
    // # Call the Randomness Beacon smart contract that computes the VRF and outputs a randomness value
    // seed = arc4.abi_call[Bytes](
    //     "must_get(uint64,byte[])byte[]",
    //     self.box_commit_rand[Txn.sender].commit_round.native,
    //     Txn.sender.bytes,
    //     app_id=600011887,  # TestNet VRF Beacon Application ID
    // )[0]
    itxn_begin
    // smart_contracts/pieout/contract.py:514
    // self.box_commit_rand[Txn.sender].commit_round.native,
    bytec_0 // "c_"
    txn Sender
    concat
    box_get
    assert // check self.box_commit_rand entry exists
    pushint 8 // 8
    extract_uint64
    itob
    // smart_contracts/pieout/contract.py:515
    // Txn.sender.bytes,
    bytec 11 // 0x0020
    txn Sender
    concat
    // smart_contracts/pieout/contract.py:516
    // app_id=600011887,  # TestNet VRF Beacon Application ID
    pushint 600011887 // 600011887
    itxn_field ApplicationID
    // smart_contracts/pieout/contract.py:511-517
    // # Call the Randomness Beacon smart contract that computes the VRF and outputs a randomness value
    // seed = arc4.abi_call[Bytes](
    //     "must_get(uint64,byte[])byte[]",
    //     self.box_commit_rand[Txn.sender].commit_round.native,
    //     Txn.sender.bytes,
    //     app_id=600011887,  # TestNet VRF Beacon Application ID
    // )[0]
    pushbytes 0x47c20c23 // method "must_get(uint64,byte[])byte[]"
    itxn_field ApplicationArgs
    swap
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    pushint 6 // appl
    itxn_field TypeEnum
    intc_1 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 0 4
    bytec 5 // 0x151f7c75
    ==
    assert // application log value is not the result of an ABI return
    dup
    extract 6 0
    // smart_contracts/pieout/contract.py:521
    // score_id=self.score_id,
    intc_1 // 0
    bytec 6 // "score_id"
    app_global_get_ex
    swap
    frame_bury 11
    assert // check self.score_id exists
    // smart_contracts/pieout/contract.py:523
    // player=Txn.sender,
    txn Sender
    frame_bury 4
    // smart_contracts/pieout/subroutines.py:137-138
    // # Initialize the PCG pseudo-random generator state using 8 bytes from the given seed
    // state = pcg16_init(seed=op.extract(seed, 16, 8))
    swap
    extract 22 8
    // .venv/Lib/site-packages/lib_pcg/pcg32.py:21
    // assert seed.length == 8
    len
    pushint 8 // 8
    ==
    assert
    pushint 16 // 16
    // .venv/Lib/site-packages/lib_pcg/pcg32.py:23
    // return __pcg32_init(op.btoi(seed), UInt64(PCG_FIRST_INCREMENT))
    extract_uint64
    // .venv/Lib/site-packages/lib_pcg/pcg32.py:155
    // state = __pcg32_step(UInt64(0), incr)
    intc_1 // 0
    // .venv/Lib/site-packages/lib_pcg/pcg32.py:269
    // _high_mul, low_mul = op.mulw(state, PCG_MULTIPLIER)
    intc 8 // 6364136223846793005
    mulw
    bury 1
    // .venv/Lib/site-packages/lib_pcg/pcg32.py:23
    // return __pcg32_init(op.btoi(seed), UInt64(PCG_FIRST_INCREMENT))
    intc 9 // 1442695040888963407
    // .venv/Lib/site-packages/lib_pcg/pcg32.py:270
    // _high_add, low_add = op.addw(low_mul, incr)
    addw
    bury 1
    // .venv/Lib/site-packages/lib_pcg/pcg32.py:156
    // _high_addw, state = op.addw(state, initial_state)
    addw
    bury 1
    // .venv/Lib/site-packages/lib_pcg/pcg32.py:269
    // _high_mul, low_mul = op.mulw(state, PCG_MULTIPLIER)
    intc 8 // 6364136223846793005
    mulw
    bury 1
    // .venv/Lib/site-packages/lib_pcg/pcg32.py:23
    // return __pcg32_init(op.btoi(seed), UInt64(PCG_FIRST_INCREMENT))
    intc 9 // 1442695040888963407
    // .venv/Lib/site-packages/lib_pcg/pcg32.py:270
    // _high_add, low_add = op.addw(low_mul, incr)
    addw
    bury 1
    // .venv/Lib/site-packages/lib_pcg/pcg32.py:198
    // result += arc4.UInt16(length).bytes
    pushbytes 0x00ff
    frame_bury 5
    // .venv/Lib/site-packages/lib_pcg/pcg32.py:292
    // _addw_high, addw_low = op.addw(~value, 1)
    pushint 18446744073709486080 // 18446744073709486080
    intc_0 // 1
    addw
    bury 1
    // .venv/Lib/site-packages/lib_pcg/pcg32.py:300
    // return value & ((1 << 32) - 1)
    intc 10 // 4294967295
    &
    // .venv/Lib/site-packages/lib_pcg/pcg32.py:219
    // absolute_bound = (1 << bit_size) - lower_bound
    intc 12 // 65535
    // .venv/Lib/site-packages/lib_pcg/pcg32.py:221
    // threshold = __mask_to_uint32(__uint64_twos(absolute_bound)) % absolute_bound
    %
    frame_bury 13
    // .venv/Lib/site-packages/lib_pcg/pcg32.py:223
    // for i in urange(length):  # noqa: B007
    intc_1 // 0
    frame_bury 9
    frame_bury 12

play_game_for_header@13:
    // .venv/Lib/site-packages/lib_pcg/pcg32.py:223
    // for i in urange(length):  # noqa: B007
    frame_dig 9
    // smart_contracts/pieout/subroutines.py:145
    // length=UInt64(255),  # Number of values generated is 255
    pushint 255 // 255
    // .venv/Lib/site-packages/lib_pcg/pcg32.py:223
    // for i in urange(length):  # noqa: B007
    <
    bz play_game_after_for@18

play_game_while_top@15:
    // .venv/Lib/site-packages/lib_pcg/pcg32.py:269
    // _high_mul, low_mul = op.mulw(state, PCG_MULTIPLIER)
    frame_dig 12
    dup
    intc 8 // 6364136223846793005
    mulw
    bury 1
    // .venv/Lib/site-packages/lib_pcg/pcg32.py:254
    // return __pcg32_step(state, UInt64(PCG_FIRST_INCREMENT)), __pcg32_output(state)
    intc 9 // 1442695040888963407
    // .venv/Lib/site-packages/lib_pcg/pcg32.py:270
    // _high_add, low_add = op.addw(low_mul, incr)
    addw
    cover 2
    pop
    // .venv/Lib/site-packages/lib_pcg/pcg32.py:279
    // __mask_to_uint32(((state >> 18) ^ state) >> 27), state >> 59
    dup
    pushint 18 // 18
    shr
    dig 1
    ^
    pushint 27 // 27
    shr
    // .venv/Lib/site-packages/lib_pcg/pcg32.py:300
    // return value & ((1 << 32) - 1)
    intc 10 // 4294967295
    &
    // .venv/Lib/site-packages/lib_pcg/pcg32.py:279
    // __mask_to_uint32(((state >> 18) ^ state) >> 27), state >> 59
    swap
    pushint 59 // 59
    shr
    // .venv/Lib/site-packages/lib_pcg/pcg32.py:286
    // return (value >> rot) | __mask_to_uint32(value << (__uint64_twos(rot) & 31))
    dup2
    shr
    // .venv/Lib/site-packages/lib_pcg/pcg32.py:292
    // _addw_high, addw_low = op.addw(~value, 1)
    swap
    ~
    intc_0 // 1
    addw
    bury 1
    // .venv/Lib/site-packages/lib_pcg/pcg32.py:286
    // return (value >> rot) | __mask_to_uint32(value << (__uint64_twos(rot) & 31))
    pushint 31 // 31
    &
    uncover 2
    swap
    shl
    // .venv/Lib/site-packages/lib_pcg/pcg32.py:300
    // return value & ((1 << 32) - 1)
    intc 10 // 4294967295
    &
    // .venv/Lib/site-packages/lib_pcg/pcg32.py:286
    // return (value >> rot) | __mask_to_uint32(value << (__uint64_twos(rot) & 31))
    |
    dup
    frame_bury 8
    // .venv/Lib/site-packages/lib_pcg/pcg32.py:226
    // if candidate >= threshold:
    frame_dig 13
    >=
    bz play_game_after_if_else@17
    // .venv/Lib/site-packages/lib_pcg/pcg32.py:228
    // op.itob((candidate % absolute_bound) + lower_bound),
    frame_dig 8
    // .venv/Lib/site-packages/lib_pcg/pcg32.py:219
    // absolute_bound = (1 << bit_size) - lower_bound
    intc 12 // 65535
    // .venv/Lib/site-packages/lib_pcg/pcg32.py:228
    // op.itob((candidate % absolute_bound) + lower_bound),
    %
    // smart_contracts/pieout/subroutines.py:143
    // lower_bound=UInt64(1),  # Lower bound is 1 (to disallow 0 as a value)
    intc_0 // 1
    // .venv/Lib/site-packages/lib_pcg/pcg32.py:228
    // op.itob((candidate % absolute_bound) + lower_bound),
    +
    itob
    // .venv/Lib/site-packages/lib_pcg/pcg32.py:227-231
    // result += op.extract(
    //     op.itob((candidate % absolute_bound) + lower_bound),
    //     truncate_start_cached,
    //     byte_size,
    // )
    extract 6 2
    frame_dig 5
    swap
    concat
    frame_bury 5
    // .venv/Lib/site-packages/lib_pcg/pcg32.py:223
    // for i in urange(length):  # noqa: B007
    frame_dig 9
    intc_0 // 1
    +
    frame_bury 9
    frame_bury 12
    b play_game_for_header@13

play_game_after_if_else@17:
    frame_bury 12
    b play_game_while_top@15

play_game_after_for@18:
    // smart_contracts/pieout/subroutines.py:148-149
    // # Initialize the player's score
    // score = UInt64(0)
    intc_1 // 0
    frame_bury 10
    // smart_contracts/pieout/subroutines.py:151-152
    // # Iterate through the sequence as a byte array starting at byte index 2 (skip array header bytes)
    // for i in urange(2, sequence.bytes.length, 2):
    frame_dig 5
    len
    frame_bury 15
    intc_2 // 2
    frame_bury 9

play_game_for_header@20:
    // smart_contracts/pieout/subroutines.py:151-152
    // # Iterate through the sequence as a byte array starting at byte index 2 (skip array header bytes)
    // for i in urange(2, sequence.bytes.length, 2):
    frame_dig 9
    frame_dig 15
    <
    bz play_game_after_for@23
    // smart_contracts/pieout/subroutines.py:153-154
    // # Extract a 16-bit unsigned integer from the byte sequence
    // roll = op.extract_uint16(sequence.bytes[2:], i)
    intc_2 // 2
    frame_dig 15
    dup
    cover 2
    >=
    intc_2 // 2
    dig 2
    uncover 2
    select
    frame_dig 5
    swap
    uncover 2
    substring3
    frame_dig 9
    extract_uint16
    // smart_contracts/pieout/subroutines.py:156-157
    // # Stop accumulating score if the roll is below or equal to the elimination threshold
    // if roll <= cst.ELIM_THRESHOLD:
    pushint 10992 // 10992
    <=
    bnz play_game_after_for@23
    // smart_contracts/pieout/subroutines.py:160-161
    // # Increment score for each roll above the threshold
    // score += 1
    frame_dig 10
    intc_0 // 1
    +
    frame_bury 10
    // smart_contracts/pieout/subroutines.py:151-152
    // # Iterate through the sequence as a byte array starting at byte index 2 (skip array header bytes)
    // for i in urange(2, sequence.bytes.length, 2):
    frame_dig 9
    intc_2 // 2
    +
    frame_bury 9
    b play_game_for_header@20

play_game_after_for@23:
    // smart_contracts/pieout/subroutines.py:167
    // score_id,
    frame_dig 11
    itob
    // smart_contracts/pieout/subroutines.py:169
    // arc4.UInt8(score),
    frame_dig 10
    itob
    dup
    bitlen
    pushint 8 // 8
    <=
    assert // overflow
    extract 7 1
    dup
    frame_bury 6
    // smart_contracts/pieout/subroutines.py:163-170
    // # Emit ARC-28 event for off-chain tracking
    // arc4.emit(
    //     "player_score(uint64,uint64,address,uint8)",
    //     game_id,
    //     score_id,
    //     player,
    //     arc4.UInt8(score),
    // )
    frame_dig 1
    uncover 2
    concat
    frame_dig 4
    concat
    swap
    concat
    pushbytes 0x1cc2af51 // method "player_score(uint64,uint64,address,uint8)"
    swap
    concat
    log
    // smart_contracts/pieout/subroutines.py:174-175
    // # First Place
    // game_state.first_place_address == arc4.Address(Global.zero_address)
    frame_dig 2
    extract 56 32 // on error: Index access is out of bounds
    global ZeroAddress
    ==
    // smart_contracts/pieout/subroutines.py:174-176
    // # First Place
    // game_state.first_place_address == arc4.Address(Global.zero_address)
    // or score > game_state.first_place_score.native
    bnz play_game_if_body@25
    // smart_contracts/pieout/subroutines.py:176
    // or score > game_state.first_place_score.native
    frame_dig 2
    pushint 3 // 3
    getbyte
    frame_dig 10
    <
    // smart_contracts/pieout/subroutines.py:174-176
    // # First Place
    // game_state.first_place_address == arc4.Address(Global.zero_address)
    // or score > game_state.first_place_score.native
    bz play_game_else_body@26

play_game_if_body@25:
    // smart_contracts/pieout/subroutines.py:178-179
    // # Assign: Second -> Third
    // game_state.third_place_score = game_state.second_place_score
    frame_dig 2
    dup
    extract 4 1 // on error: Index access is out of bounds
    replace2 5
    // smart_contracts/pieout/subroutines.py:180
    // game_state.third_place_address = game_state.second_place_address
    dup
    extract 88 32 // on error: Index access is out of bounds
    replace2 120
    // smart_contracts/pieout/subroutines.py:181-182
    // # Assign: First -> Second
    // game_state.second_place_score = game_state.first_place_score
    dup
    extract 3 1 // on error: Index access is out of bounds
    replace2 4
    // smart_contracts/pieout/subroutines.py:183
    // game_state.second_place_address = game_state.first_place_address
    dup
    extract 56 32 // on error: Index access is out of bounds
    replace2 88
    // smart_contracts/pieout/subroutines.py:184-185
    // # Assign: Score -> First
    // game_state.first_place_score = arc4.UInt8(score)
    frame_dig 6
    replace2 3
    // smart_contracts/pieout/subroutines.py:186
    // game_state.first_place_address = arc4.Address(player)
    frame_dig 4
    replace2 56
    frame_bury 2

play_game_after_if_else@34:
    // smart_contracts/pieout/contract.py:527-528
    // # Increment score id by 1
    // self.score_id += 1
    intc_1 // 0
    bytec 6 // "score_id"
    app_global_get_ex
    assert // check self.score_id exists
    intc_0 // 1
    +
    bytec 6 // "score_id"
    swap
    app_global_put
    // smart_contracts/pieout/contract.py:530-531
    // # If game state first place score is higher than the ath score
    // if game_state.first_place_score.native > self.ath_score:
    frame_dig 2
    pushint 3 // 3
    getbyte
    dup
    frame_bury 14
    intc_1 // 0
    bytec 10 // "ath_score"
    app_global_get_ex
    assert // check self.ath_score exists
    >
    bz play_game_after_if_else@8
    // smart_contracts/pieout/contract.py:532-533
    // # Update ath score, game state first place score is the new ath score
    // self.ath_score = game_state.first_place_score.native
    bytec 10 // "ath_score"
    frame_dig 14
    app_global_put
    // smart_contracts/pieout/contract.py:535-536
    // # If ath address is not empty
    // if self.ath_address != Global.zero_address:
    intc_1 // 0
    bytec 7 // "ath_address"
    app_global_get_ex
    assert // check self.ath_address exists
    global ZeroAddress
    !=
    bz play_game_after_if_else@7
    // smart_contracts/pieout/contract.py:539
    // self.box_game_trophy.value.owner_address.native,
    bytec_2 // "t_"
    box_get
    assert // check self.box_game_trophy exists
    dup
    extract 8 32 // on error: Index access is out of bounds
    // smart_contracts/pieout/contract.py:540
    // self.box_game_trophy.value.asset_id.native,
    swap
    intc_1 // 0
    extract_uint64
    // smart_contracts/pieout/contract.py:537-541
    // # Use box game trophy contents to check account asset balance for trophy
    // asset_balance, asset_exists = op.AssetHoldingGet.asset_balance(
    //     self.box_game_trophy.value.owner_address.native,
    //     self.box_game_trophy.value.asset_id.native,
    // )
    asset_holding_get AssetBalance
    swap
    frame_bury 7
    // smart_contracts/pieout/contract.py:543-544
    // # If asset exists and its balance is 1, perform clawback via asset transfer inner transaction
    // if asset_exists and asset_balance == 1:
    bz play_game_after_if_else@7
    frame_dig 7
    intc_0 // 1
    ==
    bz play_game_after_if_else@7
    // smart_contracts/pieout/contract.py:546
    // asset_id=self.box_game_trophy.value.asset_id.native,
    bytec_2 // "t_"
    box_get
    assert // check self.box_game_trophy exists
    dup
    intc_1 // 0
    extract_uint64
    // smart_contracts/pieout/contract.py:547
    // asset_sender=self.box_game_trophy.value.owner_address.native,
    swap
    extract 8 32 // on error: Index access is out of bounds
    // smart_contracts/pieout/contract.py:548
    // asset_receiver=Global.current_application_address,
    global CurrentApplicationAddress
    // smart_contracts/pieout/subroutines.py:42-48
    // itxn.AssetTransfer(
    //     asset_receiver=asset_receiver,
    //     xfer_asset=asset_id,
    //     asset_sender=asset_sender,
    //     asset_amount=1,
    //     note=note,
    // ).submit()
    itxn_begin
    // smart_contracts/pieout/contract.py:549-551
    // note=String(
    //     'pieout:j{"method":"play_game","subroutine:"clawback_itxn","concern":"itxn.asset_transfer;clawback_trophy_asset"}'
    // ),
    pushbytes "pieout:j{\"method\":\"play_game\",\"subroutine:\"clawback_itxn\",\"concern\":\"itxn.asset_transfer;clawback_trophy_asset\"}"
    itxn_field Note
    // smart_contracts/pieout/subroutines.py:46
    // asset_amount=1,
    intc_0 // 1
    itxn_field AssetAmount
    itxn_field AssetReceiver
    itxn_field AssetSender
    itxn_field XferAsset
    // smart_contracts/pieout/subroutines.py:42
    // itxn.AssetTransfer(
    pushint 4 // axfer
    itxn_field TypeEnum
    intc_1 // 0
    itxn_field Fee
    // smart_contracts/pieout/subroutines.py:42-48
    // itxn.AssetTransfer(
    //     asset_receiver=asset_receiver,
    //     xfer_asset=asset_id,
    //     asset_sender=asset_sender,
    //     asset_amount=1,
    //     note=note,
    // ).submit()
    itxn_submit

play_game_after_if_else@7:
    // smart_contracts/pieout/contract.py:554-555
    // # Update ath address, transaction sender is the new ath address
    // self.ath_address = Txn.sender
    txn Sender
    bytec 7 // "ath_address"
    dig 1
    app_global_put
    // smart_contracts/pieout/contract.py:557-558
    // # Update trophy owner address, ath address is the new trophy asset owner address
    // self.box_game_trophy.value.owner_address = arc4.Address(self.ath_address)
    bytec_2 // "t_"
    box_get
    assert // check self.box_game_trophy exists
    swap
    replace2 8
    bytec_2 // "t_"
    swap
    box_put

play_game_after_if_else@8:
    // smart_contracts/pieout/contract.py:560-561
    // # Decrement number of active players by 1
    // game_state.active_players = arc4.UInt8(game_state.active_players.native - 1)
    frame_dig 2
    dup
    intc_2 // 2
    getbyte
    intc_0 // 1
    -
    itob
    dup
    bitlen
    pushint 8 // 8
    <=
    assert // overflow
    extract 7 1
    replace2 2
    // smart_contracts/pieout/contract.py:565
    // box_commit_rand=self.box_commit_rand,
    bytec_0 // "c_"
    // smart_contracts/pieout/contract.py:566
    // account=Txn.sender,
    txn Sender
    // smart_contracts/pieout/contract.py:567
    // round_delta=UInt64(cst.BOX_C_EXP_ROUND_DELTA),
    intc 6 // 32000
    // smart_contracts/pieout/contract.py:563-568
    // # Reset box commit rand for sender after they have done their play
    // srt.reset_box_commit_rand(
    //     box_commit_rand=self.box_commit_rand,
    //     account=Txn.sender,
    //     round_delta=UInt64(cst.BOX_C_EXP_ROUND_DELTA),
    // )
    callsub reset_box_commit_rand
    // smart_contracts/pieout/contract.py:570-576
    // # Check if game is over on every call
    // srt.is_game_over(
    //     game_id=game_id,
    //     game_state=game_state,
    //     box_game_players=self.box_game_players,
    //     box_commit_rand=self.box_commit_rand,
    // )
    frame_dig -1
    swap
    // smart_contracts/pieout/contract.py:574
    // box_game_players=self.box_game_players,
    bytec_3 // "p_"
    // smart_contracts/pieout/contract.py:575
    // box_commit_rand=self.box_commit_rand,
    bytec_0 // "c_"
    // smart_contracts/pieout/contract.py:570-576
    // # Check if game is over on every call
    // srt.is_game_over(
    //     game_id=game_id,
    //     game_state=game_state,
    //     box_game_players=self.box_game_players,
    //     box_commit_rand=self.box_commit_rand,
    // )
    callsub is_game_over
    bury 1
    // smart_contracts/pieout/contract.py:578-579
    // # Copy the modified game state and store it as new value of box
    // self.box_game_state[game_id] = game_state.copy()
    frame_dig 0
    swap
    box_put
    retsub

play_game_else_body@26:
    // smart_contracts/pieout/subroutines.py:188-189
    // # Second Place
    // game_state.second_place_address == arc4.Address(Global.zero_address)
    frame_dig 2
    extract 88 32 // on error: Index access is out of bounds
    global ZeroAddress
    ==
    // smart_contracts/pieout/subroutines.py:188-190
    // # Second Place
    // game_state.second_place_address == arc4.Address(Global.zero_address)
    // or score > game_state.second_place_score.native
    bnz play_game_if_body@28
    // smart_contracts/pieout/subroutines.py:190
    // or score > game_state.second_place_score.native
    frame_dig 2
    pushint 4 // 4
    getbyte
    frame_dig 10
    <
    // smart_contracts/pieout/subroutines.py:188-190
    // # Second Place
    // game_state.second_place_address == arc4.Address(Global.zero_address)
    // or score > game_state.second_place_score.native
    bz play_game_else_body@29

play_game_if_body@28:
    // smart_contracts/pieout/subroutines.py:192-193
    // # Assign: Second -> Third
    // game_state.third_place_score = game_state.second_place_score
    frame_dig 2
    dup
    extract 4 1 // on error: Index access is out of bounds
    replace2 5
    // smart_contracts/pieout/subroutines.py:194
    // game_state.third_place_address = game_state.second_place_address
    dup
    extract 88 32 // on error: Index access is out of bounds
    replace2 120
    // smart_contracts/pieout/subroutines.py:195-196
    // # Assign: Score -> Second
    // game_state.second_place_score = arc4.UInt8(score)
    frame_dig 6
    replace2 4
    // smart_contracts/pieout/subroutines.py:197
    // game_state.second_place_address = arc4.Address(player)
    frame_dig 4
    replace2 88
    frame_bury 3

play_game_after_if_else@33:
    frame_dig 3
    frame_bury 2
    b play_game_after_if_else@34

play_game_else_body@29:
    // smart_contracts/pieout/subroutines.py:199-200
    // # Third Place
    // game_state.third_place_address == arc4.Address(Global.zero_address)
    frame_dig 2
    extract 120 32 // on error: Index access is out of bounds
    global ZeroAddress
    ==
    // smart_contracts/pieout/subroutines.py:199-201
    // # Third Place
    // game_state.third_place_address == arc4.Address(Global.zero_address)
    // or score > game_state.third_place_score.native
    bnz play_game_if_body@31
    // smart_contracts/pieout/subroutines.py:201
    // or score > game_state.third_place_score.native
    frame_dig 2
    dup
    pushint 5 // 5
    getbyte
    frame_dig 10
    <
    swap
    frame_bury 3
    // smart_contracts/pieout/subroutines.py:199-201
    // # Third Place
    // game_state.third_place_address == arc4.Address(Global.zero_address)
    // or score > game_state.third_place_score.native
    bz play_game_after_if_else@33

play_game_if_body@31:
    // smart_contracts/pieout/subroutines.py:203-204
    // # Assign: Score -> Third
    // game_state.third_place_score = arc4.UInt8(score)
    frame_dig 2
    frame_dig 6
    replace2 5
    // smart_contracts/pieout/subroutines.py:205
    // game_state.third_place_address = arc4.Address(player)
    frame_dig 4
    replace2 120
    frame_bury 3
    b play_game_after_if_else@33


// smart_contracts.pieout.contract.Pieout.trigger_game_prog(game_id: uint64, trigger_id: bytes) -> bytes:
trigger_game_prog:
    // smart_contracts/pieout/contract.py:581-585
    // # Allow an active player to check for a game event and trigger its progression
    // @arc4.abimethod
    // def trigger_game_prog(
    //     self, game_id: UInt64, trigger_id: arc4.UInt8
    // ) -> arc4.Bool:
    proto 2 1
    // smart_contracts/pieout/contract.py:586-587
    // # Fail transaction unless the assertion below evaluates True
    // assert Global.group_size == 1, err.STANDALONE_TXN_ONLY
    global GroupSize
    intc_0 // 1
    ==
    assert // Invalid group size. This app call can only take standalone transactions.
    // smart_contracts/pieout/contract.py:588
    // assert game_id in self.box_game_state, err.GAME_ID_NOT_FOUND
    frame_dig -2
    itob
    bytec 4 // "s_"
    swap
    concat
    dup
    box_len
    bury 1
    assert // Box game state not found. Check if game ID exists.
    // smart_contracts/pieout/contract.py:589
    // assert Txn.sender in self.box_commit_rand, err.BOX_NOT_FOUND
    bytec_0 // "c_"
    txn Sender
    concat
    box_len
    bury 1
    assert // Box not found. Ensure the box you are trying to access was created and still exists.
    // smart_contracts/pieout/contract.py:591-594
    // # Retrieve current game state from box using the game id parameter
    // game_state = self.box_game_state[
    //     game_id
    // ].copy()  # Make a copy of the game state else immutable
    box_get
    assert // check self.box_game_state entry exists
    // smart_contracts/pieout/contract.py:596-597
    // # If trigger id 0 corresponds w/ event: Game Live
    // if trigger_id.native == 0:
    frame_dig -1
    btoi
    dup
    cover 2
    bnz trigger_game_prog_else_body@2
    // smart_contracts/pieout/contract.py:598
    // assert game_state.expiry_ts < Global.latest_timestamp, err.TIME_CONSTRAINT_VIOLATION
    dup
    extract 8 8 // on error: Index access is out of bounds
    global LatestTimestamp
    itob
    b<
    assert // Invalid time frame. Call made outside the permitted block or timestamp range.
    // smart_contracts/pieout/contract.py:599
    // is_game_live = srt.is_game_live(game_state)
    callsub is_game_live
    pop
    // smart_contracts/pieout/contract.py:600
    // return is_game_live
    swap
    retsub

trigger_game_prog_else_body@2:
    // smart_contracts/pieout/contract.py:601-602
    // # If trigger id 2 corresponds w/ event: Game Over
    // elif trigger_id.native == 2:
    frame_dig 0
    intc_2 // 2
    ==
    assert // Game event not found. Check if game event Trigger ID exists
    // smart_contracts/pieout/contract.py:603
    // assert game_state.staking_finalized == True, err.STAKING_FINAL  # noqa: E712
    dup
    intc_1 // 0
    getbit
    bytec_1 // 0x00
    intc_1 // 0
    uncover 2
    setbit
    intc_1 // 0
    getbit
    intc_0 // 1
    ==
    assert // Game state staking finalized value mismatch.
    // smart_contracts/pieout/contract.py:604
    // assert game_state.expiry_ts < Global.latest_timestamp, err.TIME_CONSTRAINT_VIOLATION
    dup
    extract 8 8 // on error: Index access is out of bounds
    global LatestTimestamp
    itob
    b<
    assert // Invalid time frame. Call made outside the permitted block or timestamp range.
    // smart_contracts/pieout/contract.py:605-610
    // is_game_over = srt.is_game_over(
    //     game_id=game_id,
    //     game_state=game_state,
    //     box_game_players=self.box_game_players,
    //     box_commit_rand=self.box_commit_rand,
    // )
    frame_dig -2
    swap
    // smart_contracts/pieout/contract.py:608
    // box_game_players=self.box_game_players,
    bytec_3 // "p_"
    // smart_contracts/pieout/contract.py:609
    // box_commit_rand=self.box_commit_rand,
    bytec_0 // "c_"
    // smart_contracts/pieout/contract.py:605-610
    // is_game_over = srt.is_game_over(
    //     game_id=game_id,
    //     game_state=game_state,
    //     box_game_players=self.box_game_players,
    //     box_commit_rand=self.box_commit_rand,
    // )
    callsub is_game_over
    pop
    // smart_contracts/pieout/contract.py:611
    // return is_game_over
    swap
    retsub


// smart_contracts.pieout.contract.Pieout.reset_game(game_id: uint64, stake_pay: uint64) -> void:
reset_game:
    // smart_contracts/pieout/contract.py:616-622
    // # Reset existing game instance
    // @arc4.abimethod
    // def reset_game(
    //     self,
    //     game_id: UInt64,
    //     stake_pay: gtxn.PaymentTransaction,
    // ) -> None:
    proto 2 0
    // smart_contracts/pieout/contract.py:623-624
    // # Fail transaction unless the assertions below evaluate True
    // assert Global.group_size == 2, err.INVALID_GROUP_SIZE
    global GroupSize
    intc_2 // 2
    ==
    assert // Invalid group size. Ensure number of transaction in group is within valid bounds.
    // smart_contracts/pieout/contract.py:625
    // assert game_id in self.box_game_state, err.GAME_ID_NOT_FOUND
    frame_dig -2
    itob
    bytec 4 // "s_"
    dig 1
    concat
    dup
    box_len
    bury 1
    assert // Box game state not found. Check if game ID exists.
    // smart_contracts/pieout/contract.py:627
    // assert stake_pay.sender == Txn.sender, err.INVALID_STAKE_PAY_SENDER
    frame_dig -1
    gtxns Sender
    txn Sender
    ==
    assert // Stake payment sender address must match transaction sender address.
    // smart_contracts/pieout/contract.py:629
    // stake_pay.receiver == Global.current_application_address
    frame_dig -1
    gtxns Receiver
    global CurrentApplicationAddress
    ==
    // smart_contracts/pieout/contract.py:628-630
    // assert (
    //     stake_pay.receiver == Global.current_application_address
    // ), err.INVALID_STAKE_PAY_RECEIVER
    assert // Stake payment receiver address must match application address.
    // smart_contracts/pieout/contract.py:631
    // assert stake_pay.amount >= cst.STAKE_AMOUNT_MANAGER, err.INVALID_STAKE_PAY_FEE
    frame_dig -1
    gtxns Amount
    intc 4 // 1000
    >=
    assert // Insufficient funds. Stake pay amount is not enough to cover staking requirements.
    // smart_contracts/pieout/contract.py:633-636
    // # Retrieve current game state from box using the game id parameter
    // game_state = self.box_game_state[
    //     game_id
    // ].copy()  # Make a copy of the game state else immutable
    dup
    box_get
    assert // check self.box_game_state entry exists
    // smart_contracts/pieout/contract.py:638-639
    // # Fail transaction unless the assertion below evaluates True
    // assert game_state.staking_finalized == True, err.STAKING_FINAL  # noqa: E712
    dup
    intc_1 // 0
    getbit
    bytec_1 // 0x00
    intc_1 // 0
    uncover 2
    setbit
    intc_1 // 0
    getbit
    intc_0 // 1
    ==
    assert // Game state staking finalized value mismatch.
    // smart_contracts/pieout/contract.py:640
    // assert game_state.admin_address == Txn.sender, err.INVALID_ADMIN
    dup
    extract 24 32 // on error: Index access is out of bounds
    txn Sender
    ==
    assert // Account is not recognized as the admin address for this game.
    // smart_contracts/pieout/contract.py:641
    // assert game_state.prize_pool.native == 0, err.NON_ZERO_PRIZE_POOL
    dup
    pushint 16 // 16
    extract_uint64
    !
    assert // Prize pool not empty. Amount in prize pool must be zero.
    // smart_contracts/pieout/contract.py:642
    // assert game_state.active_players.native == 0, err.NON_ZERO_ACTIVE_PLAYERS
    dup
    intc_2 // 2
    getbyte
    !
    assert // Game lobby not empty. Number of active players must be zero.
    // smart_contracts/pieout/contract.py:646
    // key=self.box_game_players.key_prefix + op.itob(game_id)
    bytec_3 // "p_"
    // smart_contracts/pieout/contract.py:644-647
    // # For game players box, replace the sender's address at start index 0
    // game_players_bref = BoxRef(
    //     key=self.box_game_players.key_prefix + op.itob(game_id)
    // )
    uncover 3
    // smart_contracts/pieout/contract.py:646
    // key=self.box_game_players.key_prefix + op.itob(game_id)
    concat
    // smart_contracts/pieout/contract.py:648
    // game_players_bref.replace(0, Txn.sender.bytes)
    intc_1 // 0
    txn Sender
    box_replace
    // smart_contracts/pieout/contract.py:650-651
    // # Reset game state fields back to their new game values
    // game_state.staking_finalized = arc4.Bool(False)  # noqa: FBT003
    intc_1 // 0
    dup
    setbit
    // smart_contracts/pieout/contract.py:652
    // game_state.active_players = arc4.UInt8(1)
    pushbytes 0x01
    replace2 2
    // smart_contracts/pieout/contract.py:653
    // game_state.first_place_score = arc4.UInt8(0)
    bytec_1 // 0x00
    replace2 3
    // smart_contracts/pieout/contract.py:654
    // game_state.second_place_score = arc4.UInt8(0)
    bytec_1 // 0x00
    replace2 4
    // smart_contracts/pieout/contract.py:655
    // game_state.third_place_score = arc4.UInt8(0)
    bytec_1 // 0x00
    replace2 5
    // smart_contracts/pieout/contract.py:656
    // game_state.box_p_start_pos = arc4.UInt16(cst.ADDRESS_SIZE)
    bytec 11 // 0x0020
    replace2 6
    // smart_contracts/pieout/contract.py:658
    // Global.latest_timestamp + cst.EXPIRY_INTERVAL
    global LatestTimestamp
    intc 5 // 3600
    +
    // smart_contracts/pieout/contract.py:657-659
    // game_state.expiry_ts = arc4.UInt64(
    //     Global.latest_timestamp + cst.EXPIRY_INTERVAL
    // )
    itob
    replace2 8
    // smart_contracts/pieout/contract.py:661
    // game_state.prize_pool.native + cst.STAKE_AMOUNT_MANAGER
    dup
    pushint 16 // 16
    extract_uint64
    intc 4 // 1000
    +
    // smart_contracts/pieout/contract.py:660-662
    // game_state.prize_pool = arc4.UInt64(
    //     game_state.prize_pool.native + cst.STAKE_AMOUNT_MANAGER
    // )
    itob
    replace2 16
    // smart_contracts/pieout/contract.py:663
    // game_state.first_place_address = arc4.Address(Global.zero_address)
    global ZeroAddress
    replace2 56
    // smart_contracts/pieout/contract.py:664
    // game_state.second_place_address = arc4.Address(Global.zero_address)
    global ZeroAddress
    replace2 88
    // smart_contracts/pieout/contract.py:665
    // game_state.third_place_address = arc4.Address(Global.zero_address)
    global ZeroAddress
    replace2 120
    // smart_contracts/pieout/contract.py:667-668
    // # Copy the modified game state and store it as new value of box
    // self.box_game_state[game_id] = game_state.copy()
    box_put
    retsub


// smart_contracts.pieout.contract.Pieout.delete_game(game_id: uint64) -> void:
delete_game:
    // smart_contracts/pieout/contract.py:670-675
    // # Delete existing game instance
    // @arc4.abimethod
    // def delete_game(
    //     self,
    //     game_id: UInt64,
    // ) -> None:
    proto 1 0
    pushbytes ""
    // smart_contracts/pieout/contract.py:676-677
    // # Fail transaction unless the assertions below evaluate True
    // assert Global.group_size == 1, err.STANDALONE_TXN_ONLY
    global GroupSize
    intc_0 // 1
    ==
    assert // Invalid group size. This app call can only take standalone transactions.
    // smart_contracts/pieout/contract.py:678
    // assert game_id in self.box_game_state, err.GAME_ID_NOT_FOUND
    frame_dig -1
    itob
    dup
    bytec 4 // "s_"
    swap
    concat
    dupn 2
    box_len
    bury 1
    assert // Box game state not found. Check if game ID exists.
    // smart_contracts/pieout/contract.py:680-683
    // # Retrieve current game state from box using the game id parameter
    // game_state = self.box_game_state[
    //     game_id
    // ].copy()  # Make a copy of the game state else immutable
    box_get
    swap
    dup
    uncover 2
    assert // check self.box_game_state entry exists
    // smart_contracts/pieout/contract.py:687
    // Txn.sender == self.box_game_state[game_id].admin_address.native
    txn Sender
    swap
    extract 24 32 // on error: Index access is out of bounds
    ==
    // smart_contracts/pieout/contract.py:687-688
    // Txn.sender == self.box_game_state[game_id].admin_address.native
    // or Txn.sender == Global.creator_address
    bnz delete_game_bool_true@2
    // smart_contracts/pieout/contract.py:688
    // or Txn.sender == Global.creator_address
    txn Sender
    global CreatorAddress
    ==
    // smart_contracts/pieout/contract.py:687-688
    // Txn.sender == self.box_game_state[game_id].admin_address.native
    // or Txn.sender == Global.creator_address
    bz delete_game_bool_false@3

delete_game_bool_true@2:
    intc_0 // 1

delete_game_bool_merge@4:
    // smart_contracts/pieout/contract.py:685-689
    // # Fail transaction unless the assertion below evaluates True
    // assert (
    //     Txn.sender == self.box_game_state[game_id].admin_address.native
    //     or Txn.sender == Global.creator_address
    // ), err.INVALID_CALLER
    assert // Account is not authorized to make this call.
    // smart_contracts/pieout/contract.py:693
    // if game_state.active_players.native == 1:
    frame_dig 3
    intc_2 // 2
    getbyte
    dup
    frame_bury 0
    intc_0 // 1
    ==
    bz delete_game_else_body@6
    // smart_contracts/pieout/contract.py:696
    // account=self.box_game_state[game_id].admin_address.native,
    frame_dig 2
    box_get
    assert // check self.box_game_state entry exists
    extract 24 32 // on error: Index access is out of bounds
    // smart_contracts/pieout/contract.py:694-700
    // acc_in_game = srt.check_acc_in_game(
    //     game_id=game_id,
    //     account=self.box_game_state[game_id].admin_address.native,
    //     box_game_players=self.box_game_players,
    //     player_count=UInt64(1),
    //     clear_player=False,
    // )
    frame_dig -1
    swap
    // smart_contracts/pieout/contract.py:697
    // box_game_players=self.box_game_players,
    bytec_3 // "p_"
    // smart_contracts/pieout/contract.py:698
    // player_count=UInt64(1),
    intc_0 // 1
    // smart_contracts/pieout/contract.py:699
    // clear_player=False,
    intc_1 // 0
    // smart_contracts/pieout/contract.py:694-700
    // acc_in_game = srt.check_acc_in_game(
    //     game_id=game_id,
    //     account=self.box_game_state[game_id].admin_address.native,
    //     box_game_players=self.box_game_players,
    //     player_count=UInt64(1),
    //     clear_player=False,
    // )
    callsub check_acc_in_game
    // smart_contracts/pieout/contract.py:702-703
    // # Fail transaction unless the assertion below evaluates True
    // assert acc_in_game == True, err.ADMIN_SOLE_PLAYER  # noqa: E712
    intc_0 // 1
    ==
    assert // Game admin address must be sole remaining active player in the game.
    // smart_contracts/pieout/contract.py:707
    // receiver=Txn.sender,
    txn Sender
    // smart_contracts/pieout/contract.py:708
    // amount=game_state.prize_pool.native,
    frame_dig 3
    pushint 16 // 16
    extract_uint64
    // smart_contracts/pieout/contract.py:709-711
    // note=String(
    //     'pieout:j{"method":"delete_game","concern":"itxn.pay;prize_pool_admin_stake"}'
    // ),
    pushbytes "pieout:j{\"method\":\"delete_game\",\"concern\":\"itxn.pay;prize_pool_admin_stake\"}"
    // smart_contracts/pieout/contract.py:705-712
    // # Issue prize pool payouts of admin stake if they delete a game where they the sole player
    // srt.payout_itxn(
    //     receiver=Txn.sender,
    //     amount=game_state.prize_pool.native,
    //     note=String(
    //         'pieout:j{"method":"delete_game","concern":"itxn.pay;prize_pool_admin_stake"}'
    //     ),
    // )
    callsub payout_itxn

delete_game_after_if_else@7:
    // smart_contracts/pieout/contract.py:719-720
    // # Delete box game state and box game players from contract storage
    // del self.box_game_state[game_id]
    frame_dig 2
    box_del
    pop
    // smart_contracts/pieout/contract.py:721
    // del self.box_game_players[game_id]
    bytec_3 // "p_"
    frame_dig 1
    concat
    box_del
    pop
    // smart_contracts/pieout/contract.py:726
    // value_size=arc4.UInt16(cst.ADDRESS_SIZE * game_state.max_players.native),
    frame_dig 3
    intc_0 // 1
    getbyte
    intc_3 // 32
    *
    itob
    dup
    bitlen
    pushint 16 // 16
    <=
    assert // overflow
    extract 6 2
    // smart_contracts/pieout/contract.py:725
    // key_size=arc4.UInt8(10),
    pushbytes 0x0a
    // smart_contracts/pieout/contract.py:723-727
    // # Calculate box game players fee
    // box_p_cost = self.calc_single_box_cost(
    //     key_size=arc4.UInt8(10),
    //     value_size=arc4.UInt16(cst.ADDRESS_SIZE * game_state.max_players.native),
    // )
    swap
    callsub calc_single_box_cost
    // smart_contracts/pieout/contract.py:731
    // receiver=Txn.sender,
    txn Sender
    // smart_contracts/pieout/contract.py:732
    // amount=cst.BOX_S_COST + box_p_cost,
    intc 11 // 67300
    uncover 2
    +
    // smart_contracts/pieout/contract.py:733-735
    // note=String(
    //     'pieout:j{"method":"delete_game","concern":"itxn.pay;box_s_mbr_refund+box_p_mbr_refund"}'
    // ),
    pushbytes "pieout:j{\"method\":\"delete_game\",\"concern\":\"itxn.pay;box_s_mbr_refund+box_p_mbr_refund\"}"
    // smart_contracts/pieout/contract.py:729-736
    // # Issue MBR refund for box game state and box game players deletion via a payment inner transaction
    // srt.payout_itxn(
    //     receiver=Txn.sender,
    //     amount=cst.BOX_S_COST + box_p_cost,
    //     note=String(
    //         'pieout:j{"method":"delete_game","concern":"itxn.pay;box_s_mbr_refund+box_p_mbr_refund"}'
    //     ),
    // )
    callsub payout_itxn
    retsub

delete_game_else_body@6:
    // smart_contracts/pieout/contract.py:715-716
    // # Fail transaction unless the assertion below evaluates True
    // assert game_state.active_players.native == 0, err.NON_ZERO_ACTIVE_PLAYERS
    frame_dig 0
    !
    assert // Game lobby not empty. Number of active players must be zero.
    // smart_contracts/pieout/contract.py:717
    // assert game_state.prize_pool.native == 0, err.NON_ZERO_PRIZE_POOL
    frame_dig 3
    pushint 16 // 16
    extract_uint64
    !
    assert // Prize pool not empty. Amount in prize pool must be zero.
    b delete_game_after_if_else@7

delete_game_bool_false@3:
    intc_1 // 0
    b delete_game_bool_merge@4


// smart_contracts.pieout.contract.Pieout.terminate() -> void:
terminate:
    // smart_contracts/pieout/contract.py:738-740
    // # Allow application creator to delete the smart contract client
    // @arc4.abimethod(allow_actions=["DeleteApplication"])
    // def terminate(self) -> None:
    proto 0 0
    pushbytes ""
    // smart_contracts/pieout/contract.py:741-742
    // # Fail transaction unless the assertions below evaluate True
    // assert Txn.sender == Global.creator_address, err.INVALID_CREATOR
    txn Sender
    global CreatorAddress
    ==
    assert // Account must match application creator address.
    // smart_contracts/pieout/contract.py:743
    // assert TemplateVar[bool]("DELETABLE"), err.DELETEABLE_NOT_TRUE
    intc 14 // TMPL_DELETABLE
    assert // Template variable 'DELETABLE' needs to be 'True' at deploy-time.
    // smart_contracts/pieout/contract.py:745-746
    // # Check if box game trophy exists
    // if self.box_game_trophy:
    bytec_2 // "t_"
    box_len
    bury 1
    bz terminate_after_if_else@5
    // smart_contracts/pieout/contract.py:749
    // Global.current_application_address,
    global CurrentApplicationAddress
    // smart_contracts/pieout/contract.py:750
    // self.box_game_trophy.value.asset_id.native,
    bytec_2 // "t_"
    box_get
    assert // check self.box_game_trophy exists
    intc_1 // 0
    extract_uint64
    // smart_contracts/pieout/contract.py:747-751
    // # Use box game trophy contents to check app account asset balance for trophy
    // asset_balance, asset_exists = op.AssetHoldingGet.asset_balance(
    //     Global.current_application_address,
    //     self.box_game_trophy.value.asset_id.native,
    // )
    asset_holding_get AssetBalance
    swap
    frame_bury 0
    // smart_contracts/pieout/contract.py:752-753
    // # If asset exists and its balance is 1, perform burn via asset config inner transaction
    // if asset_exists and asset_balance == 1:
    bz terminate_after_if_else@4
    frame_dig 0
    intc_0 // 1
    ==
    bz terminate_after_if_else@4
    // smart_contracts/pieout/contract.py:755
    // asset_id=self.box_game_trophy.value.asset_id.native,
    bytec_2 // "t_"
    box_get
    assert // check self.box_game_trophy exists
    intc_1 // 0
    extract_uint64
    // smart_contracts/pieout/subroutines.py:29-32
    // itxn.AssetConfig(
    //     config_asset=asset_id,
    //     note=note,
    // ).submit()
    itxn_begin
    // smart_contracts/pieout/contract.py:756-757
    // note=String(
    //     'pieout:j{"method":"terminate","concern":"itxn.asset_config;burn_trophy_asset"}'),
    pushbytes "pieout:j{\"method\":\"terminate\",\"concern\":\"itxn.asset_config;burn_trophy_asset\"}"
    itxn_field Note
    itxn_field ConfigAsset
    // smart_contracts/pieout/subroutines.py:29
    // itxn.AssetConfig(
    pushint 3 // acfg
    itxn_field TypeEnum
    intc_1 // 0
    itxn_field Fee
    // smart_contracts/pieout/subroutines.py:29-32
    // itxn.AssetConfig(
    //     config_asset=asset_id,
    //     note=note,
    // ).submit()
    itxn_submit

terminate_after_if_else@4:
    // smart_contracts/pieout/contract.py:759-760
    // # Delete box game trophy from contract storage if it exsists
    // del self.box_game_trophy.value
    bytec_2 // "t_"
    box_del
    pop

terminate_after_if_else@5:
    // smart_contracts/pieout/contract.py:762-768
    // # Issue payment inner transaction closing all remaining funds in application account balance
    // itxn.Payment(
    //     receiver=Txn.sender,
    //     amount=0,
    //     close_remainder_to=Txn.sender,
    //     note=b'pieout:j{"method":"terminate","concern":"itxn.pay;close_remainder_to"}',
    // ).submit()
    itxn_begin
    // smart_contracts/pieout/contract.py:764
    // receiver=Txn.sender,
    txn Sender
    // smart_contracts/pieout/contract.py:766
    // close_remainder_to=Txn.sender,
    dup
    // smart_contracts/pieout/contract.py:767
    // note=b'pieout:j{"method":"terminate","concern":"itxn.pay;close_remainder_to"}',
    pushbytes 0x7069656f75743a6a7b226d6574686f64223a227465726d696e617465222c22636f6e6365726e223a226974786e2e7061793b636c6f73655f72656d61696e6465725f746f227d
    itxn_field Note
    itxn_field CloseRemainderTo
    // smart_contracts/pieout/contract.py:765
    // amount=0,
    intc_1 // 0
    itxn_field Amount
    itxn_field Receiver
    // smart_contracts/pieout/contract.py:762-763
    // # Issue payment inner transaction closing all remaining funds in application account balance
    // itxn.Payment(
    intc_0 // pay
    itxn_field TypeEnum
    intc_1 // 0
    itxn_field Fee
    // smart_contracts/pieout/contract.py:762-768
    // # Issue payment inner transaction closing all remaining funds in application account balance
    // itxn.Payment(
    //     receiver=Txn.sender,
    //     amount=0,
    //     close_remainder_to=Txn.sender,
    //     note=b'pieout:j{"method":"terminate","concern":"itxn.pay;close_remainder_to"}',
    // ).submit()
    itxn_submit
    retsub
