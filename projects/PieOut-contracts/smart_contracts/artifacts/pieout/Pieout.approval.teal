#pragma version 10
#pragma typetrack false

// smart_contracts.pieout.contract.Pieout.__algopy_entrypoint_with_init() -> uint64:
main:
    intcblock 1 0 2 32 3600 1000 22500 6364136223846793005 1442695040888963407 4294967295 19300 67300 65535 TMPL_GEN_UNIX TMPL_DELETABLE
    bytecblock 0x00 "p_" "c_" 0x745f "s_" 0x151f7c75 "score_id" 0x0000000000000000 "game_id" "ath_score" "ath_address" 0x0000000000000000000000000000000000000000000000000000000000000000 0x0020 0x068101
    // smart_contracts/pieout/contract.py:31
    // class Pieout(ARC4Contract):
    txn NumAppArgs
    bz main_after_if_else@23
    pushbytess 0x137d1094 0xb66d2f56 0x627a73af 0x7401ca83 0x5be219f0 0xb2460ef6 0x3ae74f74 0xda7b6785 0x71af966e 0x74c7e053 0x3143e956 0x40c777d9 0x28a1b306 0x28a28b18 0xe9ba1695 0x102875e7 0x1898a02e 0x5ff16da4 // method "calc_single_box_fee(uint8,uint16)uint64", method "read_gen_unix()uint64", method "read_game_state(uint64)(uint64,bool,uint8,uint8,uint8,uint8,uint8,uint16,uint64,uint64,address,address,address,address)", method "read_game_players(uint64)address[]", method "generate()void", method "mint_trophy(pay,pay)void", method "claim_trophy()void", method "new_game(uint64,pay,pay,pay)void", method "join_game(uint64,pay)void", method "get_box_commit_rand(pay)void", method "get_rand_commit_round(uint64)void", method "del_box_commit_rand_player()void", method "del_box_commit_rand_admin(uint64,account)void", method "resolve_score(uint64)void", method "check_game_event_trigger(uint64,uint8)bool", method "reset_game(uint64,pay)void", method "delete_game(uint64)void", method "terminate()void"
    txna ApplicationArgs 0
    match main_calc_single_box_fee_route@5 main_read_gen_unix_route@6 main_read_game_state_route@7 main_read_game_players_route@8 main_generate_route@9 main_mint_trophy_route@10 main_claim_trophy_route@11 main_new_game_route@12 main_join_game_route@13 main_get_box_commit_rand_route@14 main_get_rand_commit_round_route@15 main_del_box_commit_rand_player_route@16 main_del_box_commit_rand_admin_route@17 main_resolve_score_route@18 main_check_game_event_trigger_route@19 main_reset_game_route@20 main_delete_game_route@21 main_terminate_route@22

main_after_if_else@23:
    // smart_contracts/pieout/contract.py:31
    // class Pieout(ARC4Contract):
    intc_1 // 0
    return

main_terminate_route@22:
    // smart_contracts/pieout/contract.py:698-699
    // # Allow application creator to delete the smart contract client
    // @arc4.abimethod(allow_actions=["DeleteApplication"])
    txn OnCompletion
    pushint 5 // DeleteApplication
    ==
    assert // OnCompletion is not DeleteApplication
    txn ApplicationID
    assert // can only call when not creating
    callsub terminate
    intc_0 // 1
    return

main_delete_game_route@21:
    // smart_contracts/pieout/contract.py:634
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/pieout/contract.py:31
    // class Pieout(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    // smart_contracts/pieout/contract.py:634
    // @arc4.abimethod
    callsub delete_game
    intc_0 // 1
    return

main_reset_game_route@20:
    // smart_contracts/pieout/contract.py:582
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/pieout/contract.py:31
    // class Pieout(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txn GroupIndex
    intc_0 // 1
    -
    dup
    gtxns TypeEnum
    intc_0 // pay
    ==
    assert // transaction type is pay
    // smart_contracts/pieout/contract.py:582
    // @arc4.abimethod
    callsub reset_game
    intc_0 // 1
    return

main_check_game_event_trigger_route@19:
    // smart_contracts/pieout/contract.py:546-547
    // # Allow an active player to check for a game event and potentially trigger its progression
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/pieout/contract.py:31
    // class Pieout(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    // smart_contracts/pieout/contract.py:546-547
    // # Allow an active player to check for a game event and potentially trigger its progression
    // @arc4.abimethod
    callsub check_game_event_trigger
    bytec 5 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_resolve_score_route@18:
    // smart_contracts/pieout/contract.py:445-446
    // # Resolve the player's score associated with the specified game ID, updating game state accordingly
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/pieout/contract.py:31
    // class Pieout(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    // smart_contracts/pieout/contract.py:445-446
    // # Resolve the player's score associated with the specified game ID, updating game state accordingly
    // @arc4.abimethod
    callsub resolve_score
    intc_0 // 1
    return

main_del_box_commit_rand_admin_route@17:
    // smart_contracts/pieout/contract.py:413-414
    // # Allow admin account to delete box commit rand for any account no longer active in games they admin for
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/pieout/contract.py:31
    // class Pieout(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    btoi
    txnas Accounts
    // smart_contracts/pieout/contract.py:413-414
    // # Allow admin account to delete box commit rand for any account no longer active in games they admin for
    // @arc4.abimethod
    callsub del_box_commit_rand_admin
    intc_0 // 1
    return

main_del_box_commit_rand_player_route@16:
    // smart_contracts/pieout/contract.py:392-393
    // # Allow caller to delete box commit rand and refund the box MBR fee
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub del_box_commit_rand_player
    intc_0 // 1
    return

main_get_rand_commit_round_route@15:
    // smart_contracts/pieout/contract.py:338-339
    // # Get randomness commit round tied to the game ID arg and store them in the commit rand box w/ sender address as key
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/pieout/contract.py:31
    // class Pieout(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    // smart_contracts/pieout/contract.py:338-339
    // # Get randomness commit round tied to the game ID arg and store them in the commit rand box w/ sender address as key
    // @arc4.abimethod
    callsub get_rand_commit_round
    intc_0 // 1
    return

main_get_box_commit_rand_route@14:
    // smart_contracts/pieout/contract.py:319-320
    // # Get box commit rand to store game id and commit round used for obtaining on-chain randomness
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/pieout/contract.py:31
    // class Pieout(ARC4Contract):
    txn GroupIndex
    intc_0 // 1
    -
    dup
    gtxns TypeEnum
    intc_0 // pay
    ==
    assert // transaction type is pay
    // smart_contracts/pieout/contract.py:319-320
    // # Get box commit rand to store game id and commit round used for obtaining on-chain randomness
    // @arc4.abimethod
    callsub get_box_commit_rand
    intc_0 // 1
    return

main_join_game_route@13:
    // smart_contracts/pieout/contract.py:253-254
    // # Join existing game instance
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/pieout/contract.py:31
    // class Pieout(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txn GroupIndex
    intc_0 // 1
    -
    dup
    gtxns TypeEnum
    intc_0 // pay
    ==
    assert // transaction type is pay
    // smart_contracts/pieout/contract.py:253-254
    // # Join existing game instance
    // @arc4.abimethod
    callsub join_game
    intc_0 // 1
    return

main_new_game_route@12:
    // smart_contracts/pieout/contract.py:186-187
    // # Create new game instance with a unique ID
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/pieout/contract.py:31
    // class Pieout(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txn GroupIndex
    pushint 3 // 3
    -
    dup
    gtxns TypeEnum
    intc_0 // pay
    ==
    assert // transaction type is pay
    txn GroupIndex
    intc_2 // 2
    -
    dup
    gtxns TypeEnum
    intc_0 // pay
    ==
    assert // transaction type is pay
    txn GroupIndex
    intc_0 // 1
    -
    dup
    gtxns TypeEnum
    intc_0 // pay
    ==
    assert // transaction type is pay
    // smart_contracts/pieout/contract.py:186-187
    // # Create new game instance with a unique ID
    // @arc4.abimethod
    callsub new_game
    intc_0 // 1
    return

main_claim_trophy_route@11:
    // smart_contracts/pieout/contract.py:171-172
    // # Allow ATH address to add the trophy to their asset balance via an asset transfer inner transaction
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub claim_trophy
    intc_0 // 1
    return

main_mint_trophy_route@10:
    // smart_contracts/pieout/contract.py:123-124
    // # Allow application creator to mint a one-time NFT asset used as trophy token to honor the ATH address
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/pieout/contract.py:31
    // class Pieout(ARC4Contract):
    txn GroupIndex
    intc_2 // 2
    -
    dup
    gtxns TypeEnum
    intc_0 // pay
    ==
    assert // transaction type is pay
    txn GroupIndex
    intc_0 // 1
    -
    dup
    gtxns TypeEnum
    intc_0 // pay
    ==
    assert // transaction type is pay
    // smart_contracts/pieout/contract.py:123-124
    // # Allow application creator to mint a one-time NFT asset used as trophy token to honor the ATH address
    // @arc4.abimethod
    callsub mint_trophy
    intc_0 // 1
    return

main_generate_route@9:
    // smart_contracts/pieout/contract.py:109-110
    // # Generate the smart contract application client with default values
    // @arc4.abimethod(create="require")
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    !
    assert // can only call when creating
    callsub generate
    intc_0 // 1
    return

main_read_game_players_route@8:
    // smart_contracts/pieout/contract.py:94-95
    // # Read the smart contract application game players box for given game id
    // @arc4.abimethod(readonly=True)
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/pieout/contract.py:31
    // class Pieout(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    // smart_contracts/pieout/contract.py:94-95
    // # Read the smart contract application game players box for given game id
    // @arc4.abimethod(readonly=True)
    callsub read_game_players
    bytec 5 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_read_game_state_route@7:
    // smart_contracts/pieout/contract.py:66-67
    // # Read the smart contract application game state box for given game id
    // @arc4.abimethod(readonly=True)
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/pieout/contract.py:31
    // class Pieout(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    // smart_contracts/pieout/contract.py:66-67
    // # Read the smart contract application game state box for given game id
    // @arc4.abimethod(readonly=True)
    callsub read_game_state
    bytec 5 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_read_gen_unix_route@6:
    // smart_contracts/pieout/contract.py:61-62
    // # Read the smart contract application genesis timestamp in Unix format
    // @arc4.abimethod(readonly=True)
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/pieout/contract.py:64
    // return TemplateVar[UInt64]("GEN_UNIX")
    intc 13 // TMPL_GEN_UNIX
    // smart_contracts/pieout/contract.py:61-62
    // # Read the smart contract application genesis timestamp in Unix format
    // @arc4.abimethod(readonly=True)
    itob
    bytec 5 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_calc_single_box_fee_route@5:
    // smart_contracts/pieout/contract.py:46-47
    // # Calculate the minimum balance requirement (MBR) fee for data storage in a single box unit
    // @arc4.abimethod(readonly=True)
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/pieout/contract.py:31
    // class Pieout(ARC4Contract):
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    // smart_contracts/pieout/contract.py:46-47
    // # Calculate the minimum balance requirement (MBR) fee for data storage in a single box unit
    // @arc4.abimethod(readonly=True)
    callsub calc_single_box_fee
    itob
    bytec 5 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return


// smart_contracts.pieout.subroutines.payout_itxn(receiver: bytes, amount: uint64, note: bytes) -> void:
payout_itxn:
    // smart_contracts/pieout/subroutines.py:37-38
    // @subroutine
    // def payout_itxn(receiver: Account, amount: UInt64, note: String) -> None:
    proto 3 0
    // smart_contracts/pieout/subroutines.py:39-43
    // itxn.Payment(
    //     receiver=receiver,
    //     amount=amount,
    //     note=note,
    // ).submit()
    itxn_begin
    frame_dig -1
    itxn_field Note
    frame_dig -2
    itxn_field Amount
    frame_dig -3
    itxn_field Receiver
    // smart_contracts/pieout/subroutines.py:39
    // itxn.Payment(
    intc_0 // pay
    itxn_field TypeEnum
    intc_1 // 0
    itxn_field Fee
    // smart_contracts/pieout/subroutines.py:39-43
    // itxn.Payment(
    //     receiver=receiver,
    //     amount=amount,
    //     note=note,
    // ).submit()
    itxn_submit
    retsub


// smart_contracts.pieout.subroutines.check_acc_in_game(game_id: uint64, account: bytes, box_game_players: bytes, player_count: uint64, clear_player: uint64) -> uint64:
check_acc_in_game:
    // smart_contracts/pieout/subroutines.py:46-54
    // # Check if transaction sender is active player in a valid game instance
    // @subroutine
    // def check_acc_in_game(
    //     game_id: UInt64,
    //     account: Account,
    //     box_game_players: BoxMap[UInt64, Bytes],
    //     player_count: UInt64,
    //     clear_player: bool,  # noqa: FBT001
    // ) -> bool:
    proto 5 1
    intc_1 // 0
    pushbytes ""
    // smart_contracts/pieout/subroutines.py:55-56
    // # Calculate total byte length to iterate over based on player count and address size
    // game_players_length = player_count * cst.ADDRESS_SIZE
    frame_dig -2
    intc_3 // 32
    *
    // smart_contracts/pieout/subroutines.py:58-59
    // # Initialize flag to track if account is found in game
    // acc_in_game = False
    intc_1 // 0
    // smart_contracts/pieout/subroutines.py:61-62
    // # Iterate through the player byte array in 32-byte chunks (one address per chunk)
    // for i in urange(0, game_players_length, cst.ADDRESS_SIZE):
    dup

check_acc_in_game_for_header@1:
    // smart_contracts/pieout/subroutines.py:61-62
    // # Iterate through the player byte array in 32-byte chunks (one address per chunk)
    // for i in urange(0, game_players_length, cst.ADDRESS_SIZE):
    frame_dig 4
    frame_dig 2
    <
    frame_dig 3
    frame_bury 1
    bz check_acc_in_game_after_for@8
    // smart_contracts/pieout/subroutines.py:63-64
    // # Extract the 32-byte player address at start index i
    // player_addr_bytes = op.extract(box_game_players[game_id], i, cst.ADDRESS_SIZE)
    frame_dig -5
    itob
    frame_dig -3
    swap
    concat
    dup
    frame_bury 0
    box_get
    assert // check BoxMap entry exists
    frame_dig 4
    intc_3 // 32
    extract3
    // smart_contracts/pieout/subroutines.py:66-67
    // # Check if the extracted player address bytes match up with the account bytes
    // if account.bytes == player_addr_bytes:
    frame_dig -4
    ==
    bz check_acc_in_game_after_if_else@6
    // smart_contracts/pieout/subroutines.py:68
    // acc_in_game = True
    intc_0 // 1
    frame_bury 3
    // smart_contracts/pieout/subroutines.py:70-71
    // # Optionally clear this player from the box by replacing their address with zero bytes
    // if clear_player:
    frame_dig -1
    bz check_acc_in_game_after_if_else@5
    // smart_contracts/pieout/subroutines.py:73
    // players_ref.replace(i, cst.ZERO_ADDR_BYTES)
    frame_dig 0
    frame_dig 4
    bytec 11 // 0x0000000000000000000000000000000000000000000000000000000000000000
    box_replace

check_acc_in_game_after_if_else@5:
    frame_dig 3
    frame_bury 1

check_acc_in_game_after_for@8:
    frame_dig 1
    // smart_contracts/pieout/subroutines.py:78-79
    // # Return True if account was found in the game, else False
    // return acc_in_game
    frame_bury 0
    retsub

check_acc_in_game_after_if_else@6:
    // smart_contracts/pieout/subroutines.py:61-62
    // # Iterate through the player byte array in 32-byte chunks (one address per chunk)
    // for i in urange(0, game_players_length, cst.ADDRESS_SIZE):
    frame_dig 4
    intc_3 // 32
    +
    frame_bury 4
    b check_acc_in_game_for_header@1


// smart_contracts.pieout.subroutines.is_game_live(game_state: bytes) -> bytes, bytes:
is_game_live:
    // smart_contracts/pieout/subroutines.py:161-163
    // # Check if game is live and execute its conditional logic
    // @subroutine
    // def is_game_live(game_state: stc.GameState) -> arc4.Bool:
    proto 1 2
    // smart_contracts/pieout/subroutines.py:166
    // (game_state.expiry_ts < Global.latest_timestamp  # If deadline expired AND
    frame_dig -1
    extract 8 8 // on error: Index access is out of bounds
    global LatestTimestamp
    itob
    b<
    // smart_contracts/pieout/subroutines.py:166-167
    // (game_state.expiry_ts < Global.latest_timestamp  # If deadline expired AND
    // and game_state.active_players >= cst.MAX_PLAYERS_BOT_BOUND)  # Min amount of active players
    bz is_game_live_or_contd@2
    // smart_contracts/pieout/subroutines.py:167
    // and game_state.active_players >= cst.MAX_PLAYERS_BOT_BOUND)  # Min amount of active players
    frame_dig -1
    extract 2 1 // on error: Index access is out of bounds
    pushbytes 0x04
    b>=
    // smart_contracts/pieout/subroutines.py:166-167
    // (game_state.expiry_ts < Global.latest_timestamp  # If deadline expired AND
    // and game_state.active_players >= cst.MAX_PLAYERS_BOT_BOUND)  # Min amount of active players
    bnz is_game_live_if_body@3

is_game_live_or_contd@2:
    // smart_contracts/pieout/subroutines.py:168
    // or game_state.active_players == game_state.max_players  # If lobby full
    frame_dig -1
    extract 2 1 // on error: Index access is out of bounds
    frame_dig -1
    extract 1 1 // on error: Index access is out of bounds
    b==
    // smart_contracts/pieout/subroutines.py:166-168
    // (game_state.expiry_ts < Global.latest_timestamp  # If deadline expired AND
    // and game_state.active_players >= cst.MAX_PLAYERS_BOT_BOUND)  # Min amount of active players
    // or game_state.active_players == game_state.max_players  # If lobby full
    bz is_game_live_else_body@8

is_game_live_if_body@3:
    // smart_contracts/pieout/subroutines.py:170-171
    // # Mark join phase as complete when staking finalized evaluates True
    // game_state.staking_finalized = arc4.Bool(True)  # noqa: FBT003
    frame_dig -1
    intc_1 // 0
    intc_0 // 1
    setbit
    frame_bury -1
    // smart_contracts/pieout/subroutines.py:175
    // Global.latest_timestamp + UInt64(cst.EXPIRY_INTERVAL)
    global LatestTimestamp
    intc 4 // 3600
    +
    // smart_contracts/pieout/subroutines.py:173-176
    // # Establish game play window by setting expiry timestamp
    // game_state.expiry_ts = arc4.UInt64(
    //     Global.latest_timestamp + UInt64(cst.EXPIRY_INTERVAL)
    // )
    itob
    frame_dig -1
    swap
    replace2 8
    dup
    frame_bury -1
    // smart_contracts/pieout/subroutines.py:181
    // game_state.staking_finalized,
    intc_1 // 0
    getbit
    bytec_0 // 0x00
    intc_1 // 0
    uncover 2
    setbit
    // smart_contracts/pieout/subroutines.py:182
    // game_state.expiry_ts,
    frame_dig -1
    extract 8 8 // on error: Index access is out of bounds
    // smart_contracts/pieout/subroutines.py:178-183
    // # Emit ARC-28 event for off-chain tracking
    // arc4.emit(
    //     "game_live(bool,uint64)",
    //     game_state.staking_finalized,
    //     game_state.expiry_ts,
    // )
    concat
    pushbytes 0xf1f3294a // method "game_live(bool,uint64)"
    swap
    concat
    log
    // smart_contracts/pieout/subroutines.py:185
    // return arc4.Bool(True)  # noqa: FBT003
    pushbytes 0x80
    frame_dig -1
    retsub

is_game_live_else_body@8:
    // smart_contracts/pieout/subroutines.py:187
    // return arc4.Bool(False)  # noqa: FBT003
    bytec_0 // 0x00
    frame_dig -1
    retsub


// smart_contracts.pieout.subroutines.is_game_over(game_id: uint64, game_state: bytes, box_game_players: bytes) -> bytes, bytes:
is_game_over:
    // smart_contracts/pieout/subroutines.py:190-194
    // # Check if game is over and execute its conditional logic
    // @subroutine
    // def is_game_over(
    //     game_id: UInt64, game_state: stc.GameState, box_game_players: BoxMap[UInt64, Bytes]
    // ) -> arc4.Bool:
    proto 3 2
    intc_1 // 0
    dupn 4
    pushbytes ""
    dupn 2
    // smart_contracts/pieout/subroutines.py:197
    // game_state.expiry_ts < Global.latest_timestamp  # If deadline expired
    frame_dig -2
    extract 8 8 // on error: Index access is out of bounds
    global LatestTimestamp
    itob
    b<
    // smart_contracts/pieout/subroutines.py:197-198
    // game_state.expiry_ts < Global.latest_timestamp  # If deadline expired
    // or game_state.active_players.native == 0  # If no more active players
    bnz is_game_over_if_body@2
    // smart_contracts/pieout/subroutines.py:198
    // or game_state.active_players.native == 0  # If no more active players
    frame_dig -2
    intc_2 // 2
    getbyte
    // smart_contracts/pieout/subroutines.py:197-198
    // game_state.expiry_ts < Global.latest_timestamp  # If deadline expired
    // or game_state.active_players.native == 0  # If no more active players
    bnz is_game_over_else_body@16

is_game_over_if_body@2:
    // smart_contracts/pieout/subroutines.py:202
    // cst.ADDRESS_SIZE * game_state.max_players.native
    frame_dig -2
    intc_0 // 1
    getbyte
    intc_3 // 32
    *
    // smart_contracts/pieout/subroutines.py:200-203
    // # Clear box game players data by setting its value to all zeroes
    // box_game_players[game_id] = op.bzero(
    //     cst.ADDRESS_SIZE * game_state.max_players.native
    // )
    bzero
    // smart_contracts/pieout/subroutines.py:200-201
    // # Clear box game players data by setting its value to all zeroes
    // box_game_players[game_id] = op.bzero(
    frame_dig -3
    itob
    frame_dig -1
    swap
    concat
    // smart_contracts/pieout/subroutines.py:200-203
    // # Clear box game players data by setting its value to all zeroes
    // box_game_players[game_id] = op.bzero(
    //     cst.ADDRESS_SIZE * game_state.max_players.native
    // )
    dup
    box_del
    pop
    swap
    box_put
    // smart_contracts/pieout/subroutines.py:205-206
    // # Mark game as over by setting active players to zero
    // game_state.active_players = arc4.UInt8(0)
    frame_dig -2
    bytec_0 // 0x00
    replace2 2
    dup
    frame_bury -2
    // smart_contracts/pieout/subroutines.py:211
    // game_state.first_place_score,
    extract 3 1 // on error: Index access is out of bounds
    // smart_contracts/pieout/subroutines.py:212
    // game_state.first_place_address,
    frame_dig -2
    extract 56 32 // on error: Index access is out of bounds
    dup
    frame_bury 2
    // smart_contracts/pieout/subroutines.py:213
    // game_state.second_place_address,
    frame_dig -2
    extract 88 32 // on error: Index access is out of bounds
    dup
    cover 2
    frame_bury 3
    // smart_contracts/pieout/subroutines.py:214
    // game_state.third_place_address,
    frame_dig -2
    extract 120 32 // on error: Index access is out of bounds
    dup
    cover 4
    frame_bury 4
    // smart_contracts/pieout/subroutines.py:208-215
    // # Emit ARC-28 event for off-chain tracking
    // arc4.emit(
    //     "game_over(uint8,address,address,address)",
    //     game_state.first_place_score,
    //     game_state.first_place_address,
    //     game_state.second_place_address,
    //     game_state.third_place_address,
    // )
    uncover 2
    dig 1
    concat
    uncover 2
    concat
    uncover 2
    concat
    pushbytes 0x410b2150 // method "game_over(uint8,address,address,address)"
    swap
    concat
    log
    // smart_contracts/pieout/subroutines.py:219
    // game_state.prize_pool.native * UInt64(50) // UInt64(100)
    frame_dig -2
    pushint 16 // 16
    extract_uint64
    dup
    pushint 50 // 50
    *
    pushint 100 // 100
    /
    // smart_contracts/pieout/subroutines.py:217-220
    // # Calculate 1st, 2nd and 3rd place prize pool win shares
    // first_win_share = (
    //     game_state.prize_pool.native * UInt64(50) // UInt64(100)
    // )  # First place gets 50%
    dup
    cover 2
    frame_bury 5
    // smart_contracts/pieout/subroutines.py:222
    // game_state.prize_pool.native * UInt64(30) // UInt64(100)
    dup
    pushint 30 // 30
    *
    pushint 100 // 100
    /
    // smart_contracts/pieout/subroutines.py:221-223
    // second_win_share = (
    //     game_state.prize_pool.native * UInt64(30) // UInt64(100)
    // )  # Second place gets 30%
    dup
    frame_bury 6
    // smart_contracts/pieout/subroutines.py:225
    // game_state.prize_pool.native - first_win_share - second_win_share
    swap
    uncover 2
    -
    // smart_contracts/pieout/subroutines.py:224-226
    // third_win_share = (
    //     game_state.prize_pool.native - first_win_share - second_win_share
    // )  # Third place gets remainder
    swap
    // smart_contracts/pieout/subroutines.py:225
    // game_state.prize_pool.native - first_win_share - second_win_share
    -
    // smart_contracts/pieout/subroutines.py:224-226
    // third_win_share = (
    //     game_state.prize_pool.native - first_win_share - second_win_share
    // )  # Third place gets remainder
    frame_bury 7
    // smart_contracts/pieout/subroutines.py:231
    // if game_state.first_place_address.native != Global.zero_address
    global ZeroAddress
    !=
    // smart_contracts/pieout/subroutines.py:230-232
    // game_state.first_place_address.native
    // if game_state.first_place_address.native != Global.zero_address
    // else game_state.admin_address.native
    bz is_game_over_ternary_false@6
    frame_dig 2
    frame_bury 0

is_game_over_ternary_merge@7:
    // smart_contracts/pieout/subroutines.py:236
    // if game_state.second_place_address.native != Global.zero_address
    frame_dig 3
    global ZeroAddress
    !=
    // smart_contracts/pieout/subroutines.py:235-237
    // game_state.second_place_address.native
    // if game_state.second_place_address.native != Global.zero_address
    // else game_state.admin_address.native
    bz is_game_over_ternary_false@9
    frame_dig 3
    frame_bury 1

is_game_over_ternary_merge@10:
    // smart_contracts/pieout/subroutines.py:241
    // if game_state.third_place_address.native != Global.zero_address
    frame_dig 4
    global ZeroAddress
    !=
    // smart_contracts/pieout/subroutines.py:240-242
    // game_state.third_place_address.native
    // if game_state.third_place_address.native != Global.zero_address
    // else game_state.admin_address.native
    bz is_game_over_ternary_false@12
    frame_dig 4

is_game_over_ternary_merge@13:
    // smart_contracts/pieout/subroutines.py:245-252
    // # Issue payouts to 1st, 2nd and 3rd place accounts
    // payout_itxn(
    //     receiver=first_place_receiver,
    //     amount=first_win_share,
    //     note=String(
    //         "sender:app_address,reciever:first_place_address,concern:prize_pool_first_win_share_payout"
    //     ),
    // )
    frame_dig 0
    frame_dig 5
    // smart_contracts/pieout/subroutines.py:249-251
    // note=String(
    //     "sender:app_address,reciever:first_place_address,concern:prize_pool_first_win_share_payout"
    // ),
    pushbytes "sender:app_address,reciever:first_place_address,concern:prize_pool_first_win_share_payout"
    // smart_contracts/pieout/subroutines.py:245-252
    // # Issue payouts to 1st, 2nd and 3rd place accounts
    // payout_itxn(
    //     receiver=first_place_receiver,
    //     amount=first_win_share,
    //     note=String(
    //         "sender:app_address,reciever:first_place_address,concern:prize_pool_first_win_share_payout"
    //     ),
    // )
    callsub payout_itxn
    // smart_contracts/pieout/subroutines.py:253-259
    // payout_itxn(
    //     receiver=second_place_receiver,
    //     amount=second_win_share,
    //     note=String(
    //         "sender:app_address,reciever:second_place_address,concern:prize_pool_second_win_share_payout"
    //     ),
    // )
    frame_dig 1
    frame_dig 6
    // smart_contracts/pieout/subroutines.py:256-258
    // note=String(
    //     "sender:app_address,reciever:second_place_address,concern:prize_pool_second_win_share_payout"
    // ),
    pushbytes "sender:app_address,reciever:second_place_address,concern:prize_pool_second_win_share_payout"
    // smart_contracts/pieout/subroutines.py:253-259
    // payout_itxn(
    //     receiver=second_place_receiver,
    //     amount=second_win_share,
    //     note=String(
    //         "sender:app_address,reciever:second_place_address,concern:prize_pool_second_win_share_payout"
    //     ),
    // )
    callsub payout_itxn
    // smart_contracts/pieout/subroutines.py:260-266
    // payout_itxn(
    //     receiver=third_place_receiver,
    //     amount=third_win_share,
    //     note=String(
    //         "sender:app_address,reciever:third_place_address,concern:prize_pool_third_win_share_payout"
    //     ),
    // )
    frame_dig 7
    // smart_contracts/pieout/subroutines.py:263-265
    // note=String(
    //     "sender:app_address,reciever:third_place_address,concern:prize_pool_third_win_share_payout"
    // ),
    pushbytes "sender:app_address,reciever:third_place_address,concern:prize_pool_third_win_share_payout"
    // smart_contracts/pieout/subroutines.py:260-266
    // payout_itxn(
    //     receiver=third_place_receiver,
    //     amount=third_win_share,
    //     note=String(
    //         "sender:app_address,reciever:third_place_address,concern:prize_pool_third_win_share_payout"
    //     ),
    // )
    callsub payout_itxn
    // smart_contracts/pieout/subroutines.py:268-269
    // # Set prize pool amount to zero
    // game_state.prize_pool = arc4.UInt64(0)
    frame_dig -2
    bytec 7 // 0x0000000000000000
    replace2 16
    frame_bury -2
    // smart_contracts/pieout/subroutines.py:271
    // return arc4.Bool(True)  # noqa: FBT003
    pushbytes 0x80
    frame_dig -2
    frame_bury 1
    frame_bury 0
    retsub

is_game_over_ternary_false@12:
    // smart_contracts/pieout/subroutines.py:242
    // else game_state.admin_address.native
    frame_dig -2
    extract 24 32 // on error: Index access is out of bounds
    b is_game_over_ternary_merge@13

is_game_over_ternary_false@9:
    // smart_contracts/pieout/subroutines.py:237
    // else game_state.admin_address.native
    frame_dig -2
    extract 24 32 // on error: Index access is out of bounds
    frame_bury 1
    b is_game_over_ternary_merge@10

is_game_over_ternary_false@6:
    // smart_contracts/pieout/subroutines.py:232
    // else game_state.admin_address.native
    frame_dig -2
    extract 24 32 // on error: Index access is out of bounds
    frame_bury 0
    b is_game_over_ternary_merge@7

is_game_over_else_body@16:
    // smart_contracts/pieout/subroutines.py:273
    // return arc4.Bool(False)  # noqa: FBT003
    bytec_0 // 0x00
    frame_dig -2
    frame_bury 1
    frame_bury 0
    retsub


// smart_contracts.pieout.contract.Pieout.calc_single_box_fee(key_size: bytes, value_size: bytes) -> uint64:
calc_single_box_fee:
    // smart_contracts/pieout/contract.py:46-50
    // # Calculate the minimum balance requirement (MBR) fee for data storage in a single box unit
    // @arc4.abimethod(readonly=True)
    // def calc_single_box_fee(
    //     self, key_size: arc4.UInt8, value_size: arc4.UInt16
    // ) -> UInt64:
    proto 2 1
    // smart_contracts/pieout/contract.py:55
    // key_size.native + value_size.native
    frame_dig -2
    btoi
    frame_dig -1
    btoi
    +
    // smart_contracts/pieout/contract.py:54
    // size_fee = arc4.UInt16(400).native * (
    pushint 400 // 400
    // smart_contracts/pieout/contract.py:54-56
    // size_fee = arc4.UInt16(400).native * (
    //     key_size.native + value_size.native
    // )  # Size fee (400 per byte * (len(key)+len(value)))
    *
    // smart_contracts/pieout/contract.py:58-59
    // # Return single box fee
    // return base_fee.native + size_fee
    pushint 2500 // 2500
    +
    retsub


// smart_contracts.pieout.contract.Pieout.read_game_state(game_id: uint64) -> bytes:
read_game_state:
    // smart_contracts/pieout/contract.py:66-68
    // # Read the smart contract application game state box for given game id
    // @arc4.abimethod(readonly=True)
    // def read_game_state(self, game_id: UInt64) -> ta.GameStateTuple:
    proto 1 1
    // smart_contracts/pieout/contract.py:71
    // game_id
    frame_dig -1
    itob
    // smart_contracts/pieout/contract.py:69-70
    // # Retrieve current game state from box using the game id parameter
    // game_state = self.box_game_state[
    bytec 4 // "s_"
    // smart_contracts/pieout/contract.py:69-72
    // # Retrieve current game state from box using the game id parameter
    // game_state = self.box_game_state[
    //     game_id
    // ].copy()  # Make a copy of the game state data else immutable
    dig 1
    concat
    box_get
    assert // check self.box_game_state entry exists
    // smart_contracts/pieout/contract.py:78
    // game_state.staking_finalized,
    dup
    intc_1 // 0
    getbit
    bytec_0 // 0x00
    intc_1 // 0
    uncover 2
    setbit
    // smart_contracts/pieout/contract.py:79
    // game_state.max_players,
    dig 1
    extract 1 1 // on error: Index access is out of bounds
    // smart_contracts/pieout/contract.py:80
    // game_state.active_players,
    dig 2
    extract 2 1 // on error: Index access is out of bounds
    // smart_contracts/pieout/contract.py:81
    // game_state.first_place_score,
    dig 3
    extract 3 1 // on error: Index access is out of bounds
    // smart_contracts/pieout/contract.py:82
    // game_state.second_place_score,
    dig 4
    extract 4 1 // on error: Index access is out of bounds
    // smart_contracts/pieout/contract.py:83
    // game_state.third_place_score,
    dig 5
    extract 5 1 // on error: Index access is out of bounds
    // smart_contracts/pieout/contract.py:84
    // game_state.box_p_start_pos,
    dig 6
    extract 6 2 // on error: Index access is out of bounds
    // smart_contracts/pieout/contract.py:85
    // game_state.expiry_ts,
    dig 7
    extract 8 8 // on error: Index access is out of bounds
    // smart_contracts/pieout/contract.py:86
    // game_state.prize_pool,
    dig 8
    extract 16 8 // on error: Index access is out of bounds
    // smart_contracts/pieout/contract.py:87
    // game_state.admin_address,
    dig 9
    extract 24 32 // on error: Index access is out of bounds
    // smart_contracts/pieout/contract.py:88
    // game_state.first_place_address,
    dig 10
    extract 56 32 // on error: Index access is out of bounds
    // smart_contracts/pieout/contract.py:89
    // game_state.second_place_address,
    dig 11
    extract 88 32 // on error: Index access is out of bounds
    // smart_contracts/pieout/contract.py:90
    // game_state.third_place_address,
    uncover 12
    extract 120 32 // on error: Index access is out of bounds
    // smart_contracts/pieout/contract.py:74-92
    // # Return the game state as a tuple
    // return ta.GameStateTuple(
    //     (
    //         arc4.UInt64(game_id),
    //         game_state.staking_finalized,
    //         game_state.max_players,
    //         game_state.active_players,
    //         game_state.first_place_score,
    //         game_state.second_place_score,
    //         game_state.third_place_score,
    //         game_state.box_p_start_pos,
    //         game_state.expiry_ts,
    //         game_state.prize_pool,
    //         game_state.admin_address,
    //         game_state.first_place_address,
    //         game_state.second_place_address,
    //         game_state.third_place_address,
    //     )
    // )
    uncover 13
    uncover 13
    concat
    uncover 12
    concat
    uncover 11
    concat
    uncover 10
    concat
    uncover 9
    concat
    uncover 8
    concat
    uncover 7
    concat
    uncover 6
    concat
    uncover 5
    concat
    uncover 4
    concat
    uncover 3
    concat
    uncover 2
    concat
    swap
    concat
    retsub


// smart_contracts.pieout.contract.Pieout.read_game_players(game_id: uint64) -> bytes:
read_game_players:
    // smart_contracts/pieout/contract.py:94-96
    // # Read the smart contract application game players box for given game id
    // @arc4.abimethod(readonly=True)
    // def read_game_players(self, game_id: UInt64) -> ta.GamePlayersArr:
    proto 1 1
    intc_1 // 0
    dup
    // smart_contracts/pieout/contract.py:97-98
    // # Retrieve current game players from box using the game id parameter
    // game_players = self.box_game_players[game_id]
    frame_dig -1
    itob
    bytec_1 // "p_"
    swap
    concat
    box_get
    swap
    dup
    uncover 2
    assert // check self.box_game_players entry exists
    // smart_contracts/pieout/contract.py:100
    // players = ta.GamePlayersArr()
    pushbytes 0x0000
    swap
    // smart_contracts/pieout/contract.py:101
    // for i in urange(0, game_players.length, cst.ADDRESS_SIZE):
    len
    intc_1 // 0

read_game_players_for_header@1:
    // smart_contracts/pieout/contract.py:101
    // for i in urange(0, game_players.length, cst.ADDRESS_SIZE):
    frame_dig 5
    frame_dig 4
    <
    bz read_game_players_after_for@6
    // smart_contracts/pieout/contract.py:102
    // player_addr_bytes = op.extract(game_players, i, cst.ADDRESS_SIZE)
    frame_dig 2
    frame_dig 5
    intc_3 // 32
    extract3
    dup
    frame_bury 0
    // smart_contracts/pieout/contract.py:103
    // if player_addr_bytes != Bytes(cst.ZERO_ADDR_BYTES):
    bytec 11 // 0x0000000000000000000000000000000000000000000000000000000000000000
    !=
    frame_dig 3
    frame_bury 1
    bz read_game_players_after_if_else@4
    // smart_contracts/pieout/contract.py:105
    // players.append(arc4.Address(player_account))
    frame_dig 3
    extract 2 0
    frame_dig 0
    concat
    dup
    len
    intc_3 // 32
    /
    itob
    extract 6 2
    swap
    concat
    frame_bury 1

read_game_players_after_if_else@4:
    frame_dig 1
    frame_bury 3
    // smart_contracts/pieout/contract.py:101
    // for i in urange(0, game_players.length, cst.ADDRESS_SIZE):
    frame_dig 5
    intc_3 // 32
    +
    frame_bury 5
    b read_game_players_for_header@1

read_game_players_after_for@6:
    // smart_contracts/pieout/contract.py:107
    // return players
    frame_dig 3
    frame_bury 0
    retsub


// smart_contracts.pieout.contract.Pieout.generate() -> void:
generate:
    // smart_contracts/pieout/contract.py:114-115
    // # Fail transaction unless the assertion below evaluates True
    // assert Txn.sender == Global.creator_address, err.INVALID_CREATOR
    txn Sender
    global CreatorAddress
    ==
    assert // Sender address must match application creator address.
    // smart_contracts/pieout/contract.py:117-118
    // # Assign Global State variables with their default starting value
    // self.game_id = UInt64(1)
    bytec 8 // "game_id"
    intc_0 // 1
    app_global_put
    // smart_contracts/pieout/contract.py:119
    // self.score_id = UInt64(1)
    bytec 6 // "score_id"
    intc_0 // 1
    app_global_put
    // smart_contracts/pieout/contract.py:120
    // self.ath_score = UInt64(0)
    bytec 9 // "ath_score"
    intc_1 // 0
    app_global_put
    // smart_contracts/pieout/contract.py:121
    // self.ath_address = Global.zero_address
    bytec 10 // "ath_address"
    global ZeroAddress
    app_global_put
    retsub


// smart_contracts.pieout.contract.Pieout.mint_trophy(box_t_pay: uint64, mint_pay: uint64) -> void:
mint_trophy:
    // smart_contracts/pieout/contract.py:123-129
    // # Allow application creator to mint a one-time NFT asset used as trophy token to honor the ATH address
    // @arc4.abimethod
    // def mint_trophy(
    //     self,
    //     box_t_pay: gtxn.PaymentTransaction,
    //     mint_pay: gtxn.PaymentTransaction,
    // ) -> None:
    proto 2 0
    // smart_contracts/pieout/contract.py:131
    // assert Global.group_size == 3, err.INVALID_GROUP_SIZE
    global GroupSize
    pushint 3 // 3
    ==
    assert // Invalid group size. Ensure number of transaction in group is within valid bounds.
    // smart_contracts/pieout/contract.py:133
    // assert box_t_pay.amount >= cst.BOX_T_FEE, err.INVALID_BOX_PAY_FEE
    frame_dig -2
    gtxns Amount
    intc 10 // 19300
    >=
    assert // Insufficient funds. Box pay amount is not enough to cover application MBR.
    // smart_contracts/pieout/contract.py:134
    // assert box_t_pay.sender == Global.creator_address, err.INVALID_BOX_PAY_SENDER
    frame_dig -2
    gtxns Sender
    global CreatorAddress
    ==
    assert // Box payment sender address must match transaction sender address.
    // smart_contracts/pieout/contract.py:136
    // box_t_pay.receiver == Global.current_application_address
    frame_dig -2
    gtxns Receiver
    global CurrentApplicationAddress
    ==
    // smart_contracts/pieout/contract.py:135-137
    // assert (
    //     box_t_pay.receiver == Global.current_application_address
    // ), err.INVALID_BOX_PAY_RECEIVER
    assert // Box payment receiver address must match application address.
    // smart_contracts/pieout/contract.py:140
    // mint_pay.amount >= Global.asset_create_min_balance
    frame_dig -1
    gtxns Amount
    global AssetCreateMinBalance
    >=
    // smart_contracts/pieout/contract.py:139-141
    // assert (
    //     mint_pay.amount >= Global.asset_create_min_balance
    // ), err.INVALID_MINT_PAY_FEE
    assert // Insufficient funds. Mint pay amount is not enough to cover asset creation cost.
    // smart_contracts/pieout/contract.py:142
    // assert mint_pay.sender == Global.creator_address, err.INVALID_MINT_PAY_SENDER
    frame_dig -1
    gtxns Sender
    global CreatorAddress
    ==
    assert // Mint payment sender address must match transaction sender address.
    // smart_contracts/pieout/contract.py:144
    // mint_pay.receiver == Global.current_application_address
    frame_dig -1
    gtxns Receiver
    global CurrentApplicationAddress
    ==
    // smart_contracts/pieout/contract.py:143-145
    // assert (
    //     mint_pay.receiver == Global.current_application_address
    // ), err.INVALID_MINT_PAY_RECEIVER
    assert // Mint payment receiver address must match application address.
    // smart_contracts/pieout/contract.py:147
    // assert not self.box_game_trophy, "Can only mint if it doesn't exist yet"
    bytec_3 // 0x745f
    box_len
    bury 1
    !
    assert // Can only mint if it doesn't exist yet
    // smart_contracts/pieout/contract.py:149-162
    // acfg_itxn = itxn.AssetConfig(
    //     total=1,
    //     unit_name="TRFY",
    //     asset_name="Gamename-ATH-Trophy",
    //     decimals=0,
    //     default_frozen=False,
    //     # url=,
    //     # metadata_hash=,
    //     manager=Global.current_application_address,
    //     # reserve=,
    //     freeze=Global.current_application_address,
    //     clawback=Global.current_application_address,
    //     note="creator:app_address,fee_payer:creator_address,concern:mint_trophy_asset_create",
    // ).submit()
    itxn_begin
    // smart_contracts/pieout/contract.py:155-157
    // # url=,
    // # metadata_hash=,
    // manager=Global.current_application_address,
    global CurrentApplicationAddress
    // smart_contracts/pieout/contract.py:158-160
    // # reserve=,
    // freeze=Global.current_application_address,
    // clawback=Global.current_application_address,
    dupn 2
    // smart_contracts/pieout/contract.py:161
    // note="creator:app_address,fee_payer:creator_address,concern:mint_trophy_asset_create",
    pushbytes "creator:app_address,fee_payer:creator_address,concern:mint_trophy_asset_create"
    itxn_field Note
    itxn_field ConfigAssetClawback
    itxn_field ConfigAssetFreeze
    itxn_field ConfigAssetManager
    // smart_contracts/pieout/contract.py:154
    // default_frozen=False,
    intc_1 // 0
    itxn_field ConfigAssetDefaultFrozen
    // smart_contracts/pieout/contract.py:153
    // decimals=0,
    intc_1 // 0
    itxn_field ConfigAssetDecimals
    // smart_contracts/pieout/contract.py:152
    // asset_name="Gamename-ATH-Trophy",
    pushbytes "Gamename-ATH-Trophy"
    itxn_field ConfigAssetName
    // smart_contracts/pieout/contract.py:151
    // unit_name="TRFY",
    pushbytes "TRFY"
    itxn_field ConfigAssetUnitName
    // smart_contracts/pieout/contract.py:150
    // total=1,
    intc_0 // 1
    itxn_field ConfigAssetTotal
    // smart_contracts/pieout/contract.py:149
    // acfg_itxn = itxn.AssetConfig(
    pushint 3 // acfg
    itxn_field TypeEnum
    intc_1 // 0
    itxn_field Fee
    // smart_contracts/pieout/contract.py:149-162
    // acfg_itxn = itxn.AssetConfig(
    //     total=1,
    //     unit_name="TRFY",
    //     asset_name="Gamename-ATH-Trophy",
    //     decimals=0,
    //     default_frozen=False,
    //     # url=,
    //     # metadata_hash=,
    //     manager=Global.current_application_address,
    //     # reserve=,
    //     freeze=Global.current_application_address,
    //     clawback=Global.current_application_address,
    //     note="creator:app_address,fee_payer:creator_address,concern:mint_trophy_asset_create",
    // ).submit()
    itxn_submit
    itxn CreatedAssetID
    // smart_contracts/pieout/contract.py:164-165
    // # Create the box game trophy and Store the created asset ID as its as value
    // self.box_game_trophy.create()
    bytec_3 // 0x745f
    pushint 40 // 40
    box_create
    pop
    // smart_contracts/pieout/contract.py:167
    // asset_id=arc4.UInt64(acfg_itxn.created_asset.id),
    itob
    // smart_contracts/pieout/contract.py:168
    // owner_address=arc4.Address(Global.zero_address),
    global ZeroAddress
    // smart_contracts/pieout/contract.py:166-169
    // self.box_game_trophy.value = stc.GameTrophy(
    //     asset_id=arc4.UInt64(acfg_itxn.created_asset.id),
    //     owner_address=arc4.Address(Global.zero_address),
    // )
    concat
    // smart_contracts/pieout/contract.py:166
    // self.box_game_trophy.value = stc.GameTrophy(
    bytec_3 // 0x745f
    // smart_contracts/pieout/contract.py:166-169
    // self.box_game_trophy.value = stc.GameTrophy(
    //     asset_id=arc4.UInt64(acfg_itxn.created_asset.id),
    //     owner_address=arc4.Address(Global.zero_address),
    // )
    swap
    box_put
    retsub


// smart_contracts.pieout.contract.Pieout.claim_trophy() -> void:
claim_trophy:
    // smart_contracts/pieout/contract.py:174
    // assert Global.group_size == 1, err.STANDALONE_TXN_ONLY
    global GroupSize
    intc_0 // 1
    ==
    assert // Invalid group size. This app call can only take standalone transactions.
    // smart_contracts/pieout/contract.py:175-176
    // # assert Txn.sender == self.ath_address, "Only ATH address can be trophy receiver"
    // assert Txn.sender.is_opted_in(
    txn Sender
    // smart_contracts/pieout/contract.py:177
    // Asset(self.box_game_trophy.value.asset_id.native)
    bytec_3 // 0x745f
    box_get
    assert // check self.box_game_trophy exists
    intc_1 // 0
    extract_uint64
    // smart_contracts/pieout/contract.py:175-178
    // # assert Txn.sender == self.ath_address, "Only ATH address can be trophy receiver"
    // assert Txn.sender.is_opted_in(
    //     Asset(self.box_game_trophy.value.asset_id.native)
    // ), "Sender needs to be opt-in to receieve trophy"
    swap
    dig 1
    asset_holding_get AssetBalance
    bury 1
    assert // Sender needs to be opt-in to receieve trophy
    // smart_contracts/pieout/contract.py:180-184
    // itxn.AssetTransfer(
    //     xfer_asset=self.box_game_trophy.value.asset_id.native,
    //     asset_receiver=Txn.sender,
    //     asset_amount=1,
    // ).submit()
    itxn_begin
    // smart_contracts/pieout/contract.py:182
    // asset_receiver=Txn.sender,
    txn Sender
    // smart_contracts/pieout/contract.py:183
    // asset_amount=1,
    intc_0 // 1
    itxn_field AssetAmount
    itxn_field AssetReceiver
    itxn_field XferAsset
    // smart_contracts/pieout/contract.py:180
    // itxn.AssetTransfer(
    pushint 4 // axfer
    itxn_field TypeEnum
    intc_1 // 0
    itxn_field Fee
    // smart_contracts/pieout/contract.py:180-184
    // itxn.AssetTransfer(
    //     xfer_asset=self.box_game_trophy.value.asset_id.native,
    //     asset_receiver=Txn.sender,
    //     asset_amount=1,
    // ).submit()
    itxn_submit
    retsub


// smart_contracts.pieout.contract.Pieout.new_game(max_players: uint64, box_s_pay: uint64, box_p_pay: uint64, stake_pay: uint64) -> void:
new_game:
    // smart_contracts/pieout/contract.py:186-194
    // # Create new game instance with a unique ID
    // @arc4.abimethod
    // def new_game(
    //     self,
    //     max_players: UInt64,
    //     box_s_pay: gtxn.PaymentTransaction,
    //     box_p_pay: gtxn.PaymentTransaction,
    //     stake_pay: gtxn.PaymentTransaction,
    // ) -> None:
    proto 4 0
    // smart_contracts/pieout/contract.py:195-196
    // # Fail transaction unless the assertion below evaluates True
    // assert Global.group_size == 4, err.INVALID_GROUP_SIZE
    global GroupSize
    pushint 4 // 4
    ==
    assert // Invalid group size. Ensure number of transaction in group is within valid bounds.
    // smart_contracts/pieout/contract.py:199
    // max_players >= cst.MAX_PLAYERS_BOT_BOUND
    frame_dig -4
    pushint 4 // 4
    >=
    // smart_contracts/pieout/contract.py:199-200
    // max_players >= cst.MAX_PLAYERS_BOT_BOUND
    // and max_players <= cst.MAX_PLAYERS_TOP_BOUND
    bz new_game_bool_false@3
    // smart_contracts/pieout/contract.py:200
    // and max_players <= cst.MAX_PLAYERS_TOP_BOUND
    frame_dig -4
    pushint 16 // 16
    <=
    // smart_contracts/pieout/contract.py:199-200
    // max_players >= cst.MAX_PLAYERS_BOT_BOUND
    // and max_players <= cst.MAX_PLAYERS_TOP_BOUND
    bz new_game_bool_false@3
    intc_0 // 1

new_game_bool_merge@4:
    // smart_contracts/pieout/contract.py:198-201
    // assert (
    //     max_players >= cst.MAX_PLAYERS_BOT_BOUND
    //     and max_players <= cst.MAX_PLAYERS_TOP_BOUND
    // ), err.INVALID_MAX_PLAYERS
    assert // The number of max players must be within bounds.
    // smart_contracts/pieout/contract.py:203
    // assert stake_pay.amount >= cst.STAKE_AMOUNT_MANAGER, err.INVALID_STAKE_PAY_FEE
    frame_dig -1
    gtxns Amount
    dup
    intc 5 // 1000
    >=
    assert // Insufficient funds. Stake pay amount is not enough to cover staking requirements.
    // smart_contracts/pieout/contract.py:204
    // assert box_s_pay.amount >= cst.BOX_S_FEE, err.INVALID_BOX_PAY_FEE
    frame_dig -3
    gtxns Amount
    intc 11 // 67300
    >=
    assert // Insufficient funds. Box pay amount is not enough to cover application MBR.
    // smart_contracts/pieout/contract.py:205
    // assert box_p_pay.amount >= self.calc_single_box_fee(
    frame_dig -2
    gtxns Amount
    // smart_contracts/pieout/contract.py:207
    // value_size=arc4.UInt16(cst.ADDRESS_SIZE * max_players),
    intc_3 // 32
    frame_dig -4
    *
    dup
    itob
    dup
    bitlen
    pushint 16 // 16
    <=
    assert // overflow
    extract 6 2
    // smart_contracts/pieout/contract.py:206
    // key_size=arc4.UInt8(10),
    pushbytes 0x0a
    // smart_contracts/pieout/contract.py:205-208
    // assert box_p_pay.amount >= self.calc_single_box_fee(
    //     key_size=arc4.UInt8(10),
    //     value_size=arc4.UInt16(cst.ADDRESS_SIZE * max_players),
    // ), err.INVALID_BOX_PAY_FEE
    swap
    callsub calc_single_box_fee
    uncover 2
    <=
    assert // Insufficient funds. Box pay amount is not enough to cover application MBR.
    // smart_contracts/pieout/contract.py:210
    // assert stake_pay.sender == Txn.sender, err.INVALID_STAKE_PAY_SENDER
    frame_dig -1
    gtxns Sender
    txn Sender
    ==
    assert // Stake payment sender address must match transaction sender address.
    // smart_contracts/pieout/contract.py:211
    // assert box_s_pay.sender == Txn.sender, err.INVALID_BOX_PAY_SENDER
    frame_dig -3
    gtxns Sender
    txn Sender
    ==
    assert // Box payment sender address must match transaction sender address.
    // smart_contracts/pieout/contract.py:212
    // assert box_p_pay.sender == Txn.sender, err.INVALID_BOX_PAY_SENDER
    frame_dig -2
    gtxns Sender
    txn Sender
    ==
    assert // Box payment sender address must match transaction sender address.
    // smart_contracts/pieout/contract.py:215
    // stake_pay.receiver == Global.current_application_address
    frame_dig -1
    gtxns Receiver
    global CurrentApplicationAddress
    ==
    // smart_contracts/pieout/contract.py:214-216
    // assert (
    //     stake_pay.receiver == Global.current_application_address
    // ), err.INVALID_STAKE_PAY_RECEIVER
    assert // Stake payment receiver address must match application address.
    // smart_contracts/pieout/contract.py:218
    // box_s_pay.receiver == Global.current_application_address
    frame_dig -3
    gtxns Receiver
    global CurrentApplicationAddress
    ==
    // smart_contracts/pieout/contract.py:217-219
    // assert (
    //     box_s_pay.receiver == Global.current_application_address
    // ), err.INVALID_BOX_PAY_RECEIVER
    assert // Box payment receiver address must match application address.
    // smart_contracts/pieout/contract.py:221
    // box_p_pay.receiver == Global.current_application_address
    frame_dig -2
    gtxns Receiver
    global CurrentApplicationAddress
    ==
    // smart_contracts/pieout/contract.py:220-222
    // assert (
    //     box_p_pay.receiver == Global.current_application_address
    // ), err.INVALID_BOX_PAY_RECEIVER
    assert // Box payment receiver address must match application address.
    // smart_contracts/pieout/contract.py:227
    // max_players=arc4.UInt8(max_players),
    frame_dig -4
    itob
    dup
    bitlen
    pushint 8 // 8
    <=
    assert // overflow
    extract 7 1
    // smart_contracts/pieout/contract.py:233
    // expiry_ts=arc4.UInt64(Global.latest_timestamp + cst.EXPIRY_INTERVAL),
    global LatestTimestamp
    intc 4 // 3600
    +
    itob
    // smart_contracts/pieout/contract.py:234
    // prize_pool=arc4.UInt64(stake_pay.amount),
    uncover 3
    itob
    // smart_contracts/pieout/contract.py:235
    // admin_address=arc4.Address(Txn.sender),
    txn Sender
    // smart_contracts/pieout/contract.py:236
    // first_place_address=arc4.Address(Global.zero_address),
    global ZeroAddress
    // smart_contracts/pieout/contract.py:237-238
    // second_place_address=arc4.Address(Global.zero_address),
    // third_place_address=arc4.Address(Global.zero_address),
    dupn 2
    // smart_contracts/pieout/contract.py:226
    // staking_finalized=arc4.Bool(False),  # noqa: FBT003
    bytec_0 // 0x00
    // smart_contracts/pieout/contract.py:224-239
    // # Initialize new game state by writing the default starting values and store them in game state box
    // self.box_game_state[self.game_id] = stc.GameState(
    //     staking_finalized=arc4.Bool(False),  # noqa: FBT003
    //     max_players=arc4.UInt8(max_players),
    //     active_players=arc4.UInt8(1),
    //     first_place_score=arc4.UInt8(0),
    //     second_place_score=arc4.UInt8(0),
    //     third_place_score=arc4.UInt8(0),
    //     box_p_start_pos=arc4.UInt16(cst.ADDRESS_SIZE),
    //     expiry_ts=arc4.UInt64(Global.latest_timestamp + cst.EXPIRY_INTERVAL),
    //     prize_pool=arc4.UInt64(stake_pay.amount),
    //     admin_address=arc4.Address(Txn.sender),
    //     first_place_address=arc4.Address(Global.zero_address),
    //     second_place_address=arc4.Address(Global.zero_address),
    //     third_place_address=arc4.Address(Global.zero_address),
    // )
    uncover 7
    concat
    // smart_contracts/pieout/contract.py:228
    // active_players=arc4.UInt8(1),
    pushbytes 0x01
    // smart_contracts/pieout/contract.py:224-239
    // # Initialize new game state by writing the default starting values and store them in game state box
    // self.box_game_state[self.game_id] = stc.GameState(
    //     staking_finalized=arc4.Bool(False),  # noqa: FBT003
    //     max_players=arc4.UInt8(max_players),
    //     active_players=arc4.UInt8(1),
    //     first_place_score=arc4.UInt8(0),
    //     second_place_score=arc4.UInt8(0),
    //     third_place_score=arc4.UInt8(0),
    //     box_p_start_pos=arc4.UInt16(cst.ADDRESS_SIZE),
    //     expiry_ts=arc4.UInt64(Global.latest_timestamp + cst.EXPIRY_INTERVAL),
    //     prize_pool=arc4.UInt64(stake_pay.amount),
    //     admin_address=arc4.Address(Txn.sender),
    //     first_place_address=arc4.Address(Global.zero_address),
    //     second_place_address=arc4.Address(Global.zero_address),
    //     third_place_address=arc4.Address(Global.zero_address),
    // )
    concat
    // smart_contracts/pieout/contract.py:229
    // first_place_score=arc4.UInt8(0),
    bytec_0 // 0x00
    // smart_contracts/pieout/contract.py:224-239
    // # Initialize new game state by writing the default starting values and store them in game state box
    // self.box_game_state[self.game_id] = stc.GameState(
    //     staking_finalized=arc4.Bool(False),  # noqa: FBT003
    //     max_players=arc4.UInt8(max_players),
    //     active_players=arc4.UInt8(1),
    //     first_place_score=arc4.UInt8(0),
    //     second_place_score=arc4.UInt8(0),
    //     third_place_score=arc4.UInt8(0),
    //     box_p_start_pos=arc4.UInt16(cst.ADDRESS_SIZE),
    //     expiry_ts=arc4.UInt64(Global.latest_timestamp + cst.EXPIRY_INTERVAL),
    //     prize_pool=arc4.UInt64(stake_pay.amount),
    //     admin_address=arc4.Address(Txn.sender),
    //     first_place_address=arc4.Address(Global.zero_address),
    //     second_place_address=arc4.Address(Global.zero_address),
    //     third_place_address=arc4.Address(Global.zero_address),
    // )
    concat
    // smart_contracts/pieout/contract.py:230
    // second_place_score=arc4.UInt8(0),
    bytec_0 // 0x00
    // smart_contracts/pieout/contract.py:224-239
    // # Initialize new game state by writing the default starting values and store them in game state box
    // self.box_game_state[self.game_id] = stc.GameState(
    //     staking_finalized=arc4.Bool(False),  # noqa: FBT003
    //     max_players=arc4.UInt8(max_players),
    //     active_players=arc4.UInt8(1),
    //     first_place_score=arc4.UInt8(0),
    //     second_place_score=arc4.UInt8(0),
    //     third_place_score=arc4.UInt8(0),
    //     box_p_start_pos=arc4.UInt16(cst.ADDRESS_SIZE),
    //     expiry_ts=arc4.UInt64(Global.latest_timestamp + cst.EXPIRY_INTERVAL),
    //     prize_pool=arc4.UInt64(stake_pay.amount),
    //     admin_address=arc4.Address(Txn.sender),
    //     first_place_address=arc4.Address(Global.zero_address),
    //     second_place_address=arc4.Address(Global.zero_address),
    //     third_place_address=arc4.Address(Global.zero_address),
    // )
    concat
    // smart_contracts/pieout/contract.py:231
    // third_place_score=arc4.UInt8(0),
    bytec_0 // 0x00
    // smart_contracts/pieout/contract.py:224-239
    // # Initialize new game state by writing the default starting values and store them in game state box
    // self.box_game_state[self.game_id] = stc.GameState(
    //     staking_finalized=arc4.Bool(False),  # noqa: FBT003
    //     max_players=arc4.UInt8(max_players),
    //     active_players=arc4.UInt8(1),
    //     first_place_score=arc4.UInt8(0),
    //     second_place_score=arc4.UInt8(0),
    //     third_place_score=arc4.UInt8(0),
    //     box_p_start_pos=arc4.UInt16(cst.ADDRESS_SIZE),
    //     expiry_ts=arc4.UInt64(Global.latest_timestamp + cst.EXPIRY_INTERVAL),
    //     prize_pool=arc4.UInt64(stake_pay.amount),
    //     admin_address=arc4.Address(Txn.sender),
    //     first_place_address=arc4.Address(Global.zero_address),
    //     second_place_address=arc4.Address(Global.zero_address),
    //     third_place_address=arc4.Address(Global.zero_address),
    // )
    concat
    // smart_contracts/pieout/contract.py:232
    // box_p_start_pos=arc4.UInt16(cst.ADDRESS_SIZE),
    bytec 12 // 0x0020
    // smart_contracts/pieout/contract.py:224-239
    // # Initialize new game state by writing the default starting values and store them in game state box
    // self.box_game_state[self.game_id] = stc.GameState(
    //     staking_finalized=arc4.Bool(False),  # noqa: FBT003
    //     max_players=arc4.UInt8(max_players),
    //     active_players=arc4.UInt8(1),
    //     first_place_score=arc4.UInt8(0),
    //     second_place_score=arc4.UInt8(0),
    //     third_place_score=arc4.UInt8(0),
    //     box_p_start_pos=arc4.UInt16(cst.ADDRESS_SIZE),
    //     expiry_ts=arc4.UInt64(Global.latest_timestamp + cst.EXPIRY_INTERVAL),
    //     prize_pool=arc4.UInt64(stake_pay.amount),
    //     admin_address=arc4.Address(Txn.sender),
    //     first_place_address=arc4.Address(Global.zero_address),
    //     second_place_address=arc4.Address(Global.zero_address),
    //     third_place_address=arc4.Address(Global.zero_address),
    // )
    concat
    uncover 6
    concat
    uncover 5
    concat
    uncover 4
    concat
    uncover 3
    concat
    uncover 2
    concat
    swap
    concat
    // smart_contracts/pieout/contract.py:224-225
    // # Initialize new game state by writing the default starting values and store them in game state box
    // self.box_game_state[self.game_id] = stc.GameState(
    intc_1 // 0
    bytec 8 // "game_id"
    app_global_get_ex
    assert // check self.game_id exists
    dup
    itob
    bytec 4 // "s_"
    dig 1
    concat
    // smart_contracts/pieout/contract.py:224-239
    // # Initialize new game state by writing the default starting values and store them in game state box
    // self.box_game_state[self.game_id] = stc.GameState(
    //     staking_finalized=arc4.Bool(False),  # noqa: FBT003
    //     max_players=arc4.UInt8(max_players),
    //     active_players=arc4.UInt8(1),
    //     first_place_score=arc4.UInt8(0),
    //     second_place_score=arc4.UInt8(0),
    //     third_place_score=arc4.UInt8(0),
    //     box_p_start_pos=arc4.UInt16(cst.ADDRESS_SIZE),
    //     expiry_ts=arc4.UInt64(Global.latest_timestamp + cst.EXPIRY_INTERVAL),
    //     prize_pool=arc4.UInt64(stake_pay.amount),
    //     admin_address=arc4.Address(Txn.sender),
    //     first_place_address=arc4.Address(Global.zero_address),
    //     second_place_address=arc4.Address(Global.zero_address),
    //     third_place_address=arc4.Address(Global.zero_address),
    // )
    uncover 3
    box_put
    // smart_contracts/pieout/contract.py:241-242
    // # Initialize box game players with zeroed bytes to store all player addresses (32 bytes per player)
    // self.box_game_players[self.game_id] = op.bzero(cst.ADDRESS_SIZE * max_players)
    uncover 2
    bzero
    bytec_1 // "p_"
    uncover 2
    concat
    dup
    box_del
    pop
    dup
    uncover 2
    box_put
    // smart_contracts/pieout/contract.py:248
    // game_players_bref.replace(0, Txn.sender.bytes)
    intc_1 // 0
    txn Sender
    box_replace
    // smart_contracts/pieout/contract.py:250-251
    // # Increment game id by 1 for next new game instance
    // self.game_id += 1
    intc_0 // 1
    +
    bytec 8 // "game_id"
    swap
    app_global_put
    retsub

new_game_bool_false@3:
    intc_1 // 0
    b new_game_bool_merge@4


// smart_contracts.pieout.contract.Pieout.join_game(game_id: uint64, stake_pay: uint64) -> void:
join_game:
    // smart_contracts/pieout/contract.py:253-259
    // # Join existing game instance
    // @arc4.abimethod
    // def join_game(
    //     self,
    //     game_id: UInt64,
    //     stake_pay: gtxn.PaymentTransaction,
    // ) -> None:
    proto 2 0
    // smart_contracts/pieout/contract.py:260-261
    // # Fail transaction unless the assertion below evaluates True
    // assert Global.group_size == 2, err.INVALID_GROUP_SIZE
    global GroupSize
    intc_2 // 2
    ==
    assert // Invalid group size. Ensure number of transaction in group is within valid bounds.
    // smart_contracts/pieout/contract.py:262
    // assert game_id in self.box_game_state, err.INVALID_GAME_ID
    frame_dig -2
    itob
    bytec 4 // "s_"
    dig 1
    concat
    dup
    box_len
    bury 1
    assert // Box game state not found. Check if Game ID is valid.
    // smart_contracts/pieout/contract.py:264
    // assert stake_pay.amount >= cst.STAKE_AMOUNT_OTHER, err.INVALID_STAKE_PAY_FEE
    frame_dig -1
    gtxns Amount
    dup
    pushint 258400 // 258400
    >=
    assert // Insufficient funds. Stake pay amount is not enough to cover staking requirements.
    // smart_contracts/pieout/contract.py:265
    // assert stake_pay.sender == Txn.sender, err.INVALID_STAKE_PAY_SENDER
    frame_dig -1
    gtxns Sender
    txn Sender
    ==
    assert // Stake payment sender address must match transaction sender address.
    // smart_contracts/pieout/contract.py:267
    // stake_pay.receiver == Global.current_application_address
    frame_dig -1
    gtxns Receiver
    global CurrentApplicationAddress
    ==
    // smart_contracts/pieout/contract.py:266-268
    // assert (
    //     stake_pay.receiver == Global.current_application_address
    // ), err.INVALID_STAKE_PAY_RECEIVER
    assert // Stake payment receiver address must match application address.
    // smart_contracts/pieout/contract.py:270-273
    // # Retrieve current game state from box using the game id parameter
    // game_state = self.box_game_state[
    //     game_id
    // ].copy()  # Make a copy of the game state else immutable
    dig 1
    box_get
    assert // check self.box_game_state entry exists
    // smart_contracts/pieout/contract.py:278
    // account=Txn.sender,
    txn Sender
    // smart_contracts/pieout/contract.py:280
    // player_count=self.box_game_state[game_id].active_players.native,
    dig 1
    intc_2 // 2
    getbyte
    // smart_contracts/pieout/contract.py:276-282
    // srt.check_acc_in_game(  # noqa: E712, RUF100
    //     game_id=game_id,
    //     account=Txn.sender,
    //     box_game_players=self.box_game_players,
    //     player_count=self.box_game_state[game_id].active_players.native,
    //     clear_player=False,
    // )
    frame_dig -2
    uncover 2
    // smart_contracts/pieout/contract.py:279
    // box_game_players=self.box_game_players,
    bytec_1 // "p_"
    // smart_contracts/pieout/contract.py:276-282
    // srt.check_acc_in_game(  # noqa: E712, RUF100
    //     game_id=game_id,
    //     account=Txn.sender,
    //     box_game_players=self.box_game_players,
    //     player_count=self.box_game_state[game_id].active_players.native,
    //     clear_player=False,
    // )
    dig 3
    // smart_contracts/pieout/contract.py:281
    // clear_player=False,
    intc_1 // 0
    // smart_contracts/pieout/contract.py:276-282
    // srt.check_acc_in_game(  # noqa: E712, RUF100
    //     game_id=game_id,
    //     account=Txn.sender,
    //     box_game_players=self.box_game_players,
    //     player_count=self.box_game_state[game_id].active_players.native,
    //     clear_player=False,
    // )
    callsub check_acc_in_game
    // smart_contracts/pieout/contract.py:276-283
    // srt.check_acc_in_game(  # noqa: E712, RUF100
    //     game_id=game_id,
    //     account=Txn.sender,
    //     box_game_players=self.box_game_players,
    //     player_count=self.box_game_state[game_id].active_players.native,
    //     clear_player=False,
    // )
    // == False
    !
    // smart_contracts/pieout/contract.py:275-284
    // assert (
    //     srt.check_acc_in_game(  # noqa: E712, RUF100
    //         game_id=game_id,
    //         account=Txn.sender,
    //         box_game_players=self.box_game_players,
    //         player_count=self.box_game_state[game_id].active_players.native,
    //         clear_player=False,
    //     )
    //     == False
    // ), err.PLAYER_ACTIVE
    assert // Player with this address must not be an active game participant in the game.
    // smart_contracts/pieout/contract.py:286
    // assert game_state.staking_finalized == False, err.STAKING_FINAL  # noqa: E712
    dig 1
    intc_1 // 0
    getbit
    bytec_0 // 0x00
    intc_1 // 0
    uncover 2
    setbit
    intc_1 // 0
    getbit
    !
    assert // Game state staking finalized value mismatch.
    // smart_contracts/pieout/contract.py:287
    // assert game_state.expiry_ts >= Global.latest_timestamp, err.DEADLINE_EXPIRED
    dig 1
    extract 8 8 // on error: Index access is out of bounds
    global LatestTimestamp
    itob
    b>=
    assert // Phase deadline expired. Latest block timestamp must not exceed expiry timestamp.
    // smart_contracts/pieout/contract.py:288
    // assert game_state.active_players <= game_state.max_players, err.FULL_GAME_LOBBY
    dig 1
    extract 2 1 // on error: Index access is out of bounds
    dig 2
    extract 1 1 // on error: Index access is out of bounds
    b<=
    assert // Number of active players must not exceed number of max players.
    // smart_contracts/pieout/contract.py:290
    // game_state.box_p_start_pos.native
    dig 1
    pushint 6 // 6
    extract_uint16
    // smart_contracts/pieout/contract.py:291
    // < cst.ADDRESS_SIZE * game_state.max_players.native
    dig 2
    intc_0 // 1
    getbyte
    intc_3 // 32
    *
    // smart_contracts/pieout/contract.py:290-291
    // game_state.box_p_start_pos.native
    // < cst.ADDRESS_SIZE * game_state.max_players.native
    dig 1
    >
    // smart_contracts/pieout/contract.py:289-292
    // assert (
    //     game_state.box_p_start_pos.native
    //     < cst.ADDRESS_SIZE * game_state.max_players.native
    // ), err.BOX_P_START_POS_OVERFLOW
    assert // Players box start position index overflow. Can not store more addresses.
    // smart_contracts/pieout/contract.py:296
    // key=self.box_game_players.key_prefix + op.itob(game_id)
    bytec_1 // "p_"
    // smart_contracts/pieout/contract.py:294-297
    // # For game players box, store the sender's address at the current game state box p_ start position
    // game_players_bref = BoxRef(
    //     key=self.box_game_players.key_prefix + op.itob(game_id)
    // )
    uncover 6
    // smart_contracts/pieout/contract.py:296
    // key=self.box_game_players.key_prefix + op.itob(game_id)
    concat
    // smart_contracts/pieout/contract.py:298
    // game_players_bref.replace(game_state.box_p_start_pos.native, Txn.sender.bytes)
    txn Sender
    swap
    cover 2
    box_replace
    // smart_contracts/pieout/contract.py:300-301
    // # Increment number of active players by 1
    // game_state.active_players = arc4.UInt8(game_state.active_players.native + 1)
    intc_0 // 1
    +
    itob
    dup
    bitlen
    pushint 8 // 8
    <=
    assert // overflow
    extract 7 1
    replace2 2
    // smart_contracts/pieout/contract.py:305
    // game_state.box_p_start_pos.native + cst.ADDRESS_SIZE
    dup
    pushint 6 // 6
    extract_uint16
    intc_3 // 32
    +
    // smart_contracts/pieout/contract.py:303-306
    // # Increment current game players box offset by 32 so that next player address can be stored
    // game_state.box_p_start_pos = arc4.UInt16(
    //     game_state.box_p_start_pos.native + cst.ADDRESS_SIZE
    // )
    itob
    dup
    bitlen
    pushint 16 // 16
    <=
    assert // overflow
    extract 6 2
    replace2 6
    // smart_contracts/pieout/contract.py:310
    // game_state.prize_pool.native + stake_pay.amount
    dup
    pushint 16 // 16
    extract_uint64
    uncover 2
    +
    // smart_contracts/pieout/contract.py:308-311
    // # Increment prize pool by stake payment amount
    // game_state.prize_pool = arc4.UInt64(
    //     game_state.prize_pool.native + stake_pay.amount
    // )
    itob
    replace2 16
    // smart_contracts/pieout/contract.py:313-314
    // # Check if game is live on every call
    // srt.is_game_live(game_state)
    callsub is_game_live
    bury 1
    // smart_contracts/pieout/contract.py:316-317
    // # Copy the modified game state and store it as new value of box
    // self.box_game_state[game_id] = game_state.copy()
    box_put
    retsub


// smart_contracts.pieout.contract.Pieout.get_box_commit_rand(box_c_pay: uint64) -> void:
get_box_commit_rand:
    // smart_contracts/pieout/contract.py:319-321
    // # Get box commit rand to store game id and commit round used for obtaining on-chain randomness
    // @arc4.abimethod
    // def get_box_commit_rand(self, box_c_pay: gtxn.PaymentTransaction) -> None:
    proto 1 0
    // smart_contracts/pieout/contract.py:322-323
    // # Fail transaction unless the assertion below evaluates True
    // assert Global.group_size == 2, err.STANDALONE_TXN_ONLY
    global GroupSize
    intc_2 // 2
    ==
    assert // Invalid group size. This app call can only take standalone transactions.
    // smart_contracts/pieout/contract.py:324
    // assert Txn.sender not in self.box_commit_rand, err.BOX_FOUND
    bytec_2 // "c_"
    txn Sender
    concat
    box_len
    bury 1
    !
    assert // Box found. Ensure the box you are trying to access does not exist already.
    // smart_contracts/pieout/contract.py:326
    // assert box_c_pay.amount >= cst.BOX_C_FEE, err.INVALID_BOX_PAY_FEE
    frame_dig -1
    gtxns Amount
    intc 6 // 22500
    >=
    assert // Insufficient funds. Box pay amount is not enough to cover application MBR.
    // smart_contracts/pieout/contract.py:327
    // assert box_c_pay.sender == Txn.sender, err.INVALID_BOX_PAY_SENDER
    frame_dig -1
    gtxns Sender
    txn Sender
    ==
    assert // Box payment sender address must match transaction sender address.
    // smart_contracts/pieout/contract.py:329
    // box_c_pay.receiver == Global.current_application_address
    frame_dig -1
    gtxns Receiver
    global CurrentApplicationAddress
    ==
    // smart_contracts/pieout/contract.py:328-330
    // assert (
    //     box_c_pay.receiver == Global.current_application_address
    // ), err.INVALID_BOX_PAY_RECEIVER
    assert // Box payment receiver address must match application address.
    // smart_contracts/pieout/contract.py:332-333
    // # Initialize box commit rand with default commit round value
    // self.box_commit_rand[Txn.sender] = stc.CommitRand(
    bytec_2 // "c_"
    txn Sender
    concat
    // smart_contracts/pieout/contract.py:332-336
    // # Initialize box commit rand with default commit round value
    // self.box_commit_rand[Txn.sender] = stc.CommitRand(
    //     game_id=arc4.UInt64(0),
    //     commit_round=arc4.UInt64(0),
    // )
    pushbytes 0x00000000000000000000000000000000
    box_put
    retsub


// smart_contracts.pieout.contract.Pieout.get_rand_commit_round(game_id: uint64) -> void:
get_rand_commit_round:
    // smart_contracts/pieout/contract.py:338-343
    // # Get randomness commit round tied to the game ID arg and store them in the commit rand box w/ sender address as key
    // @arc4.abimethod
    // def get_rand_commit_round(
    //     self,
    //     game_id: UInt64,
    // ) -> None:
    proto 1 0
    // smart_contracts/pieout/contract.py:355
    // assert game_id in self.box_game_state, err.INVALID_GAME_ID
    frame_dig -1
    itob
    bytec 4 // "s_"
    dig 1
    concat
    dup
    box_len
    bury 1
    assert // Box game state not found. Check if Game ID is valid.
    // smart_contracts/pieout/contract.py:356
    // assert Txn.sender in self.box_commit_rand, err.BOX_NOT_FOUND
    bytec_2 // "c_"
    txn Sender
    concat
    box_len
    bury 1
    assert // Box not found. Ensure the box you are trying to access was created and still exists.
    // smart_contracts/pieout/contract.py:358
    // self.box_game_state[game_id].staking_finalized == True  # noqa: E712
    box_get
    assert // check self.box_game_state entry exists
    dup
    intc_1 // 0
    getbit
    bytec_0 // 0x00
    intc_1 // 0
    uncover 2
    setbit
    intc_1 // 0
    getbit
    intc_0 // 1
    ==
    // smart_contracts/pieout/contract.py:357-359
    // assert (
    //     self.box_game_state[game_id].staking_finalized == True  # noqa: E712
    // ), err.STAKING_FINAL
    assert // Game state staking finalized value mismatch.
    // smart_contracts/pieout/contract.py:364
    // account=Txn.sender,
    txn Sender
    // smart_contracts/pieout/contract.py:366
    // player_count=self.box_game_state[game_id].max_players.native,
    swap
    intc_0 // 1
    getbyte
    // smart_contracts/pieout/contract.py:362-368
    // srt.check_acc_in_game(  # noqa: E712, RUF100
    //     game_id=game_id,
    //     account=Txn.sender,
    //     box_game_players=self.box_game_players,
    //     player_count=self.box_game_state[game_id].max_players.native,
    //     clear_player=False,
    // )
    frame_dig -1
    uncover 2
    // smart_contracts/pieout/contract.py:365
    // box_game_players=self.box_game_players,
    bytec_1 // "p_"
    // smart_contracts/pieout/contract.py:362-368
    // srt.check_acc_in_game(  # noqa: E712, RUF100
    //     game_id=game_id,
    //     account=Txn.sender,
    //     box_game_players=self.box_game_players,
    //     player_count=self.box_game_state[game_id].max_players.native,
    //     clear_player=False,
    // )
    uncover 3
    // smart_contracts/pieout/contract.py:367
    // clear_player=False,
    intc_1 // 0
    // smart_contracts/pieout/contract.py:362-368
    // srt.check_acc_in_game(  # noqa: E712, RUF100
    //     game_id=game_id,
    //     account=Txn.sender,
    //     box_game_players=self.box_game_players,
    //     player_count=self.box_game_state[game_id].max_players.native,
    //     clear_player=False,
    // )
    callsub check_acc_in_game
    // smart_contracts/pieout/contract.py:369
    // == True
    intc_0 // 1
    // smart_contracts/pieout/contract.py:362-369
    // srt.check_acc_in_game(  # noqa: E712, RUF100
    //     game_id=game_id,
    //     account=Txn.sender,
    //     box_game_players=self.box_game_players,
    //     player_count=self.box_game_state[game_id].max_players.native,
    //     clear_player=False,
    // )
    // == True
    ==
    // smart_contracts/pieout/contract.py:361-370
    // assert (
    //     srt.check_acc_in_game(  # noqa: E712, RUF100
    //         game_id=game_id,
    //         account=Txn.sender,
    //         box_game_players=self.box_game_players,
    //         player_count=self.box_game_state[game_id].max_players.native,
    //         clear_player=False,
    //     )
    //     == True
    // ), err.INVALID_PLAYER
    assert // Sender address is not recognized as a valid player for this game.
    // smart_contracts/pieout/contract.py:373
    // commit_rand = self.box_commit_rand[
    bytec_2 // "c_"
    // smart_contracts/pieout/contract.py:374
    // Txn.sender
    txn Sender
    // smart_contracts/pieout/contract.py:373-375
    // commit_rand = self.box_commit_rand[
    //     Txn.sender
    // ].copy()  # Make a copy of the game state else immutable
    concat
    box_get
    assert // check self.box_commit_rand entry exists
    // smart_contracts/pieout/contract.py:377
    // assert commit_rand.commit_round.native == 0, err.COMMIT_RAND_ROUND_FOUND
    dup
    pushint 8 // 8
    extract_uint64
    !
    assert // Commit rand round found. Exsisting round value must be zero to obtain a new one.
    // smart_contracts/pieout/contract.py:379-380
    // # Define commit rand commit round by adding round offset to current round
    // commit_rand.commit_round = arc4.UInt64(Global.round + 4)
    global Round
    pushint 4 // 4
    +
    itob
    replace2 8
    // smart_contracts/pieout/contract.py:381
    // commit_rand.game_id = arc4.UInt64(game_id)
    swap
    replace2 0
    // smart_contracts/pieout/contract.py:383-384
    // # Copy the modified game state and store it as new value of box
    // self.box_commit_rand[Txn.sender] = commit_rand.copy()
    bytec_2 // "c_"
    txn Sender
    concat
    swap
    box_put
    retsub


// smart_contracts.pieout.contract.Pieout.del_box_commit_rand_player() -> void:
del_box_commit_rand_player:
    // smart_contracts/pieout/contract.py:395-396
    // # Fail transaction unless the assertion below evaluates True
    // assert Global.group_size == 1, err.STANDALONE_TXN_ONLY
    global GroupSize
    intc_0 // 1
    ==
    assert // Invalid group size. This app call can only take standalone transactions.
    // smart_contracts/pieout/contract.py:397
    // assert Txn.sender in self.box_commit_rand, err.BOX_NOT_FOUND
    bytec_2 // "c_"
    txn Sender
    concat
    box_len
    bury 1
    assert // Box not found. Ensure the box you are trying to access was created and still exists.
    // smart_contracts/pieout/contract.py:399
    // assert self.box_commit_rand[Txn.sender].commit_round.native == 0,  err.COMMIT_RAND_ROUND_FOUND
    bytec_2 // "c_"
    txn Sender
    concat
    box_get
    assert // check self.box_commit_rand entry exists
    pushint 8 // 8
    extract_uint64
    !
    assert // Commit rand round found. Exsisting round value must be zero to obtain a new one.
    // smart_contracts/pieout/contract.py:401-402
    // # Delete sender box commit rand box from contract storage
    // del self.box_commit_rand[Txn.sender]
    bytec_2 // "c_"
    txn Sender
    concat
    box_del
    pop
    // smart_contracts/pieout/contract.py:406
    // receiver=Txn.sender,
    txn Sender
    // smart_contracts/pieout/contract.py:407
    // amount=UInt64(cst.BOX_C_FEE),
    intc 6 // 22500
    // smart_contracts/pieout/contract.py:408-410
    // note=String(
    //     "sender:app_address,receiver:sender_address,concern:box_commit_rand_deletion"
    // ),
    pushbytes "sender:app_address,receiver:sender_address,concern:box_commit_rand_deletion"
    // smart_contracts/pieout/contract.py:404-411
    // # Submit inner transaction that refunds box commit MBR to sender address
    // srt.payout_itxn(
    //     receiver=Txn.sender,
    //     amount=UInt64(cst.BOX_C_FEE),
    //     note=String(
    //         "sender:app_address,receiver:sender_address,concern:box_commit_rand_deletion"
    //     ),
    // )
    callsub payout_itxn
    retsub


// smart_contracts.pieout.contract.Pieout.del_box_commit_rand_admin(game_id: uint64, account: bytes) -> void:
del_box_commit_rand_admin:
    // smart_contracts/pieout/contract.py:413-415
    // # Allow admin account to delete box commit rand for any account no longer active in games they admin for
    // @arc4.abimethod
    // def del_box_commit_rand_admin(self, game_id: UInt64, account: Account) -> None:
    proto 2 0
    // smart_contracts/pieout/contract.py:416-417
    // # Fail transaction unless the assertion below evaluates True
    // assert Global.group_size == 1, err.STANDALONE_TXN_ONLY
    global GroupSize
    intc_0 // 1
    ==
    assert // Invalid group size. This app call can only take standalone transactions.
    // smart_contracts/pieout/contract.py:418
    // assert game_id in self.box_game_state, err.INVALID_GAME_ID
    frame_dig -2
    itob
    bytec 4 // "s_"
    swap
    concat
    dup
    box_len
    bury 1
    assert // Box game state not found. Check if Game ID is valid.
    // smart_contracts/pieout/contract.py:419
    // assert Txn.sender == self.box_game_state[game_id].admin_address.native, err.INVALID_ADMIN
    txn Sender
    swap
    box_get
    assert // check self.box_game_state entry exists
    dup
    extract 24 32 // on error: Index access is out of bounds
    uncover 2
    ==
    assert // Sender address is not recognized as the admin address for this game.
    // smart_contracts/pieout/contract.py:420
    // assert account in self.box_commit_rand, err.BOX_NOT_FOUND
    bytec_2 // "c_"
    frame_dig -1
    concat
    dup
    box_len
    bury 1
    assert // Box not found. Ensure the box you are trying to access was created and still exists.
    // smart_contracts/pieout/contract.py:427
    // player_count=self.box_game_state[game_id].max_players.native,
    swap
    intc_0 // 1
    getbyte
    // smart_contracts/pieout/contract.py:423-429
    // srt.check_acc_in_game(  # noqa: E712, RUF100
    //     game_id=game_id,
    //     account=account,
    //     box_game_players=self.box_game_players,
    //     player_count=self.box_game_state[game_id].max_players.native,
    //     clear_player=False,
    // )
    frame_dig -2
    frame_dig -1
    // smart_contracts/pieout/contract.py:426
    // box_game_players=self.box_game_players,
    bytec_1 // "p_"
    // smart_contracts/pieout/contract.py:423-429
    // srt.check_acc_in_game(  # noqa: E712, RUF100
    //     game_id=game_id,
    //     account=account,
    //     box_game_players=self.box_game_players,
    //     player_count=self.box_game_state[game_id].max_players.native,
    //     clear_player=False,
    // )
    uncover 3
    // smart_contracts/pieout/contract.py:428
    // clear_player=False,
    intc_1 // 0
    // smart_contracts/pieout/contract.py:423-429
    // srt.check_acc_in_game(  # noqa: E712, RUF100
    //     game_id=game_id,
    //     account=account,
    //     box_game_players=self.box_game_players,
    //     player_count=self.box_game_state[game_id].max_players.native,
    //     clear_player=False,
    // )
    callsub check_acc_in_game
    // smart_contracts/pieout/contract.py:423-430
    // srt.check_acc_in_game(  # noqa: E712, RUF100
    //     game_id=game_id,
    //     account=account,
    //     box_game_players=self.box_game_players,
    //     player_count=self.box_game_state[game_id].max_players.native,
    //     clear_player=False,
    // )
    // == False
    !
    // smart_contracts/pieout/contract.py:422-431
    // assert (
    //     srt.check_acc_in_game(  # noqa: E712, RUF100
    //         game_id=game_id,
    //         account=account,
    //         box_game_players=self.box_game_players,
    //         player_count=self.box_game_state[game_id].max_players.native,
    //         clear_player=False,
    //     )
    //     == False
    // ), err.PLAYER_ACTIVE
    assert // Player with this address must not be an active game participant in the game.
    // smart_contracts/pieout/contract.py:433-434
    // # Delete sender box commit rand box from contract storage
    // del self.box_commit_rand[account]
    box_del
    pop
    // smart_contracts/pieout/contract.py:436-443
    // # Submit inner transaction that refunds box commit MBR to sender address
    // srt.payout_itxn(
    //     receiver=account,
    //     amount=UInt64(cst.BOX_C_FEE),
    //     note=String(
    //         "sender:app_address,receiver:account_address,concern:box_commit_rand_deletion"
    //     ),
    // )
    frame_dig -1
    // smart_contracts/pieout/contract.py:439
    // amount=UInt64(cst.BOX_C_FEE),
    intc 6 // 22500
    // smart_contracts/pieout/contract.py:440-442
    // note=String(
    //     "sender:app_address,receiver:account_address,concern:box_commit_rand_deletion"
    // ),
    pushbytes "sender:app_address,receiver:account_address,concern:box_commit_rand_deletion"
    // smart_contracts/pieout/contract.py:436-443
    // # Submit inner transaction that refunds box commit MBR to sender address
    // srt.payout_itxn(
    //     receiver=account,
    //     amount=UInt64(cst.BOX_C_FEE),
    //     note=String(
    //         "sender:app_address,receiver:account_address,concern:box_commit_rand_deletion"
    //     ),
    // )
    callsub payout_itxn
    retsub


// smart_contracts.pieout.contract.Pieout.resolve_score(game_id: uint64) -> void:
resolve_score:
    // smart_contracts/pieout/contract.py:445-447
    // # Resolve the player's score associated with the specified game ID, updating game state accordingly
    // @arc4.abimethod
    // def resolve_score(self, game_id: UInt64) -> None:
    proto 1 0
    intc_1 // 0
    dupn 7
    pushbytes ""
    dupn 7

resolve_score_while_top@11:
    pushint 19610 // 19610
    global OpcodeBudget
    >
    bz resolve_score_after_while@16
    itxn_begin
    pushint 6 // appl
    itxn_field TypeEnum
    pushint 5 // DeleteApplication
    itxn_field OnCompletion
    bytec 13 // 0x068101
    itxn_field ApprovalProgram
    bytec 13 // 0x068101
    itxn_field ClearStateProgram
    intc_1 // 0
    itxn_field Fee
    itxn_submit
    b resolve_score_while_top@11

resolve_score_after_while@16:
    // smart_contracts/pieout/contract.py:462
    // assert game_id in self.box_game_state, err.INVALID_GAME_ID
    frame_dig -1
    itob
    dup
    frame_bury 1
    bytec 4 // "s_"
    swap
    concat
    dup
    frame_bury 0
    dup
    box_len
    bury 1
    assert // Box game state not found. Check if Game ID is valid.
    // smart_contracts/pieout/contract.py:463
    // assert Txn.sender in self.box_commit_rand, err.BOX_NOT_FOUND
    bytec_2 // "c_"
    txn Sender
    concat
    box_len
    bury 1
    assert // Box not found. Ensure the box you are trying to access was created and still exists.
    // smart_contracts/pieout/contract.py:464
    // assert self.box_game_trophy, err.BOX_NOT_FOUND
    bytec_3 // 0x745f
    box_len
    bury 1
    assert // Box not found. Ensure the box you are trying to access was created and still exists.
    // smart_contracts/pieout/contract.py:469
    // account=Txn.sender,
    txn Sender
    // smart_contracts/pieout/contract.py:471
    // player_count=self.box_game_state[game_id].max_players.native,
    dig 1
    box_get
    assert // check self.box_game_state entry exists
    intc_0 // 1
    getbyte
    // smart_contracts/pieout/contract.py:467-473
    // srt.check_acc_in_game(  # noqa: E712, RUF100
    //     game_id=game_id,
    //     account=Txn.sender,
    //     box_game_players=self.box_game_players,
    //     player_count=self.box_game_state[game_id].max_players.native,
    //     clear_player=True,
    // )
    frame_dig -1
    uncover 2
    // smart_contracts/pieout/contract.py:470
    // box_game_players=self.box_game_players,
    bytec_1 // "p_"
    // smart_contracts/pieout/contract.py:467-473
    // srt.check_acc_in_game(  # noqa: E712, RUF100
    //     game_id=game_id,
    //     account=Txn.sender,
    //     box_game_players=self.box_game_players,
    //     player_count=self.box_game_state[game_id].max_players.native,
    //     clear_player=True,
    // )
    uncover 3
    // smart_contracts/pieout/contract.py:472
    // clear_player=True,
    intc_0 // 1
    // smart_contracts/pieout/contract.py:467-473
    // srt.check_acc_in_game(  # noqa: E712, RUF100
    //     game_id=game_id,
    //     account=Txn.sender,
    //     box_game_players=self.box_game_players,
    //     player_count=self.box_game_state[game_id].max_players.native,
    //     clear_player=True,
    // )
    callsub check_acc_in_game
    // smart_contracts/pieout/contract.py:474
    // == True
    intc_0 // 1
    // smart_contracts/pieout/contract.py:467-474
    // srt.check_acc_in_game(  # noqa: E712, RUF100
    //     game_id=game_id,
    //     account=Txn.sender,
    //     box_game_players=self.box_game_players,
    //     player_count=self.box_game_state[game_id].max_players.native,
    //     clear_player=True,
    // )
    // == True
    ==
    // smart_contracts/pieout/contract.py:466-475
    // assert (
    //     srt.check_acc_in_game(  # noqa: E712, RUF100
    //         game_id=game_id,
    //         account=Txn.sender,
    //         box_game_players=self.box_game_players,
    //         player_count=self.box_game_state[game_id].max_players.native,
    //         clear_player=True,
    //     )
    //     == True
    // ), err.INVALID_PLAYER
    assert // Sender address is not recognized as a valid player for this game.
    // smart_contracts/pieout/contract.py:477-480
    // # Retrieve the game state value from its corresponding box using the game id parameter
    // game_state = self.box_game_state[
    //     game_id
    // ].copy()  # Make a copy of the game state else immutable
    box_get
    swap
    dup
    cover 2
    frame_bury 2
    assert // check self.box_game_state entry exists
    // smart_contracts/pieout/contract.py:482-483
    // # Fail transaction unless the assertions below evaluate True
    // assert game_state.staking_finalized == True, err.STAKING_FINAL  # noqa: E712
    dup
    intc_1 // 0
    getbit
    bytec_0 // 0x00
    intc_1 // 0
    uncover 2
    setbit
    intc_1 // 0
    getbit
    intc_0 // 1
    ==
    assert // Game state staking finalized value mismatch.
    // smart_contracts/pieout/contract.py:484
    // assert game_state.expiry_ts >= Global.latest_timestamp, err.DEADLINE_EXPIRED
    extract 8 8 // on error: Index access is out of bounds
    global LatestTimestamp
    itob
    b>=
    assert // Phase deadline expired. Latest block timestamp must not exceed expiry timestamp.
    // smart_contracts/pieout/contract.py:486
    // assert self.box_commit_rand[Txn.sender].commit_round != 0, "Invalid commit rand round. Can't be zero"
    bytec_2 // "c_"
    txn Sender
    concat
    box_get
    assert // check self.box_commit_rand entry exists
    extract 8 8 // on error: Index access is out of bounds
    bytec 7 // 0x0000000000000000
    b!=
    assert // Invalid commit rand round. Can't be zero
    // smart_contracts/pieout/contract.py:487
    // assert self.box_commit_rand[Txn.sender].game_id != 0
    bytec_2 // "c_"
    txn Sender
    concat
    box_get
    assert // check self.box_commit_rand entry exists
    extract 0 8 // on error: Index access is out of bounds
    bytec 7 // 0x0000000000000000
    b!=
    assert
    // smart_contracts/pieout/contract.py:490
    // Global.round >= self.box_commit_rand[Txn.sender].commit_round.native
    global Round
    bytec_2 // "c_"
    txn Sender
    concat
    box_get
    assert // check self.box_commit_rand entry exists
    pushint 8 // 8
    extract_uint64
    >=
    // smart_contracts/pieout/contract.py:489-491
    // assert (
    //     Global.round >= self.box_commit_rand[Txn.sender].commit_round.native
    // ), err.COMMIT_ROUND_NOT_REACHED
    assert // Randomness commit round not reached yet.
    // smart_contracts/pieout/contract.py:503
    // score_id=self.score_id,
    intc_1 // 0
    bytec 6 // "score_id"
    app_global_get_ex
    assert // check self.score_id exists
    // smart_contracts/pieout/contract.py:505
    // player=Txn.sender,
    txn Sender
    frame_bury 4
    // smart_contracts/pieout/contract.py:506
    // seed=op.sha256(op.itob(self.score_id)),  # Use VRF output as seed in TestNet/production case, else use Txn.tx_id
    itob
    dup
    frame_bury 6
    sha256
    // smart_contracts/pieout/subroutines.py:91-92
    // # Initialize the PCG pseudo-random generator state using 8 bytes from the given seed
    // state = pcg16_init(seed=op.extract(seed, 16, 8))
    dup
    extract 16 8
    // .venv/Lib/site-packages/lib_pcg/pcg32.py:21
    // assert seed.length == 8
    len
    pushint 8 // 8
    ==
    assert
    pushint 16 // 16
    // .venv/Lib/site-packages/lib_pcg/pcg32.py:23
    // return __pcg32_init(op.btoi(seed), UInt64(PCG_FIRST_INCREMENT))
    extract_uint64
    // .venv/Lib/site-packages/lib_pcg/pcg32.py:155
    // state = __pcg32_step(UInt64(0), incr)
    intc_1 // 0
    // .venv/Lib/site-packages/lib_pcg/pcg32.py:269
    // _high_mul, low_mul = op.mulw(state, PCG_MULTIPLIER)
    intc 7 // 6364136223846793005
    mulw
    bury 1
    // .venv/Lib/site-packages/lib_pcg/pcg32.py:23
    // return __pcg32_init(op.btoi(seed), UInt64(PCG_FIRST_INCREMENT))
    intc 8 // 1442695040888963407
    // .venv/Lib/site-packages/lib_pcg/pcg32.py:270
    // _high_add, low_add = op.addw(low_mul, incr)
    addw
    bury 1
    // .venv/Lib/site-packages/lib_pcg/pcg32.py:156
    // _high_addw, state = op.addw(state, initial_state)
    addw
    bury 1
    // .venv/Lib/site-packages/lib_pcg/pcg32.py:269
    // _high_mul, low_mul = op.mulw(state, PCG_MULTIPLIER)
    intc 7 // 6364136223846793005
    mulw
    bury 1
    // .venv/Lib/site-packages/lib_pcg/pcg32.py:23
    // return __pcg32_init(op.btoi(seed), UInt64(PCG_FIRST_INCREMENT))
    intc 8 // 1442695040888963407
    // .venv/Lib/site-packages/lib_pcg/pcg32.py:270
    // _high_add, low_add = op.addw(low_mul, incr)
    addw
    bury 1
    // .venv/Lib/site-packages/lib_pcg/pcg32.py:198
    // result += arc4.UInt16(length).bytes
    pushbytes 0x00ff
    frame_bury 5
    // .venv/Lib/site-packages/lib_pcg/pcg32.py:292
    // _addw_high, addw_low = op.addw(~value, 1)
    pushint 18446744073709486080 // 18446744073709486080
    intc_0 // 1
    addw
    bury 1
    // .venv/Lib/site-packages/lib_pcg/pcg32.py:300
    // return value & ((1 << 32) - 1)
    intc 9 // 4294967295
    &
    // .venv/Lib/site-packages/lib_pcg/pcg32.py:219
    // absolute_bound = (1 << bit_size) - lower_bound
    intc 12 // 65535
    // .venv/Lib/site-packages/lib_pcg/pcg32.py:221
    // threshold = __mask_to_uint32(__uint64_twos(absolute_bound)) % absolute_bound
    %
    frame_bury 13
    // .venv/Lib/site-packages/lib_pcg/pcg32.py:223
    // for i in urange(length):  # noqa: B007
    intc_1 // 0
    frame_bury 10
    frame_bury 12

resolve_score_for_header@20:
    // .venv/Lib/site-packages/lib_pcg/pcg32.py:223
    // for i in urange(length):  # noqa: B007
    frame_dig 10
    // smart_contracts/pieout/subroutines.py:99
    // length=UInt64(255),  # Number of values generated is 255
    pushint 255 // 255
    // .venv/Lib/site-packages/lib_pcg/pcg32.py:223
    // for i in urange(length):  # noqa: B007
    <
    bz resolve_score_after_for@25

resolve_score_while_top@22:
    // .venv/Lib/site-packages/lib_pcg/pcg32.py:269
    // _high_mul, low_mul = op.mulw(state, PCG_MULTIPLIER)
    frame_dig 12
    dup
    intc 7 // 6364136223846793005
    mulw
    bury 1
    // .venv/Lib/site-packages/lib_pcg/pcg32.py:254
    // return __pcg32_step(state, UInt64(PCG_FIRST_INCREMENT)), __pcg32_output(state)
    intc 8 // 1442695040888963407
    // .venv/Lib/site-packages/lib_pcg/pcg32.py:270
    // _high_add, low_add = op.addw(low_mul, incr)
    addw
    cover 2
    pop
    // .venv/Lib/site-packages/lib_pcg/pcg32.py:279
    // __mask_to_uint32(((state >> 18) ^ state) >> 27), state >> 59
    dup
    pushint 18 // 18
    shr
    dig 1
    ^
    pushint 27 // 27
    shr
    // .venv/Lib/site-packages/lib_pcg/pcg32.py:300
    // return value & ((1 << 32) - 1)
    intc 9 // 4294967295
    &
    // .venv/Lib/site-packages/lib_pcg/pcg32.py:279
    // __mask_to_uint32(((state >> 18) ^ state) >> 27), state >> 59
    swap
    pushint 59 // 59
    shr
    // .venv/Lib/site-packages/lib_pcg/pcg32.py:286
    // return (value >> rot) | __mask_to_uint32(value << (__uint64_twos(rot) & 31))
    dup2
    shr
    // .venv/Lib/site-packages/lib_pcg/pcg32.py:292
    // _addw_high, addw_low = op.addw(~value, 1)
    swap
    ~
    intc_0 // 1
    addw
    bury 1
    // .venv/Lib/site-packages/lib_pcg/pcg32.py:286
    // return (value >> rot) | __mask_to_uint32(value << (__uint64_twos(rot) & 31))
    pushint 31 // 31
    &
    uncover 2
    swap
    shl
    // .venv/Lib/site-packages/lib_pcg/pcg32.py:300
    // return value & ((1 << 32) - 1)
    intc 9 // 4294967295
    &
    // .venv/Lib/site-packages/lib_pcg/pcg32.py:286
    // return (value >> rot) | __mask_to_uint32(value << (__uint64_twos(rot) & 31))
    |
    dup
    frame_bury 9
    // .venv/Lib/site-packages/lib_pcg/pcg32.py:226
    // if candidate >= threshold:
    frame_dig 13
    >=
    bz resolve_score_after_if_else@24
    // .venv/Lib/site-packages/lib_pcg/pcg32.py:228
    // op.itob((candidate % absolute_bound) + lower_bound),
    frame_dig 9
    // .venv/Lib/site-packages/lib_pcg/pcg32.py:219
    // absolute_bound = (1 << bit_size) - lower_bound
    intc 12 // 65535
    // .venv/Lib/site-packages/lib_pcg/pcg32.py:228
    // op.itob((candidate % absolute_bound) + lower_bound),
    %
    // smart_contracts/pieout/subroutines.py:97
    // lower_bound=UInt64(1),  # Lower bound is 1 (to disallow 0 as a value)
    intc_0 // 1
    // .venv/Lib/site-packages/lib_pcg/pcg32.py:228
    // op.itob((candidate % absolute_bound) + lower_bound),
    +
    itob
    // .venv/Lib/site-packages/lib_pcg/pcg32.py:227-231
    // result += op.extract(
    //     op.itob((candidate % absolute_bound) + lower_bound),
    //     truncate_start_cached,
    //     byte_size,
    // )
    extract 6 2
    frame_dig 5
    swap
    concat
    frame_bury 5
    // .venv/Lib/site-packages/lib_pcg/pcg32.py:223
    // for i in urange(length):  # noqa: B007
    frame_dig 10
    intc_0 // 1
    +
    frame_bury 10
    frame_bury 12
    b resolve_score_for_header@20

resolve_score_after_if_else@24:
    frame_bury 12
    b resolve_score_while_top@22

resolve_score_after_for@25:
    // smart_contracts/pieout/subroutines.py:102-103
    // # Initialize the player's score
    // score = UInt64(0)
    intc_1 // 0
    frame_bury 11
    // smart_contracts/pieout/subroutines.py:105-106
    // # Iterate through the sequence as a byte array starting at byte index 2 (skip array header bytes)
    // for i in urange(2, sequence.bytes.length, 2):
    frame_dig 5
    len
    frame_bury 15
    intc_2 // 2
    frame_bury 10

resolve_score_for_header@27:
    // smart_contracts/pieout/subroutines.py:105-106
    // # Iterate through the sequence as a byte array starting at byte index 2 (skip array header bytes)
    // for i in urange(2, sequence.bytes.length, 2):
    frame_dig 10
    frame_dig 15
    <
    bz resolve_score_after_for@30
    // smart_contracts/pieout/subroutines.py:107-108
    // # Extract a 16-bit unsigned integer from the byte sequence
    // roll = op.extract_uint16(sequence.bytes[2:], i)
    intc_2 // 2
    frame_dig 15
    dup
    cover 2
    >=
    intc_2 // 2
    dig 2
    uncover 2
    select
    frame_dig 5
    swap
    uncover 2
    substring3
    frame_dig 10
    extract_uint16
    // smart_contracts/pieout/subroutines.py:110-111
    // # Stop accumulating score if the roll is below or equal to the elimination threshold
    // if roll <= cst.ELIM_THRESHOLD:
    pushint 10992 // 10992
    <=
    bnz resolve_score_after_for@30
    // smart_contracts/pieout/subroutines.py:114-115
    // # Increment score for each roll above the threshold
    // score += 1
    frame_dig 11
    intc_0 // 1
    +
    frame_bury 11
    // smart_contracts/pieout/subroutines.py:105-106
    // # Iterate through the sequence as a byte array starting at byte index 2 (skip array header bytes)
    // for i in urange(2, sequence.bytes.length, 2):
    frame_dig 10
    intc_2 // 2
    +
    frame_bury 10
    b resolve_score_for_header@27

resolve_score_after_for@30:
    // smart_contracts/pieout/subroutines.py:123
    // arc4.UInt8(score),
    frame_dig 11
    itob
    dup
    bitlen
    pushint 8 // 8
    <=
    assert // overflow
    extract 7 1
    dup
    frame_bury 7
    // smart_contracts/pieout/subroutines.py:117-124
    // # Emit ARC-28 event for off-chain tracking
    // arc4.emit(
    //     "player_score(uint64,uint64,address,uint8)",
    //     game_id,
    //     score_id,
    //     player,
    //     arc4.UInt8(score),
    // )
    frame_dig 1
    frame_dig 6
    concat
    frame_dig 4
    concat
    swap
    concat
    pushbytes 0x1cc2af51 // method "player_score(uint64,uint64,address,uint8)"
    swap
    concat
    log
    // smart_contracts/pieout/subroutines.py:128-129
    // # First Place
    // game_state.first_place_address == arc4.Address(Global.zero_address)
    frame_dig 2
    extract 56 32 // on error: Index access is out of bounds
    global ZeroAddress
    ==
    // smart_contracts/pieout/subroutines.py:128-130
    // # First Place
    // game_state.first_place_address == arc4.Address(Global.zero_address)
    // or score > game_state.first_place_score.native
    bnz resolve_score_if_body@32
    // smart_contracts/pieout/subroutines.py:130
    // or score > game_state.first_place_score.native
    frame_dig 2
    pushint 3 // 3
    getbyte
    frame_dig 11
    <
    // smart_contracts/pieout/subroutines.py:128-130
    // # First Place
    // game_state.first_place_address == arc4.Address(Global.zero_address)
    // or score > game_state.first_place_score.native
    bz resolve_score_else_body@33

resolve_score_if_body@32:
    // smart_contracts/pieout/subroutines.py:132-133
    // # Assign: Second -> Third
    // game_state.third_place_score = game_state.second_place_score
    frame_dig 2
    dup
    extract 4 1 // on error: Index access is out of bounds
    replace2 5
    // smart_contracts/pieout/subroutines.py:134
    // game_state.third_place_address = game_state.second_place_address
    dup
    extract 88 32 // on error: Index access is out of bounds
    replace2 120
    // smart_contracts/pieout/subroutines.py:135-136
    // # Assign: First -> Second
    // game_state.second_place_score = game_state.first_place_score
    dup
    extract 3 1 // on error: Index access is out of bounds
    replace2 4
    // smart_contracts/pieout/subroutines.py:137
    // game_state.second_place_address = game_state.first_place_address
    dup
    extract 56 32 // on error: Index access is out of bounds
    replace2 88
    // smart_contracts/pieout/subroutines.py:138-139
    // # Assign: Score -> First
    // game_state.first_place_score = arc4.UInt8(score)
    frame_dig 7
    replace2 3
    // smart_contracts/pieout/subroutines.py:140
    // game_state.first_place_address = arc4.Address(player)
    frame_dig 4
    replace2 56
    frame_bury 2

resolve_score_after_if_else@41:
    // smart_contracts/pieout/contract.py:509-510
    // # Increment commit rand salt id by 1
    // self.score_id += 1
    intc_1 // 0
    bytec 6 // "score_id"
    app_global_get_ex
    assert // check self.score_id exists
    intc_0 // 1
    +
    bytec 6 // "score_id"
    swap
    app_global_put
    // smart_contracts/pieout/contract.py:512-513
    // # If game state first place score is higher than the ath score
    // if game_state.first_place_score.native > self.ath_score:
    frame_dig 2
    pushint 3 // 3
    getbyte
    dup
    frame_bury 14
    intc_1 // 0
    bytec 9 // "ath_score"
    app_global_get_ex
    assert // check self.ath_score exists
    >
    bz resolve_score_after_if_else@7
    // smart_contracts/pieout/contract.py:514-515
    // # Update ath score, game state first place score is the new ath score
    // self.ath_score = game_state.first_place_score.native
    bytec 9 // "ath_score"
    frame_dig 14
    app_global_put
    // smart_contracts/pieout/contract.py:517
    // if self.ath_address != Global.zero_address:
    intc_1 // 0
    bytec 10 // "ath_address"
    app_global_get_ex
    assert // check self.ath_address exists
    global ZeroAddress
    !=
    bz resolve_score_after_if_else@6
    // smart_contracts/pieout/contract.py:519
    // self.box_game_trophy.value.owner_address.native,
    bytec_3 // 0x745f
    box_get
    assert // check self.box_game_trophy exists
    dup
    extract 8 32 // on error: Index access is out of bounds
    // smart_contracts/pieout/contract.py:520
    // self.box_game_trophy.value.asset_id.native,
    swap
    intc_1 // 0
    extract_uint64
    // smart_contracts/pieout/contract.py:518-521
    // balance, did_exist = op.AssetHoldingGet.asset_balance(
    //     self.box_game_trophy.value.owner_address.native,
    //     self.box_game_trophy.value.asset_id.native,
    // )
    asset_holding_get AssetBalance
    swap
    frame_bury 8
    // smart_contracts/pieout/contract.py:523-524
    // # If asset did exist and its balance is one, perform clawback via asset transfer inner transaction
    // if did_exist and balance == 1:
    bz resolve_score_after_if_else@6
    frame_dig 8
    intc_0 // 1
    ==
    bz resolve_score_after_if_else@6
    // smart_contracts/pieout/contract.py:526
    // asset_id=self.box_game_trophy.value.asset_id.native,
    bytec_3 // 0x745f
    box_get
    assert // check self.box_game_trophy exists
    dup
    intc_1 // 0
    extract_uint64
    // smart_contracts/pieout/contract.py:527
    // asset_sender=self.box_game_trophy.value.owner_address.native,
    swap
    extract 8 32 // on error: Index access is out of bounds
    // smart_contracts/pieout/contract.py:528
    // asset_receiver=Global.current_application_address,
    global CurrentApplicationAddress
    // smart_contracts/pieout/subroutines.py:29-34
    // itxn.AssetTransfer(
    //     asset_receiver=asset_receiver,
    //     xfer_asset=asset_id,
    //     asset_sender=asset_sender,
    //     asset_amount=1,
    // ).submit()
    itxn_begin
    // smart_contracts/pieout/subroutines.py:33
    // asset_amount=1,
    intc_0 // 1
    itxn_field AssetAmount
    itxn_field AssetReceiver
    itxn_field AssetSender
    itxn_field XferAsset
    // smart_contracts/pieout/subroutines.py:29
    // itxn.AssetTransfer(
    pushint 4 // axfer
    itxn_field TypeEnum
    intc_1 // 0
    itxn_field Fee
    // smart_contracts/pieout/subroutines.py:29-34
    // itxn.AssetTransfer(
    //     asset_receiver=asset_receiver,
    //     xfer_asset=asset_id,
    //     asset_sender=asset_sender,
    //     asset_amount=1,
    // ).submit()
    itxn_submit

resolve_score_after_if_else@6:
    // smart_contracts/pieout/contract.py:531-532
    // # Update ath address, transaction sender is the new ath address
    // self.ath_address = Txn.sender
    txn Sender
    bytec 10 // "ath_address"
    dig 1
    app_global_put
    // smart_contracts/pieout/contract.py:534-535
    // # Update trophy owner address, ath address is the new trophy asset owner address
    // self.box_game_trophy.value.owner_address = arc4.Address(self.ath_address)
    bytec_3 // 0x745f
    box_get
    assert // check self.box_game_trophy exists
    swap
    replace2 8
    bytec_3 // 0x745f
    swap
    box_put

resolve_score_after_if_else@7:
    // smart_contracts/pieout/contract.py:537-538
    // # Decrement number of active players by 1
    // game_state.active_players = arc4.UInt8(game_state.active_players.native - 1)
    frame_dig 2
    dup
    intc_2 // 2
    getbyte
    intc_0 // 1
    -
    itob
    dup
    bitlen
    pushint 8 // 8
    <=
    assert // overflow
    extract 7 1
    replace2 2
    // smart_contracts/pieout/contract.py:540-541
    // # Check if game is over on every call
    // srt.is_game_over(game_id, game_state, self.box_game_players)
    frame_dig -1
    swap
    bytec_1 // "p_"
    callsub is_game_over
    bury 1
    // smart_contracts/pieout/contract.py:543-544
    // # Copy the modified game state and store it as new value of box
    // self.box_game_state[game_id] = game_state.copy()
    frame_dig 0
    swap
    box_put
    retsub

resolve_score_else_body@33:
    // smart_contracts/pieout/subroutines.py:142-143
    // # Second Place
    // game_state.second_place_address == arc4.Address(Global.zero_address)
    frame_dig 2
    extract 88 32 // on error: Index access is out of bounds
    global ZeroAddress
    ==
    // smart_contracts/pieout/subroutines.py:142-144
    // # Second Place
    // game_state.second_place_address == arc4.Address(Global.zero_address)
    // or score > game_state.second_place_score.native
    bnz resolve_score_if_body@35
    // smart_contracts/pieout/subroutines.py:144
    // or score > game_state.second_place_score.native
    frame_dig 2
    pushint 4 // 4
    getbyte
    frame_dig 11
    <
    // smart_contracts/pieout/subroutines.py:142-144
    // # Second Place
    // game_state.second_place_address == arc4.Address(Global.zero_address)
    // or score > game_state.second_place_score.native
    bz resolve_score_else_body@36

resolve_score_if_body@35:
    // smart_contracts/pieout/subroutines.py:146-147
    // # Assign: Second -> Third
    // game_state.third_place_score = game_state.second_place_score
    frame_dig 2
    dup
    extract 4 1 // on error: Index access is out of bounds
    replace2 5
    // smart_contracts/pieout/subroutines.py:148
    // game_state.third_place_address = game_state.second_place_address
    dup
    extract 88 32 // on error: Index access is out of bounds
    replace2 120
    // smart_contracts/pieout/subroutines.py:149-150
    // # Assign: Score -> Second
    // game_state.second_place_score = arc4.UInt8(score)
    frame_dig 7
    replace2 4
    // smart_contracts/pieout/subroutines.py:151
    // game_state.second_place_address = arc4.Address(player)
    frame_dig 4
    replace2 88
    frame_bury 3

resolve_score_after_if_else@40:
    frame_dig 3
    frame_bury 2
    b resolve_score_after_if_else@41

resolve_score_else_body@36:
    // smart_contracts/pieout/subroutines.py:153-154
    // # Third Place
    // game_state.third_place_address == arc4.Address(Global.zero_address)
    frame_dig 2
    extract 120 32 // on error: Index access is out of bounds
    global ZeroAddress
    ==
    // smart_contracts/pieout/subroutines.py:153-155
    // # Third Place
    // game_state.third_place_address == arc4.Address(Global.zero_address)
    // or score > game_state.third_place_score.native
    bnz resolve_score_if_body@38
    // smart_contracts/pieout/subroutines.py:155
    // or score > game_state.third_place_score.native
    frame_dig 2
    dup
    pushint 5 // 5
    getbyte
    frame_dig 11
    <
    swap
    frame_bury 3
    // smart_contracts/pieout/subroutines.py:153-155
    // # Third Place
    // game_state.third_place_address == arc4.Address(Global.zero_address)
    // or score > game_state.third_place_score.native
    bz resolve_score_after_if_else@40

resolve_score_if_body@38:
    // smart_contracts/pieout/subroutines.py:157-158
    // # Assign: Score -> Third
    // game_state.third_place_score = arc4.UInt8(score)
    frame_dig 2
    frame_dig 7
    replace2 5
    // smart_contracts/pieout/subroutines.py:159
    // game_state.third_place_address = arc4.Address(player)
    frame_dig 4
    replace2 120
    frame_bury 3
    b resolve_score_after_if_else@40


// smart_contracts.pieout.contract.Pieout.check_game_event_trigger(game_id: uint64, game_event_id: bytes) -> bytes:
check_game_event_trigger:
    // smart_contracts/pieout/contract.py:546-548
    // # Allow an active player to check for a game event and potentially trigger its progression
    // @arc4.abimethod
    // def check_game_event_trigger(self, game_id: UInt64, game_event_id: arc4.UInt8) -> arc4.Bool:
    proto 2 1
    // smart_contracts/pieout/contract.py:549-550
    // # Fail transaction unless the assertion below evaluates True
    // assert Global.group_size == 1, err.STANDALONE_TXN_ONLY
    global GroupSize
    intc_0 // 1
    ==
    assert // Invalid group size. This app call can only take standalone transactions.
    // smart_contracts/pieout/contract.py:551
    // assert game_id in self.box_game_state, err.INVALID_GAME_ID
    frame_dig -2
    itob
    bytec 4 // "s_"
    swap
    concat
    dup
    box_len
    bury 1
    assert // Box game state not found. Check if Game ID is valid.
    // smart_contracts/pieout/contract.py:553-556
    // # Retrieve current game state from box using the game id parameter
    // game_state = self.box_game_state[
    //     game_id
    // ].copy()  # Make a copy of the game state else immutable
    box_get
    swap
    dup
    uncover 2
    assert // check self.box_game_state entry exists
    // smart_contracts/pieout/contract.py:560
    // account=Txn.sender,
    txn Sender
    // smart_contracts/pieout/contract.py:562
    // player_count=self.box_game_state[game_id].max_players.native,
    swap
    intc_0 // 1
    getbyte
    // smart_contracts/pieout/contract.py:558-564
    // acc_in_game = srt.check_acc_in_game(
    //     game_id=game_id,
    //     account=Txn.sender,
    //     box_game_players=self.box_game_players,
    //     player_count=self.box_game_state[game_id].max_players.native,
    //     clear_player=True,
    // )
    frame_dig -2
    uncover 2
    // smart_contracts/pieout/contract.py:561
    // box_game_players=self.box_game_players,
    bytec_1 // "p_"
    // smart_contracts/pieout/contract.py:558-564
    // acc_in_game = srt.check_acc_in_game(
    //     game_id=game_id,
    //     account=Txn.sender,
    //     box_game_players=self.box_game_players,
    //     player_count=self.box_game_state[game_id].max_players.native,
    //     clear_player=True,
    // )
    uncover 3
    // smart_contracts/pieout/contract.py:563
    // clear_player=True,
    intc_0 // 1
    // smart_contracts/pieout/contract.py:558-564
    // acc_in_game = srt.check_acc_in_game(
    //     game_id=game_id,
    //     account=Txn.sender,
    //     box_game_players=self.box_game_players,
    //     player_count=self.box_game_state[game_id].max_players.native,
    //     clear_player=True,
    // )
    callsub check_acc_in_game
    swap
    // smart_contracts/pieout/contract.py:566-567
    // # If Game Event ID corresponds with event: Game Live
    // if game_event_id.native == 0:
    frame_dig -1
    btoi
    dup
    cover 2
    bnz check_game_event_trigger_else_body@2
    // smart_contracts/pieout/contract.py:568
    // assert acc_in_game, err.INVALID_PLAYER
    frame_dig 0
    assert // Sender address is not recognized as a valid player for this game.
    // smart_contracts/pieout/contract.py:569
    // is_game_live = srt.is_game_live(game_state)
    callsub is_game_live
    pop
    // smart_contracts/pieout/contract.py:570
    // return is_game_live
    frame_bury 0
    retsub

check_game_event_trigger_else_body@2:
    // smart_contracts/pieout/contract.py:571-572
    // # If Game Event ID corresponds with event: Game Over
    // elif game_event_id.native == 2:
    frame_dig 1
    intc_2 // 2
    ==
    assert // Game event not found. Check if Game Event ID is valid
    // smart_contracts/pieout/contract.py:573
    // assert game_state.staking_finalized == True, err.STAKING_FINAL  # noqa: E712
    dup
    intc_1 // 0
    getbit
    bytec_0 // 0x00
    intc_1 // 0
    uncover 2
    setbit
    intc_1 // 0
    getbit
    intc_0 // 1
    ==
    assert // Game state staking finalized value mismatch.
    // smart_contracts/pieout/contract.py:574
    // assert game_state.expiry_ts < Global.latest_timestamp, err.DEADLINE_EXPIRED
    dup
    extract 8 8 // on error: Index access is out of bounds
    global LatestTimestamp
    itob
    b<
    assert // Phase deadline expired. Latest block timestamp must not exceed expiry timestamp.
    // smart_contracts/pieout/contract.py:575
    // assert acc_in_game, err.INVALID_PLAYER
    frame_dig 0
    assert // Sender address is not recognized as a valid player for this game.
    // smart_contracts/pieout/contract.py:576
    // is_game_over = srt.is_game_over(game_id, game_state, self.box_game_players)
    frame_dig -2
    swap
    bytec_1 // "p_"
    callsub is_game_over
    pop
    // smart_contracts/pieout/contract.py:577
    // return is_game_over
    frame_bury 0
    retsub


// smart_contracts.pieout.contract.Pieout.reset_game(game_id: uint64, stake_pay: uint64) -> void:
reset_game:
    // smart_contracts/pieout/contract.py:582-587
    // @arc4.abimethod
    // def reset_game(
    //     self,
    //     game_id: UInt64,
    //     stake_pay: gtxn.PaymentTransaction,
    // ) -> None:
    proto 2 0
    // smart_contracts/pieout/contract.py:588-589
    // # Fail transaction unless the assertions below evaluate True
    // assert Global.group_size == 2, err.INVALID_GROUP_SIZE
    global GroupSize
    intc_2 // 2
    ==
    assert // Invalid group size. Ensure number of transaction in group is within valid bounds.
    // smart_contracts/pieout/contract.py:590
    // assert game_id in self.box_game_state, err.INVALID_GAME_ID
    frame_dig -2
    itob
    bytec 4 // "s_"
    dig 1
    concat
    dup
    box_len
    bury 1
    assert // Box game state not found. Check if Game ID is valid.
    // smart_contracts/pieout/contract.py:592
    // assert stake_pay.sender == Txn.sender, err.INVALID_STAKE_PAY_SENDER
    frame_dig -1
    gtxns Sender
    txn Sender
    ==
    assert // Stake payment sender address must match transaction sender address.
    // smart_contracts/pieout/contract.py:594
    // stake_pay.receiver == Global.current_application_address
    frame_dig -1
    gtxns Receiver
    global CurrentApplicationAddress
    ==
    // smart_contracts/pieout/contract.py:593-595
    // assert (
    //     stake_pay.receiver == Global.current_application_address
    // ), err.INVALID_STAKE_PAY_RECEIVER
    assert // Stake payment receiver address must match application address.
    // smart_contracts/pieout/contract.py:596
    // assert stake_pay.amount >= cst.STAKE_AMOUNT_MANAGER, err.INVALID_STAKE_PAY_FEE
    frame_dig -1
    gtxns Amount
    intc 5 // 1000
    >=
    assert // Insufficient funds. Stake pay amount is not enough to cover staking requirements.
    // smart_contracts/pieout/contract.py:598-601
    // # Retrieve current game state from box using the game id parameter
    // game_state = self.box_game_state[
    //     game_id
    // ].copy()  # Make a copy of the game state else immutable
    dup
    box_get
    assert // check self.box_game_state entry exists
    // smart_contracts/pieout/contract.py:603-604
    // # Fail transaction unless the assertion below evaluates True
    // assert game_state.staking_finalized == True, err.STAKING_FINAL  # noqa: E712
    dup
    intc_1 // 0
    getbit
    bytec_0 // 0x00
    intc_1 // 0
    uncover 2
    setbit
    intc_1 // 0
    getbit
    intc_0 // 1
    ==
    assert // Game state staking finalized value mismatch.
    // smart_contracts/pieout/contract.py:605
    // assert game_state.admin_address == Txn.sender, err.INVALID_ADMIN
    dup
    extract 24 32 // on error: Index access is out of bounds
    txn Sender
    ==
    assert // Sender address is not recognized as the admin address for this game.
    // smart_contracts/pieout/contract.py:606
    // assert game_state.prize_pool.native == 0, err.NON_ZERO_PRIZE_POOL
    dup
    pushint 16 // 16
    extract_uint64
    !
    assert // Prize pool not empty. Amount in prize pool must be zero.
    // smart_contracts/pieout/contract.py:607
    // assert game_state.active_players.native == 0, err.NON_ZERO_ACTIVE_PLAYERS
    dup
    intc_2 // 2
    getbyte
    !
    assert // Game lobby not empty. Number of active players must be zero.
    // smart_contracts/pieout/contract.py:611
    // key=self.box_game_players.key_prefix + op.itob(game_id)
    bytec_1 // "p_"
    // smart_contracts/pieout/contract.py:609-612
    // # For game players box, replace the sender's address at start index 0
    // game_players_bref = BoxRef(
    //     key=self.box_game_players.key_prefix + op.itob(game_id)
    // )
    uncover 3
    // smart_contracts/pieout/contract.py:611
    // key=self.box_game_players.key_prefix + op.itob(game_id)
    concat
    // smart_contracts/pieout/contract.py:613
    // game_players_bref.replace(0, Txn.sender.bytes)
    intc_1 // 0
    txn Sender
    box_replace
    // smart_contracts/pieout/contract.py:615
    // game_state.staking_finalized = arc4.Bool(False)  # noqa: FBT003
    intc_1 // 0
    dup
    setbit
    // smart_contracts/pieout/contract.py:616
    // game_state.active_players = arc4.UInt8(1)
    pushbytes 0x01
    replace2 2
    // smart_contracts/pieout/contract.py:617
    // game_state.first_place_score = arc4.UInt8(0)
    bytec_0 // 0x00
    replace2 3
    // smart_contracts/pieout/contract.py:618
    // game_state.second_place_score = arc4.UInt8(0)
    bytec_0 // 0x00
    replace2 4
    // smart_contracts/pieout/contract.py:619
    // game_state.third_place_score = arc4.UInt8(0)
    bytec_0 // 0x00
    replace2 5
    // smart_contracts/pieout/contract.py:620
    // game_state.box_p_start_pos = arc4.UInt16(cst.ADDRESS_SIZE)
    bytec 12 // 0x0020
    replace2 6
    // smart_contracts/pieout/contract.py:622
    // Global.latest_timestamp + cst.EXPIRY_INTERVAL
    global LatestTimestamp
    intc 4 // 3600
    +
    // smart_contracts/pieout/contract.py:621-623
    // game_state.expiry_ts = arc4.UInt64(
    //     Global.latest_timestamp + cst.EXPIRY_INTERVAL
    // )
    itob
    replace2 8
    // smart_contracts/pieout/contract.py:625
    // game_state.prize_pool.native + cst.STAKE_AMOUNT_MANAGER
    dup
    pushint 16 // 16
    extract_uint64
    intc 5 // 1000
    +
    // smart_contracts/pieout/contract.py:624-626
    // game_state.prize_pool = arc4.UInt64(
    //     game_state.prize_pool.native + cst.STAKE_AMOUNT_MANAGER
    // )
    itob
    replace2 16
    // smart_contracts/pieout/contract.py:627
    // game_state.first_place_address = arc4.Address(Global.zero_address)
    global ZeroAddress
    replace2 56
    // smart_contracts/pieout/contract.py:628
    // game_state.second_place_address = arc4.Address(Global.zero_address)
    global ZeroAddress
    replace2 88
    // smart_contracts/pieout/contract.py:629
    // game_state.third_place_address = arc4.Address(Global.zero_address)
    global ZeroAddress
    replace2 120
    // smart_contracts/pieout/contract.py:631-632
    // # Copy the modified game state and store it as new value of box
    // self.box_game_state[game_id] = game_state.copy()
    box_put
    retsub


// smart_contracts.pieout.contract.Pieout.delete_game(game_id: uint64) -> void:
delete_game:
    // smart_contracts/pieout/contract.py:634-638
    // @arc4.abimethod
    // def delete_game(
    //     self,
    //     game_id: UInt64,
    // ) -> None:
    proto 1 0
    // smart_contracts/pieout/contract.py:639-640
    // # Fail transaction unless the assertions below evaluate True
    // assert Global.group_size == 1, err.STANDALONE_TXN_ONLY
    global GroupSize
    intc_0 // 1
    ==
    assert // Invalid group size. This app call can only take standalone transactions.
    // smart_contracts/pieout/contract.py:641
    // assert game_id in self.box_game_state, err.INVALID_GAME_ID
    frame_dig -1
    itob
    dup
    bytec 4 // "s_"
    swap
    concat
    dupn 2
    box_len
    bury 1
    assert // Box game state not found. Check if Game ID is valid.
    // smart_contracts/pieout/contract.py:643-646
    // # Retrieve current game state from box using the game id parameter
    // game_state = self.box_game_state[
    //     game_id
    // ].copy()  # Make a copy of the game state else immutable
    box_get
    swap
    dup
    uncover 2
    assert // check self.box_game_state entry exists
    // smart_contracts/pieout/contract.py:648-649
    // # Fail transaction unless the assertion below evaluates True
    // assert game_state.admin_address == Txn.sender, err.INVALID_ADMIN
    dup
    extract 24 32 // on error: Index access is out of bounds
    txn Sender
    ==
    assert // Sender address is not recognized as the admin address for this game.
    // smart_contracts/pieout/contract.py:653
    // if game_state.active_players.native == 1:
    intc_2 // 2
    getbyte
    dup
    intc_0 // 1
    ==
    bz delete_game_else_body@2
    // smart_contracts/pieout/contract.py:654-660
    // acc_in_game = srt.check_acc_in_game(
    //     game_id=game_id,
    //     account=Txn.sender,
    //     box_game_players=self.box_game_players,
    //     player_count=UInt64(1),
    //     clear_player=False,
    // )
    frame_dig -1
    // smart_contracts/pieout/contract.py:656
    // account=Txn.sender,
    txn Sender
    // smart_contracts/pieout/contract.py:657
    // box_game_players=self.box_game_players,
    bytec_1 // "p_"
    // smart_contracts/pieout/contract.py:658
    // player_count=UInt64(1),
    intc_0 // 1
    // smart_contracts/pieout/contract.py:659
    // clear_player=False,
    intc_1 // 0
    // smart_contracts/pieout/contract.py:654-660
    // acc_in_game = srt.check_acc_in_game(
    //     game_id=game_id,
    //     account=Txn.sender,
    //     box_game_players=self.box_game_players,
    //     player_count=UInt64(1),
    //     clear_player=False,
    // )
    callsub check_acc_in_game
    // smart_contracts/pieout/contract.py:662-663
    // # Fail transaction unless the assertion below evaluates True
    // assert acc_in_game == True, err.ADMIN_SOLE_PLAYER  # noqa: E712
    intc_0 // 1
    ==
    assert // Game admin address must be sole remaining active player in game.
    // smart_contracts/pieout/contract.py:667
    // receiver=Txn.sender,
    txn Sender
    // smart_contracts/pieout/contract.py:668
    // amount=game_state.prize_pool.native,
    frame_dig 2
    pushint 16 // 16
    extract_uint64
    // smart_contracts/pieout/contract.py:669-671
    // note=String(
    //     "sender:app_address,receiver:admin_address=concern:prize_pool_payout"
    // ),
    pushbytes "sender:app_address,receiver:admin_address=concern:prize_pool_payout"
    // smart_contracts/pieout/contract.py:665-672
    // # Submit payout inner transaction
    // srt.payout_itxn(
    //     receiver=Txn.sender,
    //     amount=game_state.prize_pool.native,
    //     note=String(
    //         "sender:app_address,receiver:admin_address=concern:prize_pool_payout"
    //     ),
    // )
    callsub payout_itxn

delete_game_after_if_else@3:
    // smart_contracts/pieout/contract.py:679-680
    // # Delete box game state and box game players from contract storage
    // del self.box_game_state[game_id]
    frame_dig 1
    box_del
    pop
    // smart_contracts/pieout/contract.py:681
    // del self.box_game_players[game_id]
    bytec_1 // "p_"
    frame_dig 0
    concat
    box_del
    pop
    // smart_contracts/pieout/contract.py:686
    // value_size=arc4.UInt16(cst.ADDRESS_SIZE * game_state.max_players.native),
    frame_dig 2
    intc_0 // 1
    getbyte
    intc_3 // 32
    *
    itob
    dup
    bitlen
    pushint 16 // 16
    <=
    assert // overflow
    extract 6 2
    // smart_contracts/pieout/contract.py:685
    // key_size=arc4.UInt8(10),
    pushbytes 0x0a
    // smart_contracts/pieout/contract.py:683-687
    // # Calculate box game players fee
    // box_p_fee = self.calc_single_box_fee(
    //     key_size=arc4.UInt8(10),
    //     value_size=arc4.UInt16(cst.ADDRESS_SIZE * game_state.max_players.native),
    // )
    swap
    callsub calc_single_box_fee
    // smart_contracts/pieout/contract.py:691
    // receiver=Txn.sender,
    txn Sender
    // smart_contracts/pieout/contract.py:692
    // amount=cst.BOX_S_FEE + box_p_fee,
    intc 11 // 67300
    uncover 2
    +
    // smart_contracts/pieout/contract.py:693-695
    // note=String(
    //     "sender:app_address,receiver:admin_address=concern:box_s_refund,box_p_refund"
    // ),
    pushbytes "sender:app_address,receiver:admin_address=concern:box_s_refund,box_p_refund"
    // smart_contracts/pieout/contract.py:689-696
    // # Submit payout inner transaction
    // srt.payout_itxn(
    //     receiver=Txn.sender,
    //     amount=cst.BOX_S_FEE + box_p_fee,
    //     note=String(
    //         "sender:app_address,receiver:admin_address=concern:box_s_refund,box_p_refund"
    //     ),
    // )
    callsub payout_itxn
    retsub

delete_game_else_body@2:
    // smart_contracts/pieout/contract.py:675-676
    // # Fail transaction unless the assertion below evaluates True
    // assert game_state.active_players.native == 0, err.NON_ZERO_ACTIVE_PLAYERS
    frame_dig 3
    !
    assert // Game lobby not empty. Number of active players must be zero.
    // smart_contracts/pieout/contract.py:677
    // assert game_state.prize_pool.native == 0, err.NON_ZERO_PRIZE_POOL
    frame_dig 2
    pushint 16 // 16
    extract_uint64
    !
    assert // Prize pool not empty. Amount in prize pool must be zero.
    b delete_game_after_if_else@3


// smart_contracts.pieout.contract.Pieout.terminate() -> void:
terminate:
    // smart_contracts/pieout/contract.py:701-702
    // # Fail transaction unless the assertions below evaluate True
    // assert Txn.sender == Global.creator_address, err.INVALID_CREATOR
    txn Sender
    global CreatorAddress
    ==
    assert // Sender address must match application creator address.
    // smart_contracts/pieout/contract.py:703
    // assert TemplateVar[bool]("DELETABLE"), err.DELETEABLE_NOT_TRUE
    intc 14 // TMPL_DELETABLE
    assert // Template variable 'DELETABLE' needs to be 'True' at deploy-time.
    // smart_contracts/pieout/contract.py:705
    // del self.box_game_trophy.value
    bytec_3 // 0x745f
    box_del
    pop
    // smart_contracts/pieout/contract.py:709
    // receiver=Txn.sender,
    txn Sender
    // smart_contracts/pieout/contract.py:710
    // amount=UInt64(cst.BOX_T_FEE),
    intc 10 // 19300
    // smart_contracts/pieout/contract.py:711-713
    // note=String(
    //     "sender:app_address,receiver:admin_address=concern:box_t_refund"
    // ),
    pushbytes "sender:app_address,receiver:admin_address=concern:box_t_refund"
    // smart_contracts/pieout/contract.py:707-714
    // # Submit payout inner transaction
    // srt.payout_itxn(
    //     receiver=Txn.sender,
    //     amount=UInt64(cst.BOX_T_FEE),
    //     note=String(
    //         "sender:app_address,receiver:admin_address=concern:box_t_refund"
    //     ),
    // )
    callsub payout_itxn
    retsub
