/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"Pieout","structs":{"CommitRand":[{"name":"gameId","type":"uint64"},{"name":"commitRound","type":"uint64"},{"name":"expiryRound","type":"uint64"}],"GameState":[{"name":"stakingFinalized","type":"bool"},{"name":"maxPlayers","type":"uint8"},{"name":"activePlayers","type":"uint8"},{"name":"firstPlaceScore","type":"uint8"},{"name":"secondPlaceScore","type":"uint8"},{"name":"thirdPlaceScore","type":"uint8"},{"name":"boxPStartPos","type":"uint16"},{"name":"expiryTs","type":"uint64"},{"name":"prizePool","type":"uint64"},{"name":"adminAddress","type":"address"},{"name":"firstPlaceAddress","type":"address"},{"name":"secondPlaceAddress","type":"address"},{"name":"thirdPlaceAddress","type":"address"}],"GameTrophy":[{"name":"assetId","type":"uint64"},{"name":"ownerAddress","type":"address"}]},"methods":[{"name":"calc_single_box_cost","args":[{"type":"uint8","name":"key_size"},{"type":"uint16","name":"value_size"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"events":[],"recommendations":{}},{"name":"read_gen_unix","args":[],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"events":[],"recommendations":{}},{"name":"read_box_game_state","args":[{"type":"uint64","name":"game_id"}],"returns":{"type":"(uint64,bool,uint8,uint8,uint8,uint8,uint8,uint16,uint64,uint64,address,address,address,address)"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"events":[],"recommendations":{}},{"name":"read_box_game_players","args":[{"type":"uint64","name":"game_id"}],"returns":{"type":"address[]"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"events":[],"recommendations":{}},{"name":"read_box_commit_rand","args":[{"type":"account","name":"player"}],"returns":{"type":"(uint64,uint64,uint64)"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"events":[],"recommendations":{}},{"name":"generate","args":[],"returns":{"type":"void"},"actions":{"create":["NoOp"],"call":[]},"readonly":false,"events":[],"recommendations":{}},{"name":"mint_trophy","args":[{"type":"pay","name":"box_t_pay"},{"type":"pay","name":"mint_pay"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"claim_trophy","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"new_game","args":[{"type":"uint64","name":"max_players"},{"type":"pay","name":"box_s_pay"},{"type":"pay","name":"box_p_pay"},{"type":"pay","name":"stake_pay"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"join_game","args":[{"type":"uint64","name":"game_id"},{"type":"pay","name":"stake_pay"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[{"name":"game_live","args":[{"type":"bool","name":"field1"},{"type":"uint64","name":"field2"}]}],"recommendations":{}},{"name":"get_box_commit_rand","args":[{"type":"pay","name":"box_c_pay"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"set_box_commit_rand","args":[{"type":"uint64","name":"game_id"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"del_box_commit_rand_for_self","args":[{"type":"uint64","name":"game_id"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"del_box_commit_rand_for_other","args":[{"type":"account","name":"player"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"up_ref_budget_for_play_game","args":[{"type":"uint64","name":"game_id"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"play_game","args":[{"type":"uint64","name":"game_id"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[{"name":"player_score","args":[{"type":"uint64","name":"field1"},{"type":"uint64","name":"field2"},{"type":"address","name":"field3"},{"type":"uint8","name":"field4"}]},{"name":"game_over","args":[{"type":"uint8","name":"field1"},{"type":"address","name":"field2"},{"type":"address","name":"field3"},{"type":"address","name":"field4"}]}],"recommendations":{}},{"name":"trigger_game_prog","args":[{"type":"uint64","name":"game_id"},{"type":"uint8","name":"trigger_id"}],"returns":{"type":"bool"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[{"name":"game_live","args":[{"type":"bool","name":"field1"},{"type":"uint64","name":"field2"}]},{"name":"game_over","args":[{"type":"uint8","name":"field1"},{"type":"address","name":"field2"},{"type":"address","name":"field3"},{"type":"address","name":"field4"}]}],"recommendations":{}},{"name":"reset_game","args":[{"type":"uint64","name":"game_id"},{"type":"pay","name":"stake_pay"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"delete_game","args":[{"type":"uint64","name":"game_id"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"terminate","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["DeleteApplication"]},"readonly":false,"events":[],"recommendations":{}}],"arcs":[22,28],"networks":{},"state":{"schema":{"global":{"ints":3,"bytes":1},"local":{"ints":0,"bytes":0}},"keys":{"global":{"game_id":{"keyType":"AVMString","valueType":"AVMUint64","key":"Z2FtZV9pZA=="},"score_id":{"keyType":"AVMString","valueType":"AVMUint64","key":"c2NvcmVfaWQ="},"ath_score":{"keyType":"AVMString","valueType":"AVMUint64","key":"YXRoX3Njb3Jl"},"ath_address":{"keyType":"AVMString","valueType":"address","key":"YXRoX2FkZHJlc3M="}},"local":{},"box":{"box_game_trophy":{"keyType":"AVMString","valueType":"GameTrophy","key":"dF8="}}},"maps":{"global":{},"local":{},"box":{"box_game_state":{"keyType":"uint64","valueType":"GameState","prefix":"c18="},"box_game_players":{"keyType":"uint64","valueType":"AVMBytes","prefix":"cF8="},"box_commit_rand":{"keyType":"address","valueType":"CommitRand","prefix":"Y18="}}}},"bareActions":{"create":[],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[2969,4426],"errorMessage":"Account is not authorized to make this call."},{"pc":[2721,3325],"errorMessage":"Account is not recognized as an active player for this game."},{"pc":[4302],"errorMessage":"Account is not recognized as the admin address for this game."},{"pc":[2075],"errorMessage":"Account must be opted in to asset in order to perform this action."},{"pc":[1801,4710],"errorMessage":"Account must match application creator address."},{"pc":[3118,3236],"errorMessage":"Application ID mismatch. App ID must be same across all transactions in group."},{"pc":[2060],"errorMessage":"Asset trophy receiver must match application ATH address."},{"pc":[2733,2978],"errorMessage":"Box Commit Rand round not empty. Round value must be zero to obtain a valid one."},{"pc":[1834,2620],"errorMessage":"Box found. Ensure the box you are trying to access does not exist already."},{"pc":[2442,2679,2771,3290,4171,4254,4406],"errorMessage":"Box game state not found. Check if game ID exists."},{"pc":[1773,2199,2447,2625,2687,2779,2963,3298,3303],"errorMessage":"Box not found. Ensure the box you are trying to access was created and still exists."},{"pc":[1860,2304,2312,2649],"errorMessage":"Box payment receiver address must match application address."},{"pc":[1852,2280,2288,2641],"errorMessage":"Box payment sender address must match transaction sender address."},{"pc":[4457],"errorMessage":"Game admin address must be sole remaining active player in the game."},{"pc":[4200],"errorMessage":"Game event not found. Check if game event Trigger ID exists"},{"pc":[4313,4682],"errorMessage":"Game lobby not empty. Number of active players must be zero."},{"pc":[2504,2702,3346,4213,4294],"errorMessage":"Game state staking finalized value mismatch."},{"pc":[801,813,818,855,890,988,993,1001,1011,1060,1574,1579,1584,1589,1594,1599,1604,1609,1614,1619,1624,1629,1777,1782,1787,2507,2517,2522,3347,3724,3747,3753,3759,3765,3828,3856,4055,4078,4084,4108,4182,4215,4296,4410,4443],"errorMessage":"Index access is out of bounds"},{"pc":[1844,2234,2264,2633],"errorMessage":"Insufficient funds. Box pay amount is not enough to cover application MBR."},{"pc":[1868],"errorMessage":"Insufficient funds. Mint pay amount is not enough to cover asset creation cost."},{"pc":[2226,2456,4278],"errorMessage":"Insufficient funds. Stake pay amount is not enough to cover staking requirements."},{"pc":[2806,3144,3261,3366],"errorMessage":"Invalid Game ID. Box Commit Rand Game ID must be a certain value or match Game ID arg."},{"pc":[3111,3229],"errorMessage":"Invalid group index. Ensure transaction group index matches the expected value. "},{"pc":[1828,2194,2436,2611,3107,3224,4241],"errorMessage":"Invalid group size. Ensure number of transaction in group is within valid bounds."},{"pc":[2051,2666,2759,2954,4167,4402],"errorMessage":"Invalid group size. This app call can only take standalone transactions."},{"pc":[2514,2985,3354,4189,4222],"errorMessage":"Invalid time frame. Call made outside the permitted block or timestamp range."},{"pc":[1884],"errorMessage":"Mint payment receiver address must match application address."},{"pc":[1876],"errorMessage":"Mint payment sender address must match transaction sender address."},{"pc":[2526],"errorMessage":"Number of active players must not exceed number of max players."},{"pc":[155],"errorMessage":"OnCompletion is not DeleteApplication"},{"pc":[167,183,209,233,249,265,283,299,315,337,363,410,422,454,467,490,511,532,549],"errorMessage":"OnCompletion is not NoOp"},{"pc":[2491,2838],"errorMessage":"Player with this address must not be an active game participant in the game."},{"pc":[2541],"errorMessage":"Players box start position index overflow. Can not store more addresses."},{"pc":[4308,4689],"errorMessage":"Prize pool not empty. Amount in prize pool must be zero."},{"pc":[3379],"errorMessage":"Randomness commit round not reached yet."},{"pc":[3125,3243],"errorMessage":"Sender mismatch. Sender must be same address across all transactions in group."},{"pc":[2296,2472,4270],"errorMessage":"Stake payment receiver address must match application address."},{"pc":[2272,2464,4262],"errorMessage":"Stake payment sender address must match transaction sender address."},{"pc":[4704],"errorMessage":"Template variable 'DELETABLE' needs to be 'True' at deploy-time."},{"pc":[2217],"errorMessage":"The number of max players must be within bounds."},{"pc":[3133,3251],"errorMessage":"Transaction at this group index must have exact required method selector."},{"pc":[3434],"errorMessage":"application log value is not the result of an ABI return"},{"pc":[458],"errorMessage":"can only call when creating"},{"pc":[158,170,186,212,236,252,268,286,302,318,340,366,413,425,470,493,514,535,552],"errorMessage":"can only call when not creating"},{"pc":[752],"errorMessage":"check BoxMap entry exists"},{"pc":[921],"errorMessage":"check BoxRef exists"},{"pc":[2058,3817],"errorMessage":"check self.ath_address exists"},{"pc":[3803],"errorMessage":"check self.ath_score exists"},{"pc":[1775,2727,2785,2796,2812,2972,3150,3161,3267,3360,3374,3386],"errorMessage":"check self.box_commit_rand entry exists"},{"pc":[1689],"errorMessage":"check self.box_game_players entry exists"},{"pc":[1563,2431,2689,2823,3309,3333,4162,4281,4397,4442],"errorMessage":"check self.box_game_state entry exists"},{"pc":[2065,3826,3851,4004,4722,4742],"errorMessage":"check self.box_game_trophy exists"},{"pc":[2378],"errorMessage":"check self.game_id exists"},{"pc":[3446,3784],"errorMessage":"check self.score_id exists"},{"pc":[2250,2321,2560,2581,3696,4024,4568],"errorMessage":"overflow"},{"pc":[3102,3219],"errorMessage":"transaction type is appl"},{"pc":[200,328,354,381,391,401,435,445],"errorMessage":"transaction type is pay"}],"pcOffsetMethod":"cblocks"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"},"byteCode":{"approval":"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","clear":"CoEBQw=="},"compilerInfo":{"compiler":"puya","compilerVersion":{"major":4,"minor":9,"patch":0}},"events":[{"name":"game_live","args":[{"type":"bool","name":"field1"},{"type":"uint64","name":"field2"}]},{"name":"player_score","args":[{"type":"uint64","name":"field1"},{"type":"uint64","name":"field2"},{"type":"address","name":"field3"},{"type":"uint8","name":"field4"}]},{"name":"game_over","args":[{"type":"uint8","name":"field1"},{"type":"address","name":"field2"},{"type":"address","name":"field3"},{"type":"address","name":"field4"}]}],"templateVariables":{"GEN_UNIX":{"type":"AVMUint64"},"DELETABLE":{"type":"AVMUint64"}}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


// Type definitions for ARC-56 structs

export type CommitRand = {
  gameId: bigint,
  commitRound: bigint,
  expiryRound: bigint
}


/**
 * Converts the ABI tuple representation of a CommitRand to the struct representation
 */
export function CommitRandFromTuple(abiTuple: [bigint, bigint, bigint]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.CommitRand, APP_SPEC.structs) as CommitRand
}

export type GameState = {
  stakingFinalized: boolean,
  maxPlayers: number,
  activePlayers: number,
  firstPlaceScore: number,
  secondPlaceScore: number,
  thirdPlaceScore: number,
  boxPStartPos: number,
  expiryTs: bigint,
  prizePool: bigint,
  adminAddress: string,
  firstPlaceAddress: string,
  secondPlaceAddress: string,
  thirdPlaceAddress: string
}


/**
 * Converts the ABI tuple representation of a GameState to the struct representation
 */
export function GameStateFromTuple(abiTuple: [boolean, number, number, number, number, number, number, bigint, bigint, string, string, string, string]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.GameState, APP_SPEC.structs) as GameState
}

export type GameTrophy = {
  assetId: bigint,
  ownerAddress: string
}


/**
 * Converts the ABI tuple representation of a GameTrophy to the struct representation
 */
export function GameTrophyFromTuple(abiTuple: [bigint, string]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.GameTrophy, APP_SPEC.structs) as GameTrophy
}

/**
 * Deploy-time template variables
 */
export type TemplateVariables = {
  GEN_UNIX: bigint,
  DELETABLE: bigint,
}

/**
 * The argument types for the Pieout contract
 */
export type PieoutArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'calc_single_box_cost(uint8,uint16)uint64': {
      keySize: bigint | number
      valueSize: bigint | number
    }
    'read_gen_unix()uint64': Record<string, never>
    'read_box_game_state(uint64)(uint64,bool,uint8,uint8,uint8,uint8,uint8,uint16,uint64,uint64,address,address,address,address)': {
      gameId: bigint | number
    }
    'read_box_game_players(uint64)address[]': {
      gameId: bigint | number
    }
    'read_box_commit_rand(account)(uint64,uint64,uint64)': {
      player: Uint8Array | string
    }
    'generate()void': Record<string, never>
    'mint_trophy(pay,pay)void': {
      boxTPay: AppMethodCallTransactionArgument
      mintPay: AppMethodCallTransactionArgument
    }
    'claim_trophy()void': Record<string, never>
    'new_game(uint64,pay,pay,pay)void': {
      maxPlayers: bigint | number
      boxSPay: AppMethodCallTransactionArgument
      boxPPay: AppMethodCallTransactionArgument
      stakePay: AppMethodCallTransactionArgument
    }
    'join_game(uint64,pay)void': {
      gameId: bigint | number
      stakePay: AppMethodCallTransactionArgument
    }
    'get_box_commit_rand(pay)void': {
      boxCPay: AppMethodCallTransactionArgument
    }
    'set_box_commit_rand(uint64)void': {
      gameId: bigint | number
    }
    'del_box_commit_rand_for_self(uint64)void': {
      gameId: bigint | number
    }
    'del_box_commit_rand_for_other(account)void': {
      player: Uint8Array | string
    }
    'up_ref_budget_for_play_game(uint64)void': {
      gameId: bigint | number
    }
    'play_game(uint64)void': {
      gameId: bigint | number
    }
    'trigger_game_prog(uint64,uint8)bool': {
      gameId: bigint | number
      triggerId: bigint | number
    }
    'reset_game(uint64,pay)void': {
      gameId: bigint | number
      stakePay: AppMethodCallTransactionArgument
    }
    'delete_game(uint64)void': {
      gameId: bigint | number
    }
    'terminate()void': Record<string, never>
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'calc_single_box_cost(uint8,uint16)uint64': [keySize: bigint | number, valueSize: bigint | number]
    'read_gen_unix()uint64': []
    'read_box_game_state(uint64)(uint64,bool,uint8,uint8,uint8,uint8,uint8,uint16,uint64,uint64,address,address,address,address)': [gameId: bigint | number]
    'read_box_game_players(uint64)address[]': [gameId: bigint | number]
    'read_box_commit_rand(account)(uint64,uint64,uint64)': [player: Uint8Array | string]
    'generate()void': []
    'mint_trophy(pay,pay)void': [boxTPay: AppMethodCallTransactionArgument, mintPay: AppMethodCallTransactionArgument]
    'claim_trophy()void': []
    'new_game(uint64,pay,pay,pay)void': [maxPlayers: bigint | number, boxSPay: AppMethodCallTransactionArgument, boxPPay: AppMethodCallTransactionArgument, stakePay: AppMethodCallTransactionArgument]
    'join_game(uint64,pay)void': [gameId: bigint | number, stakePay: AppMethodCallTransactionArgument]
    'get_box_commit_rand(pay)void': [boxCPay: AppMethodCallTransactionArgument]
    'set_box_commit_rand(uint64)void': [gameId: bigint | number]
    'del_box_commit_rand_for_self(uint64)void': [gameId: bigint | number]
    'del_box_commit_rand_for_other(account)void': [player: Uint8Array | string]
    'up_ref_budget_for_play_game(uint64)void': [gameId: bigint | number]
    'play_game(uint64)void': [gameId: bigint | number]
    'trigger_game_prog(uint64,uint8)bool': [gameId: bigint | number, triggerId: bigint | number]
    'reset_game(uint64,pay)void': [gameId: bigint | number, stakePay: AppMethodCallTransactionArgument]
    'delete_game(uint64)void': [gameId: bigint | number]
    'terminate()void': []
  }
}

/**
 * The return type for each method
 */
export type PieoutReturns = {
  'calc_single_box_cost(uint8,uint16)uint64': bigint
  'read_gen_unix()uint64': bigint
  'read_box_game_state(uint64)(uint64,bool,uint8,uint8,uint8,uint8,uint8,uint16,uint64,uint64,address,address,address,address)': [bigint, boolean, number, number, number, number, number, number, bigint, bigint, string, string, string, string]
  'read_box_game_players(uint64)address[]': string[]
  'read_box_commit_rand(account)(uint64,uint64,uint64)': [bigint, bigint, bigint]
  'generate()void': void
  'mint_trophy(pay,pay)void': void
  'claim_trophy()void': void
  'new_game(uint64,pay,pay,pay)void': void
  'join_game(uint64,pay)void': void
  'get_box_commit_rand(pay)void': void
  'set_box_commit_rand(uint64)void': void
  'del_box_commit_rand_for_self(uint64)void': void
  'del_box_commit_rand_for_other(account)void': void
  'up_ref_budget_for_play_game(uint64)void': void
  'play_game(uint64)void': void
  'trigger_game_prog(uint64,uint8)bool': boolean
  'reset_game(uint64,pay)void': void
  'delete_game(uint64)void': void
  'terminate()void': void
}

/**
 * Defines the types of available calls and state of the Pieout smart contract.
 */
export type PieoutTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'calc_single_box_cost(uint8,uint16)uint64' | 'calc_single_box_cost', {
      argsObj: PieoutArgs['obj']['calc_single_box_cost(uint8,uint16)uint64']
      argsTuple: PieoutArgs['tuple']['calc_single_box_cost(uint8,uint16)uint64']
      returns: PieoutReturns['calc_single_box_cost(uint8,uint16)uint64']
    }>
    & Record<'read_gen_unix()uint64' | 'read_gen_unix', {
      argsObj: PieoutArgs['obj']['read_gen_unix()uint64']
      argsTuple: PieoutArgs['tuple']['read_gen_unix()uint64']
      returns: PieoutReturns['read_gen_unix()uint64']
    }>
    & Record<'read_box_game_state(uint64)(uint64,bool,uint8,uint8,uint8,uint8,uint8,uint16,uint64,uint64,address,address,address,address)' | 'read_box_game_state', {
      argsObj: PieoutArgs['obj']['read_box_game_state(uint64)(uint64,bool,uint8,uint8,uint8,uint8,uint8,uint16,uint64,uint64,address,address,address,address)']
      argsTuple: PieoutArgs['tuple']['read_box_game_state(uint64)(uint64,bool,uint8,uint8,uint8,uint8,uint8,uint16,uint64,uint64,address,address,address,address)']
      returns: PieoutReturns['read_box_game_state(uint64)(uint64,bool,uint8,uint8,uint8,uint8,uint8,uint16,uint64,uint64,address,address,address,address)']
    }>
    & Record<'read_box_game_players(uint64)address[]' | 'read_box_game_players', {
      argsObj: PieoutArgs['obj']['read_box_game_players(uint64)address[]']
      argsTuple: PieoutArgs['tuple']['read_box_game_players(uint64)address[]']
      returns: PieoutReturns['read_box_game_players(uint64)address[]']
    }>
    & Record<'read_box_commit_rand(account)(uint64,uint64,uint64)' | 'read_box_commit_rand', {
      argsObj: PieoutArgs['obj']['read_box_commit_rand(account)(uint64,uint64,uint64)']
      argsTuple: PieoutArgs['tuple']['read_box_commit_rand(account)(uint64,uint64,uint64)']
      returns: PieoutReturns['read_box_commit_rand(account)(uint64,uint64,uint64)']
    }>
    & Record<'generate()void' | 'generate', {
      argsObj: PieoutArgs['obj']['generate()void']
      argsTuple: PieoutArgs['tuple']['generate()void']
      returns: PieoutReturns['generate()void']
    }>
    & Record<'mint_trophy(pay,pay)void' | 'mint_trophy', {
      argsObj: PieoutArgs['obj']['mint_trophy(pay,pay)void']
      argsTuple: PieoutArgs['tuple']['mint_trophy(pay,pay)void']
      returns: PieoutReturns['mint_trophy(pay,pay)void']
    }>
    & Record<'claim_trophy()void' | 'claim_trophy', {
      argsObj: PieoutArgs['obj']['claim_trophy()void']
      argsTuple: PieoutArgs['tuple']['claim_trophy()void']
      returns: PieoutReturns['claim_trophy()void']
    }>
    & Record<'new_game(uint64,pay,pay,pay)void' | 'new_game', {
      argsObj: PieoutArgs['obj']['new_game(uint64,pay,pay,pay)void']
      argsTuple: PieoutArgs['tuple']['new_game(uint64,pay,pay,pay)void']
      returns: PieoutReturns['new_game(uint64,pay,pay,pay)void']
    }>
    & Record<'join_game(uint64,pay)void' | 'join_game', {
      argsObj: PieoutArgs['obj']['join_game(uint64,pay)void']
      argsTuple: PieoutArgs['tuple']['join_game(uint64,pay)void']
      returns: PieoutReturns['join_game(uint64,pay)void']
    }>
    & Record<'get_box_commit_rand(pay)void' | 'get_box_commit_rand', {
      argsObj: PieoutArgs['obj']['get_box_commit_rand(pay)void']
      argsTuple: PieoutArgs['tuple']['get_box_commit_rand(pay)void']
      returns: PieoutReturns['get_box_commit_rand(pay)void']
    }>
    & Record<'set_box_commit_rand(uint64)void' | 'set_box_commit_rand', {
      argsObj: PieoutArgs['obj']['set_box_commit_rand(uint64)void']
      argsTuple: PieoutArgs['tuple']['set_box_commit_rand(uint64)void']
      returns: PieoutReturns['set_box_commit_rand(uint64)void']
    }>
    & Record<'del_box_commit_rand_for_self(uint64)void' | 'del_box_commit_rand_for_self', {
      argsObj: PieoutArgs['obj']['del_box_commit_rand_for_self(uint64)void']
      argsTuple: PieoutArgs['tuple']['del_box_commit_rand_for_self(uint64)void']
      returns: PieoutReturns['del_box_commit_rand_for_self(uint64)void']
    }>
    & Record<'del_box_commit_rand_for_other(account)void' | 'del_box_commit_rand_for_other', {
      argsObj: PieoutArgs['obj']['del_box_commit_rand_for_other(account)void']
      argsTuple: PieoutArgs['tuple']['del_box_commit_rand_for_other(account)void']
      returns: PieoutReturns['del_box_commit_rand_for_other(account)void']
    }>
    & Record<'up_ref_budget_for_play_game(uint64)void' | 'up_ref_budget_for_play_game', {
      argsObj: PieoutArgs['obj']['up_ref_budget_for_play_game(uint64)void']
      argsTuple: PieoutArgs['tuple']['up_ref_budget_for_play_game(uint64)void']
      returns: PieoutReturns['up_ref_budget_for_play_game(uint64)void']
    }>
    & Record<'play_game(uint64)void' | 'play_game', {
      argsObj: PieoutArgs['obj']['play_game(uint64)void']
      argsTuple: PieoutArgs['tuple']['play_game(uint64)void']
      returns: PieoutReturns['play_game(uint64)void']
    }>
    & Record<'trigger_game_prog(uint64,uint8)bool' | 'trigger_game_prog', {
      argsObj: PieoutArgs['obj']['trigger_game_prog(uint64,uint8)bool']
      argsTuple: PieoutArgs['tuple']['trigger_game_prog(uint64,uint8)bool']
      returns: PieoutReturns['trigger_game_prog(uint64,uint8)bool']
    }>
    & Record<'reset_game(uint64,pay)void' | 'reset_game', {
      argsObj: PieoutArgs['obj']['reset_game(uint64,pay)void']
      argsTuple: PieoutArgs['tuple']['reset_game(uint64,pay)void']
      returns: PieoutReturns['reset_game(uint64,pay)void']
    }>
    & Record<'delete_game(uint64)void' | 'delete_game', {
      argsObj: PieoutArgs['obj']['delete_game(uint64)void']
      argsTuple: PieoutArgs['tuple']['delete_game(uint64)void']
      returns: PieoutReturns['delete_game(uint64)void']
    }>
    & Record<'terminate()void' | 'terminate', {
      argsObj: PieoutArgs['obj']['terminate()void']
      argsTuple: PieoutArgs['tuple']['terminate()void']
      returns: PieoutReturns['terminate()void']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        gameId: bigint
        scoreId: bigint
        athScore: bigint
        athAddress: string
      }
      maps: {}
    }
    box: {
      keys: {
        boxGameTrophy: GameTrophy
      }
      maps: {
        boxGameState: Map<bigint | number, GameState>
        boxGamePlayers: Map<bigint | number, Uint8Array>
        boxCommitRand: Map<string, CommitRand>
      }
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type PieoutSignatures = keyof PieoutTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type PieoutNonVoidMethodSignatures = keyof PieoutTypes['methods'] extends infer T ? T extends keyof PieoutTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the Pieout smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends PieoutSignatures> = PieoutTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the Pieout smart contract to the method's return type
 */
export type MethodReturn<TSignature extends PieoutSignatures> = PieoutTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = PieoutTypes['state']['global']['keys']

/**
 * Defines the shape of the keyed box state of the application.
 */
export type BoxKeysState = PieoutTypes['state']['box']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type PieoutCreateCallParams =
  | Expand<CallParams<PieoutArgs['obj']['generate()void'] | PieoutArgs['tuple']['generate()void']> & {method: 'generate'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<PieoutArgs['obj']['generate()void'] | PieoutArgs['tuple']['generate()void']> & {method: 'generate()void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines supported delete method params for this smart contract
 */
export type PieoutDeleteCallParams =
  | Expand<CallParams<PieoutArgs['obj']['terminate()void'] | PieoutArgs['tuple']['terminate()void']> & {method: 'terminate'}>
  | Expand<CallParams<PieoutArgs['obj']['terminate()void'] | PieoutArgs['tuple']['terminate()void']> & {method: 'terminate()void'}>
/**
 * Defines arguments required for the deploy method.
 */
export type PieoutDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: PieoutCreateCallParams
  /**
   * Delete transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  deleteParams?: PieoutDeleteCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the Pieout smart contract
 */
export abstract class PieoutParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends PieoutCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'generate':
          case 'generate()void':
            return PieoutParamsFactory.create.generate(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the Pieout smart contract using the generate()void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      generate(params: CallParams<PieoutArgs['obj']['generate()void'] | PieoutArgs['tuple']['generate()void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'generate()void' as const,
          args: Array.isArray(params.args) ? params.args : [],
        }
      },
    }
  }

  /**
   * Gets available delete ABI call param factories
   */
  static get delete() {
    return {
      _resolveByMethod<TParams extends PieoutDeleteCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'terminate':
          case 'terminate()void':
            return PieoutParamsFactory.delete.terminate(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs delete ABI call params for the Pieout smart contract using the terminate()void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      terminate(params: CallParams<PieoutArgs['obj']['terminate()void'] | PieoutArgs['tuple']['terminate()void']>): AppClientMethodCallParams {
        return {
          ...params,
          method: 'terminate()void' as const,
          args: Array.isArray(params.args) ? params.args : [],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the calc_single_box_cost(uint8,uint16)uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static calcSingleBoxCost(params: CallParams<PieoutArgs['obj']['calc_single_box_cost(uint8,uint16)uint64'] | PieoutArgs['tuple']['calc_single_box_cost(uint8,uint16)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'calc_single_box_cost(uint8,uint16)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.keySize, params.args.valueSize],
    }
  }
  /**
   * Constructs a no op call for the read_gen_unix()uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static readGenUnix(params: CallParams<PieoutArgs['obj']['read_gen_unix()uint64'] | PieoutArgs['tuple']['read_gen_unix()uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'read_gen_unix()uint64' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the read_box_game_state(uint64)(uint64,bool,uint8,uint8,uint8,uint8,uint8,uint16,uint64,uint64,address,address,address,address) ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static readBoxGameState(params: CallParams<PieoutArgs['obj']['read_box_game_state(uint64)(uint64,bool,uint8,uint8,uint8,uint8,uint8,uint16,uint64,uint64,address,address,address,address)'] | PieoutArgs['tuple']['read_box_game_state(uint64)(uint64,bool,uint8,uint8,uint8,uint8,uint8,uint16,uint64,uint64,address,address,address,address)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'read_box_game_state(uint64)(uint64,bool,uint8,uint8,uint8,uint8,uint8,uint16,uint64,uint64,address,address,address,address)' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.gameId],
    }
  }
  /**
   * Constructs a no op call for the read_box_game_players(uint64)address[] ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static readBoxGamePlayers(params: CallParams<PieoutArgs['obj']['read_box_game_players(uint64)address[]'] | PieoutArgs['tuple']['read_box_game_players(uint64)address[]']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'read_box_game_players(uint64)address[]' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.gameId],
    }
  }
  /**
   * Constructs a no op call for the read_box_commit_rand(account)(uint64,uint64,uint64) ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static readBoxCommitRand(params: CallParams<PieoutArgs['obj']['read_box_commit_rand(account)(uint64,uint64,uint64)'] | PieoutArgs['tuple']['read_box_commit_rand(account)(uint64,uint64,uint64)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'read_box_commit_rand(account)(uint64,uint64,uint64)' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.player],
    }
  }
  /**
   * Constructs a no op call for the mint_trophy(pay,pay)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static mintTrophy(params: CallParams<PieoutArgs['obj']['mint_trophy(pay,pay)void'] | PieoutArgs['tuple']['mint_trophy(pay,pay)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'mint_trophy(pay,pay)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.boxTPay, params.args.mintPay],
    }
  }
  /**
   * Constructs a no op call for the claim_trophy()void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static claimTrophy(params: CallParams<PieoutArgs['obj']['claim_trophy()void'] | PieoutArgs['tuple']['claim_trophy()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'claim_trophy()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the new_game(uint64,pay,pay,pay)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static newGame(params: CallParams<PieoutArgs['obj']['new_game(uint64,pay,pay,pay)void'] | PieoutArgs['tuple']['new_game(uint64,pay,pay,pay)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'new_game(uint64,pay,pay,pay)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.maxPlayers, params.args.boxSPay, params.args.boxPPay, params.args.stakePay],
    }
  }
  /**
   * Constructs a no op call for the join_game(uint64,pay)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static joinGame(params: CallParams<PieoutArgs['obj']['join_game(uint64,pay)void'] | PieoutArgs['tuple']['join_game(uint64,pay)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'join_game(uint64,pay)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.gameId, params.args.stakePay],
    }
  }
  /**
   * Constructs a no op call for the get_box_commit_rand(pay)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getBoxCommitRand(params: CallParams<PieoutArgs['obj']['get_box_commit_rand(pay)void'] | PieoutArgs['tuple']['get_box_commit_rand(pay)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'get_box_commit_rand(pay)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.boxCPay],
    }
  }
  /**
   * Constructs a no op call for the set_box_commit_rand(uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static setBoxCommitRand(params: CallParams<PieoutArgs['obj']['set_box_commit_rand(uint64)void'] | PieoutArgs['tuple']['set_box_commit_rand(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'set_box_commit_rand(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.gameId],
    }
  }
  /**
   * Constructs a no op call for the del_box_commit_rand_for_self(uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static delBoxCommitRandForSelf(params: CallParams<PieoutArgs['obj']['del_box_commit_rand_for_self(uint64)void'] | PieoutArgs['tuple']['del_box_commit_rand_for_self(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'del_box_commit_rand_for_self(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.gameId],
    }
  }
  /**
   * Constructs a no op call for the del_box_commit_rand_for_other(account)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static delBoxCommitRandForOther(params: CallParams<PieoutArgs['obj']['del_box_commit_rand_for_other(account)void'] | PieoutArgs['tuple']['del_box_commit_rand_for_other(account)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'del_box_commit_rand_for_other(account)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.player],
    }
  }
  /**
   * Constructs a no op call for the up_ref_budget_for_play_game(uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static upRefBudgetForPlayGame(params: CallParams<PieoutArgs['obj']['up_ref_budget_for_play_game(uint64)void'] | PieoutArgs['tuple']['up_ref_budget_for_play_game(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'up_ref_budget_for_play_game(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.gameId],
    }
  }
  /**
   * Constructs a no op call for the play_game(uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static playGame(params: CallParams<PieoutArgs['obj']['play_game(uint64)void'] | PieoutArgs['tuple']['play_game(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'play_game(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.gameId],
    }
  }
  /**
   * Constructs a no op call for the trigger_game_prog(uint64,uint8)bool ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static triggerGameProg(params: CallParams<PieoutArgs['obj']['trigger_game_prog(uint64,uint8)bool'] | PieoutArgs['tuple']['trigger_game_prog(uint64,uint8)bool']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'trigger_game_prog(uint64,uint8)bool' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.gameId, params.args.triggerId],
    }
  }
  /**
   * Constructs a no op call for the reset_game(uint64,pay)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static resetGame(params: CallParams<PieoutArgs['obj']['reset_game(uint64,pay)void'] | PieoutArgs['tuple']['reset_game(uint64,pay)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'reset_game(uint64,pay)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.gameId, params.args.stakePay],
    }
  }
  /**
   * Constructs a no op call for the delete_game(uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static deleteGame(params: CallParams<PieoutArgs['obj']['delete_game(uint64)void'] | PieoutArgs['tuple']['delete_game(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'delete_game(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.gameId],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the Pieout smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class PieoutFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `PieoutFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new PieoutClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new PieoutClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the Pieout smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: PieoutDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? PieoutParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (PieoutCreateCallParams & { args: Uint8Array[] }) : undefined,
      deleteParams: params.deleteParams?.method ? PieoutParamsFactory.delete._resolveByMethod(params.deleteParams) : params.deleteParams ? params.deleteParams as (PieoutDeleteCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new PieoutClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Pieout smart contract using the generate()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      generate: (params: CallParams<PieoutArgs['obj']['generate()void'] | PieoutArgs['tuple']['generate()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.params.create(PieoutParamsFactory.create.generate(params))
      },
    },

    /**
     * Gets available deployDelete methods
     */
    deployDelete: {
      /**
       * Deletes an existing instance of the Pieout smart contract using the terminate()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The deployDelete params
       */
      terminate: (params: CallParams<PieoutArgs['obj']['terminate()void'] | PieoutArgs['tuple']['terminate()void']> = {args: []}) => {
        return this.appFactory.params.deployDelete(PieoutParamsFactory.delete.terminate(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Pieout smart contract using the generate()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      generate: (params: CallParams<PieoutArgs['obj']['generate()void'] | PieoutArgs['tuple']['generate()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.createTransaction.create(PieoutParamsFactory.create.generate(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Pieout smart contract using an ABI method call using the generate()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      generate: async (params: CallParams<PieoutArgs['obj']['generate()void'] | PieoutArgs['tuple']['generate()void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        const result = await this.appFactory.send.create(PieoutParamsFactory.create.generate(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | PieoutReturns['generate()void']) }, appClient: new PieoutClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the Pieout smart contract
 */
export class PieoutClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `PieoutClient`
   *
   * @param appClient An `AppClient` instance which has been created with the Pieout app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `PieoutClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends PieoutNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `PieoutClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<PieoutClient> {
    return new PieoutClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `PieoutClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<PieoutClient> {
    return new PieoutClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available delete methods
     */
    delete: {
      /**
       * Deletes an existing instance of the Pieout smart contract using the `terminate()void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The delete params
       */
      terminate: (params: CallParams<PieoutArgs['obj']['terminate()void'] | PieoutArgs['tuple']['terminate()void']> = {args: []}) => {
        return this.appClient.params.delete(PieoutParamsFactory.delete.terminate(params))
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the Pieout smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the Pieout smart contract using the `calc_single_box_cost(uint8,uint16)uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    calcSingleBoxCost: (params: CallParams<PieoutArgs['obj']['calc_single_box_cost(uint8,uint16)uint64'] | PieoutArgs['tuple']['calc_single_box_cost(uint8,uint16)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(PieoutParamsFactory.calcSingleBoxCost(params))
    },

    /**
     * Makes a call to the Pieout smart contract using the `read_gen_unix()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    readGenUnix: (params: CallParams<PieoutArgs['obj']['read_gen_unix()uint64'] | PieoutArgs['tuple']['read_gen_unix()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(PieoutParamsFactory.readGenUnix(params))
    },

    /**
     * Makes a call to the Pieout smart contract using the `read_box_game_state(uint64)(uint64,bool,uint8,uint8,uint8,uint8,uint8,uint16,uint64,uint64,address,address,address,address)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    readBoxGameState: (params: CallParams<PieoutArgs['obj']['read_box_game_state(uint64)(uint64,bool,uint8,uint8,uint8,uint8,uint8,uint16,uint64,uint64,address,address,address,address)'] | PieoutArgs['tuple']['read_box_game_state(uint64)(uint64,bool,uint8,uint8,uint8,uint8,uint8,uint16,uint64,uint64,address,address,address,address)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(PieoutParamsFactory.readBoxGameState(params))
    },

    /**
     * Makes a call to the Pieout smart contract using the `read_box_game_players(uint64)address[]` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    readBoxGamePlayers: (params: CallParams<PieoutArgs['obj']['read_box_game_players(uint64)address[]'] | PieoutArgs['tuple']['read_box_game_players(uint64)address[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(PieoutParamsFactory.readBoxGamePlayers(params))
    },

    /**
     * Makes a call to the Pieout smart contract using the `read_box_commit_rand(account)(uint64,uint64,uint64)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    readBoxCommitRand: (params: CallParams<PieoutArgs['obj']['read_box_commit_rand(account)(uint64,uint64,uint64)'] | PieoutArgs['tuple']['read_box_commit_rand(account)(uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(PieoutParamsFactory.readBoxCommitRand(params))
    },

    /**
     * Makes a call to the Pieout smart contract using the `mint_trophy(pay,pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    mintTrophy: (params: CallParams<PieoutArgs['obj']['mint_trophy(pay,pay)void'] | PieoutArgs['tuple']['mint_trophy(pay,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(PieoutParamsFactory.mintTrophy(params))
    },

    /**
     * Makes a call to the Pieout smart contract using the `claim_trophy()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    claimTrophy: (params: CallParams<PieoutArgs['obj']['claim_trophy()void'] | PieoutArgs['tuple']['claim_trophy()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(PieoutParamsFactory.claimTrophy(params))
    },

    /**
     * Makes a call to the Pieout smart contract using the `new_game(uint64,pay,pay,pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    newGame: (params: CallParams<PieoutArgs['obj']['new_game(uint64,pay,pay,pay)void'] | PieoutArgs['tuple']['new_game(uint64,pay,pay,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(PieoutParamsFactory.newGame(params))
    },

    /**
     * Makes a call to the Pieout smart contract using the `join_game(uint64,pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    joinGame: (params: CallParams<PieoutArgs['obj']['join_game(uint64,pay)void'] | PieoutArgs['tuple']['join_game(uint64,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(PieoutParamsFactory.joinGame(params))
    },

    /**
     * Makes a call to the Pieout smart contract using the `get_box_commit_rand(pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getBoxCommitRand: (params: CallParams<PieoutArgs['obj']['get_box_commit_rand(pay)void'] | PieoutArgs['tuple']['get_box_commit_rand(pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(PieoutParamsFactory.getBoxCommitRand(params))
    },

    /**
     * Makes a call to the Pieout smart contract using the `set_box_commit_rand(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    setBoxCommitRand: (params: CallParams<PieoutArgs['obj']['set_box_commit_rand(uint64)void'] | PieoutArgs['tuple']['set_box_commit_rand(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(PieoutParamsFactory.setBoxCommitRand(params))
    },

    /**
     * Makes a call to the Pieout smart contract using the `del_box_commit_rand_for_self(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    delBoxCommitRandForSelf: (params: CallParams<PieoutArgs['obj']['del_box_commit_rand_for_self(uint64)void'] | PieoutArgs['tuple']['del_box_commit_rand_for_self(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(PieoutParamsFactory.delBoxCommitRandForSelf(params))
    },

    /**
     * Makes a call to the Pieout smart contract using the `del_box_commit_rand_for_other(account)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    delBoxCommitRandForOther: (params: CallParams<PieoutArgs['obj']['del_box_commit_rand_for_other(account)void'] | PieoutArgs['tuple']['del_box_commit_rand_for_other(account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(PieoutParamsFactory.delBoxCommitRandForOther(params))
    },

    /**
     * Makes a call to the Pieout smart contract using the `up_ref_budget_for_play_game(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    upRefBudgetForPlayGame: (params: CallParams<PieoutArgs['obj']['up_ref_budget_for_play_game(uint64)void'] | PieoutArgs['tuple']['up_ref_budget_for_play_game(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(PieoutParamsFactory.upRefBudgetForPlayGame(params))
    },

    /**
     * Makes a call to the Pieout smart contract using the `play_game(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    playGame: (params: CallParams<PieoutArgs['obj']['play_game(uint64)void'] | PieoutArgs['tuple']['play_game(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(PieoutParamsFactory.playGame(params))
    },

    /**
     * Makes a call to the Pieout smart contract using the `trigger_game_prog(uint64,uint8)bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    triggerGameProg: (params: CallParams<PieoutArgs['obj']['trigger_game_prog(uint64,uint8)bool'] | PieoutArgs['tuple']['trigger_game_prog(uint64,uint8)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(PieoutParamsFactory.triggerGameProg(params))
    },

    /**
     * Makes a call to the Pieout smart contract using the `reset_game(uint64,pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    resetGame: (params: CallParams<PieoutArgs['obj']['reset_game(uint64,pay)void'] | PieoutArgs['tuple']['reset_game(uint64,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(PieoutParamsFactory.resetGame(params))
    },

    /**
     * Makes a call to the Pieout smart contract using the `delete_game(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    deleteGame: (params: CallParams<PieoutArgs['obj']['delete_game(uint64)void'] | PieoutArgs['tuple']['delete_game(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(PieoutParamsFactory.deleteGame(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available delete methods
     */
    delete: {
      /**
       * Deletes an existing instance of the Pieout smart contract using the `terminate()void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The delete transaction
       */
      terminate: (params: CallParams<PieoutArgs['obj']['terminate()void'] | PieoutArgs['tuple']['terminate()void']> = {args: []}) => {
        return this.appClient.createTransaction.delete(PieoutParamsFactory.delete.terminate(params))
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the Pieout smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the Pieout smart contract using the `calc_single_box_cost(uint8,uint16)uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    calcSingleBoxCost: (params: CallParams<PieoutArgs['obj']['calc_single_box_cost(uint8,uint16)uint64'] | PieoutArgs['tuple']['calc_single_box_cost(uint8,uint16)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(PieoutParamsFactory.calcSingleBoxCost(params))
    },

    /**
     * Makes a call to the Pieout smart contract using the `read_gen_unix()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    readGenUnix: (params: CallParams<PieoutArgs['obj']['read_gen_unix()uint64'] | PieoutArgs['tuple']['read_gen_unix()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(PieoutParamsFactory.readGenUnix(params))
    },

    /**
     * Makes a call to the Pieout smart contract using the `read_box_game_state(uint64)(uint64,bool,uint8,uint8,uint8,uint8,uint8,uint16,uint64,uint64,address,address,address,address)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    readBoxGameState: (params: CallParams<PieoutArgs['obj']['read_box_game_state(uint64)(uint64,bool,uint8,uint8,uint8,uint8,uint8,uint16,uint64,uint64,address,address,address,address)'] | PieoutArgs['tuple']['read_box_game_state(uint64)(uint64,bool,uint8,uint8,uint8,uint8,uint8,uint16,uint64,uint64,address,address,address,address)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(PieoutParamsFactory.readBoxGameState(params))
    },

    /**
     * Makes a call to the Pieout smart contract using the `read_box_game_players(uint64)address[]` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    readBoxGamePlayers: (params: CallParams<PieoutArgs['obj']['read_box_game_players(uint64)address[]'] | PieoutArgs['tuple']['read_box_game_players(uint64)address[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(PieoutParamsFactory.readBoxGamePlayers(params))
    },

    /**
     * Makes a call to the Pieout smart contract using the `read_box_commit_rand(account)(uint64,uint64,uint64)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    readBoxCommitRand: (params: CallParams<PieoutArgs['obj']['read_box_commit_rand(account)(uint64,uint64,uint64)'] | PieoutArgs['tuple']['read_box_commit_rand(account)(uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(PieoutParamsFactory.readBoxCommitRand(params))
    },

    /**
     * Makes a call to the Pieout smart contract using the `mint_trophy(pay,pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    mintTrophy: (params: CallParams<PieoutArgs['obj']['mint_trophy(pay,pay)void'] | PieoutArgs['tuple']['mint_trophy(pay,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(PieoutParamsFactory.mintTrophy(params))
    },

    /**
     * Makes a call to the Pieout smart contract using the `claim_trophy()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    claimTrophy: (params: CallParams<PieoutArgs['obj']['claim_trophy()void'] | PieoutArgs['tuple']['claim_trophy()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(PieoutParamsFactory.claimTrophy(params))
    },

    /**
     * Makes a call to the Pieout smart contract using the `new_game(uint64,pay,pay,pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    newGame: (params: CallParams<PieoutArgs['obj']['new_game(uint64,pay,pay,pay)void'] | PieoutArgs['tuple']['new_game(uint64,pay,pay,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(PieoutParamsFactory.newGame(params))
    },

    /**
     * Makes a call to the Pieout smart contract using the `join_game(uint64,pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    joinGame: (params: CallParams<PieoutArgs['obj']['join_game(uint64,pay)void'] | PieoutArgs['tuple']['join_game(uint64,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(PieoutParamsFactory.joinGame(params))
    },

    /**
     * Makes a call to the Pieout smart contract using the `get_box_commit_rand(pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getBoxCommitRand: (params: CallParams<PieoutArgs['obj']['get_box_commit_rand(pay)void'] | PieoutArgs['tuple']['get_box_commit_rand(pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(PieoutParamsFactory.getBoxCommitRand(params))
    },

    /**
     * Makes a call to the Pieout smart contract using the `set_box_commit_rand(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    setBoxCommitRand: (params: CallParams<PieoutArgs['obj']['set_box_commit_rand(uint64)void'] | PieoutArgs['tuple']['set_box_commit_rand(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(PieoutParamsFactory.setBoxCommitRand(params))
    },

    /**
     * Makes a call to the Pieout smart contract using the `del_box_commit_rand_for_self(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    delBoxCommitRandForSelf: (params: CallParams<PieoutArgs['obj']['del_box_commit_rand_for_self(uint64)void'] | PieoutArgs['tuple']['del_box_commit_rand_for_self(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(PieoutParamsFactory.delBoxCommitRandForSelf(params))
    },

    /**
     * Makes a call to the Pieout smart contract using the `del_box_commit_rand_for_other(account)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    delBoxCommitRandForOther: (params: CallParams<PieoutArgs['obj']['del_box_commit_rand_for_other(account)void'] | PieoutArgs['tuple']['del_box_commit_rand_for_other(account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(PieoutParamsFactory.delBoxCommitRandForOther(params))
    },

    /**
     * Makes a call to the Pieout smart contract using the `up_ref_budget_for_play_game(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    upRefBudgetForPlayGame: (params: CallParams<PieoutArgs['obj']['up_ref_budget_for_play_game(uint64)void'] | PieoutArgs['tuple']['up_ref_budget_for_play_game(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(PieoutParamsFactory.upRefBudgetForPlayGame(params))
    },

    /**
     * Makes a call to the Pieout smart contract using the `play_game(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    playGame: (params: CallParams<PieoutArgs['obj']['play_game(uint64)void'] | PieoutArgs['tuple']['play_game(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(PieoutParamsFactory.playGame(params))
    },

    /**
     * Makes a call to the Pieout smart contract using the `trigger_game_prog(uint64,uint8)bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    triggerGameProg: (params: CallParams<PieoutArgs['obj']['trigger_game_prog(uint64,uint8)bool'] | PieoutArgs['tuple']['trigger_game_prog(uint64,uint8)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(PieoutParamsFactory.triggerGameProg(params))
    },

    /**
     * Makes a call to the Pieout smart contract using the `reset_game(uint64,pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    resetGame: (params: CallParams<PieoutArgs['obj']['reset_game(uint64,pay)void'] | PieoutArgs['tuple']['reset_game(uint64,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(PieoutParamsFactory.resetGame(params))
    },

    /**
     * Makes a call to the Pieout smart contract using the `delete_game(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    deleteGame: (params: CallParams<PieoutArgs['obj']['delete_game(uint64)void'] | PieoutArgs['tuple']['delete_game(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(PieoutParamsFactory.deleteGame(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available delete methods
     */
    delete: {
      /**
       * Deletes an existing instance of the Pieout smart contract using the `terminate()void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The delete result
       */
      terminate: async (params: CallParams<PieoutArgs['obj']['terminate()void'] | PieoutArgs['tuple']['terminate()void']> & SendParams = {args: []}) => {
        const result = await this.appClient.send.delete(PieoutParamsFactory.delete.terminate(params))
        return {...result, return: result.return as unknown as (undefined | PieoutReturns['terminate()void'])}
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the Pieout smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the Pieout smart contract using the `calc_single_box_cost(uint8,uint16)uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    calcSingleBoxCost: async (params: CallParams<PieoutArgs['obj']['calc_single_box_cost(uint8,uint16)uint64'] | PieoutArgs['tuple']['calc_single_box_cost(uint8,uint16)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(PieoutParamsFactory.calcSingleBoxCost(params))
      return {...result, return: result.return as unknown as (undefined | PieoutReturns['calc_single_box_cost(uint8,uint16)uint64'])}
    },

    /**
     * Makes a call to the Pieout smart contract using the `read_gen_unix()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    readGenUnix: async (params: CallParams<PieoutArgs['obj']['read_gen_unix()uint64'] | PieoutArgs['tuple']['read_gen_unix()uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(PieoutParamsFactory.readGenUnix(params))
      return {...result, return: result.return as unknown as (undefined | PieoutReturns['read_gen_unix()uint64'])}
    },

    /**
     * Makes a call to the Pieout smart contract using the `read_box_game_state(uint64)(uint64,bool,uint8,uint8,uint8,uint8,uint8,uint16,uint64,uint64,address,address,address,address)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    readBoxGameState: async (params: CallParams<PieoutArgs['obj']['read_box_game_state(uint64)(uint64,bool,uint8,uint8,uint8,uint8,uint8,uint16,uint64,uint64,address,address,address,address)'] | PieoutArgs['tuple']['read_box_game_state(uint64)(uint64,bool,uint8,uint8,uint8,uint8,uint8,uint16,uint64,uint64,address,address,address,address)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(PieoutParamsFactory.readBoxGameState(params))
      return {...result, return: result.return as unknown as (undefined | PieoutReturns['read_box_game_state(uint64)(uint64,bool,uint8,uint8,uint8,uint8,uint8,uint16,uint64,uint64,address,address,address,address)'])}
    },

    /**
     * Makes a call to the Pieout smart contract using the `read_box_game_players(uint64)address[]` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    readBoxGamePlayers: async (params: CallParams<PieoutArgs['obj']['read_box_game_players(uint64)address[]'] | PieoutArgs['tuple']['read_box_game_players(uint64)address[]']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(PieoutParamsFactory.readBoxGamePlayers(params))
      return {...result, return: result.return as unknown as (undefined | PieoutReturns['read_box_game_players(uint64)address[]'])}
    },

    /**
     * Makes a call to the Pieout smart contract using the `read_box_commit_rand(account)(uint64,uint64,uint64)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    readBoxCommitRand: async (params: CallParams<PieoutArgs['obj']['read_box_commit_rand(account)(uint64,uint64,uint64)'] | PieoutArgs['tuple']['read_box_commit_rand(account)(uint64,uint64,uint64)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(PieoutParamsFactory.readBoxCommitRand(params))
      return {...result, return: result.return as unknown as (undefined | PieoutReturns['read_box_commit_rand(account)(uint64,uint64,uint64)'])}
    },

    /**
     * Makes a call to the Pieout smart contract using the `mint_trophy(pay,pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    mintTrophy: async (params: CallParams<PieoutArgs['obj']['mint_trophy(pay,pay)void'] | PieoutArgs['tuple']['mint_trophy(pay,pay)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(PieoutParamsFactory.mintTrophy(params))
      return {...result, return: result.return as unknown as (undefined | PieoutReturns['mint_trophy(pay,pay)void'])}
    },

    /**
     * Makes a call to the Pieout smart contract using the `claim_trophy()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    claimTrophy: async (params: CallParams<PieoutArgs['obj']['claim_trophy()void'] | PieoutArgs['tuple']['claim_trophy()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(PieoutParamsFactory.claimTrophy(params))
      return {...result, return: result.return as unknown as (undefined | PieoutReturns['claim_trophy()void'])}
    },

    /**
     * Makes a call to the Pieout smart contract using the `new_game(uint64,pay,pay,pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    newGame: async (params: CallParams<PieoutArgs['obj']['new_game(uint64,pay,pay,pay)void'] | PieoutArgs['tuple']['new_game(uint64,pay,pay,pay)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(PieoutParamsFactory.newGame(params))
      return {...result, return: result.return as unknown as (undefined | PieoutReturns['new_game(uint64,pay,pay,pay)void'])}
    },

    /**
     * Makes a call to the Pieout smart contract using the `join_game(uint64,pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    joinGame: async (params: CallParams<PieoutArgs['obj']['join_game(uint64,pay)void'] | PieoutArgs['tuple']['join_game(uint64,pay)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(PieoutParamsFactory.joinGame(params))
      return {...result, return: result.return as unknown as (undefined | PieoutReturns['join_game(uint64,pay)void'])}
    },

    /**
     * Makes a call to the Pieout smart contract using the `get_box_commit_rand(pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getBoxCommitRand: async (params: CallParams<PieoutArgs['obj']['get_box_commit_rand(pay)void'] | PieoutArgs['tuple']['get_box_commit_rand(pay)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(PieoutParamsFactory.getBoxCommitRand(params))
      return {...result, return: result.return as unknown as (undefined | PieoutReturns['get_box_commit_rand(pay)void'])}
    },

    /**
     * Makes a call to the Pieout smart contract using the `set_box_commit_rand(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    setBoxCommitRand: async (params: CallParams<PieoutArgs['obj']['set_box_commit_rand(uint64)void'] | PieoutArgs['tuple']['set_box_commit_rand(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(PieoutParamsFactory.setBoxCommitRand(params))
      return {...result, return: result.return as unknown as (undefined | PieoutReturns['set_box_commit_rand(uint64)void'])}
    },

    /**
     * Makes a call to the Pieout smart contract using the `del_box_commit_rand_for_self(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    delBoxCommitRandForSelf: async (params: CallParams<PieoutArgs['obj']['del_box_commit_rand_for_self(uint64)void'] | PieoutArgs['tuple']['del_box_commit_rand_for_self(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(PieoutParamsFactory.delBoxCommitRandForSelf(params))
      return {...result, return: result.return as unknown as (undefined | PieoutReturns['del_box_commit_rand_for_self(uint64)void'])}
    },

    /**
     * Makes a call to the Pieout smart contract using the `del_box_commit_rand_for_other(account)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    delBoxCommitRandForOther: async (params: CallParams<PieoutArgs['obj']['del_box_commit_rand_for_other(account)void'] | PieoutArgs['tuple']['del_box_commit_rand_for_other(account)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(PieoutParamsFactory.delBoxCommitRandForOther(params))
      return {...result, return: result.return as unknown as (undefined | PieoutReturns['del_box_commit_rand_for_other(account)void'])}
    },

    /**
     * Makes a call to the Pieout smart contract using the `up_ref_budget_for_play_game(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    upRefBudgetForPlayGame: async (params: CallParams<PieoutArgs['obj']['up_ref_budget_for_play_game(uint64)void'] | PieoutArgs['tuple']['up_ref_budget_for_play_game(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(PieoutParamsFactory.upRefBudgetForPlayGame(params))
      return {...result, return: result.return as unknown as (undefined | PieoutReturns['up_ref_budget_for_play_game(uint64)void'])}
    },

    /**
     * Makes a call to the Pieout smart contract using the `play_game(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    playGame: async (params: CallParams<PieoutArgs['obj']['play_game(uint64)void'] | PieoutArgs['tuple']['play_game(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(PieoutParamsFactory.playGame(params))
      return {...result, return: result.return as unknown as (undefined | PieoutReturns['play_game(uint64)void'])}
    },

    /**
     * Makes a call to the Pieout smart contract using the `trigger_game_prog(uint64,uint8)bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    triggerGameProg: async (params: CallParams<PieoutArgs['obj']['trigger_game_prog(uint64,uint8)bool'] | PieoutArgs['tuple']['trigger_game_prog(uint64,uint8)bool']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(PieoutParamsFactory.triggerGameProg(params))
      return {...result, return: result.return as unknown as (undefined | PieoutReturns['trigger_game_prog(uint64,uint8)bool'])}
    },

    /**
     * Makes a call to the Pieout smart contract using the `reset_game(uint64,pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    resetGame: async (params: CallParams<PieoutArgs['obj']['reset_game(uint64,pay)void'] | PieoutArgs['tuple']['reset_game(uint64,pay)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(PieoutParamsFactory.resetGame(params))
      return {...result, return: result.return as unknown as (undefined | PieoutReturns['reset_game(uint64,pay)void'])}
    },

    /**
     * Makes a call to the Pieout smart contract using the `delete_game(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    deleteGame: async (params: CallParams<PieoutArgs['obj']['delete_game(uint64)void'] | PieoutArgs['tuple']['delete_game(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(PieoutParamsFactory.deleteGame(params))
      return {...result, return: result.return as unknown as (undefined | PieoutReturns['delete_game(uint64)void'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new PieoutClient(this.appClient.clone(params))
  }

  /**
   * Makes a readonly (simulated) call to the Pieout smart contract using the `calc_single_box_cost(uint8,uint16)uint64` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async calcSingleBoxCost(params: CallParams<PieoutArgs['obj']['calc_single_box_cost(uint8,uint16)uint64'] | PieoutArgs['tuple']['calc_single_box_cost(uint8,uint16)uint64']>) {
    const result = await this.appClient.send.call(PieoutParamsFactory.calcSingleBoxCost(params))
    return result.return as unknown as PieoutReturns['calc_single_box_cost(uint8,uint16)uint64']
  }

  /**
   * Makes a readonly (simulated) call to the Pieout smart contract using the `read_gen_unix()uint64` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async readGenUnix(params: CallParams<PieoutArgs['obj']['read_gen_unix()uint64'] | PieoutArgs['tuple']['read_gen_unix()uint64']> = {args: []}) {
    const result = await this.appClient.send.call(PieoutParamsFactory.readGenUnix(params))
    return result.return as unknown as PieoutReturns['read_gen_unix()uint64']
  }

  /**
   * Makes a readonly (simulated) call to the Pieout smart contract using the `read_box_game_state(uint64)(uint64,bool,uint8,uint8,uint8,uint8,uint8,uint16,uint64,uint64,address,address,address,address)` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async readBoxGameState(params: CallParams<PieoutArgs['obj']['read_box_game_state(uint64)(uint64,bool,uint8,uint8,uint8,uint8,uint8,uint16,uint64,uint64,address,address,address,address)'] | PieoutArgs['tuple']['read_box_game_state(uint64)(uint64,bool,uint8,uint8,uint8,uint8,uint8,uint16,uint64,uint64,address,address,address,address)']>) {
    const result = await this.appClient.send.call(PieoutParamsFactory.readBoxGameState(params))
    return result.return as unknown as PieoutReturns['read_box_game_state(uint64)(uint64,bool,uint8,uint8,uint8,uint8,uint8,uint16,uint64,uint64,address,address,address,address)']
  }

  /**
   * Makes a readonly (simulated) call to the Pieout smart contract using the `read_box_game_players(uint64)address[]` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async readBoxGamePlayers(params: CallParams<PieoutArgs['obj']['read_box_game_players(uint64)address[]'] | PieoutArgs['tuple']['read_box_game_players(uint64)address[]']>) {
    const result = await this.appClient.send.call(PieoutParamsFactory.readBoxGamePlayers(params))
    return result.return as unknown as PieoutReturns['read_box_game_players(uint64)address[]']
  }

  /**
   * Makes a readonly (simulated) call to the Pieout smart contract using the `read_box_commit_rand(account)(uint64,uint64,uint64)` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async readBoxCommitRand(params: CallParams<PieoutArgs['obj']['read_box_commit_rand(account)(uint64,uint64,uint64)'] | PieoutArgs['tuple']['read_box_commit_rand(account)(uint64,uint64,uint64)']>) {
    const result = await this.appClient.send.call(PieoutParamsFactory.readBoxCommitRand(params))
    return result.return as unknown as PieoutReturns['read_box_commit_rand(account)(uint64,uint64,uint64)']
  }

  /**
   * Methods to access state for the current Pieout app
   */
  state = {
    /**
     * Methods to access global state for the current Pieout app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          gameId: result.game_id,
          scoreId: result.score_id,
          athScore: result.ath_score,
          athAddress: result.ath_address,
        }
      },
      /**
       * Get the current value of the game_id key in global state
       */
      gameId: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("game_id")) as bigint | undefined },
      /**
       * Get the current value of the score_id key in global state
       */
      scoreId: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("score_id")) as bigint | undefined },
      /**
       * Get the current value of the ath_score key in global state
       */
      athScore: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("ath_score")) as bigint | undefined },
      /**
       * Get the current value of the ath_address key in global state
       */
      athAddress: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("ath_address")) as string | undefined },
    },
    /**
     * Methods to access box state for the current Pieout app
     */
    box: {
      /**
       * Get all current keyed values from box state
       */
      getAll: async (): Promise<Partial<Expand<BoxKeysState>>> => {
        const result = await this.appClient.state.box.getAll()
        return {
          boxGameTrophy: result.box_game_trophy,
        }
      },
      /**
       * Get the current value of the box_game_trophy key in box state
       */
      boxGameTrophy: async (): Promise<GameTrophy | undefined> => { return (await this.appClient.state.box.getValue("box_game_trophy")) as GameTrophy | undefined },
      /**
       * Get values from the box_game_state map in box state
       */
      boxGameState: {
        /**
         * Get all current values of the box_game_state map in box state
         */
        getMap: async (): Promise<Map<bigint, GameState>> => { return (await this.appClient.state.box.getMap("box_game_state")) as Map<bigint, GameState> },
        /**
         * Get a current value of the box_game_state map by key from box state
         */
        value: async (key: bigint | number): Promise<GameState | undefined> => { return await this.appClient.state.box.getMapValue("box_game_state", key) as GameState | undefined },
      },
      /**
       * Get values from the box_game_players map in box state
       */
      boxGamePlayers: {
        /**
         * Get all current values of the box_game_players map in box state
         */
        getMap: async (): Promise<Map<bigint, Uint8Array>> => { return (await this.appClient.state.box.getMap("box_game_players")) as Map<bigint, Uint8Array> },
        /**
         * Get a current value of the box_game_players map by key from box state
         */
        value: async (key: bigint | number): Promise<Uint8Array | undefined> => { return await this.appClient.state.box.getMapValue("box_game_players", key) as Uint8Array | undefined },
      },
      /**
       * Get values from the box_commit_rand map in box state
       */
      boxCommitRand: {
        /**
         * Get all current values of the box_commit_rand map in box state
         */
        getMap: async (): Promise<Map<string, CommitRand>> => { return (await this.appClient.state.box.getMap("box_commit_rand")) as Map<string, CommitRand> },
        /**
         * Get a current value of the box_commit_rand map by key from box state
         */
        value: async (key: string): Promise<CommitRand | undefined> => { return await this.appClient.state.box.getMapValue("box_commit_rand", key) as CommitRand | undefined },
      },
    },
  }

  public newGroup(): PieoutComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a calc_single_box_cost(uint8,uint16)uint64 method call against the Pieout contract
       */
      calcSingleBoxCost(params: CallParams<PieoutArgs['obj']['calc_single_box_cost(uint8,uint16)uint64'] | PieoutArgs['tuple']['calc_single_box_cost(uint8,uint16)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.calcSingleBoxCost(params)))
        resultMappers.push((v) => client.decodeReturnValue('calc_single_box_cost(uint8,uint16)uint64', v))
        return this
      },
      /**
       * Add a read_gen_unix()uint64 method call against the Pieout contract
       */
      readGenUnix(params: CallParams<PieoutArgs['obj']['read_gen_unix()uint64'] | PieoutArgs['tuple']['read_gen_unix()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.readGenUnix(params)))
        resultMappers.push((v) => client.decodeReturnValue('read_gen_unix()uint64', v))
        return this
      },
      /**
       * Add a read_box_game_state(uint64)(uint64,bool,uint8,uint8,uint8,uint8,uint8,uint16,uint64,uint64,address,address,address,address) method call against the Pieout contract
       */
      readBoxGameState(params: CallParams<PieoutArgs['obj']['read_box_game_state(uint64)(uint64,bool,uint8,uint8,uint8,uint8,uint8,uint16,uint64,uint64,address,address,address,address)'] | PieoutArgs['tuple']['read_box_game_state(uint64)(uint64,bool,uint8,uint8,uint8,uint8,uint8,uint16,uint64,uint64,address,address,address,address)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.readBoxGameState(params)))
        resultMappers.push((v) => client.decodeReturnValue('read_box_game_state(uint64)(uint64,bool,uint8,uint8,uint8,uint8,uint8,uint16,uint64,uint64,address,address,address,address)', v))
        return this
      },
      /**
       * Add a read_box_game_players(uint64)address[] method call against the Pieout contract
       */
      readBoxGamePlayers(params: CallParams<PieoutArgs['obj']['read_box_game_players(uint64)address[]'] | PieoutArgs['tuple']['read_box_game_players(uint64)address[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.readBoxGamePlayers(params)))
        resultMappers.push((v) => client.decodeReturnValue('read_box_game_players(uint64)address[]', v))
        return this
      },
      /**
       * Add a read_box_commit_rand(account)(uint64,uint64,uint64) method call against the Pieout contract
       */
      readBoxCommitRand(params: CallParams<PieoutArgs['obj']['read_box_commit_rand(account)(uint64,uint64,uint64)'] | PieoutArgs['tuple']['read_box_commit_rand(account)(uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.readBoxCommitRand(params)))
        resultMappers.push((v) => client.decodeReturnValue('read_box_commit_rand(account)(uint64,uint64,uint64)', v))
        return this
      },
      /**
       * Add a mint_trophy(pay,pay)void method call against the Pieout contract
       */
      mintTrophy(params: CallParams<PieoutArgs['obj']['mint_trophy(pay,pay)void'] | PieoutArgs['tuple']['mint_trophy(pay,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.mintTrophy(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a claim_trophy()void method call against the Pieout contract
       */
      claimTrophy(params: CallParams<PieoutArgs['obj']['claim_trophy()void'] | PieoutArgs['tuple']['claim_trophy()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.claimTrophy(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a new_game(uint64,pay,pay,pay)void method call against the Pieout contract
       */
      newGame(params: CallParams<PieoutArgs['obj']['new_game(uint64,pay,pay,pay)void'] | PieoutArgs['tuple']['new_game(uint64,pay,pay,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.newGame(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a join_game(uint64,pay)void method call against the Pieout contract
       */
      joinGame(params: CallParams<PieoutArgs['obj']['join_game(uint64,pay)void'] | PieoutArgs['tuple']['join_game(uint64,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.joinGame(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a get_box_commit_rand(pay)void method call against the Pieout contract
       */
      getBoxCommitRand(params: CallParams<PieoutArgs['obj']['get_box_commit_rand(pay)void'] | PieoutArgs['tuple']['get_box_commit_rand(pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getBoxCommitRand(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a set_box_commit_rand(uint64)void method call against the Pieout contract
       */
      setBoxCommitRand(params: CallParams<PieoutArgs['obj']['set_box_commit_rand(uint64)void'] | PieoutArgs['tuple']['set_box_commit_rand(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.setBoxCommitRand(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a del_box_commit_rand_for_self(uint64)void method call against the Pieout contract
       */
      delBoxCommitRandForSelf(params: CallParams<PieoutArgs['obj']['del_box_commit_rand_for_self(uint64)void'] | PieoutArgs['tuple']['del_box_commit_rand_for_self(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.delBoxCommitRandForSelf(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a del_box_commit_rand_for_other(account)void method call against the Pieout contract
       */
      delBoxCommitRandForOther(params: CallParams<PieoutArgs['obj']['del_box_commit_rand_for_other(account)void'] | PieoutArgs['tuple']['del_box_commit_rand_for_other(account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.delBoxCommitRandForOther(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a up_ref_budget_for_play_game(uint64)void method call against the Pieout contract
       */
      upRefBudgetForPlayGame(params: CallParams<PieoutArgs['obj']['up_ref_budget_for_play_game(uint64)void'] | PieoutArgs['tuple']['up_ref_budget_for_play_game(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.upRefBudgetForPlayGame(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a play_game(uint64)void method call against the Pieout contract
       */
      playGame(params: CallParams<PieoutArgs['obj']['play_game(uint64)void'] | PieoutArgs['tuple']['play_game(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.playGame(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a trigger_game_prog(uint64,uint8)bool method call against the Pieout contract
       */
      triggerGameProg(params: CallParams<PieoutArgs['obj']['trigger_game_prog(uint64,uint8)bool'] | PieoutArgs['tuple']['trigger_game_prog(uint64,uint8)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.triggerGameProg(params)))
        resultMappers.push((v) => client.decodeReturnValue('trigger_game_prog(uint64,uint8)bool', v))
        return this
      },
      /**
       * Add a reset_game(uint64,pay)void method call against the Pieout contract
       */
      resetGame(params: CallParams<PieoutArgs['obj']['reset_game(uint64,pay)void'] | PieoutArgs['tuple']['reset_game(uint64,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.resetGame(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a delete_game(uint64)void method call against the Pieout contract
       */
      deleteGame(params: CallParams<PieoutArgs['obj']['delete_game(uint64)void'] | PieoutArgs['tuple']['delete_game(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.deleteGame(params)))
        resultMappers.push(undefined)
        return this
      },
      get delete() {
        return {
          terminate: (params: CallParams<PieoutArgs['obj']['terminate()void'] | PieoutArgs['tuple']['terminate()void']>) => {
            promiseChain = promiseChain.then(async () => composer.addAppDeleteMethodCall(await client.params.delete.terminate(params)))
            resultMappers.push(undefined)
            return this
          },
        }
      },
      /**
       * Add a clear state call to the Pieout contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as PieoutComposer
  }
}
export type PieoutComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the calc_single_box_cost(uint8,uint16)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  calcSingleBoxCost(params?: CallParams<PieoutArgs['obj']['calc_single_box_cost(uint8,uint16)uint64'] | PieoutArgs['tuple']['calc_single_box_cost(uint8,uint16)uint64']>): PieoutComposer<[...TReturns, PieoutReturns['calc_single_box_cost(uint8,uint16)uint64'] | undefined]>

  /**
   * Calls the read_gen_unix()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  readGenUnix(params?: CallParams<PieoutArgs['obj']['read_gen_unix()uint64'] | PieoutArgs['tuple']['read_gen_unix()uint64']>): PieoutComposer<[...TReturns, PieoutReturns['read_gen_unix()uint64'] | undefined]>

  /**
   * Calls the read_box_game_state(uint64)(uint64,bool,uint8,uint8,uint8,uint8,uint8,uint16,uint64,uint64,address,address,address,address) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  readBoxGameState(params?: CallParams<PieoutArgs['obj']['read_box_game_state(uint64)(uint64,bool,uint8,uint8,uint8,uint8,uint8,uint16,uint64,uint64,address,address,address,address)'] | PieoutArgs['tuple']['read_box_game_state(uint64)(uint64,bool,uint8,uint8,uint8,uint8,uint8,uint16,uint64,uint64,address,address,address,address)']>): PieoutComposer<[...TReturns, PieoutReturns['read_box_game_state(uint64)(uint64,bool,uint8,uint8,uint8,uint8,uint8,uint16,uint64,uint64,address,address,address,address)'] | undefined]>

  /**
   * Calls the read_box_game_players(uint64)address[] ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  readBoxGamePlayers(params?: CallParams<PieoutArgs['obj']['read_box_game_players(uint64)address[]'] | PieoutArgs['tuple']['read_box_game_players(uint64)address[]']>): PieoutComposer<[...TReturns, PieoutReturns['read_box_game_players(uint64)address[]'] | undefined]>

  /**
   * Calls the read_box_commit_rand(account)(uint64,uint64,uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  readBoxCommitRand(params?: CallParams<PieoutArgs['obj']['read_box_commit_rand(account)(uint64,uint64,uint64)'] | PieoutArgs['tuple']['read_box_commit_rand(account)(uint64,uint64,uint64)']>): PieoutComposer<[...TReturns, PieoutReturns['read_box_commit_rand(account)(uint64,uint64,uint64)'] | undefined]>

  /**
   * Calls the mint_trophy(pay,pay)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  mintTrophy(params?: CallParams<PieoutArgs['obj']['mint_trophy(pay,pay)void'] | PieoutArgs['tuple']['mint_trophy(pay,pay)void']>): PieoutComposer<[...TReturns, PieoutReturns['mint_trophy(pay,pay)void'] | undefined]>

  /**
   * Calls the claim_trophy()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  claimTrophy(params?: CallParams<PieoutArgs['obj']['claim_trophy()void'] | PieoutArgs['tuple']['claim_trophy()void']>): PieoutComposer<[...TReturns, PieoutReturns['claim_trophy()void'] | undefined]>

  /**
   * Calls the new_game(uint64,pay,pay,pay)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  newGame(params?: CallParams<PieoutArgs['obj']['new_game(uint64,pay,pay,pay)void'] | PieoutArgs['tuple']['new_game(uint64,pay,pay,pay)void']>): PieoutComposer<[...TReturns, PieoutReturns['new_game(uint64,pay,pay,pay)void'] | undefined]>

  /**
   * Calls the join_game(uint64,pay)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  joinGame(params?: CallParams<PieoutArgs['obj']['join_game(uint64,pay)void'] | PieoutArgs['tuple']['join_game(uint64,pay)void']>): PieoutComposer<[...TReturns, PieoutReturns['join_game(uint64,pay)void'] | undefined]>

  /**
   * Calls the get_box_commit_rand(pay)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getBoxCommitRand(params?: CallParams<PieoutArgs['obj']['get_box_commit_rand(pay)void'] | PieoutArgs['tuple']['get_box_commit_rand(pay)void']>): PieoutComposer<[...TReturns, PieoutReturns['get_box_commit_rand(pay)void'] | undefined]>

  /**
   * Calls the set_box_commit_rand(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setBoxCommitRand(params?: CallParams<PieoutArgs['obj']['set_box_commit_rand(uint64)void'] | PieoutArgs['tuple']['set_box_commit_rand(uint64)void']>): PieoutComposer<[...TReturns, PieoutReturns['set_box_commit_rand(uint64)void'] | undefined]>

  /**
   * Calls the del_box_commit_rand_for_self(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  delBoxCommitRandForSelf(params?: CallParams<PieoutArgs['obj']['del_box_commit_rand_for_self(uint64)void'] | PieoutArgs['tuple']['del_box_commit_rand_for_self(uint64)void']>): PieoutComposer<[...TReturns, PieoutReturns['del_box_commit_rand_for_self(uint64)void'] | undefined]>

  /**
   * Calls the del_box_commit_rand_for_other(account)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  delBoxCommitRandForOther(params?: CallParams<PieoutArgs['obj']['del_box_commit_rand_for_other(account)void'] | PieoutArgs['tuple']['del_box_commit_rand_for_other(account)void']>): PieoutComposer<[...TReturns, PieoutReturns['del_box_commit_rand_for_other(account)void'] | undefined]>

  /**
   * Calls the up_ref_budget_for_play_game(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  upRefBudgetForPlayGame(params?: CallParams<PieoutArgs['obj']['up_ref_budget_for_play_game(uint64)void'] | PieoutArgs['tuple']['up_ref_budget_for_play_game(uint64)void']>): PieoutComposer<[...TReturns, PieoutReturns['up_ref_budget_for_play_game(uint64)void'] | undefined]>

  /**
   * Calls the play_game(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  playGame(params?: CallParams<PieoutArgs['obj']['play_game(uint64)void'] | PieoutArgs['tuple']['play_game(uint64)void']>): PieoutComposer<[...TReturns, PieoutReturns['play_game(uint64)void'] | undefined]>

  /**
   * Calls the trigger_game_prog(uint64,uint8)bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  triggerGameProg(params?: CallParams<PieoutArgs['obj']['trigger_game_prog(uint64,uint8)bool'] | PieoutArgs['tuple']['trigger_game_prog(uint64,uint8)bool']>): PieoutComposer<[...TReturns, PieoutReturns['trigger_game_prog(uint64,uint8)bool'] | undefined]>

  /**
   * Calls the reset_game(uint64,pay)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  resetGame(params?: CallParams<PieoutArgs['obj']['reset_game(uint64,pay)void'] | PieoutArgs['tuple']['reset_game(uint64,pay)void']>): PieoutComposer<[...TReturns, PieoutReturns['reset_game(uint64,pay)void'] | undefined]>

  /**
   * Calls the delete_game(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  deleteGame(params?: CallParams<PieoutArgs['obj']['delete_game(uint64)void'] | PieoutArgs['tuple']['delete_game(uint64)void']>): PieoutComposer<[...TReturns, PieoutReturns['delete_game(uint64)void'] | undefined]>

  /**
   * Gets available delete methods
   */
  readonly delete: {
    /**
     * Deletes an existing instance of the Pieout smart contract using the terminate()void ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    terminate(params?: CallParams<PieoutArgs['obj']['terminate()void'] | PieoutArgs['tuple']['terminate()void']>): PieoutComposer<[...TReturns, PieoutReturns['terminate()void'] | undefined]>
  }

  /**
   * Makes a clear_state call to an existing instance of the Pieout smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): PieoutComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): PieoutComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<PieoutComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<PieoutComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<PieoutComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<PieoutComposerResults<TReturns>>
}
export type PieoutComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

