/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"Pieout","structs":{"GameRegister":[{"name":"hostingGame","type":"bool"},{"name":"bestScore","type":"uint8"},{"name":"gameId","type":"uint64"},{"name":"commitRandRound","type":"uint64"},{"name":"expiryRound","type":"uint64"}],"GameState":[{"name":"stakingFinalized","type":"bool"},{"name":"maxPlayers","type":"uint8"},{"name":"activePlayers","type":"uint8"},{"name":"firstPlaceScore","type":"uint8"},{"name":"secondPlaceScore","type":"uint8"},{"name":"thirdPlaceScore","type":"uint8"},{"name":"topScore","type":"uint8"},{"name":"boxPStartPos","type":"uint16"},{"name":"expiryTs","type":"uint64"},{"name":"prizePool","type":"uint64"},{"name":"adminAddress","type":"address"},{"name":"firstPlaceAddress","type":"address"},{"name":"secondPlaceAddress","type":"address"},{"name":"thirdPlaceAddress","type":"address"},{"name":"topscorerAddress","type":"address"}],"GameTrophy":[{"name":"athScore","type":"uint8"},{"name":"assetId","type":"uint64"},{"name":"athAddress","type":"address"}]},"methods":[{"name":"calc_single_box_cost","args":[{"type":"uint8","name":"key_size"},{"type":"uint16","name":"value_size"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"events":[],"recommendations":{}},{"name":"read_gen_unix","args":[],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"events":[],"recommendations":{}},{"name":"does_box_game_trophy_exist","args":[],"returns":{"type":"bool"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"events":[],"recommendations":{}},{"name":"does_box_game_register_exist","args":[{"type":"account","name":"player"}],"returns":{"type":"bool"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"events":[],"recommendations":{}},{"name":"does_box_game_state_exist","args":[{"type":"uint64","name":"game_id"}],"returns":{"type":"bool"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"events":[],"recommendations":{}},{"name":"read_box_game_players","args":[{"type":"uint64","name":"game_id"}],"returns":{"type":"address[]"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"events":[],"recommendations":{}},{"name":"generate","args":[],"returns":{"type":"void"},"actions":{"create":["NoOp"],"call":[]},"readonly":false,"events":[],"recommendations":{}},{"name":"mint_trophy","args":[{"type":"pay","name":"box_t_pay"},{"type":"pay","name":"mint_pay"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"claim_trophy","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"get_box_game_register","args":[{"type":"pay","name":"box_r_pay"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"del_box_game_register_for_self","args":[{"type":"uint64","name":"game_id"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"del_box_game_register_for_other","args":[{"type":"account","name":"player"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"new_game","args":[{"type":"uint64","name":"max_players"},{"type":"pay","name":"box_s_pay"},{"type":"pay","name":"box_p_pay"},{"type":"pay","name":"stake_pay"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"join_game","args":[{"type":"uint64","name":"game_id"},{"type":"pay","name":"stake_pay"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[{"name":"game_live","args":[{"type":"uint64","name":"field1"},{"type":"bool","name":"field2"},{"type":"uint64","name":"field3"}]}],"recommendations":{}},{"name":"set_game_commit","args":[{"type":"uint64","name":"game_id"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"up_ref_budget_for_play_game","args":[{"type":"uint64","name":"game_id"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"play_game","args":[{"type":"uint64","name":"game_id"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[{"name":"player_score","args":[{"type":"uint64","name":"field1"},{"type":"address","name":"field2"},{"type":"uint8","name":"field3"}]},{"name":"game_over","args":[{"type":"uint64","name":"field1"},{"type":"uint8","name":"field2"},{"type":"uint8","name":"field3"},{"type":"uint8","name":"field4"},{"type":"address","name":"field5"},{"type":"address","name":"field6"},{"type":"address","name":"field7"}]}],"recommendations":{}},{"name":"trigger_game_event","args":[{"type":"uint64","name":"game_id"},{"type":"uint8","name":"trigger_id"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[{"name":"game_live","args":[{"type":"uint64","name":"field1"},{"type":"bool","name":"field2"},{"type":"uint64","name":"field3"}]},{"name":"game_over","args":[{"type":"uint64","name":"field1"},{"type":"uint8","name":"field2"},{"type":"uint8","name":"field3"},{"type":"uint8","name":"field4"},{"type":"address","name":"field5"},{"type":"address","name":"field6"},{"type":"address","name":"field7"}]}],"recommendations":{}},{"name":"reset_game","args":[{"type":"uint64","name":"game_id"},{"type":"pay","name":"stake_pay"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"delete_game","args":[{"type":"uint64","name":"game_id"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"terminate","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["DeleteApplication"]},"readonly":false,"events":[],"recommendations":{}}],"arcs":[22,28],"networks":{},"state":{"schema":{"global":{"ints":1,"bytes":0},"local":{"ints":0,"bytes":0}},"keys":{"global":{"game_id":{"keyType":"AVMString","valueType":"AVMUint64","key":"Z2FtZV9pZA=="}},"local":{},"box":{"box_game_trophy":{"keyType":"AVMString","valueType":"GameTrophy","key":"dF8="}}},"maps":{"global":{},"local":{},"box":{"box_game_state":{"keyType":"uint64","valueType":"GameState","prefix":"c18="},"box_game_players":{"keyType":"uint64","valueType":"AVMBytes","prefix":"cF8="},"box_game_register":{"keyType":"address","valueType":"GameRegister","prefix":"cl8="}}}},"bareActions":{"create":[],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[2390,4455],"errorMessage":"Account is not authorized to make this call."},{"pc":[3045,3320],"errorMessage":"Account is not recognized as an active player for this game."},{"pc":[4312],"errorMessage":"Account is not recognized as the admin address for this game."},{"pc":[1979],"errorMessage":"Account must be opted in to asset in order to perform this action."},{"pc":[1717,4742],"errorMessage":"Account must match application creator address."},{"pc":[3115,3262],"errorMessage":"Application ID mismatch. App ID must be same across all transactions in group."},{"pc":[1966],"errorMessage":"Asset trophy receiver must match application ATH address."},{"pc":[1737,2106],"errorMessage":"Box found. Ensure the box you are trying to access does not exist already."},{"pc":[1630,2190,2809,3003,3108,3242,4162,4264,4408],"errorMessage":"Box game state not found. Check if game ID exists."},{"pc":[2111,2198,2384,2529,2537,2817,2825,3011,3250,3255],"errorMessage":"Box not found. Ensure the box you are trying to access was created and still exists."},{"pc":[1763,2135,2659,2667],"errorMessage":"Box payment receiver address must match application address."},{"pc":[1755,2127,2635,2643],"errorMessage":"Box payment sender address must match transaction sender address."},{"pc":[2399,3059],"errorMessage":"Commit Rand Round not empty. Value must be zero to obtain a valid one."},{"pc":[4480],"errorMessage":"Game admin address must be sole remaining active player in the game."},{"pc":[4210],"errorMessage":"Game event not found. Check if game event Trigger ID exists"},{"pc":[4323,4714],"errorMessage":"Game lobby not empty. Number of active players must be zero."},{"pc":[2554,4439],"errorMessage":"Game register hosting game boolean value mismatch."},{"pc":[2882,3026,3350,4185,4223,4304],"errorMessage":"Game state staking finalized boolean value mismatch."},{"pc":[799,811,816,861,898,1019,1024,1029,1034,1044,1054,1111,1960,2885,2895,2900,3053,3351,3721,3744,3750,3756,3762,3779,3788,3806,3819,3847,4054,4077,4083,4107,4187,4225,4306,4415],"errorMessage":"Index access is out of bounds"},{"pc":[1747,2119,2589,2619],"errorMessage":"Insufficient funds. Box pay amount is not enough to cover application MBR."},{"pc":[1771],"errorMessage":"Insufficient funds. Mint pay amount is not enough to cover asset creation cost."},{"pc":[2581,2834,4288],"errorMessage":"Insufficient funds. Stake pay amount is not enough to cover staking requirements."},{"pc":[2225,3139,3287,3370],"errorMessage":"Invalid Game ID. Box Game Register Game ID must be a certain value or match Game ID arg."},{"pc":[3096,3224],"errorMessage":"Invalid group index. Ensure transaction group index matches the expected value. "},{"pc":[1731,2097,2524,2796,3092,3219,4251],"errorMessage":"Invalid group size. Ensure number of transaction in group is within valid bounds."},{"pc":[1953,2178,2375,2990,4149,4394],"errorMessage":"Invalid group size. This app call can only take standalone transactions."},{"pc":[2406,2892,3358,4194,4232],"errorMessage":"Invalid time frame. Call made outside the permitted block or timestamp range."},{"pc":[1787],"errorMessage":"Mint payment receiver address must match application address."},{"pc":[1779],"errorMessage":"Mint payment sender address must match transaction sender address."},{"pc":[2904],"errorMessage":"Number of active players must not exceed number of max players."},{"pc":[162],"errorMessage":"OnCompletion is not DeleteApplication"},{"pc":[174,190,216,235,251,267,283,309,356,374,390,412,424,456,469,490,516,544,566,583],"errorMessage":"OnCompletion is not NoOp"},{"pc":[2257,2869],"errorMessage":"Player with this address must not be an active game participant in the game."},{"pc":[2919],"errorMessage":"Players box start position index overflow. Can not store more addresses."},{"pc":[4318,4721],"errorMessage":"Prize pool not empty. Amount in prize pool must be zero."},{"pc":[3383],"errorMessage":"Randomness commit round not reached yet."},{"pc":[3122,3269],"errorMessage":"Sender mismatch. Sender must be same address across all transactions in group."},{"pc":[2651,2850,4280],"errorMessage":"Stake payment receiver address must match application address."},{"pc":[2627,2842,4272],"errorMessage":"Stake payment sender address must match transaction sender address."},{"pc":[4736],"errorMessage":"Template variable 'DELETABLE' needs to be 'True' at deploy-time."},{"pc":[2572],"errorMessage":"The number of max players must be within bounds."},{"pc":[3130,3277],"errorMessage":"Transaction at this group index must have exact required method selector."},{"pc":[460],"errorMessage":"can only call when creating"},{"pc":[165,177,193,219,238,254,270,286,312,359,377,393,415,427,472,493,519,547,569,586],"errorMessage":"can only call when not creating"},{"pc":[749,970],"errorMessage":"check BoxMap entry exists"},{"pc":[936],"errorMessage":"check BoxRef exists"},{"pc":[1639],"errorMessage":"check self.box_game_players entry exists"},{"pc":[2204,2215,2231,2393,2543,2755,3051,3145,3156,3293,3337,3364,3378,4427,4583],"errorMessage":"check self.box_game_register entry exists"},{"pc":[2242,2812,3013,3304,3328,4164,4291,4414],"errorMessage":"check self.box_game_state entry exists"},{"pc":[1958,3787,3797,3817,3842,3988,4754,4774],"errorMessage":"check self.box_game_trophy exists"},{"pc":[2738],"errorMessage":"check self.game_id exists"},{"pc":[2605,2676,2938,2959,3633,4009,4600],"errorMessage":"overflow"},{"pc":[3087,3214],"errorMessage":"transaction type is appl"},{"pc":[207,300,327,337,347,403,437,447],"errorMessage":"transaction type is pay"}],"pcOffsetMethod":"cblocks"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"},"byteCode":{"approval":"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","clear":"CoEBQw=="},"compilerInfo":{"compiler":"puya","compilerVersion":{"major":4,"minor":9,"patch":0}},"events":[{"name":"game_live","args":[{"type":"uint64","name":"field1"},{"type":"bool","name":"field2"},{"type":"uint64","name":"field3"}]},{"name":"player_score","args":[{"type":"uint64","name":"field1"},{"type":"address","name":"field2"},{"type":"uint8","name":"field3"}]},{"name":"game_over","args":[{"type":"uint64","name":"field1"},{"type":"uint8","name":"field2"},{"type":"uint8","name":"field3"},{"type":"uint8","name":"field4"},{"type":"address","name":"field5"},{"type":"address","name":"field6"},{"type":"address","name":"field7"}]}],"templateVariables":{"GEN_UNIX":{"type":"AVMUint64"},"DELETABLE":{"type":"AVMUint64"}}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


// Type definitions for ARC-56 structs

export type GameRegister = {
  hostingGame: boolean,
  bestScore: number,
  gameId: bigint,
  commitRandRound: bigint,
  expiryRound: bigint
}


/**
 * Converts the ABI tuple representation of a GameRegister to the struct representation
 */
export function GameRegisterFromTuple(abiTuple: [boolean, number, bigint, bigint, bigint]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.GameRegister, APP_SPEC.structs) as GameRegister
}

export type GameState = {
  stakingFinalized: boolean,
  maxPlayers: number,
  activePlayers: number,
  firstPlaceScore: number,
  secondPlaceScore: number,
  thirdPlaceScore: number,
  topScore: number,
  boxPStartPos: number,
  expiryTs: bigint,
  prizePool: bigint,
  adminAddress: string,
  firstPlaceAddress: string,
  secondPlaceAddress: string,
  thirdPlaceAddress: string,
  topscorerAddress: string
}


/**
 * Converts the ABI tuple representation of a GameState to the struct representation
 */
export function GameStateFromTuple(abiTuple: [boolean, number, number, number, number, number, number, number, bigint, bigint, string, string, string, string, string]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.GameState, APP_SPEC.structs) as GameState
}

export type GameTrophy = {
  athScore: number,
  assetId: bigint,
  athAddress: string
}


/**
 * Converts the ABI tuple representation of a GameTrophy to the struct representation
 */
export function GameTrophyFromTuple(abiTuple: [number, bigint, string]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.GameTrophy, APP_SPEC.structs) as GameTrophy
}

/**
 * Deploy-time template variables
 */
export type TemplateVariables = {
  GEN_UNIX: bigint,
  DELETABLE: bigint,
}

/**
 * The argument types for the Pieout contract
 */
export type PieoutArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'calc_single_box_cost(uint8,uint16)uint64': {
      keySize: bigint | number
      valueSize: bigint | number
    }
    'read_gen_unix()uint64': Record<string, never>
    'does_box_game_trophy_exist()bool': Record<string, never>
    'does_box_game_register_exist(account)bool': {
      player: Uint8Array | string
    }
    'does_box_game_state_exist(uint64)bool': {
      gameId: bigint | number
    }
    'read_box_game_players(uint64)address[]': {
      gameId: bigint | number
    }
    'generate()void': Record<string, never>
    'mint_trophy(pay,pay)void': {
      boxTPay: AppMethodCallTransactionArgument
      mintPay: AppMethodCallTransactionArgument
    }
    'claim_trophy()void': Record<string, never>
    'get_box_game_register(pay)void': {
      boxRPay: AppMethodCallTransactionArgument
    }
    'del_box_game_register_for_self(uint64)void': {
      gameId: bigint | number
    }
    'del_box_game_register_for_other(account)void': {
      player: Uint8Array | string
    }
    'new_game(uint64,pay,pay,pay)void': {
      maxPlayers: bigint | number
      boxSPay: AppMethodCallTransactionArgument
      boxPPay: AppMethodCallTransactionArgument
      stakePay: AppMethodCallTransactionArgument
    }
    'join_game(uint64,pay)void': {
      gameId: bigint | number
      stakePay: AppMethodCallTransactionArgument
    }
    'set_game_commit(uint64)void': {
      gameId: bigint | number
    }
    'up_ref_budget_for_play_game(uint64)void': {
      gameId: bigint | number
    }
    'play_game(uint64)void': {
      gameId: bigint | number
    }
    'trigger_game_event(uint64,uint8)void': {
      gameId: bigint | number
      triggerId: bigint | number
    }
    'reset_game(uint64,pay)void': {
      gameId: bigint | number
      stakePay: AppMethodCallTransactionArgument
    }
    'delete_game(uint64)void': {
      gameId: bigint | number
    }
    'terminate()void': Record<string, never>
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'calc_single_box_cost(uint8,uint16)uint64': [keySize: bigint | number, valueSize: bigint | number]
    'read_gen_unix()uint64': []
    'does_box_game_trophy_exist()bool': []
    'does_box_game_register_exist(account)bool': [player: Uint8Array | string]
    'does_box_game_state_exist(uint64)bool': [gameId: bigint | number]
    'read_box_game_players(uint64)address[]': [gameId: bigint | number]
    'generate()void': []
    'mint_trophy(pay,pay)void': [boxTPay: AppMethodCallTransactionArgument, mintPay: AppMethodCallTransactionArgument]
    'claim_trophy()void': []
    'get_box_game_register(pay)void': [boxRPay: AppMethodCallTransactionArgument]
    'del_box_game_register_for_self(uint64)void': [gameId: bigint | number]
    'del_box_game_register_for_other(account)void': [player: Uint8Array | string]
    'new_game(uint64,pay,pay,pay)void': [maxPlayers: bigint | number, boxSPay: AppMethodCallTransactionArgument, boxPPay: AppMethodCallTransactionArgument, stakePay: AppMethodCallTransactionArgument]
    'join_game(uint64,pay)void': [gameId: bigint | number, stakePay: AppMethodCallTransactionArgument]
    'set_game_commit(uint64)void': [gameId: bigint | number]
    'up_ref_budget_for_play_game(uint64)void': [gameId: bigint | number]
    'play_game(uint64)void': [gameId: bigint | number]
    'trigger_game_event(uint64,uint8)void': [gameId: bigint | number, triggerId: bigint | number]
    'reset_game(uint64,pay)void': [gameId: bigint | number, stakePay: AppMethodCallTransactionArgument]
    'delete_game(uint64)void': [gameId: bigint | number]
    'terminate()void': []
  }
}

/**
 * The return type for each method
 */
export type PieoutReturns = {
  'calc_single_box_cost(uint8,uint16)uint64': bigint
  'read_gen_unix()uint64': bigint
  'does_box_game_trophy_exist()bool': boolean
  'does_box_game_register_exist(account)bool': boolean
  'does_box_game_state_exist(uint64)bool': boolean
  'read_box_game_players(uint64)address[]': string[]
  'generate()void': void
  'mint_trophy(pay,pay)void': void
  'claim_trophy()void': void
  'get_box_game_register(pay)void': void
  'del_box_game_register_for_self(uint64)void': void
  'del_box_game_register_for_other(account)void': void
  'new_game(uint64,pay,pay,pay)void': void
  'join_game(uint64,pay)void': void
  'set_game_commit(uint64)void': void
  'up_ref_budget_for_play_game(uint64)void': void
  'play_game(uint64)void': void
  'trigger_game_event(uint64,uint8)void': void
  'reset_game(uint64,pay)void': void
  'delete_game(uint64)void': void
  'terminate()void': void
}

/**
 * Defines the types of available calls and state of the Pieout smart contract.
 */
export type PieoutTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'calc_single_box_cost(uint8,uint16)uint64' | 'calc_single_box_cost', {
      argsObj: PieoutArgs['obj']['calc_single_box_cost(uint8,uint16)uint64']
      argsTuple: PieoutArgs['tuple']['calc_single_box_cost(uint8,uint16)uint64']
      returns: PieoutReturns['calc_single_box_cost(uint8,uint16)uint64']
    }>
    & Record<'read_gen_unix()uint64' | 'read_gen_unix', {
      argsObj: PieoutArgs['obj']['read_gen_unix()uint64']
      argsTuple: PieoutArgs['tuple']['read_gen_unix()uint64']
      returns: PieoutReturns['read_gen_unix()uint64']
    }>
    & Record<'does_box_game_trophy_exist()bool' | 'does_box_game_trophy_exist', {
      argsObj: PieoutArgs['obj']['does_box_game_trophy_exist()bool']
      argsTuple: PieoutArgs['tuple']['does_box_game_trophy_exist()bool']
      returns: PieoutReturns['does_box_game_trophy_exist()bool']
    }>
    & Record<'does_box_game_register_exist(account)bool' | 'does_box_game_register_exist', {
      argsObj: PieoutArgs['obj']['does_box_game_register_exist(account)bool']
      argsTuple: PieoutArgs['tuple']['does_box_game_register_exist(account)bool']
      returns: PieoutReturns['does_box_game_register_exist(account)bool']
    }>
    & Record<'does_box_game_state_exist(uint64)bool' | 'does_box_game_state_exist', {
      argsObj: PieoutArgs['obj']['does_box_game_state_exist(uint64)bool']
      argsTuple: PieoutArgs['tuple']['does_box_game_state_exist(uint64)bool']
      returns: PieoutReturns['does_box_game_state_exist(uint64)bool']
    }>
    & Record<'read_box_game_players(uint64)address[]' | 'read_box_game_players', {
      argsObj: PieoutArgs['obj']['read_box_game_players(uint64)address[]']
      argsTuple: PieoutArgs['tuple']['read_box_game_players(uint64)address[]']
      returns: PieoutReturns['read_box_game_players(uint64)address[]']
    }>
    & Record<'generate()void' | 'generate', {
      argsObj: PieoutArgs['obj']['generate()void']
      argsTuple: PieoutArgs['tuple']['generate()void']
      returns: PieoutReturns['generate()void']
    }>
    & Record<'mint_trophy(pay,pay)void' | 'mint_trophy', {
      argsObj: PieoutArgs['obj']['mint_trophy(pay,pay)void']
      argsTuple: PieoutArgs['tuple']['mint_trophy(pay,pay)void']
      returns: PieoutReturns['mint_trophy(pay,pay)void']
    }>
    & Record<'claim_trophy()void' | 'claim_trophy', {
      argsObj: PieoutArgs['obj']['claim_trophy()void']
      argsTuple: PieoutArgs['tuple']['claim_trophy()void']
      returns: PieoutReturns['claim_trophy()void']
    }>
    & Record<'get_box_game_register(pay)void' | 'get_box_game_register', {
      argsObj: PieoutArgs['obj']['get_box_game_register(pay)void']
      argsTuple: PieoutArgs['tuple']['get_box_game_register(pay)void']
      returns: PieoutReturns['get_box_game_register(pay)void']
    }>
    & Record<'del_box_game_register_for_self(uint64)void' | 'del_box_game_register_for_self', {
      argsObj: PieoutArgs['obj']['del_box_game_register_for_self(uint64)void']
      argsTuple: PieoutArgs['tuple']['del_box_game_register_for_self(uint64)void']
      returns: PieoutReturns['del_box_game_register_for_self(uint64)void']
    }>
    & Record<'del_box_game_register_for_other(account)void' | 'del_box_game_register_for_other', {
      argsObj: PieoutArgs['obj']['del_box_game_register_for_other(account)void']
      argsTuple: PieoutArgs['tuple']['del_box_game_register_for_other(account)void']
      returns: PieoutReturns['del_box_game_register_for_other(account)void']
    }>
    & Record<'new_game(uint64,pay,pay,pay)void' | 'new_game', {
      argsObj: PieoutArgs['obj']['new_game(uint64,pay,pay,pay)void']
      argsTuple: PieoutArgs['tuple']['new_game(uint64,pay,pay,pay)void']
      returns: PieoutReturns['new_game(uint64,pay,pay,pay)void']
    }>
    & Record<'join_game(uint64,pay)void' | 'join_game', {
      argsObj: PieoutArgs['obj']['join_game(uint64,pay)void']
      argsTuple: PieoutArgs['tuple']['join_game(uint64,pay)void']
      returns: PieoutReturns['join_game(uint64,pay)void']
    }>
    & Record<'set_game_commit(uint64)void' | 'set_game_commit', {
      argsObj: PieoutArgs['obj']['set_game_commit(uint64)void']
      argsTuple: PieoutArgs['tuple']['set_game_commit(uint64)void']
      returns: PieoutReturns['set_game_commit(uint64)void']
    }>
    & Record<'up_ref_budget_for_play_game(uint64)void' | 'up_ref_budget_for_play_game', {
      argsObj: PieoutArgs['obj']['up_ref_budget_for_play_game(uint64)void']
      argsTuple: PieoutArgs['tuple']['up_ref_budget_for_play_game(uint64)void']
      returns: PieoutReturns['up_ref_budget_for_play_game(uint64)void']
    }>
    & Record<'play_game(uint64)void' | 'play_game', {
      argsObj: PieoutArgs['obj']['play_game(uint64)void']
      argsTuple: PieoutArgs['tuple']['play_game(uint64)void']
      returns: PieoutReturns['play_game(uint64)void']
    }>
    & Record<'trigger_game_event(uint64,uint8)void' | 'trigger_game_event', {
      argsObj: PieoutArgs['obj']['trigger_game_event(uint64,uint8)void']
      argsTuple: PieoutArgs['tuple']['trigger_game_event(uint64,uint8)void']
      returns: PieoutReturns['trigger_game_event(uint64,uint8)void']
    }>
    & Record<'reset_game(uint64,pay)void' | 'reset_game', {
      argsObj: PieoutArgs['obj']['reset_game(uint64,pay)void']
      argsTuple: PieoutArgs['tuple']['reset_game(uint64,pay)void']
      returns: PieoutReturns['reset_game(uint64,pay)void']
    }>
    & Record<'delete_game(uint64)void' | 'delete_game', {
      argsObj: PieoutArgs['obj']['delete_game(uint64)void']
      argsTuple: PieoutArgs['tuple']['delete_game(uint64)void']
      returns: PieoutReturns['delete_game(uint64)void']
    }>
    & Record<'terminate()void' | 'terminate', {
      argsObj: PieoutArgs['obj']['terminate()void']
      argsTuple: PieoutArgs['tuple']['terminate()void']
      returns: PieoutReturns['terminate()void']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        gameId: bigint
      }
      maps: {}
    }
    box: {
      keys: {
        boxGameTrophy: GameTrophy
      }
      maps: {
        boxGameState: Map<bigint | number, GameState>
        boxGamePlayers: Map<bigint | number, Uint8Array>
        boxGameRegister: Map<string, GameRegister>
      }
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type PieoutSignatures = keyof PieoutTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type PieoutNonVoidMethodSignatures = keyof PieoutTypes['methods'] extends infer T ? T extends keyof PieoutTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the Pieout smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends PieoutSignatures> = PieoutTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the Pieout smart contract to the method's return type
 */
export type MethodReturn<TSignature extends PieoutSignatures> = PieoutTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = PieoutTypes['state']['global']['keys']

/**
 * Defines the shape of the keyed box state of the application.
 */
export type BoxKeysState = PieoutTypes['state']['box']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type PieoutCreateCallParams =
  | Expand<CallParams<PieoutArgs['obj']['generate()void'] | PieoutArgs['tuple']['generate()void']> & {method: 'generate'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<PieoutArgs['obj']['generate()void'] | PieoutArgs['tuple']['generate()void']> & {method: 'generate()void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines supported delete method params for this smart contract
 */
export type PieoutDeleteCallParams =
  | Expand<CallParams<PieoutArgs['obj']['terminate()void'] | PieoutArgs['tuple']['terminate()void']> & {method: 'terminate'}>
  | Expand<CallParams<PieoutArgs['obj']['terminate()void'] | PieoutArgs['tuple']['terminate()void']> & {method: 'terminate()void'}>
/**
 * Defines arguments required for the deploy method.
 */
export type PieoutDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: PieoutCreateCallParams
  /**
   * Delete transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  deleteParams?: PieoutDeleteCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the Pieout smart contract
 */
export abstract class PieoutParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends PieoutCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'generate':
          case 'generate()void':
            return PieoutParamsFactory.create.generate(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the Pieout smart contract using the generate()void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      generate(params: CallParams<PieoutArgs['obj']['generate()void'] | PieoutArgs['tuple']['generate()void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'generate()void' as const,
          args: Array.isArray(params.args) ? params.args : [],
        }
      },
    }
  }

  /**
   * Gets available delete ABI call param factories
   */
  static get delete() {
    return {
      _resolveByMethod<TParams extends PieoutDeleteCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'terminate':
          case 'terminate()void':
            return PieoutParamsFactory.delete.terminate(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs delete ABI call params for the Pieout smart contract using the terminate()void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      terminate(params: CallParams<PieoutArgs['obj']['terminate()void'] | PieoutArgs['tuple']['terminate()void']>): AppClientMethodCallParams {
        return {
          ...params,
          method: 'terminate()void' as const,
          args: Array.isArray(params.args) ? params.args : [],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the calc_single_box_cost(uint8,uint16)uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static calcSingleBoxCost(params: CallParams<PieoutArgs['obj']['calc_single_box_cost(uint8,uint16)uint64'] | PieoutArgs['tuple']['calc_single_box_cost(uint8,uint16)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'calc_single_box_cost(uint8,uint16)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.keySize, params.args.valueSize],
    }
  }
  /**
   * Constructs a no op call for the read_gen_unix()uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static readGenUnix(params: CallParams<PieoutArgs['obj']['read_gen_unix()uint64'] | PieoutArgs['tuple']['read_gen_unix()uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'read_gen_unix()uint64' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the does_box_game_trophy_exist()bool ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static doesBoxGameTrophyExist(params: CallParams<PieoutArgs['obj']['does_box_game_trophy_exist()bool'] | PieoutArgs['tuple']['does_box_game_trophy_exist()bool']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'does_box_game_trophy_exist()bool' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the does_box_game_register_exist(account)bool ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static doesBoxGameRegisterExist(params: CallParams<PieoutArgs['obj']['does_box_game_register_exist(account)bool'] | PieoutArgs['tuple']['does_box_game_register_exist(account)bool']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'does_box_game_register_exist(account)bool' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.player],
    }
  }
  /**
   * Constructs a no op call for the does_box_game_state_exist(uint64)bool ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static doesBoxGameStateExist(params: CallParams<PieoutArgs['obj']['does_box_game_state_exist(uint64)bool'] | PieoutArgs['tuple']['does_box_game_state_exist(uint64)bool']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'does_box_game_state_exist(uint64)bool' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.gameId],
    }
  }
  /**
   * Constructs a no op call for the read_box_game_players(uint64)address[] ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static readBoxGamePlayers(params: CallParams<PieoutArgs['obj']['read_box_game_players(uint64)address[]'] | PieoutArgs['tuple']['read_box_game_players(uint64)address[]']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'read_box_game_players(uint64)address[]' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.gameId],
    }
  }
  /**
   * Constructs a no op call for the mint_trophy(pay,pay)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static mintTrophy(params: CallParams<PieoutArgs['obj']['mint_trophy(pay,pay)void'] | PieoutArgs['tuple']['mint_trophy(pay,pay)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'mint_trophy(pay,pay)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.boxTPay, params.args.mintPay],
    }
  }
  /**
   * Constructs a no op call for the claim_trophy()void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static claimTrophy(params: CallParams<PieoutArgs['obj']['claim_trophy()void'] | PieoutArgs['tuple']['claim_trophy()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'claim_trophy()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the get_box_game_register(pay)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getBoxGameRegister(params: CallParams<PieoutArgs['obj']['get_box_game_register(pay)void'] | PieoutArgs['tuple']['get_box_game_register(pay)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'get_box_game_register(pay)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.boxRPay],
    }
  }
  /**
   * Constructs a no op call for the del_box_game_register_for_self(uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static delBoxGameRegisterForSelf(params: CallParams<PieoutArgs['obj']['del_box_game_register_for_self(uint64)void'] | PieoutArgs['tuple']['del_box_game_register_for_self(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'del_box_game_register_for_self(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.gameId],
    }
  }
  /**
   * Constructs a no op call for the del_box_game_register_for_other(account)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static delBoxGameRegisterForOther(params: CallParams<PieoutArgs['obj']['del_box_game_register_for_other(account)void'] | PieoutArgs['tuple']['del_box_game_register_for_other(account)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'del_box_game_register_for_other(account)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.player],
    }
  }
  /**
   * Constructs a no op call for the new_game(uint64,pay,pay,pay)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static newGame(params: CallParams<PieoutArgs['obj']['new_game(uint64,pay,pay,pay)void'] | PieoutArgs['tuple']['new_game(uint64,pay,pay,pay)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'new_game(uint64,pay,pay,pay)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.maxPlayers, params.args.boxSPay, params.args.boxPPay, params.args.stakePay],
    }
  }
  /**
   * Constructs a no op call for the join_game(uint64,pay)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static joinGame(params: CallParams<PieoutArgs['obj']['join_game(uint64,pay)void'] | PieoutArgs['tuple']['join_game(uint64,pay)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'join_game(uint64,pay)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.gameId, params.args.stakePay],
    }
  }
  /**
   * Constructs a no op call for the set_game_commit(uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static setGameCommit(params: CallParams<PieoutArgs['obj']['set_game_commit(uint64)void'] | PieoutArgs['tuple']['set_game_commit(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'set_game_commit(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.gameId],
    }
  }
  /**
   * Constructs a no op call for the up_ref_budget_for_play_game(uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static upRefBudgetForPlayGame(params: CallParams<PieoutArgs['obj']['up_ref_budget_for_play_game(uint64)void'] | PieoutArgs['tuple']['up_ref_budget_for_play_game(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'up_ref_budget_for_play_game(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.gameId],
    }
  }
  /**
   * Constructs a no op call for the play_game(uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static playGame(params: CallParams<PieoutArgs['obj']['play_game(uint64)void'] | PieoutArgs['tuple']['play_game(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'play_game(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.gameId],
    }
  }
  /**
   * Constructs a no op call for the trigger_game_event(uint64,uint8)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static triggerGameEvent(params: CallParams<PieoutArgs['obj']['trigger_game_event(uint64,uint8)void'] | PieoutArgs['tuple']['trigger_game_event(uint64,uint8)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'trigger_game_event(uint64,uint8)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.gameId, params.args.triggerId],
    }
  }
  /**
   * Constructs a no op call for the reset_game(uint64,pay)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static resetGame(params: CallParams<PieoutArgs['obj']['reset_game(uint64,pay)void'] | PieoutArgs['tuple']['reset_game(uint64,pay)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'reset_game(uint64,pay)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.gameId, params.args.stakePay],
    }
  }
  /**
   * Constructs a no op call for the delete_game(uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static deleteGame(params: CallParams<PieoutArgs['obj']['delete_game(uint64)void'] | PieoutArgs['tuple']['delete_game(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'delete_game(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.gameId],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the Pieout smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class PieoutFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `PieoutFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new PieoutClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new PieoutClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the Pieout smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: PieoutDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? PieoutParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (PieoutCreateCallParams & { args: Uint8Array[] }) : undefined,
      deleteParams: params.deleteParams?.method ? PieoutParamsFactory.delete._resolveByMethod(params.deleteParams) : params.deleteParams ? params.deleteParams as (PieoutDeleteCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new PieoutClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Pieout smart contract using the generate()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      generate: (params: CallParams<PieoutArgs['obj']['generate()void'] | PieoutArgs['tuple']['generate()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.params.create(PieoutParamsFactory.create.generate(params))
      },
    },

    /**
     * Gets available deployDelete methods
     */
    deployDelete: {
      /**
       * Deletes an existing instance of the Pieout smart contract using the terminate()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The deployDelete params
       */
      terminate: (params: CallParams<PieoutArgs['obj']['terminate()void'] | PieoutArgs['tuple']['terminate()void']> = {args: []}) => {
        return this.appFactory.params.deployDelete(PieoutParamsFactory.delete.terminate(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Pieout smart contract using the generate()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      generate: (params: CallParams<PieoutArgs['obj']['generate()void'] | PieoutArgs['tuple']['generate()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.createTransaction.create(PieoutParamsFactory.create.generate(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Pieout smart contract using an ABI method call using the generate()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      generate: async (params: CallParams<PieoutArgs['obj']['generate()void'] | PieoutArgs['tuple']['generate()void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        const result = await this.appFactory.send.create(PieoutParamsFactory.create.generate(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | PieoutReturns['generate()void']) }, appClient: new PieoutClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the Pieout smart contract
 */
export class PieoutClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `PieoutClient`
   *
   * @param appClient An `AppClient` instance which has been created with the Pieout app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `PieoutClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends PieoutNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `PieoutClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<PieoutClient> {
    return new PieoutClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `PieoutClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<PieoutClient> {
    return new PieoutClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available delete methods
     */
    delete: {
      /**
       * Deletes an existing instance of the Pieout smart contract using the `terminate()void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The delete params
       */
      terminate: (params: CallParams<PieoutArgs['obj']['terminate()void'] | PieoutArgs['tuple']['terminate()void']> = {args: []}) => {
        return this.appClient.params.delete(PieoutParamsFactory.delete.terminate(params))
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the Pieout smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the Pieout smart contract using the `calc_single_box_cost(uint8,uint16)uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    calcSingleBoxCost: (params: CallParams<PieoutArgs['obj']['calc_single_box_cost(uint8,uint16)uint64'] | PieoutArgs['tuple']['calc_single_box_cost(uint8,uint16)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(PieoutParamsFactory.calcSingleBoxCost(params))
    },

    /**
     * Makes a call to the Pieout smart contract using the `read_gen_unix()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    readGenUnix: (params: CallParams<PieoutArgs['obj']['read_gen_unix()uint64'] | PieoutArgs['tuple']['read_gen_unix()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(PieoutParamsFactory.readGenUnix(params))
    },

    /**
     * Makes a call to the Pieout smart contract using the `does_box_game_trophy_exist()bool` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    doesBoxGameTrophyExist: (params: CallParams<PieoutArgs['obj']['does_box_game_trophy_exist()bool'] | PieoutArgs['tuple']['does_box_game_trophy_exist()bool']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(PieoutParamsFactory.doesBoxGameTrophyExist(params))
    },

    /**
     * Makes a call to the Pieout smart contract using the `does_box_game_register_exist(account)bool` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    doesBoxGameRegisterExist: (params: CallParams<PieoutArgs['obj']['does_box_game_register_exist(account)bool'] | PieoutArgs['tuple']['does_box_game_register_exist(account)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(PieoutParamsFactory.doesBoxGameRegisterExist(params))
    },

    /**
     * Makes a call to the Pieout smart contract using the `does_box_game_state_exist(uint64)bool` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    doesBoxGameStateExist: (params: CallParams<PieoutArgs['obj']['does_box_game_state_exist(uint64)bool'] | PieoutArgs['tuple']['does_box_game_state_exist(uint64)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(PieoutParamsFactory.doesBoxGameStateExist(params))
    },

    /**
     * Makes a call to the Pieout smart contract using the `read_box_game_players(uint64)address[]` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    readBoxGamePlayers: (params: CallParams<PieoutArgs['obj']['read_box_game_players(uint64)address[]'] | PieoutArgs['tuple']['read_box_game_players(uint64)address[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(PieoutParamsFactory.readBoxGamePlayers(params))
    },

    /**
     * Makes a call to the Pieout smart contract using the `mint_trophy(pay,pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    mintTrophy: (params: CallParams<PieoutArgs['obj']['mint_trophy(pay,pay)void'] | PieoutArgs['tuple']['mint_trophy(pay,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(PieoutParamsFactory.mintTrophy(params))
    },

    /**
     * Makes a call to the Pieout smart contract using the `claim_trophy()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    claimTrophy: (params: CallParams<PieoutArgs['obj']['claim_trophy()void'] | PieoutArgs['tuple']['claim_trophy()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(PieoutParamsFactory.claimTrophy(params))
    },

    /**
     * Makes a call to the Pieout smart contract using the `get_box_game_register(pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getBoxGameRegister: (params: CallParams<PieoutArgs['obj']['get_box_game_register(pay)void'] | PieoutArgs['tuple']['get_box_game_register(pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(PieoutParamsFactory.getBoxGameRegister(params))
    },

    /**
     * Makes a call to the Pieout smart contract using the `del_box_game_register_for_self(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    delBoxGameRegisterForSelf: (params: CallParams<PieoutArgs['obj']['del_box_game_register_for_self(uint64)void'] | PieoutArgs['tuple']['del_box_game_register_for_self(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(PieoutParamsFactory.delBoxGameRegisterForSelf(params))
    },

    /**
     * Makes a call to the Pieout smart contract using the `del_box_game_register_for_other(account)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    delBoxGameRegisterForOther: (params: CallParams<PieoutArgs['obj']['del_box_game_register_for_other(account)void'] | PieoutArgs['tuple']['del_box_game_register_for_other(account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(PieoutParamsFactory.delBoxGameRegisterForOther(params))
    },

    /**
     * Makes a call to the Pieout smart contract using the `new_game(uint64,pay,pay,pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    newGame: (params: CallParams<PieoutArgs['obj']['new_game(uint64,pay,pay,pay)void'] | PieoutArgs['tuple']['new_game(uint64,pay,pay,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(PieoutParamsFactory.newGame(params))
    },

    /**
     * Makes a call to the Pieout smart contract using the `join_game(uint64,pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    joinGame: (params: CallParams<PieoutArgs['obj']['join_game(uint64,pay)void'] | PieoutArgs['tuple']['join_game(uint64,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(PieoutParamsFactory.joinGame(params))
    },

    /**
     * Makes a call to the Pieout smart contract using the `set_game_commit(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    setGameCommit: (params: CallParams<PieoutArgs['obj']['set_game_commit(uint64)void'] | PieoutArgs['tuple']['set_game_commit(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(PieoutParamsFactory.setGameCommit(params))
    },

    /**
     * Makes a call to the Pieout smart contract using the `up_ref_budget_for_play_game(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    upRefBudgetForPlayGame: (params: CallParams<PieoutArgs['obj']['up_ref_budget_for_play_game(uint64)void'] | PieoutArgs['tuple']['up_ref_budget_for_play_game(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(PieoutParamsFactory.upRefBudgetForPlayGame(params))
    },

    /**
     * Makes a call to the Pieout smart contract using the `play_game(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    playGame: (params: CallParams<PieoutArgs['obj']['play_game(uint64)void'] | PieoutArgs['tuple']['play_game(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(PieoutParamsFactory.playGame(params))
    },

    /**
     * Makes a call to the Pieout smart contract using the `trigger_game_event(uint64,uint8)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    triggerGameEvent: (params: CallParams<PieoutArgs['obj']['trigger_game_event(uint64,uint8)void'] | PieoutArgs['tuple']['trigger_game_event(uint64,uint8)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(PieoutParamsFactory.triggerGameEvent(params))
    },

    /**
     * Makes a call to the Pieout smart contract using the `reset_game(uint64,pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    resetGame: (params: CallParams<PieoutArgs['obj']['reset_game(uint64,pay)void'] | PieoutArgs['tuple']['reset_game(uint64,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(PieoutParamsFactory.resetGame(params))
    },

    /**
     * Makes a call to the Pieout smart contract using the `delete_game(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    deleteGame: (params: CallParams<PieoutArgs['obj']['delete_game(uint64)void'] | PieoutArgs['tuple']['delete_game(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(PieoutParamsFactory.deleteGame(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available delete methods
     */
    delete: {
      /**
       * Deletes an existing instance of the Pieout smart contract using the `terminate()void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The delete transaction
       */
      terminate: (params: CallParams<PieoutArgs['obj']['terminate()void'] | PieoutArgs['tuple']['terminate()void']> = {args: []}) => {
        return this.appClient.createTransaction.delete(PieoutParamsFactory.delete.terminate(params))
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the Pieout smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the Pieout smart contract using the `calc_single_box_cost(uint8,uint16)uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    calcSingleBoxCost: (params: CallParams<PieoutArgs['obj']['calc_single_box_cost(uint8,uint16)uint64'] | PieoutArgs['tuple']['calc_single_box_cost(uint8,uint16)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(PieoutParamsFactory.calcSingleBoxCost(params))
    },

    /**
     * Makes a call to the Pieout smart contract using the `read_gen_unix()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    readGenUnix: (params: CallParams<PieoutArgs['obj']['read_gen_unix()uint64'] | PieoutArgs['tuple']['read_gen_unix()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(PieoutParamsFactory.readGenUnix(params))
    },

    /**
     * Makes a call to the Pieout smart contract using the `does_box_game_trophy_exist()bool` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    doesBoxGameTrophyExist: (params: CallParams<PieoutArgs['obj']['does_box_game_trophy_exist()bool'] | PieoutArgs['tuple']['does_box_game_trophy_exist()bool']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(PieoutParamsFactory.doesBoxGameTrophyExist(params))
    },

    /**
     * Makes a call to the Pieout smart contract using the `does_box_game_register_exist(account)bool` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    doesBoxGameRegisterExist: (params: CallParams<PieoutArgs['obj']['does_box_game_register_exist(account)bool'] | PieoutArgs['tuple']['does_box_game_register_exist(account)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(PieoutParamsFactory.doesBoxGameRegisterExist(params))
    },

    /**
     * Makes a call to the Pieout smart contract using the `does_box_game_state_exist(uint64)bool` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    doesBoxGameStateExist: (params: CallParams<PieoutArgs['obj']['does_box_game_state_exist(uint64)bool'] | PieoutArgs['tuple']['does_box_game_state_exist(uint64)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(PieoutParamsFactory.doesBoxGameStateExist(params))
    },

    /**
     * Makes a call to the Pieout smart contract using the `read_box_game_players(uint64)address[]` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    readBoxGamePlayers: (params: CallParams<PieoutArgs['obj']['read_box_game_players(uint64)address[]'] | PieoutArgs['tuple']['read_box_game_players(uint64)address[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(PieoutParamsFactory.readBoxGamePlayers(params))
    },

    /**
     * Makes a call to the Pieout smart contract using the `mint_trophy(pay,pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    mintTrophy: (params: CallParams<PieoutArgs['obj']['mint_trophy(pay,pay)void'] | PieoutArgs['tuple']['mint_trophy(pay,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(PieoutParamsFactory.mintTrophy(params))
    },

    /**
     * Makes a call to the Pieout smart contract using the `claim_trophy()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    claimTrophy: (params: CallParams<PieoutArgs['obj']['claim_trophy()void'] | PieoutArgs['tuple']['claim_trophy()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(PieoutParamsFactory.claimTrophy(params))
    },

    /**
     * Makes a call to the Pieout smart contract using the `get_box_game_register(pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getBoxGameRegister: (params: CallParams<PieoutArgs['obj']['get_box_game_register(pay)void'] | PieoutArgs['tuple']['get_box_game_register(pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(PieoutParamsFactory.getBoxGameRegister(params))
    },

    /**
     * Makes a call to the Pieout smart contract using the `del_box_game_register_for_self(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    delBoxGameRegisterForSelf: (params: CallParams<PieoutArgs['obj']['del_box_game_register_for_self(uint64)void'] | PieoutArgs['tuple']['del_box_game_register_for_self(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(PieoutParamsFactory.delBoxGameRegisterForSelf(params))
    },

    /**
     * Makes a call to the Pieout smart contract using the `del_box_game_register_for_other(account)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    delBoxGameRegisterForOther: (params: CallParams<PieoutArgs['obj']['del_box_game_register_for_other(account)void'] | PieoutArgs['tuple']['del_box_game_register_for_other(account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(PieoutParamsFactory.delBoxGameRegisterForOther(params))
    },

    /**
     * Makes a call to the Pieout smart contract using the `new_game(uint64,pay,pay,pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    newGame: (params: CallParams<PieoutArgs['obj']['new_game(uint64,pay,pay,pay)void'] | PieoutArgs['tuple']['new_game(uint64,pay,pay,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(PieoutParamsFactory.newGame(params))
    },

    /**
     * Makes a call to the Pieout smart contract using the `join_game(uint64,pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    joinGame: (params: CallParams<PieoutArgs['obj']['join_game(uint64,pay)void'] | PieoutArgs['tuple']['join_game(uint64,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(PieoutParamsFactory.joinGame(params))
    },

    /**
     * Makes a call to the Pieout smart contract using the `set_game_commit(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    setGameCommit: (params: CallParams<PieoutArgs['obj']['set_game_commit(uint64)void'] | PieoutArgs['tuple']['set_game_commit(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(PieoutParamsFactory.setGameCommit(params))
    },

    /**
     * Makes a call to the Pieout smart contract using the `up_ref_budget_for_play_game(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    upRefBudgetForPlayGame: (params: CallParams<PieoutArgs['obj']['up_ref_budget_for_play_game(uint64)void'] | PieoutArgs['tuple']['up_ref_budget_for_play_game(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(PieoutParamsFactory.upRefBudgetForPlayGame(params))
    },

    /**
     * Makes a call to the Pieout smart contract using the `play_game(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    playGame: (params: CallParams<PieoutArgs['obj']['play_game(uint64)void'] | PieoutArgs['tuple']['play_game(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(PieoutParamsFactory.playGame(params))
    },

    /**
     * Makes a call to the Pieout smart contract using the `trigger_game_event(uint64,uint8)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    triggerGameEvent: (params: CallParams<PieoutArgs['obj']['trigger_game_event(uint64,uint8)void'] | PieoutArgs['tuple']['trigger_game_event(uint64,uint8)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(PieoutParamsFactory.triggerGameEvent(params))
    },

    /**
     * Makes a call to the Pieout smart contract using the `reset_game(uint64,pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    resetGame: (params: CallParams<PieoutArgs['obj']['reset_game(uint64,pay)void'] | PieoutArgs['tuple']['reset_game(uint64,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(PieoutParamsFactory.resetGame(params))
    },

    /**
     * Makes a call to the Pieout smart contract using the `delete_game(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    deleteGame: (params: CallParams<PieoutArgs['obj']['delete_game(uint64)void'] | PieoutArgs['tuple']['delete_game(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(PieoutParamsFactory.deleteGame(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available delete methods
     */
    delete: {
      /**
       * Deletes an existing instance of the Pieout smart contract using the `terminate()void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The delete result
       */
      terminate: async (params: CallParams<PieoutArgs['obj']['terminate()void'] | PieoutArgs['tuple']['terminate()void']> & SendParams = {args: []}) => {
        const result = await this.appClient.send.delete(PieoutParamsFactory.delete.terminate(params))
        return {...result, return: result.return as unknown as (undefined | PieoutReturns['terminate()void'])}
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the Pieout smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the Pieout smart contract using the `calc_single_box_cost(uint8,uint16)uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    calcSingleBoxCost: async (params: CallParams<PieoutArgs['obj']['calc_single_box_cost(uint8,uint16)uint64'] | PieoutArgs['tuple']['calc_single_box_cost(uint8,uint16)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(PieoutParamsFactory.calcSingleBoxCost(params))
      return {...result, return: result.return as unknown as (undefined | PieoutReturns['calc_single_box_cost(uint8,uint16)uint64'])}
    },

    /**
     * Makes a call to the Pieout smart contract using the `read_gen_unix()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    readGenUnix: async (params: CallParams<PieoutArgs['obj']['read_gen_unix()uint64'] | PieoutArgs['tuple']['read_gen_unix()uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(PieoutParamsFactory.readGenUnix(params))
      return {...result, return: result.return as unknown as (undefined | PieoutReturns['read_gen_unix()uint64'])}
    },

    /**
     * Makes a call to the Pieout smart contract using the `does_box_game_trophy_exist()bool` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    doesBoxGameTrophyExist: async (params: CallParams<PieoutArgs['obj']['does_box_game_trophy_exist()bool'] | PieoutArgs['tuple']['does_box_game_trophy_exist()bool']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(PieoutParamsFactory.doesBoxGameTrophyExist(params))
      return {...result, return: result.return as unknown as (undefined | PieoutReturns['does_box_game_trophy_exist()bool'])}
    },

    /**
     * Makes a call to the Pieout smart contract using the `does_box_game_register_exist(account)bool` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    doesBoxGameRegisterExist: async (params: CallParams<PieoutArgs['obj']['does_box_game_register_exist(account)bool'] | PieoutArgs['tuple']['does_box_game_register_exist(account)bool']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(PieoutParamsFactory.doesBoxGameRegisterExist(params))
      return {...result, return: result.return as unknown as (undefined | PieoutReturns['does_box_game_register_exist(account)bool'])}
    },

    /**
     * Makes a call to the Pieout smart contract using the `does_box_game_state_exist(uint64)bool` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    doesBoxGameStateExist: async (params: CallParams<PieoutArgs['obj']['does_box_game_state_exist(uint64)bool'] | PieoutArgs['tuple']['does_box_game_state_exist(uint64)bool']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(PieoutParamsFactory.doesBoxGameStateExist(params))
      return {...result, return: result.return as unknown as (undefined | PieoutReturns['does_box_game_state_exist(uint64)bool'])}
    },

    /**
     * Makes a call to the Pieout smart contract using the `read_box_game_players(uint64)address[]` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    readBoxGamePlayers: async (params: CallParams<PieoutArgs['obj']['read_box_game_players(uint64)address[]'] | PieoutArgs['tuple']['read_box_game_players(uint64)address[]']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(PieoutParamsFactory.readBoxGamePlayers(params))
      return {...result, return: result.return as unknown as (undefined | PieoutReturns['read_box_game_players(uint64)address[]'])}
    },

    /**
     * Makes a call to the Pieout smart contract using the `mint_trophy(pay,pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    mintTrophy: async (params: CallParams<PieoutArgs['obj']['mint_trophy(pay,pay)void'] | PieoutArgs['tuple']['mint_trophy(pay,pay)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(PieoutParamsFactory.mintTrophy(params))
      return {...result, return: result.return as unknown as (undefined | PieoutReturns['mint_trophy(pay,pay)void'])}
    },

    /**
     * Makes a call to the Pieout smart contract using the `claim_trophy()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    claimTrophy: async (params: CallParams<PieoutArgs['obj']['claim_trophy()void'] | PieoutArgs['tuple']['claim_trophy()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(PieoutParamsFactory.claimTrophy(params))
      return {...result, return: result.return as unknown as (undefined | PieoutReturns['claim_trophy()void'])}
    },

    /**
     * Makes a call to the Pieout smart contract using the `get_box_game_register(pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getBoxGameRegister: async (params: CallParams<PieoutArgs['obj']['get_box_game_register(pay)void'] | PieoutArgs['tuple']['get_box_game_register(pay)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(PieoutParamsFactory.getBoxGameRegister(params))
      return {...result, return: result.return as unknown as (undefined | PieoutReturns['get_box_game_register(pay)void'])}
    },

    /**
     * Makes a call to the Pieout smart contract using the `del_box_game_register_for_self(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    delBoxGameRegisterForSelf: async (params: CallParams<PieoutArgs['obj']['del_box_game_register_for_self(uint64)void'] | PieoutArgs['tuple']['del_box_game_register_for_self(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(PieoutParamsFactory.delBoxGameRegisterForSelf(params))
      return {...result, return: result.return as unknown as (undefined | PieoutReturns['del_box_game_register_for_self(uint64)void'])}
    },

    /**
     * Makes a call to the Pieout smart contract using the `del_box_game_register_for_other(account)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    delBoxGameRegisterForOther: async (params: CallParams<PieoutArgs['obj']['del_box_game_register_for_other(account)void'] | PieoutArgs['tuple']['del_box_game_register_for_other(account)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(PieoutParamsFactory.delBoxGameRegisterForOther(params))
      return {...result, return: result.return as unknown as (undefined | PieoutReturns['del_box_game_register_for_other(account)void'])}
    },

    /**
     * Makes a call to the Pieout smart contract using the `new_game(uint64,pay,pay,pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    newGame: async (params: CallParams<PieoutArgs['obj']['new_game(uint64,pay,pay,pay)void'] | PieoutArgs['tuple']['new_game(uint64,pay,pay,pay)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(PieoutParamsFactory.newGame(params))
      return {...result, return: result.return as unknown as (undefined | PieoutReturns['new_game(uint64,pay,pay,pay)void'])}
    },

    /**
     * Makes a call to the Pieout smart contract using the `join_game(uint64,pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    joinGame: async (params: CallParams<PieoutArgs['obj']['join_game(uint64,pay)void'] | PieoutArgs['tuple']['join_game(uint64,pay)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(PieoutParamsFactory.joinGame(params))
      return {...result, return: result.return as unknown as (undefined | PieoutReturns['join_game(uint64,pay)void'])}
    },

    /**
     * Makes a call to the Pieout smart contract using the `set_game_commit(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    setGameCommit: async (params: CallParams<PieoutArgs['obj']['set_game_commit(uint64)void'] | PieoutArgs['tuple']['set_game_commit(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(PieoutParamsFactory.setGameCommit(params))
      return {...result, return: result.return as unknown as (undefined | PieoutReturns['set_game_commit(uint64)void'])}
    },

    /**
     * Makes a call to the Pieout smart contract using the `up_ref_budget_for_play_game(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    upRefBudgetForPlayGame: async (params: CallParams<PieoutArgs['obj']['up_ref_budget_for_play_game(uint64)void'] | PieoutArgs['tuple']['up_ref_budget_for_play_game(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(PieoutParamsFactory.upRefBudgetForPlayGame(params))
      return {...result, return: result.return as unknown as (undefined | PieoutReturns['up_ref_budget_for_play_game(uint64)void'])}
    },

    /**
     * Makes a call to the Pieout smart contract using the `play_game(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    playGame: async (params: CallParams<PieoutArgs['obj']['play_game(uint64)void'] | PieoutArgs['tuple']['play_game(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(PieoutParamsFactory.playGame(params))
      return {...result, return: result.return as unknown as (undefined | PieoutReturns['play_game(uint64)void'])}
    },

    /**
     * Makes a call to the Pieout smart contract using the `trigger_game_event(uint64,uint8)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    triggerGameEvent: async (params: CallParams<PieoutArgs['obj']['trigger_game_event(uint64,uint8)void'] | PieoutArgs['tuple']['trigger_game_event(uint64,uint8)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(PieoutParamsFactory.triggerGameEvent(params))
      return {...result, return: result.return as unknown as (undefined | PieoutReturns['trigger_game_event(uint64,uint8)void'])}
    },

    /**
     * Makes a call to the Pieout smart contract using the `reset_game(uint64,pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    resetGame: async (params: CallParams<PieoutArgs['obj']['reset_game(uint64,pay)void'] | PieoutArgs['tuple']['reset_game(uint64,pay)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(PieoutParamsFactory.resetGame(params))
      return {...result, return: result.return as unknown as (undefined | PieoutReturns['reset_game(uint64,pay)void'])}
    },

    /**
     * Makes a call to the Pieout smart contract using the `delete_game(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    deleteGame: async (params: CallParams<PieoutArgs['obj']['delete_game(uint64)void'] | PieoutArgs['tuple']['delete_game(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(PieoutParamsFactory.deleteGame(params))
      return {...result, return: result.return as unknown as (undefined | PieoutReturns['delete_game(uint64)void'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new PieoutClient(this.appClient.clone(params))
  }

  /**
   * Makes a readonly (simulated) call to the Pieout smart contract using the `calc_single_box_cost(uint8,uint16)uint64` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async calcSingleBoxCost(params: CallParams<PieoutArgs['obj']['calc_single_box_cost(uint8,uint16)uint64'] | PieoutArgs['tuple']['calc_single_box_cost(uint8,uint16)uint64']>) {
    const result = await this.appClient.send.call(PieoutParamsFactory.calcSingleBoxCost(params))
    return result.return as unknown as PieoutReturns['calc_single_box_cost(uint8,uint16)uint64']
  }

  /**
   * Makes a readonly (simulated) call to the Pieout smart contract using the `read_gen_unix()uint64` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async readGenUnix(params: CallParams<PieoutArgs['obj']['read_gen_unix()uint64'] | PieoutArgs['tuple']['read_gen_unix()uint64']> = {args: []}) {
    const result = await this.appClient.send.call(PieoutParamsFactory.readGenUnix(params))
    return result.return as unknown as PieoutReturns['read_gen_unix()uint64']
  }

  /**
   * Makes a readonly (simulated) call to the Pieout smart contract using the `does_box_game_trophy_exist()bool` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async doesBoxGameTrophyExist(params: CallParams<PieoutArgs['obj']['does_box_game_trophy_exist()bool'] | PieoutArgs['tuple']['does_box_game_trophy_exist()bool']> = {args: []}) {
    const result = await this.appClient.send.call(PieoutParamsFactory.doesBoxGameTrophyExist(params))
    return result.return as unknown as PieoutReturns['does_box_game_trophy_exist()bool']
  }

  /**
   * Makes a readonly (simulated) call to the Pieout smart contract using the `does_box_game_register_exist(account)bool` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async doesBoxGameRegisterExist(params: CallParams<PieoutArgs['obj']['does_box_game_register_exist(account)bool'] | PieoutArgs['tuple']['does_box_game_register_exist(account)bool']>) {
    const result = await this.appClient.send.call(PieoutParamsFactory.doesBoxGameRegisterExist(params))
    return result.return as unknown as PieoutReturns['does_box_game_register_exist(account)bool']
  }

  /**
   * Makes a readonly (simulated) call to the Pieout smart contract using the `does_box_game_state_exist(uint64)bool` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async doesBoxGameStateExist(params: CallParams<PieoutArgs['obj']['does_box_game_state_exist(uint64)bool'] | PieoutArgs['tuple']['does_box_game_state_exist(uint64)bool']>) {
    const result = await this.appClient.send.call(PieoutParamsFactory.doesBoxGameStateExist(params))
    return result.return as unknown as PieoutReturns['does_box_game_state_exist(uint64)bool']
  }

  /**
   * Makes a readonly (simulated) call to the Pieout smart contract using the `read_box_game_players(uint64)address[]` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async readBoxGamePlayers(params: CallParams<PieoutArgs['obj']['read_box_game_players(uint64)address[]'] | PieoutArgs['tuple']['read_box_game_players(uint64)address[]']>) {
    const result = await this.appClient.send.call(PieoutParamsFactory.readBoxGamePlayers(params))
    return result.return as unknown as PieoutReturns['read_box_game_players(uint64)address[]']
  }

  /**
   * Methods to access state for the current Pieout app
   */
  state = {
    /**
     * Methods to access global state for the current Pieout app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          gameId: result.game_id,
        }
      },
      /**
       * Get the current value of the game_id key in global state
       */
      gameId: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("game_id")) as bigint | undefined },
    },
    /**
     * Methods to access box state for the current Pieout app
     */
    box: {
      /**
       * Get all current keyed values from box state
       */
      getAll: async (): Promise<Partial<Expand<BoxKeysState>>> => {
        const result = await this.appClient.state.box.getAll()
        return {
          boxGameTrophy: result.box_game_trophy,
        }
      },
      /**
       * Get the current value of the box_game_trophy key in box state
       */
      boxGameTrophy: async (): Promise<GameTrophy | undefined> => { return (await this.appClient.state.box.getValue("box_game_trophy")) as GameTrophy | undefined },
      /**
       * Get values from the box_game_state map in box state
       */
      boxGameState: {
        /**
         * Get all current values of the box_game_state map in box state
         */
        getMap: async (): Promise<Map<bigint, GameState>> => { return (await this.appClient.state.box.getMap("box_game_state")) as Map<bigint, GameState> },
        /**
         * Get a current value of the box_game_state map by key from box state
         */
        value: async (key: bigint | number): Promise<GameState | undefined> => { return await this.appClient.state.box.getMapValue("box_game_state", key) as GameState | undefined },
      },
      /**
       * Get values from the box_game_players map in box state
       */
      boxGamePlayers: {
        /**
         * Get all current values of the box_game_players map in box state
         */
        getMap: async (): Promise<Map<bigint, Uint8Array>> => { return (await this.appClient.state.box.getMap("box_game_players")) as Map<bigint, Uint8Array> },
        /**
         * Get a current value of the box_game_players map by key from box state
         */
        value: async (key: bigint | number): Promise<Uint8Array | undefined> => { return await this.appClient.state.box.getMapValue("box_game_players", key) as Uint8Array | undefined },
      },
      /**
       * Get values from the box_game_register map in box state
       */
      boxGameRegister: {
        /**
         * Get all current values of the box_game_register map in box state
         */
        getMap: async (): Promise<Map<string, GameRegister>> => { return (await this.appClient.state.box.getMap("box_game_register")) as Map<string, GameRegister> },
        /**
         * Get a current value of the box_game_register map by key from box state
         */
        value: async (key: string): Promise<GameRegister | undefined> => { return await this.appClient.state.box.getMapValue("box_game_register", key) as GameRegister | undefined },
      },
    },
  }

  public newGroup(): PieoutComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a calc_single_box_cost(uint8,uint16)uint64 method call against the Pieout contract
       */
      calcSingleBoxCost(params: CallParams<PieoutArgs['obj']['calc_single_box_cost(uint8,uint16)uint64'] | PieoutArgs['tuple']['calc_single_box_cost(uint8,uint16)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.calcSingleBoxCost(params)))
        resultMappers.push((v) => client.decodeReturnValue('calc_single_box_cost(uint8,uint16)uint64', v))
        return this
      },
      /**
       * Add a read_gen_unix()uint64 method call against the Pieout contract
       */
      readGenUnix(params: CallParams<PieoutArgs['obj']['read_gen_unix()uint64'] | PieoutArgs['tuple']['read_gen_unix()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.readGenUnix(params)))
        resultMappers.push((v) => client.decodeReturnValue('read_gen_unix()uint64', v))
        return this
      },
      /**
       * Add a does_box_game_trophy_exist()bool method call against the Pieout contract
       */
      doesBoxGameTrophyExist(params: CallParams<PieoutArgs['obj']['does_box_game_trophy_exist()bool'] | PieoutArgs['tuple']['does_box_game_trophy_exist()bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.doesBoxGameTrophyExist(params)))
        resultMappers.push((v) => client.decodeReturnValue('does_box_game_trophy_exist()bool', v))
        return this
      },
      /**
       * Add a does_box_game_register_exist(account)bool method call against the Pieout contract
       */
      doesBoxGameRegisterExist(params: CallParams<PieoutArgs['obj']['does_box_game_register_exist(account)bool'] | PieoutArgs['tuple']['does_box_game_register_exist(account)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.doesBoxGameRegisterExist(params)))
        resultMappers.push((v) => client.decodeReturnValue('does_box_game_register_exist(account)bool', v))
        return this
      },
      /**
       * Add a does_box_game_state_exist(uint64)bool method call against the Pieout contract
       */
      doesBoxGameStateExist(params: CallParams<PieoutArgs['obj']['does_box_game_state_exist(uint64)bool'] | PieoutArgs['tuple']['does_box_game_state_exist(uint64)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.doesBoxGameStateExist(params)))
        resultMappers.push((v) => client.decodeReturnValue('does_box_game_state_exist(uint64)bool', v))
        return this
      },
      /**
       * Add a read_box_game_players(uint64)address[] method call against the Pieout contract
       */
      readBoxGamePlayers(params: CallParams<PieoutArgs['obj']['read_box_game_players(uint64)address[]'] | PieoutArgs['tuple']['read_box_game_players(uint64)address[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.readBoxGamePlayers(params)))
        resultMappers.push((v) => client.decodeReturnValue('read_box_game_players(uint64)address[]', v))
        return this
      },
      /**
       * Add a mint_trophy(pay,pay)void method call against the Pieout contract
       */
      mintTrophy(params: CallParams<PieoutArgs['obj']['mint_trophy(pay,pay)void'] | PieoutArgs['tuple']['mint_trophy(pay,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.mintTrophy(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a claim_trophy()void method call against the Pieout contract
       */
      claimTrophy(params: CallParams<PieoutArgs['obj']['claim_trophy()void'] | PieoutArgs['tuple']['claim_trophy()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.claimTrophy(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a get_box_game_register(pay)void method call against the Pieout contract
       */
      getBoxGameRegister(params: CallParams<PieoutArgs['obj']['get_box_game_register(pay)void'] | PieoutArgs['tuple']['get_box_game_register(pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getBoxGameRegister(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a del_box_game_register_for_self(uint64)void method call against the Pieout contract
       */
      delBoxGameRegisterForSelf(params: CallParams<PieoutArgs['obj']['del_box_game_register_for_self(uint64)void'] | PieoutArgs['tuple']['del_box_game_register_for_self(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.delBoxGameRegisterForSelf(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a del_box_game_register_for_other(account)void method call against the Pieout contract
       */
      delBoxGameRegisterForOther(params: CallParams<PieoutArgs['obj']['del_box_game_register_for_other(account)void'] | PieoutArgs['tuple']['del_box_game_register_for_other(account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.delBoxGameRegisterForOther(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a new_game(uint64,pay,pay,pay)void method call against the Pieout contract
       */
      newGame(params: CallParams<PieoutArgs['obj']['new_game(uint64,pay,pay,pay)void'] | PieoutArgs['tuple']['new_game(uint64,pay,pay,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.newGame(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a join_game(uint64,pay)void method call against the Pieout contract
       */
      joinGame(params: CallParams<PieoutArgs['obj']['join_game(uint64,pay)void'] | PieoutArgs['tuple']['join_game(uint64,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.joinGame(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a set_game_commit(uint64)void method call against the Pieout contract
       */
      setGameCommit(params: CallParams<PieoutArgs['obj']['set_game_commit(uint64)void'] | PieoutArgs['tuple']['set_game_commit(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.setGameCommit(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a up_ref_budget_for_play_game(uint64)void method call against the Pieout contract
       */
      upRefBudgetForPlayGame(params: CallParams<PieoutArgs['obj']['up_ref_budget_for_play_game(uint64)void'] | PieoutArgs['tuple']['up_ref_budget_for_play_game(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.upRefBudgetForPlayGame(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a play_game(uint64)void method call against the Pieout contract
       */
      playGame(params: CallParams<PieoutArgs['obj']['play_game(uint64)void'] | PieoutArgs['tuple']['play_game(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.playGame(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a trigger_game_event(uint64,uint8)void method call against the Pieout contract
       */
      triggerGameEvent(params: CallParams<PieoutArgs['obj']['trigger_game_event(uint64,uint8)void'] | PieoutArgs['tuple']['trigger_game_event(uint64,uint8)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.triggerGameEvent(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a reset_game(uint64,pay)void method call against the Pieout contract
       */
      resetGame(params: CallParams<PieoutArgs['obj']['reset_game(uint64,pay)void'] | PieoutArgs['tuple']['reset_game(uint64,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.resetGame(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a delete_game(uint64)void method call against the Pieout contract
       */
      deleteGame(params: CallParams<PieoutArgs['obj']['delete_game(uint64)void'] | PieoutArgs['tuple']['delete_game(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.deleteGame(params)))
        resultMappers.push(undefined)
        return this
      },
      get delete() {
        return {
          terminate: (params: CallParams<PieoutArgs['obj']['terminate()void'] | PieoutArgs['tuple']['terminate()void']>) => {
            promiseChain = promiseChain.then(async () => composer.addAppDeleteMethodCall(await client.params.delete.terminate(params)))
            resultMappers.push(undefined)
            return this
          },
        }
      },
      /**
       * Add a clear state call to the Pieout contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as PieoutComposer
  }
}
export type PieoutComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the calc_single_box_cost(uint8,uint16)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  calcSingleBoxCost(params?: CallParams<PieoutArgs['obj']['calc_single_box_cost(uint8,uint16)uint64'] | PieoutArgs['tuple']['calc_single_box_cost(uint8,uint16)uint64']>): PieoutComposer<[...TReturns, PieoutReturns['calc_single_box_cost(uint8,uint16)uint64'] | undefined]>

  /**
   * Calls the read_gen_unix()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  readGenUnix(params?: CallParams<PieoutArgs['obj']['read_gen_unix()uint64'] | PieoutArgs['tuple']['read_gen_unix()uint64']>): PieoutComposer<[...TReturns, PieoutReturns['read_gen_unix()uint64'] | undefined]>

  /**
   * Calls the does_box_game_trophy_exist()bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  doesBoxGameTrophyExist(params?: CallParams<PieoutArgs['obj']['does_box_game_trophy_exist()bool'] | PieoutArgs['tuple']['does_box_game_trophy_exist()bool']>): PieoutComposer<[...TReturns, PieoutReturns['does_box_game_trophy_exist()bool'] | undefined]>

  /**
   * Calls the does_box_game_register_exist(account)bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  doesBoxGameRegisterExist(params?: CallParams<PieoutArgs['obj']['does_box_game_register_exist(account)bool'] | PieoutArgs['tuple']['does_box_game_register_exist(account)bool']>): PieoutComposer<[...TReturns, PieoutReturns['does_box_game_register_exist(account)bool'] | undefined]>

  /**
   * Calls the does_box_game_state_exist(uint64)bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  doesBoxGameStateExist(params?: CallParams<PieoutArgs['obj']['does_box_game_state_exist(uint64)bool'] | PieoutArgs['tuple']['does_box_game_state_exist(uint64)bool']>): PieoutComposer<[...TReturns, PieoutReturns['does_box_game_state_exist(uint64)bool'] | undefined]>

  /**
   * Calls the read_box_game_players(uint64)address[] ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  readBoxGamePlayers(params?: CallParams<PieoutArgs['obj']['read_box_game_players(uint64)address[]'] | PieoutArgs['tuple']['read_box_game_players(uint64)address[]']>): PieoutComposer<[...TReturns, PieoutReturns['read_box_game_players(uint64)address[]'] | undefined]>

  /**
   * Calls the mint_trophy(pay,pay)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  mintTrophy(params?: CallParams<PieoutArgs['obj']['mint_trophy(pay,pay)void'] | PieoutArgs['tuple']['mint_trophy(pay,pay)void']>): PieoutComposer<[...TReturns, PieoutReturns['mint_trophy(pay,pay)void'] | undefined]>

  /**
   * Calls the claim_trophy()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  claimTrophy(params?: CallParams<PieoutArgs['obj']['claim_trophy()void'] | PieoutArgs['tuple']['claim_trophy()void']>): PieoutComposer<[...TReturns, PieoutReturns['claim_trophy()void'] | undefined]>

  /**
   * Calls the get_box_game_register(pay)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getBoxGameRegister(params?: CallParams<PieoutArgs['obj']['get_box_game_register(pay)void'] | PieoutArgs['tuple']['get_box_game_register(pay)void']>): PieoutComposer<[...TReturns, PieoutReturns['get_box_game_register(pay)void'] | undefined]>

  /**
   * Calls the del_box_game_register_for_self(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  delBoxGameRegisterForSelf(params?: CallParams<PieoutArgs['obj']['del_box_game_register_for_self(uint64)void'] | PieoutArgs['tuple']['del_box_game_register_for_self(uint64)void']>): PieoutComposer<[...TReturns, PieoutReturns['del_box_game_register_for_self(uint64)void'] | undefined]>

  /**
   * Calls the del_box_game_register_for_other(account)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  delBoxGameRegisterForOther(params?: CallParams<PieoutArgs['obj']['del_box_game_register_for_other(account)void'] | PieoutArgs['tuple']['del_box_game_register_for_other(account)void']>): PieoutComposer<[...TReturns, PieoutReturns['del_box_game_register_for_other(account)void'] | undefined]>

  /**
   * Calls the new_game(uint64,pay,pay,pay)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  newGame(params?: CallParams<PieoutArgs['obj']['new_game(uint64,pay,pay,pay)void'] | PieoutArgs['tuple']['new_game(uint64,pay,pay,pay)void']>): PieoutComposer<[...TReturns, PieoutReturns['new_game(uint64,pay,pay,pay)void'] | undefined]>

  /**
   * Calls the join_game(uint64,pay)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  joinGame(params?: CallParams<PieoutArgs['obj']['join_game(uint64,pay)void'] | PieoutArgs['tuple']['join_game(uint64,pay)void']>): PieoutComposer<[...TReturns, PieoutReturns['join_game(uint64,pay)void'] | undefined]>

  /**
   * Calls the set_game_commit(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setGameCommit(params?: CallParams<PieoutArgs['obj']['set_game_commit(uint64)void'] | PieoutArgs['tuple']['set_game_commit(uint64)void']>): PieoutComposer<[...TReturns, PieoutReturns['set_game_commit(uint64)void'] | undefined]>

  /**
   * Calls the up_ref_budget_for_play_game(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  upRefBudgetForPlayGame(params?: CallParams<PieoutArgs['obj']['up_ref_budget_for_play_game(uint64)void'] | PieoutArgs['tuple']['up_ref_budget_for_play_game(uint64)void']>): PieoutComposer<[...TReturns, PieoutReturns['up_ref_budget_for_play_game(uint64)void'] | undefined]>

  /**
   * Calls the play_game(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  playGame(params?: CallParams<PieoutArgs['obj']['play_game(uint64)void'] | PieoutArgs['tuple']['play_game(uint64)void']>): PieoutComposer<[...TReturns, PieoutReturns['play_game(uint64)void'] | undefined]>

  /**
   * Calls the trigger_game_event(uint64,uint8)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  triggerGameEvent(params?: CallParams<PieoutArgs['obj']['trigger_game_event(uint64,uint8)void'] | PieoutArgs['tuple']['trigger_game_event(uint64,uint8)void']>): PieoutComposer<[...TReturns, PieoutReturns['trigger_game_event(uint64,uint8)void'] | undefined]>

  /**
   * Calls the reset_game(uint64,pay)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  resetGame(params?: CallParams<PieoutArgs['obj']['reset_game(uint64,pay)void'] | PieoutArgs['tuple']['reset_game(uint64,pay)void']>): PieoutComposer<[...TReturns, PieoutReturns['reset_game(uint64,pay)void'] | undefined]>

  /**
   * Calls the delete_game(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  deleteGame(params?: CallParams<PieoutArgs['obj']['delete_game(uint64)void'] | PieoutArgs['tuple']['delete_game(uint64)void']>): PieoutComposer<[...TReturns, PieoutReturns['delete_game(uint64)void'] | undefined]>

  /**
   * Gets available delete methods
   */
  readonly delete: {
    /**
     * Deletes an existing instance of the Pieout smart contract using the terminate()void ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    terminate(params?: CallParams<PieoutArgs['obj']['terminate()void'] | PieoutArgs['tuple']['terminate()void']>): PieoutComposer<[...TReturns, PieoutReturns['terminate()void'] | undefined]>
  }

  /**
   * Makes a clear_state call to an existing instance of the Pieout smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): PieoutComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): PieoutComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<PieoutComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<PieoutComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<PieoutComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<PieoutComposerResults<TReturns>>
}
export type PieoutComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

